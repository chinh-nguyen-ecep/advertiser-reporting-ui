<?xml version="1.0" encoding="UTF-8"?>
<action-sequence> 
  <title>Account manager</title>
  <version>1</version>
  <logging-level>ERROR</logging-level>
  <documentation> 
    <author>ChinhNguyen</author>  
    <description>Empty blank action sequence document</description>  
    <help/>  
    <result-type/>  
    <icon/> 
  </documentation>

  <inputs> 
    <actions type="string"> 
      <sources> 
        <request>actions</request> 
      </sources>  
      <default-value/> 
    </actions>  
    <actionResult type="string"> 
      <sources> 
        <request>actionResult</request> 
      </sources>  
      <default-value/> 
    </actionResult>  
    <jtSorting type="string"> 
      <sources> 
        <request>jtSorting</request> 
      </sources>  
      <default-value/> 
    </jtSorting>  
    <jtStartIndex type="string"> 
      <sources> 
        <request>jtStartIndex</request> 
      </sources>  
      <default-value/> 
    </jtStartIndex>  
    <jtPageSize type="string"> 
      <sources> 
        <request>jtPageSize</request> 
      </sources>  
      <default-value/> 
    </jtPageSize>  
    <connectionName type="string"> 
      <sources> 
        <request>connectionName</request> 
      </sources>  
      <default-value><![CDATA[pentaho.ecepvn.org.financial]]></default-value> 
    </connectionName>  
    <principalName type="string"> 
      <sources> 
        <security>principalName</security> 
      </sources>  
      <default-value/> 
    </principalName>  
    <account_name_filter_value type="string"> 
      <sources> 
        <request>account_name_filter_value</request> 
      </sources>  
      <default-value/> 
    </account_name_filter_value>  
    <account_name type="string"> 
      <sources> 
        <request>account_name</request> 
      </sources>  
      <default-value/> 
    </account_name>  
    <network_type type="string"> 
      <sources> 
        <request>network_type</request> 
      </sources>  
      <default-value/> 
    </network_type>  
    <account_level type="string"> 
      <sources> 
        <request>account_level</request> 
      </sources>  
      <default-value/> 
    </account_level>  
    <account_id type="string"> 
      <sources> 
        <request>account_id</request> 
      </sources>  
      <default-value/> 
    </account_id> 
  </inputs>

  <outputs> 
    <actionResult type="string"> 
      <destinations> 
        <response>content</response> 
      </destinations> 
    </actionResult> 
  </outputs>

  <resources/>
  
  <actions> 
    <actions> 
      <condition><![CDATA[actions=='']]></condition>  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-outputs> 
          <output-message type="string" mapping="actionResult"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[<html>
  <head>
	<link href="/verve-lib/scripts/jquery-ui-1.8.24.custom/css/smoothness/jquery-ui-1.8.24.custom.css" rel="stylesheet" type="text/css" />
	<link href="/verve-lib/scripts/jtable.2.3.0/themes/lightcolor/blue/jtable.css" rel="stylesheet" type="text/css" />
	<link href="/verve-lib/scripts/jtable.2.3.0/jTable_custom.css" rel="stylesheet" type="text/css" />
	<link href="/verve-lib/css/validationEngine.jquery.css" rel="stylesheet" type="text/css" />
	
	<script src="/verve-lib/scripts/jquery-1.7.1.min.js" type="text/javascript"></script>
	<script src="/verve-lib/scripts/jquery-ui-1.8.24.custom/js/jquery-ui-1.8.24.custom.min.js" type="text/javascript"></script>
	<script src="/verve-lib/scripts/jtable.2.3.0/jquery.jtable.js" type="text/javascript"></script>
	<script src="/verve-lib/scripts/utils/jquery.validationEngine-en.js" type="text/javascript"></script>
	<script src="/verve-lib/scripts/utils/jquery.validationEngine.js" type="text/javascript"></script>
	<script src="/verve-lib/scripts/verve-script-jquery.js" type="text/javascript"></script>	
  </head>
  <body>
	<div id="AcountTable" style="width: 100%;"></div>	
	<script type="text/javascript">
	var xaction='financial_account_manager.xaction';	
	var contactAction='financial_contact_manager.xaction';
		$(document).ready(function () {
			publisherDimInit();	
		});

function publisherDimInit(){
	//Prepare jTable
	$('#AcountTable').jtable({
		title: 'Account Manager',
		paging: true,
		pageSize:5,
		columnSelectable: true,
		sorting: true,
		defaultSorting: 'account_name ASC',
		actions: {
			listAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+xaction+'&actions=listAccount',
			createAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+xaction+'&actions=addNewAccount',
			updateAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+xaction+'&actions=updateAccount',
			deleteAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+xaction+'&actions=deleteAccount'
		},
		fields: {
			account_id: {
				key: true,
				create: false,
				edit: false,
				list: false
			},
			//CHILD TABLE DEFINITION FOR "Contacts"
			contacts: {
				title: '',
				width: '5px',
				sorting: false,
				edit: false,
				create: false,
				display: function (accountData) {
					//Create an image that will be used to open child table
					var $img = $('<img src="http://cdn1.iconfinder.com/data/icons/windows8_icons/26/business_contact.png" title="Contacts" />');		
					//Open child table when user clicks the image
					$img.click(function () {
						contactTableInit(accountData,$img);
					});
					//Return image to show on the person row
					return $img;
				}
			},account_name: {
				title: 'Name',
				width: '200px'
			},network_type: {
				title: 'Type',
				width: '70px',
				options: [
                        { Value: 'LOCAL', DisplayText: 'LOCAL' },
                        { Value: 'VLM', DisplayText: 'VLM' },
                        { Value: 'NATIONAL', DisplayText: 'NATIONAL' }
                    ]				
			},account_level:{
				title: 'Level',
				width: '70px'
			},created_at:{
				title: 'Created',
				width: '100px',
				create: false,
				edit: false
			},updated_at:{
				title: 'Updated',
				width: '100px',
				edit: false,
				create: false
			}
		},
		//Initialize validation logic when a form is created
		formCreated: function (event, data) {
			data.form.find('input[name="account_name"]').addClass('validate[required]');
			data.form.find('input[name="network_type"]').addClass('validate[required]');			
			data.form.validationEngine();
		},
		//Validate form when it is being submitted
		formSubmitting: function (event, data) {
			return data.form.validationEngine('validate');
		},
		//Dispose validation logic when form is closed
		formClosed: function (event, data) {
			data.form.validationEngine('hide');
			data.form.validationEngine('detach');
		},
		recordsLoaded: function(event, data) {
			 $('#AcountTable .jtable-data-row').click(function() {
					var row_id = $(this).attr('data-record-key');
					var account_name=$(this).find('td:first').next().text();
					//alert('Row id:'+row_id+' name:'+publisher_name);
				});
		}
	});

	//Load person list from server
	$('#AcountTable').jtable('load');
	//Hide add record button
	////$('span.jtable-toolbar-item-add-record').hide();
	
	//Add Search input
	$('div.jtable-toolbar').append(
		'<input id="search_input" type="text" value="Search" class="ui-corner-all" style="margin-bottom: 3px;padding:4px"/>'
	);
	
	$('#search_input').focus(function(){
		if($(this).attr("value")=="Search"){
			$(this).attr("value","");
		}				
	});
	$('#search_input').focusout(function(){
		if($(this).attr("value")==""){
			$(this).attr("value","Search");
			delay_timeout(1000,function(){						
				//reloadTableWithFilter("");
			})	
		}else{
		
		}				
	});
	//Re-load records when user type input filter
	$('#search_input').keyup(function(){
		delay_timeout(1000,function(){
			var filterValue=$('#search_input').attr("value");
			reloadTableWithFilter(filterValue);
		})				
	})

	var reloadTableWithFilter=function(filterInput){
		$('#AcountTable').jtable('load',{
			account_name_filter_value: filterInput
		});
	}
}

var contactTableInit=function(accountData,buttonImg){
	$('#AcountTable').jtable(
		'openChildTable',
		buttonImg.closest('tr'), //Parent row
		{
			title: accountData.record.account_name+' Contacts',
			paging: true,
			pageSize:5,
			columnSelectable: true,
			actions: {
				listAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+contactAction+'&actions=list&account_id='+accountData.record.account_id,
				deleteAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+contactAction+'&actions=delete',
				updateAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+contactAction+'&actions=update',
				createAction: 'ViewAction?solution='+solution+'&path='+path+'&action='+contactAction+'&actions=create'
			},
			fields: {
				account_id:{
					type: 'hidden',
					defaultValue: accountData.record.account_id
				},contact_id:{
					key: true,
					create: false,
					edit: false,
					list: false
				},address_1:{
					title: 'Address 1',
					width: '100px'
				},address_2:{
					title: 'Address 2',
					width: '100px',
					visibility : 'hidden'
				},address_3:{
					title: 'Address 3',
					width: '100px',
					visibility : 'hidden'
				},city:{
					title: 'City',
					width: '100px'
				},state:{
					title: 'State',
					width: '100px'
				},zip:{
					title: 'Zip',
					width: '100px'
				},primary_email:{
					title: 'Primary email',
					width: '100px'
				},additional_emails:{
					title: 'Additional emails',
					width: '100px',
					visibility : 'hidden'
				},phone_1:{
					title: 'Phone 1',
					width: '100px'
				},phone_2:{
					title: 'Phone 2',
					width: '100px',
					visibility : 'hidden'
				}
			},
			//Initialize validation logic when a form is created
			formCreated: function (event, data) {
				data.form.find('input[name="address_1"]').addClass('validate[required]');
				data.form.find('input[name="primary_email"]').addClass('validate[required,custom[email]]');		
				data.form.find('input[name="additional_emails"]').addClass('validate[custom[email]]');	
				data.form.find('input[name="phone_1"]').addClass('validate[custom[phone]]');	
				data.form.find('input[name="phone_2"]').addClass('validate[custom[phone]]');					
				data.form.validationEngine();
			},
			//Validate form when it is being submitted
			formSubmitting: function (event, data) {
				return data.form.validationEngine('validate');
			},
			//Dispose validation logic when form is closed
			formClosed: function (event, data) {
				data.form.validationEngine('hide');
				data.form.validationEngine('detach');
			}
		},function (data) { //opened handler
			data.childTable.jtable('load');
		}
		);

}
	</script>
 
  </body>
</html>]]></template>
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='listAccount']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>GetTotalCount</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/>  
          <account_name_filter_value type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result_count"/> 
        </action-outputs>
        <component-definition> 
          <live><![CDATA[true]]></live>  
          <query><![CDATA[SELECT COUNT(1)
FROM accounting.ba_account a
WHERE a.is_active=1
AND (upper(a.name) LIKE upper('%{account_name_filter_value}%') OR ''='{account_name_filter_value}')]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jtSorting type="string"/>  
          <jtPageSize type="string"/>  
          <jtStartIndex type="string"/>  
          <jndi type="string" mapping="connectionName"/>  
          <account_name_filter_value type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result_content"/> 
        </action-outputs>
        <component-definition> 
          <query><![CDATA[SELECT a.id as account_id
,a.name as account_name
,a.network_type
,(CASE WHEN a.account_level IS NULL THEN '' ELSE a.account_level END) as account_level
,a.created_at
,(CASE WHEN a.updated_at IS NULL THEN a.created_at ELSE a.updated_at END) as updated_at
FROM accounting.ba_account a
WHERE a.is_active=1
AND (upper(a.name) LIKE upper('%{account_name_filter_value}%') OR ''='{account_name_filter_value}')
ORDER BY {jtSorting}
LIMIT {jtPageSize}
OFFSET {jtStartIndex}]]></query>  
          <live><![CDATA[true]]></live> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>jSonEncode</action-type>
        <action-inputs> 
          <actionResult type="string"/>  
          <query_result_count type="result-set"/>  
          <query_result_content type="result-set"/> 
        </action-inputs>
        <action-outputs> 
          <actionResult type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[var result_set=query_result_content;
var totalCount=query_result_count.getValueAt(0,0);
var rowCount=query_result_content.getRowCount();
var meta = result_set.getMetaData();      // Returns an IPentahoMetaData object
var colCount = meta.getColumnCount();
var colHeaders = meta.getColumnHeaders(); //getColumnHeaders() returns object[][]
var rowHeaders = meta.getRowHeaders(); 


actionResult='{"Result":"OK","TotalRecordCount":"'+totalCount+'","Records":[';
//process data item
for(var i=0;i<result_set.getRowCount();i++){
	var item='';
	if(i>0){
		item+=',';
	}
	item+='{';
		for(var j=0;j<result_set.getColumnCount();j++){ 		
			var value=result_set.getValueAt(i,j);
			var columnValue=colHeaders[0][j];
			if(j>0){
				item+=',';
			}
			item+='"'+j+'":"'+value+'","'+columnValue+'":"'+value+'"';
		}
	item+='}';	

actionResult+=item;
}
//end

actionResult+=']}';]]></script> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='addNewAccount']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/>  
          <account_name type="string"/>  
          <network_type type="string"/>  
          <account_level type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result_add_new_account"/> 
        </action-outputs>
        <component-definition> 
          <query><![CDATA[SELECT * FROM accounting.fn_add_new_account('{account_name}','{network_type}','{account_level}');]]></query>  
          <live><![CDATA[false]]></live> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>jSonEncode</action-type>
        <action-inputs> 
          <query_result_add_new_account type="result-set"/>  
          <account_name type="string"/>  
          <network_type type="string"/>  
          <account_level type="string"/>  
          <actionResult type="string"/> 
        </action-inputs>
        <action-outputs> 
          <actionResult type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[var result=query_result_add_new_account.getValueAt(0,0);
if(result=='0'){
	actionResult='{"Result":"ERROR","Message":"Account '+account_name+' IN '+network_type+' network is already exists!"}';
}else{
	actionResult='{'+
	'"Result":"OK",'+'"Record":{"account_id":"'+result+'","account_name":"'+account_name+'","network_type":"'+network_type+'","account_level":"'+account_level+'","created_at":"2013-07-01","updated_at":"2013-07-12"}'+
	'}';
}]]></script> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='updateAccount']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/>  
          <account_id type="string"/>  
          <account_name type="string"/>  
          <network_type type="string"/>  
          <account_level type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result_update_account"/> 
        </action-outputs>
        <component-definition> 
          <live><![CDATA[false]]></live>  
          <query><![CDATA[SELECT * FROM accounting.fn_update_account({account_id},'{account_name}','{network_type}','{account_level}');]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>jSonEncode</action-type>
        <action-inputs> 
          <actionResult type="string"/>  
          <query_result_update_account type="result-set"/> 
        </action-inputs>
        <action-outputs> 
          <actionResult type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[var result=query_result_update_account.getValueAt(0,0);
if(result=='ER'){
	actionResult='{"Result":"ERROR","Message":"Update Failed!"}';
}else{
	actionResult='{"Result":"OK","Record":{"updated_at":"'+result+'"}}';
}]]></script> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='deleteAccount']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/>  
          <account_id type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result_del_account"/> 
        </action-outputs>
        <component-definition> 
          <query><![CDATA[SELECT * FROM accounting.fn_del_account({account_id});]]></query>  
          <live><![CDATA[false]]></live> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>jSonEncode</action-type>
        <action-inputs> 
          <actionResult type="string"/>  
          <query_result_del_account type="result-set"/>  
          <account_id type="string"/> 
        </action-inputs>
        <action-outputs> 
          <actionResult type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[var result=query_result_del_account.getValueAt(0,0);
if(result=='SU'){
	actionResult='{"Result":"OK"}'
}else if(result=='ER'){
	actionResult='{"Result":"ERROR","Message":"Can\'t delete account!"}';
}]]></script> 
        </component-definition> 
      </action-definition>
 
    </actions>
 
  </actions> 
</action-sequence>