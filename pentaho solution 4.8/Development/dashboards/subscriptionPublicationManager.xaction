<?xml version="1.0" encoding="UTF-8"?>
<action-sequence> 
  <title>Subscription Publication Manager</title>
  <version>1</version>
  <logging-level>ERROR</logging-level>
  <documentation> 
    <author/>  
    <description>Empty blank action sequence document</description>  
    <help/>  
    <result-type/>  
    <icon/> 
  </documentation>

  <inputs> 
    <actions type="string"> 
      <sources> 
        <request>actions</request> 
      </sources>  
      <default-value><![CDATA[template]]></default-value> 
    </actions>  
    <returnResult type="string"> 
      <sources> 
        <request>returnResult</request> 
      </sources>  
      <default-value/> 
    </returnResult>  
    <query_result type="result-set"> 
      <sources> 
        <request>query_result</request> 
      </sources>  
      <default-value/> 
    </query_result>  
    <connectionName type="string"> 
      <sources> 
        <request>connectionName</request> 
      </sources>  
      <default-value><![CDATA[verveReportConnection]]></default-value> 
    </connectionName>  
    <p_customer_key type="string"> 
      <sources> 
        <request>p_customer_key</request> 
      </sources>  
      <default-value><![CDATA[0]]></default-value> 
    </p_customer_key>  
    <p_date type="string"> 
      <sources> 
        <request>p_date</request> 
      </sources>  
      <default-value><![CDATA[2013-08-01]]></default-value> 
    </p_date>  
    <p_publication_process_id type="string"> 
      <sources> 
        <request>p_publication_process_id</request> 
      </sources>  
      <default-value><![CDATA[0]]></default-value> 
    </p_publication_process_id> 
  </inputs>

  <outputs> 
    <returnResult type="string"> 
      <destinations> 
        <response>content</response> 
      </destinations> 
    </returnResult> 
  </outputs>

  <resources>
    <template>
      <solution-file>
        <location>subscriptionManager/index.html</location>
        <mime-type>text/plain</mime-type>
      </solution-file>
    </template>
  </resources>
  
  <actions> 
    <actions> 
      <condition><![CDATA[actions=='template']]></condition>  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-resources>
          <template type="resource"/>
        </action-resources>
        <action-outputs> 
          <output-message type="string" mapping="returnResult"/> 
        </action-outputs>
        <component-definition/> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='listCustomers']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <query><![CDATA[SELECT customer_name,customer_key,customer_host_name,customer_desc,customer_status FROM  control.spctl_pub_customer
 ORDER BY customer_name;]]></query>  
          <live><![CDATA[false]]></live> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='listProcessByCustomer']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/>  
          <p_date type="string"/>  
          <p_customer_key type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <query><![CDATA[SELECT a.publication_process_id,to_char(a.create_date,'HH24:MI:SS') as create_date,to_char(a.dt_lastchange,'HH24:MI:SS') as dt_lastchange,a.process_status,a.process_actribute,b.subscription_name,b.subscription_key FROM control.spctl_subscription_publication_process a,control.spctl_pub_customer_subscription b
WHERE a.subscription_key=b.subscription_key
AND a.create_date::date='{p_date}'::date
AND b.customer_key={p_customer_key}
ORDER BY a.publication_process_id]]></query>  
          <live><![CDATA[false]]></live> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='listProcessTrans']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/>  
          <p_publication_process_id type="string"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <live><![CDATA[true]]></live>  
          <query><![CDATA[SELECT c.df_config_name
,c.df_config_format
,d.table_name
,a.file_size
,a.export_file_name
,a.status
,to_char(a.dt_starttime,'HH24:MI:SS') as start_time
,to_char(a.dt_lastchange,'HH24:MI:SS') as last_change
FROM control.spctl_subscription_publication_process_concurrent_trans a
,control.spctl_pub_customer_article b
,control.spctl_data_file_config c
,control.spctl_data_source_tables d
WHERE a.publication_process_id={p_publication_process_id}
AND a.customer_article_key=b.customer_article_key
AND b.df_config_id=c.df_config_id
AND c.data_source_table_id=d.data_source_table_id
ORDER BY a.publication_process_id,a.customer_article_key]]></query> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions> 
      <condition><![CDATA[actions=='listFailedProcess']]></condition>  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs> 
          <jndi type="string" mapping="connectionName"/> 
        </action-inputs>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <live><![CDATA[false]]></live>  
          <query><![CDATA[SELECT a.publication_process_id,to_char(a.create_date,'HH24:MI:SS') as create_date,to_char(a.dt_lastchange,'HH24:MI:SS') as dt_lastchange,a.process_status,a.process_actribute,b.subscription_name,b.subscription_key FROM control.spctl_subscription_publication_process a,control.spctl_pub_customer_subscription b
WHERE a.subscription_key=b.subscription_key
AND (a.process_status = 'EF' OR a.process_status='TF')
ORDER BY a.publication_process_id]]></query> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <actions>
      <condition><![CDATA[actions=='listRunningProcess']]></condition>
      <action-definition>
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational</action-type>
        <action-inputs>
          <jndi type="string" mapping="connectionName"/>
        </action-inputs>
        <action-outputs>
          <query-result type="result-set" mapping="query_result"/>
        </action-outputs>
        <component-definition>
          <query><![CDATA[SELECT a.publication_process_id,to_char(a.create_date,'yyyy-MM-dd HH24:MI:SS') as create_date,to_char(a.dt_lastchange,'yyyy-MM-dd HH24:MI:SS') as dt_lastchange,a.process_status,a.process_actribute,b.subscription_name,b.subscription_key FROM control.spctl_subscription_publication_process a,control.spctl_pub_customer_subscription b
WHERE a.subscription_key=b.subscription_key
AND (a.process_status = 'PS' OR a.process_status='PST' OR a.process_status='WT' OR a.process_status='TR')
ORDER BY a.publication_process_id]]></query>
          <live><![CDATA[true]]></live>
        </component-definition>
      </action-definition>

    </actions>

    <actions>
      <condition><![CDATA[actions=='restartProcessStatus']]></condition>
      <action-definition>
        <component-name>SQLExecute</component-name>
        <action-type>SQL Commands</action-type>
        <action-inputs>
          <jndi type="string" mapping="connectionName"/>
          <p_publication_process_id type="string"/>
        </action-inputs>
        <action-outputs/>
        <component-definition>
          <query><![CDATA[UPDATE CONTROL.spctl_subscription_publication_process
SET process_status = 'WT'
WHERE publication_process_id = {p_publication_process_id};
UPDATE CONTROL.spctl_subscription_publication_process_concurrent_trans
SET STATUS = 'ER'
WHERE publication_process_id = {p_publication_process_id};]]></query>
        </component-definition>
      </action-definition>

    </actions>

    <actions>
      <condition><![CDATA[actions=='updateProcessStatusToSU']]></condition>
      <action-definition>
        <component-name>SQLExecute</component-name>
        <action-type>SQL Commands</action-type>
        <action-inputs>
          <p_publication_process_id type="string"/>
          <jndi type="string" mapping="connectionName"/>
        </action-inputs>
        <component-definition>
          <query><![CDATA[UPDATE CONTROL.spctl_subscription_publication_process
SET process_status = 'SU'
WHERE publication_process_id = {p_publication_process_id};
UPDATE CONTROL.spctl_subscription_publication_process_concurrent_trans
SET STATUS = 'SU'
WHERE publication_process_id = {p_publication_process_id};]]></query>
        </component-definition>
      </action-definition>

    </actions>

    <action-definition> 
      <component-name>JavascriptRule</component-name>
      <action-type>Process data grid</action-type>
      <action-inputs> 
        <returnResult type="string"/>  
        <query_result type="result-set"/>  
        <actions type="string"/> 
      </action-inputs>
      <action-outputs> 
        <returnResult type="string"/> 
      </action-outputs>
      <component-definition> 
        <script><![CDATA[var result_set=query_result;
var rowCount=query_result.getRowCount();
var meta = result_set.getMetaData();      // Returns an IPentahoMetaData object
var colCount = meta.getColumnCount();
var colHeaders = meta.getColumnHeaders(); //getColumnHeaders() returns object[][]
var rowHeaders = meta.getRowHeaders(); 

if(actions=='template'){
	returnResult=returnResult;
}else{
	returnResult='[';
	//process data item
	for(var i=0;i<result_set.getRowCount();i++){
		var item='';
		if(i>0){
			item+=',';
		}
		item+='{';
			for(var j=0;j<result_set.getColumnCount();j++){ 		
				var value=result_set.getValueAt(i,j);
				var columnValue=colHeaders[0][j];
				if(j>0){
					item+=',';
				}
				item+='"'+columnValue+'":"'+value+'"';
			}
		item+='}';	

	returnResult+=item;
	}
	//end

	returnResult+=']';
}]]></script> 
      </component-definition> 
    </action-definition>
 
  </actions> 
</action-sequence>