--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: warehouse; Type: DATABASE; Schema: -; Owner: warehouse_dbo
--

CREATE DATABASE warehouse WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';


ALTER DATABASE warehouse OWNER TO warehouse_dbo;

\connect warehouse

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: adm; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA adm;


ALTER SCHEMA adm OWNER TO warehouse_dbo;

--
-- Name: adnetwork; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA adnetwork;


ALTER SCHEMA adnetwork OWNER TO warehouse_dbo;

--
-- Name: adsops; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA adsops;


ALTER SCHEMA adsops OWNER TO warehouse_dbo;

--
-- Name: adstraffic; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA adstraffic;


ALTER SCHEMA adstraffic OWNER TO warehouse_dbo;

--
-- Name: billing; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA billing;


ALTER SCHEMA billing OWNER TO warehouse_dbo;

--
-- Name: control; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA control;


ALTER SCHEMA control OWNER TO warehouse_dbo;

--
-- Name: dbclk; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA dbclk;


ALTER SCHEMA dbclk OWNER TO warehouse_dbo;

--
-- Name: evttracker; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA evttracker;


ALTER SCHEMA evttracker OWNER TO warehouse_dbo;

--
-- Name: refer; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA refer;


ALTER SCHEMA refer OWNER TO warehouse_dbo;

--
-- Name: staging; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA staging;


ALTER SCHEMA staging OWNER TO warehouse_dbo;

--
-- Name: verveloc; Type: SCHEMA; Schema: -; Owner: warehouse_dbo
--

CREATE SCHEMA verveloc;


ALTER SCHEMA verveloc OWNER TO warehouse_dbo;

--
-- Name: SCHEMA verveloc; Type: COMMENT; Schema: -; Owner: warehouse_dbo
--

COMMENT ON SCHEMA verveloc IS 'standard public schema';


--
-- Name: plperl; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE OR REPLACE PROCEDURAL LANGUAGE plperl;


ALTER PROCEDURAL LANGUAGE plperl OWNER TO postgres;

--
-- Name: plperlu; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE OR REPLACE PROCEDURAL LANGUAGE plperlu;


ALTER PROCEDURAL LANGUAGE plperlu OWNER TO postgres;

--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE OR REPLACE PROCEDURAL LANGUAGE plpgsql;


ALTER PROCEDURAL LANGUAGE plpgsql OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: dblink_pkey_results; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE dblink_pkey_results AS (
	"position" integer,
	colname text
);


ALTER TYPE public.dblink_pkey_results OWNER TO postgres;

SET search_path = staging, pg_catalog;

--
-- Name: type_set_parse_hostname; Type: TYPE; Schema: staging; Owner: warehouse_dbo
--

CREATE TYPE type_set_parse_hostname AS (
	domain character varying,
	port integer
);


ALTER TYPE staging.type_set_parse_hostname OWNER TO warehouse_dbo;

--
-- Name: type_set_parse_url; Type: TYPE; Schema: staging; Owner: warehouse_dbo
--

CREATE TYPE type_set_parse_url AS (
	protocol character varying,
	host character varying,
	domain character varying,
	port integer,
	path character varying,
	args character varying
);


ALTER TYPE staging.type_set_parse_url OWNER TO warehouse_dbo;

SET search_path = adstraffic, pg_catalog;

--
-- Name: fn_get_session_by_partner(text, integer); Type: FUNCTION; Schema: adstraffic; Owner: postgres
--

CREATE FUNCTION fn_get_session_by_partner(p_calendar_year_month text, p_partner_id integer, OUT p_partner_description character varying, OUT p_domain text, OUT p_visit_count bigint, OUT p_page_view_count bigint, OUT p_total_duration bigint, OUT p_new_visit_count bigint, OUT p_bounce_count bigint) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_get_session_by_partner
||
||
|| $Id$
||
*/

DECLARE

 v_date_sk_start INTEGER;
 v_date_sk_end INTEGER;
 v_date_sk_yesterday INTEGER;

BEGIN

/* set start/end dates */
IF p_calendar_year_month='30 day' THEN
	SELECT date_sk INTO v_date_sk_yesterday
	FROM date_dim
	WHERE full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

	v_date_sk_start:=v_date_sk_yesterday-29;
	v_date_sk_end:=v_date_sk_yesterday;
ELSE
        SELECT date_sk_start,date_sk_end INTO v_date_sk_start,v_date_sk_end
        FROM month_dim
        WHERE calendar_year_month=p_calendar_year_month;
END IF;

/* session by partner */
RETURN QUERY 
SELECT 	d.description,
	b.domain,
	SUM(a.visit_count),
	SUM(a.page_view_count),
	SUM(a.total_duration),
	SUM(a.new_visit_count),
	SUM(a.bounce_count)
FROM dw.session_fact a
INNER JOIN dw.referrer_hostname_dim b ON a.initial_referrer_hostname_sk=b.referrer_hostname_sk
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.session_start_date_sk BETWEEN v_date_sk_start  AND v_date_sk_end 
AND d.partner_id=p_partner_id
AND c.organic = true
GROUP BY d.description,b.domain
;

END;
$_$;


ALTER FUNCTION adstraffic.fn_get_session_by_partner(p_calendar_year_month text, p_partner_id integer, OUT p_partner_description character varying, OUT p_domain text, OUT p_visit_count bigint, OUT p_page_view_count bigint, OUT p_total_duration bigint, OUT p_new_visit_count bigint, OUT p_bounce_count bigint) OWNER TO postgres;

--
-- Name: fn_get_session_by_partner_by_date(text, integer); Type: FUNCTION; Schema: adstraffic; Owner: postgres
--

CREATE FUNCTION fn_get_session_by_partner_by_date(p_calendar_year_month text, p_partner_id integer, OUT p_full_date_int integer, OUT p_visit_count bigint, OUT p_page_view_count bigint) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_get_session_by_partner
||
||
|| $Id$
||
*/

DECLARE

 v_date_sk_start INTEGER;
 v_date_sk_end INTEGER;
 v_date_sk_yesterday INTEGER;

BEGIN

/* set start/end dates */
IF p_calendar_year_month='30 day' THEN
	SELECT date_sk INTO v_date_sk_yesterday
	FROM date_dim
	WHERE full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

	v_date_sk_start:=v_date_sk_yesterday-29;
	v_date_sk_end:=v_date_sk_yesterday;
ELSE
        SELECT date_sk_start,date_sk_end INTO v_date_sk_start,v_date_sk_end
        FROM month_dim
        WHERE calendar_year_month=p_calendar_year_month;
END IF;

/* visits by partner by date */
RETURN QUERY 
SELECT 	REPLACE(e.full_date::text,'-','')::int,
	SUM(a.visit_count),
	SUM(a.page_view_count)
FROM dw.session_fact a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.date_dim e ON a.session_start_date_sk=e.date_sk
WHERE a.session_start_date_sk BETWEEN v_date_sk_start  AND v_date_sk_end 
AND d.partner_id=p_partner_id
AND c.organic = true
GROUP BY REPLACE(e.full_date::text,'-','')::int
;

END;
$_$;


ALTER FUNCTION adstraffic.fn_get_session_by_partner_by_date(p_calendar_year_month text, p_partner_id integer, OUT p_full_date_int integer, OUT p_visit_count bigint, OUT p_page_view_count bigint) OWNER TO postgres;

SET search_path = billing, pg_catalog;

--
-- Name: fn_build_ba_monthly_adnetwork_summary(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: billing.fn_build_ba_monthly_adnetwork_summary
||
|| Author: Chinh Nguyen
||
|| Date: 2012-10-09
|| Update: 2013-06-04
||     - Add displayed_impressions column
||     - Add event_count column
|| Description: 
||     weekly/monthly adnetwork summary loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
SELECT * FROM refer.month_dim WHERE month_sk=100;
SELECT billing.fn_build_ba_monthly_adnetwork_summary(3013,3042,100,'PS',45);
UPDATE billing.ba_monthly_adnetwork_summary SET is_active=true WHERE month_since_2005=100;

SELECT SUM(fullfilled_code_y),SUM(gross_revenue),SUM(p_net_revenue),SUM(v_net_revenue) FROM billing.ba_monthly_adnetwork_summary WHERE month_since_2005=;


*/


DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_adnetwork_summary(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_build_ba_monthly_adnetwork_summary(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;

/* Delete old record */
DELETE FROM billing.ba_monthly_adnetwork_summary WHERE month_since_2005=v_month_since_2005;
/* insert records */
INSERT INTO billing.ba_monthly_adnetwork_summary(
            calendar_year_month, month_since_2005, parent1_name,parent1_id,partner_id,partner_name,portal_id,
            ad_network_id, ad_network_name, requests, paid_impressions, clicks, 
            net_revenue, fullfilled_code_count, fullfilled_code_y, gross_revenue, p_net_revenue, v_net_revenue,total_billable_impressions,displayed_impressions,event_count, process_id)
SELECT
v_calendar_year_month as calendar_year_month
,v_month_since_2005 as month_since_2005
,a.publisher
,a.publisher_name
,a.partner_id
,a.partner_name
,a.portal_id
,a.ad_id
,a.adname
,0 as requests
,sum(paid_impressions) as paid_impressions
,0 as clicks
,0 as net_revenue
,0 as fullfilled_code_count
,sum(a.fullfilled_code_y) as adcel_y_ad_responses
,sum(a.gross_revenue) as gross_revenue
,sum(a.p_net_revenue) as p_net_revenue
,sum(a.v_net_revenue) as v_net_revenue
,sum(total_billable_impressions) as total_billable_impressions
-- Update 2013-06-04
,sum(displayed_impressions) as displayed_impressions
,sum(event_count) as event_count
-- End update
,p_process_id
FROM (
	/* AdSense DBCLK Channel */
	SELECT
	'AdSense DBCLK Channel (-101)' as adname
	,-101 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(impressions_delivered) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	0 as event_count
	FROM  adnetwork.ba_monthly_adsense_dbclk_channel
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* City Grid */
	SELECT
	'City Grid/City Grid Proxy (29)' as adname
	,29 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(paid_impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	sum(COALESCE(event_count, 0)) as event_count
	FROM  adnetwork.ba_monthly_cg_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
		UNION
	/* City Grid Mobile*/
	SELECT
	'City Grid Mobile (38)' as adname
	,38 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(paid_impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	sum(COALESCE(displayed_impressions, 0)) as displayed_impressions,
	0 as event_count
	FROM  adnetwork.ba_monthly_cg_mobile_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* iTunes */
	SELECT
	'iTunes (-102)' as adname
	,-102 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	0 as fullfilled_code_y,
	sum(impressions) as total_billable_impressions,
	0 as displayed_impressions,
	0 as event_count
	FROM  adnetwork.ba_monthly_it_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* JumpTap */
	SELECT
	'JumpTap (11)' as adname
	,11 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(paid_impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	0 as event_count
	FROM adnetwork.ba_monthly_jt_performance
	WHERE is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* Millennial Media */
	SELECT
	'Millennial Media (4)' as adname
	,4 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(ads_served) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	0 as event_count
	FROM  adnetwork.ba_monthly_mm_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* Marchex */
	SELECT
	'Marchex/Marchex Proxy (28)' as adname
	,28 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(paid_impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	sum(COALESCE(event_count, 0)) as event_count
	FROM  adnetwork.ba_monthly_mx_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* Superpages Proxy/Blue */
	SELECT
	'Superpages Prpoxy/Blue (30)' as adname
	,30 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	0 as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	sum(COALESCE(event_count, 0)) as event_count
	FROM  adnetwork.ba_monthly_sp_blue_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* Where */
	SELECT
	'Where/Where HTML (25)' as adname
	,25 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(filled) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	sum(COALESCE(displayed_impressions, 0)) as displayed_impressions,
	0 as event_count
	FROM  adnetwork.ba_monthly_wh_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* AT&T Yellowpages */
	SELECT
	'AT&T Yellowpages (27)' as adname
	,27 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	0 as event_count
	FROM  adnetwork.ba_monthly_yp_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* AT&T Static Banner Yellowpages */
	SELECT
	'AT&T Static Banner Yellowpages (32)' as adname
	,32 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	sum(COALESCE(displayed_impressions, 0)) as displayed_impressions,
	sum(COALESCE(event_count, 0)) as event_count
	FROM  adnetwork.ba_monthly_yp_sb_performance
	WHERE  is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* AT&T No Logo Yellowpages */
	SELECT
	'AT&T No Logo(Yellowpages)(33)' as adname
	,33 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	sum(COALESCE(displayed_impressions, 0)) as displayed_impressions,
	sum(COALESCE(event_count, 0)) as event_count
	FROM adnetwork.ba_monthly_yp_no_performance
	WHERE is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
	UNION
	/* KlickThru */
	SELECT
	'KlickThru(35)' as adname
	,35 as ad_id
	,parent1_name  as publisher,parent1_id as publisher_name,
	partner_id,partner_name,portal_id,
	sum(paid_impressions) as paid_impressions,
	sum(gross_revenue) as gross_revenue,
	sum(p_net_revenue) as p_net_revenue,
	sum(v_net_revenue) as v_net_revenue,
	sum(fullfilled_code_y) as fullfilled_code_y,
	sum(total_billable_impressions) as total_billable_impressions,
	0 as displayed_impressions,
	0 as event_count
	FROM adnetwork.ba_monthly_kt_performance
	WHERE is_active = true
	AND calendar_year_month=v_calendar_year_month
	GROUP BY adname,ad_id,publisher,publisher_name,partner_id,partner_name,portal_id
) a
WHERE a.paid_impressions>0 OR gross_revenue>0 OR a.p_net_revenue>0 OR a.v_net_revenue>0 OR a.fullfilled_code_y>0
GROUP BY
calendar_year_month
,month_since_2005
,a.publisher
,a.publisher_name
,a.partner_id
,a.partner_name
,a.portal_id
,a.ad_id
,a.adname;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ba_monthly_adnetwork_summary';

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_adnetwork_summary(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_adnetwork_summary(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_ba_monthly_adnetwork_summary',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION billing.fn_build_ba_monthly_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ba_monthly_adsense_dbclk_channel(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_adsense_dbclk_channel(p_month_sk integer, p_start_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_ad_monthly_adsense_dbclk_channel
||
|| Author: Phap Ta
|| 
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Google AdSense - DBCLK Channel Mapping
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
|| Last Update : Chinhnd 2012-05-22
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_adsense_dbclk_channel(%,%,%,''%'',%)',timeofday(),p_month_sk,p_start_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_adsense_dbclk_channel(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  month_sk=p_month_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* =========================================== */
/* ===== adnetwork.ad_adsense_dblck_channel ===== */

/* truncate temporary data */
TRUNCATE billing.ba_adsense_dblck_channel;

/* copy new data to temporary table */
INSERT INTO billing.ba_adsense_dblck_channel(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, ga_channel_sk, 
       dc_site_sk, partner_sk, portal_sk, eastern_start_full_date, eastern_end_full_date, 
       impressions_delivered, clicks_recorded, 
       channel_page_views, channel_clicks,channel_page_ctr, channel_cpc, channel_page_rpm, channel_estimated_earnings, 
       total_clicks_recorded, estimated_earnings, process_id)
SELECT a.month_sk, a.eastern_start_date_sk, a.eastern_end_date_sk, a.ga_channel_sk, 
       a.dc_site_sk, a.partner_sk, a.portal_sk, a.eastern_start_full_date, a.eastern_end_full_date, 
       a.impressions_delivered, a.clicks_recorded,
       b.page_views, b.clicks, b.page_ctr, b.cpc, b.page_rpm, b.estimated_earnings, 
       0, 0, p_process_id
  FROM adnetwork.fact_monthly_ad_channel_site a
INNER JOIN adnetwork.fact_monthly_ga_channel b ON a.month_sk = b.month_sk AND a.ga_channel_sk = b.ga_channel_sk
WHERE a.month_sk = p_month_sk
  AND a.ga_channel_sk > 0;

/* update total_impressions_delivered */
UPDATE billing.ba_adsense_dblck_channel a
SET total_impressions_delivered = b.total_impressions_delivered
FROM (
    SELECT ga_channel_sk, SUM(impressions_delivered) as total_impressions_delivered 
    FROM billing.ba_adsense_dblck_channel 
    WHERE process_id = p_process_id
    GROUP BY ga_channel_sk
) b
WHERE a.ga_channel_sk = b.ga_channel_sk AND a.process_id = p_process_id;

/* update estimated_earnings */
UPDATE billing.ba_adsense_dblck_channel
SET estimated_earnings = (channel_estimated_earnings::float/total_impressions_delivered)*impressions_delivered
WHERE total_impressions_delivered > 0 AND process_id = p_process_id;

/* update page_views */
UPDATE billing.ba_adsense_dblck_channel
SET page_views = (channel_page_views::float/total_impressions_delivered)*impressions_delivered
WHERE total_impressions_delivered > 0 AND process_id = p_process_id;

/* update estimated_earnings */
UPDATE billing.ba_adsense_dblck_channel
SET clicks = (channel_clicks::float/total_impressions_delivered)*impressions_delivered
WHERE total_impressions_delivered > 0 AND process_id = p_process_id;
/* =================================================== */
/* ===== adnetwork.ad_monthly_adsense_dbclk_channel ===== 

*/

INSERT INTO billing.ba_monthly_adsense_dbclk_channel(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
       partner_description, parent1_id, parent1_name, partner_keyword, 
       portal_id, portal_name, portal_keyword, impressions_delivered, 
       clicks_recorded, estimated_earnings, channel_id, gross_revenue, p_net_revenue, 
       v_net_revenue, requests, fullfilled_code_count, fullfilled_code_y, 
       fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT v_calendar_year_month, v_month_since_2005, c.partner_id, c.name_current, 
       c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
       d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
       sum(impressions_delivered), sum(clicks_recorded), sum(estimated_earnings),e.channel_id ,
       sum(estimated_earnings), 0, 0, 0, 0, 0, 0, 0, 0, p_process_id
FROM billing.ba_adsense_dblck_channel a
INNER JOIN refer.partner_dim c on a.partner_sk = c.partner_sk 
INNER JOIN refer.portal_dim d on a.portal_sk = d.portal_sk 
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,e.channel_id;

/* update revenue share for mobileweb, channel == 11|Mobile Web */
update billing.ba_monthly_adsense_dbclk_channel a
set p_net_revenue = a.estimated_earnings * b.rev_share_mobileweb_mediation/100
   ,v_net_revenue =  a.estimated_earnings * (100 - b.rev_share_mobileweb_mediation)/100
from refer.revenue_share_dim b                  
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and b.is_active=1
  and a.process_id = p_process_id
  AND a.calendar_year_month=v_calendar_year_month
  and a.partner_id > 0
  and a.channel_id = 11;

/* update revenue share for apps, channel <> 11|Mobile Web */
update billing.ba_monthly_adsense_dbclk_channel a                 
set p_net_revenue =  a.estimated_earnings * b.rev_share_apps_mediation/100
   ,v_net_revenue =  a.estimated_earnings * (100 - b.rev_share_apps_mediation)/100
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and b.is_active=1
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id > 0
  AND a.calendar_year_month=v_calendar_year_month
  and a.channel_id <> 11;

/* Update total_billable_impressions */
UPDATE billing.ba_monthly_adsense_dbclk_channel a   
SET total_billable_impressions=(CASE WHEN impressions_delivered=0 THEN fullfilled_code_y ELSE impressions_delivered END)
WHERE a.process_id = p_process_id
AND a.month_since_2005=v_month_since_2005;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_adsense_dbclk_channel';

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_adsense_dbclk_channel(%,%,%,''%'',%)',timeofday(),p_month_sk,p_start_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_adsense_dbclk_channel(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_start_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ba_monthly_adsense_dbclk_channel',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION billing.fn_build_ba_monthly_adsense_dbclk_channel(p_month_sk integer, p_start_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ba_monthly_advance_digital(integer, integer, character varying); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_advance_digital(p_month_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: billing.fn_build_ba_monthly_advance_digital
||
|| Author: Tho Hoang
||
|| Date: 2013-03-14
||
|| Description: 
||     [Customized Report] BA Monthly Advance Digital
||
|| Parameters: 
||     - IN  p_month_sk             -- integer
||        month
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_start_date_of_month DATE;
 v_end_date_of_month DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;
 v_date_sk_start INTEGER:=0;
 v_date_sk_end INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_advance_digital(%,%,''%'')',p_month_sk,timeofday(),p_process_id,p_process_status;

SELECT COUNT(1) INTO v_count FROM adm.monthly_agg_adm_dbclk_revenue_v4 WHERE month_since_2005 = p_month_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE 'adm.monthly_agg_adm_dbclk_revenue_v4 has no data %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
SELECT calendar_year_month, month_since_2005, date_sk_start, date_sk_end
INTO   v_calendar_year_month,v_month_since_2005, v_date_sk_start, v_date_sk_end
FROM   refer.month_dim
WHERE  month_sk = p_month_sk
LIMIT 1
;

/*get date info */
SELECT full_date INTO v_start_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_start;
SELECT full_date INTO v_end_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_end;

/*del old record*/
RAISE NOTICE 'delete old data on month_since_2005=%...',v_month_since_2005;
DELETE FROM billing.ba_monthly_advance_digital WHERE month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - Data Inserting...',timeofday();

INSERT INTO billing.ba_monthly_advance_digital(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, month, year, publisher_id, publisher_name, 
            dfp_advertiser_id, dfp_advertiser_name, partner_id, partner_name, 
            platform_id, platform_name, adm_order_id, flight_id, flight_start_date, 
            flight_end_date, flight_rate, flight_budget, impressions, is_active, process_id)
SELECT      calendar_year_month, eastern_start_date_sk, eastern_end_date_sk
          , month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), publisher_id, publisher_name
          , dfp_advertiser_id, dfp_advertiser_name, partner_id, partner_name
          , platform_id, platform_name, adm_order_id, flight_id, flight_start_date
          , flight_end_date, flight_rate, flight_budget, SUM(impressions), true, p_process_id
FROM (
   SELECT a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk, a.month_since_2005
        , a.publisher_id, b.company_name_current AS publisher_name
        , COALESCE(c.dfp_advertiser_id, -100) AS dfp_advertiser_id
        , COALESCE(c.dfp_advertiser_name, 'N/A') AS dfp_advertiser_name
        , a.partner_id, d.name_current as partner_name
        , a.channel_id as platform_id, e.name_current as platform_name
        , a.adm_order_id, a.flight_id, a.flight_start_date::date, a.flight_end_date::date
        , a.flight_rate, a.flight_budget, a.impressions
   FROM adm.monthly_agg_adm_dbclk_revenue_v4 a
   LEFT JOIN refer.adm_dim_accounts b -- join with publisher to get publisher name
      ON (b.dt_expire = '9999-12-31' AND b.accounts_id = a.publisher_id)
   LEFT JOIN ( -- join with advertiser to get advertiser name
       SELECT 1 as data_source, dc_order_id as dfp_order_id, advertiser_id as dfp_advertiser_id, advertiser_name_current as dfp_advertiser_name
       FROM refer.dc_order_dim WHERE dt_expire='9999-12-31'
       UNION
       SELECT 2 as data_source, a.order_id as dfp_order_id, a.advertiser_id as dfp_advertiser_id, b.short_name_current as dfp_advertiser_name
       FROM refer.dfp_dim_orders a
       LEFT JOIN refer.dfp_dim_advertisers b ON b.dt_expire = '9999-12-31' AND b.advertiser_id = a.advertiser_id
       WHERE a.dt_expire = '9999-12-31'
   ) c ON c.dfp_order_id = a.dc_order_id AND c.data_source = a.data_source
   LEFT JOIN refer.partner_dim d -- join with partner dim to get parner name
       ON (d.dt_expire = '9999-12-31' AND d.partner_id = a.partner_id)
   LEFT JOIN refer.adm_dim_platforms e -- join with channel/platform to get channel/platform name
       ON (e.dt_expire = '9999-12-31' AND e.platform_id = a.channel_id)
   WHERE a.month_since_2005 = v_month_since_2005
     AND a.is_active = true
     AND a.network_id = 1 -- LOCAL
     AND a.channel_id = 14 -- iPad App
     AND a.flight_impressions > 0
     AND a.adm_order_id IN ( -- filter order with publisher = Advance Internet
         SELECT o.order_id
         FROM refer.adm_dim_orders o
         INNER JOIN refer.adm_dim_flights f ON (f.dt_expire = '9999-12-31' and f.network_id = 1 and o.order_id = f.order_id)
         WHERE o.dt_expire = '9999-12-31' AND o.publisher_id = 10 -- Advance Internet
     )
) a
GROUP BY calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, month_since_2005
       , publisher_id, publisher_name, dfp_advertiser_id, dfp_advertiser_name, partner_id, partner_name
       , platform_id, platform_name, adm_order_id, flight_id, flight_start_date, flight_end_date, flight_rate, flight_budget
;

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_advance_digital(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_advance_digital(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ba_monthly_advance_digital',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION billing.fn_build_ba_monthly_advance_digital(p_month_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ba_monthly_local_revenue_v51(integer, integer, character varying); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_local_revenue_v51(p_month_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: billing.fn_build_ba_monthly_local_revenue_v51
||
|| Author: Tho Hoang
||
|| Date: 2013-03-14
||
|| Description: 
||     BA Monthly Local Revenue
||
|| Parameters: 
||     - IN  p_month_sk             -- integer
||        month
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_start_date_of_month DATE;
 v_end_date_of_month DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;
 v_date_sk_start INTEGER:=0;
 v_date_sk_end INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_local_revenue_v51(%,%,''%'')',p_month_sk,timeofday(),p_process_id,p_process_status;

SELECT COUNT(1) INTO v_count FROM adm.monthly_agg_adm_dbclk_revenue_v4 WHERE month_since_2005 = p_month_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE 'adm.monthly_agg_adm_dbclk_revenue_v4 has no data %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
SELECT calendar_year_month, month_since_2005, date_sk_start, date_sk_end
INTO   v_calendar_year_month,v_month_since_2005, v_date_sk_start, v_date_sk_end
FROM   refer.month_dim
WHERE  month_sk = p_month_sk
LIMIT 1
;

/*get date info */
SELECT full_date INTO v_start_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_start;
SELECT full_date INTO v_end_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_end;

/*del old record*/
RAISE NOTICE 'delete old data on month_since_2005=%...',v_month_since_2005;
DELETE FROM billing.ba_monthly_local_revenue_v5 WHERE month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - Data Inserting...',timeofday();
/*the publisher name derived from order->publisher_id->publisher_name. 
It is considered as input publisher that John will send the bill to ( Pay for). 
This means who make the order to Verve
- exclude account is 'Agency'
*/

INSERT INTO billing.ba_monthly_local_revenue_v5(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, month, year, data_source, publisher_id, publisher_name, 
            adm_order_id, partner_id, partner_revenue_share, dfp_advertiser_id, 
            dfp_advertiser_name, flight_id, flight_impressions, flight_clicks, 
            flight_metric, flight_rate, flight_budget, flight_start_date, 
            flight_end_date, verve_rate, booked_rate, impressions, clicks, 
            revenue, gross_revenue, p_net_revenue, v_net_revenue, delivered_units, 
            total_num_of_days_in_billing_period, booked_units, total_units_up_to_month, 
            partner_units_share, remaining_units, partner_remaining_units, 
            billable_units, partner_billable_units, is_active, process_id)
SELECT 	    a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk
          , a.month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), a.data_source, b.publisher_id, b.publisher_name
          , a.adm_order_id, a.partner_id, 0 as partner_revenue_share, COALESCE(c.dfp_advertiser_id,-100)
          , COALESCE(c.dfp_advertiser_name,'N/A'), a.flight_id, a.flight_impressions, a.flight_clicks
          , lower(a.flight_metric), a.flight_rate, a.flight_budget, a.flight_start_date
          , a.flight_end_date, 0 as verve_rate, 0 as booked_rate, sum(impressions), sum(clicks)
          , sum(revenue), sum(revenue), 0 as p_net_revenue, 0 as v_net_revenue, 0 as delivered_units
          , a.total_num_of_days_in_billing_period, -1 as booked_units, 0 as total_units_up_to_month
          , 0 as partner_units_share, 0 as remaining_units, 0 as partner_remaining_units
          , 0 as billable_units, 0 as partner_billable_units , true, p_process_id
FROM adm.monthly_agg_adm_dbclk_revenue_v4 a
INNER JOIN (
        SELECT a.*, COALESCE(b.company_name_current ,'N/A') as publisher_name
	FROM (
	SELECT order_id, name_current, publisher_id FROM refer.adm_dim_orders WHERE dt_expire='9999-12-31'
        UNION
        SELECT order_id, name_current, publisher_id FROM refer.adm_order_dim a WHERE a.dt_expire = '9999-12-31'
        AND NOT EXISTS (SELECT 1 FROM refer.adm_dim_orders b WHERE b.dt_expire = '9999-12-31' AND b.order_id = a.order_id)
	) a
	INNER JOIN refer.adm_dim_accounts b ON b.dt_expire = '9999-12-31' AND lower(b.type) <> 'agency' AND b.accounts_id = a.publisher_id
) b ON b.order_id = a.adm_order_id
LEFT JOIN (
       SELECT 1 as data_source, dc_order_id as dfp_order_id, advertiser_id as dfp_advertiser_id, advertiser_name_current as dfp_advertiser_name
       FROM refer.dc_order_dim WHERE dt_expire='9999-12-31'
       UNION
       SELECT 2 as data_source, a.order_id as dfp_order_id, a.advertiser_id as dfp_advertiser_id, b.short_name_current as dfp_advertiser_name
       FROM refer.dfp_dim_orders a
       LEFT JOIN refer.dfp_dim_advertisers b ON b.dt_expire = '9999-12-31' AND b.advertiser_id = a.advertiser_id
       WHERE a.dt_expire = '9999-12-31'
) c ON c.dfp_order_id = a.dc_order_id AND c.data_source = a.data_source
WHERE a.is_active = true AND a.month_since_2005 = v_month_since_2005 AND a.network_id IN (1)
GROUP BY 
  a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk, a.month_since_2005
, a.data_source, b.publisher_id, b.publisher_name
, c.dfp_advertiser_id, c.dfp_advertiser_name
, a.adm_order_id, a.partner_id, a.flight_id, a.flight_impressions, a.flight_clicks
, lower(a.flight_metric), a.flight_rate, a.flight_budget, a.flight_start_date, a.flight_end_date
, a.total_num_of_days_in_billing_period
;

RAISE NOTICE '% - Updating Advertiser Name...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET dfp_advertiser_name = b.dfp_advertiser_name
FROM (
        SELECT flight_id, dfp_advertiser_name
        FROM billing.ba_monthly_local_revenue_v5
        WHERE data_source = 1
          AND month_since_2005 = v_month_since_2005
) b
WHERE a.data_source = 2
  AND b.flight_id = a.flight_id
  AND month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - delivered_units Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET delivered_units = CASE
                          WHEN flight_metric = 'cpm' THEN impressions
                          WHEN flight_metric = 'sponsorship' THEN impressions
                          WHEN flight_metric = 'cpc' THEN clicks
                          ELSE 0
                      END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_rate Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET booked_rate = CASE
                      WHEN flight_metric = 'cpm' THEN flight_rate
                      WHEN flight_metric = 'sponsorship' THEN 0
                      WHEN flight_metric = 'cpc' THEN flight_rate
                      ELSE 0
                  END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - total_units_up_to_month Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET total_units_up_to_month = b.total_units_up_to_month
FROM (
       SELECT flight_id, case when flight_metric = 'cpc' then sum(clicks) else sum(impressions) end as total_units_up_to_month
       FROM adm.monthly_agg_adm_dbclk_revenue_v4
       WHERE is_active = true
         AND month_since_2005 <= v_month_since_2005
         AND network_id IN (1)
       GROUP BY flight_id, flight_metric
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_units DFP 1.0 Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_flight_dim a
       WHERE a.dt_effective::date <= v_end_date_of_month
         AND lower(a.metric) <> 'sponsorship'
         AND a.network_id = 1
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_units DFP 2.0 Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_dim_flights a
       WHERE a.dt_effective::date <= v_end_date_of_month
         AND lower(a.metric) <> 'sponsorship'
         AND a.network_id = 1
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND a.booked_units = -1
;

RAISE NOTICE '% - booked_units sponsorship Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET booked_units = 0
WHERE a.process_id = p_process_id
  AND a.flight_metric = 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET remaining_units = booked_units - total_units_up_to_month
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_impressions 
                         WHEN remaining_units < 0 AND (remaining_units + flight_impressions) > 0 THEN (remaining_units + flight_impressions) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpm'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_local_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_clicks 
                         WHEN remaining_units < 0 AND (remaining_units + flight_clicks) > 0 THEN (remaining_units + flight_clicks) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpc'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_local_revenue_v5 a
SET billable_units = flight_impressions
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_units_share Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_impressions
WHERE process_id = p_process_id
  AND flight_impressions > 0
  AND flight_metric <> 'cpc'
  AND month_since_2005=v_month_since_2005
;

UPDATE billing.ba_monthly_local_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_clicks
WHERE process_id = p_process_id
  AND flight_clicks > 0
  AND flight_metric = 'cpc'
  AND month_since_2005=v_month_since_2005
;

RAISE NOTICE '% - partner_remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET partner_remaining_units = partner_units_share * remaining_units
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET partner_billable_units = (CASE 
                                 WHEN a.remaining_units >= 0 THEN delivered_units
                                 WHEN a.remaining_units < 0 THEN partner_units_share * billable_units 
                                 ELSE 0 
                             END)
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_local_revenue_v5 a
SET partner_billable_units = delivered_units
WHERE a.process_id = p_process_id
  AND a.flight_metric = 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - gross_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET gross_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * booked_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * booked_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - revenue share Updating...',timeofday();

/* update revenue share for mobileweb, channel == 11|Mobile Web */
update billing.ba_monthly_local_revenue_v5 a
set p_net_revenue = gross_revenue * b.rev_share_mobileweb_local / 100 
   ,v_net_revenue = gross_revenue * (100-b.rev_share_mobileweb_local) / 100 
   ,partner_revenue_share = b.rev_share_mobileweb_local
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and b.is_active = 1
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - verve_rate sponsorship Updating...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET verve_rate = (v_net_revenue::float / delivered_units) * 1000
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005
;

/*--RPTPS-459--*/
RAISE NOTICE '% - booked_units Updating for sponsorship...',timeofday();

UPDATE billing.ba_monthly_local_revenue_v5 a
SET booked_rate = gross_revenue/(delivered_units::double precision/1000)
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005;

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_local_revenue_v51(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_local_revenue_v51(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ba_monthly_local_revenue_v51',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION billing.fn_build_ba_monthly_local_revenue_v51(p_month_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ba_monthly_national_revenue_v5(integer, integer, character varying); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_national_revenue_v5(p_month_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: billing.fn_build_ba_monthly_national_revenue_v5
||
|| Author: Tho Hoang
||
|| Date: 2013-03-15
||
|| Description: 
||     BA Monthly National Revenue
||
|| Parameters: 
||     - IN  p_month_sk             -- integer
||        month
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_start_date_of_month DATE;
 v_end_date_of_month DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;
 v_date_sk_start INTEGER:=0;
 v_date_sk_end INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_national_revenue_v5(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

SELECT COUNT(1) INTO v_count FROM adm.monthly_agg_adm_dbclk_revenue_v4 WHERE month_since_2005 = p_month_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE 'adm.monthly_agg_adm_dbclk_revenue_v4 has no data %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
SELECT calendar_year_month, month_since_2005, date_sk_start, date_sk_end
INTO   v_calendar_year_month,v_month_since_2005, v_date_sk_start, v_date_sk_end
FROM   refer.month_dim
WHERE  month_sk = p_month_sk
LIMIT 1
;

/*get date info */
SELECT full_date INTO v_start_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_start;
SELECT full_date INTO v_end_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_end;

RAISE NOTICE '% - Delete old data on month_since_2005 = %',timeofday(),v_month_since_2005;

DELETE FROM billing.ba_monthly_national_revenue_v5 WHERE month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - Data Inserting...',timeofday();

INSERT INTO billing.ba_monthly_national_revenue_v5(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, month, year, data_source, network_id, dfp_advertiser_id, 
            dfp_advertiser_name, adm_order_id, adm_order_name, partner_id, 
            partner_revenue_share, flight_id, flight_impressions, flight_clicks, 
            flight_metric, flight_rate, flight_budget, flight_start_date, 
            flight_end_date, verve_rate, booked_rate, billable_rate, impressions, 
            clicks, revenue, gross_revenue, billable_revenue, p_net_revenue, 
            v_net_revenue, delivered_units, total_num_of_days_in_billing_period, 
            booked_units, total_units_up_to_month, partner_units_share, remaining_units, 
            partner_remaining_units, billable_units, partner_billable_units, is_active, process_id)
SELECT 	    a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk
          , a.month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), a.data_source, a.network_id, COALESCE(c.dfp_advertiser_id,-100)
          , COALESCE(c.dfp_advertiser_name,'N/A'), a.adm_order_id, b.name_current, a.partner_id
          , 0 as partner_revenue_share, a.flight_id, a.flight_impressions, a.flight_clicks
          , lower(a.flight_metric), a.flight_rate, a.flight_budget, a.flight_start_date
          , a.flight_end_date, 0 as verve_rate, 0 as booked_rate, 0 as billable_rate, sum(a.impressions)
          , sum(a.clicks), sum(a.revenue), sum(a.revenue), sum(a.revenue), 0 as p_net_revenue
          , 0 as v_net_revenue, 0 as delivered_units, a.total_num_of_days_in_billing_period
          , 0 as booked_units, 0 as total_units_up_to_month, 0 as partner_units_share, 0 as remaining_units
          , 0 as partner_remaining_units, 0 as billable_units, 0 as partner_billable_units, true, p_process_id
FROM adm.monthly_agg_adm_dbclk_revenue_v4 a
LEFT JOIN (
   SELECT order_id, name_current FROM (
       SELECT order_id, name_current FROM refer.adm_dim_orders WHERE dt_expire='9999-12-31'
       UNION
       SELECT order_id, name_current FROM refer.adm_order_dim a WHERE a.dt_expire = '9999-12-31'
       AND NOT EXISTS (SELECT 1 FROM refer.adm_dim_orders b WHERE b.dt_expire = '9999-12-31' AND b.order_id = a.order_id)
   ) a
   GROUP BY order_id, name_current
) b ON b.order_id = a.adm_order_id
LEFT JOIN (
       SELECT 1 as data_source, dc_order_id as dfp_order_id, advertiser_id as dfp_advertiser_id, advertiser_name_current as dfp_advertiser_name
       FROM refer.dc_order_dim WHERE dt_expire='9999-12-31'
       UNION
       SELECT 2 as data_source, a.order_id as dfp_order_id, a.advertiser_id as dfp_advertiser_id, b.short_name_current as dfp_advertiser_name
       FROM refer.dfp_dim_orders a
       LEFT JOIN refer.dfp_dim_advertisers b ON b.dt_expire = '9999-12-31' AND b.advertiser_id = a.advertiser_id
       WHERE a.dt_expire = '9999-12-31'
) c ON c.dfp_order_id = a.dc_order_id AND c.data_source = a.data_source
WHERE a.is_active = true AND a.month_since_2005 = v_month_since_2005 AND a.network_id IN (2,4)
GROUP BY 
  a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk, a.month_since_2005
, a.data_source, a.network_id, c.dfp_advertiser_id, c.dfp_advertiser_name, a.adm_order_id, b.name_current
, a.partner_id, a.flight_id, a.flight_impressions, a.flight_clicks, lower(a.flight_metric), a.flight_rate
, a.flight_budget, a.flight_start_date, a.flight_end_date, a.total_num_of_days_in_billing_period
;

-- RPTPS-424 [ADM1.0/ADM2.0] running the same flights
-- When flight metric is Sponsorship run on both 1.0/2.0, we will set flight budget is 0 on 2.0
-- ==== Added by tho.hoang on Jul 10 2013
-- RPT-330 Verify ADM 1.0 starts with be reflected in the reporting ui
-- For sponsorship: 
-- ADM_DFP1.0: we will set flight.budget = 0 while calculating revenue for flights exist in both.
-- ADM_DFP2.0: we will set flight.budget = ADM1.0.budget and flight.start_date = ADM1.0.start_date
--             while calculating revenue for flights exist in both.
-- Removed business rule on RPTPS-424

RAISE NOTICE '% - Sponsorship Issue Handling ...',timeofday();
-- ADM_DFP1.0: we will set flight.budget = 0
UPDATE billing.ba_monthly_national_revenue_v5 a
SET flight_budget = 0
FROM (
     -- Real flights are sponsorship run on ADM 2.0
     SELECT flight_id
     FROM   billing.ba_monthly_national_revenue_v5
     WHERE process_id = 102
       AND flight_metric = 'sponsorship'
       AND month_since_2005 = 102
       AND data_source = 2
     GROUP BY flight_id
) b
WHERE a.process_id = p_process_id
  AND a.month_since_2005 = v_month_since_2005
  AND a.flight_metric = 'sponsorship'
  AND a.data_source = 1
  AND a.flight_id = b.flight_id
;
-- ADM_DFP2.0: we will set flight.budget = ADM1.0.budget and flight.start_date = ADM1.0.start_date
UPDATE billing.ba_monthly_national_revenue_v5 a
SET flight_budget = b.budget
  , flight_start_date = b.start_date
FROM (
      -- Flights are sponsorship in ADM 1.0 
      SELECT a.flight_id, a.budget, a.start_date
      FROM   refer.adm_flight_dim a 
      WHERE  a.dt_expire = '9999-12-31' 
        AND lower(a.metric) = 'sponsorship'
) b
WHERE a.process_id = p_process_id
  AND a.month_since_2005 = v_month_since_2005
  AND a.flight_metric = 'sponsorship'
  AND a.data_source = 2
  AND a.flight_id = b.flight_id
;

RAISE NOTICE '% - delivered_units Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET delivered_units = CASE
                          WHEN flight_metric = 'cpm' THEN impressions
                          WHEN flight_metric = 'sponsorship' THEN impressions
                          WHEN flight_metric = 'cpc' THEN clicks
                          ELSE 0
                      END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_units Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET booked_rate = CASE
                      WHEN flight_metric = 'cpm' THEN flight_rate
                      WHEN flight_metric = 'sponsorship' THEN 0
                      WHEN flight_metric = 'cpc' THEN flight_rate
                      ELSE 0
                  END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - total_units_up_to_month Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET total_units_up_to_month = b.total_units_up_to_month
FROM (
       SELECT flight_id, case when flight_metric = 'cpc' then sum(clicks) else sum(impressions) end as total_units_up_to_month
       FROM adm.monthly_agg_adm_dbclk_revenue_v4
       WHERE is_active = true
         AND month_since_2005 <= v_month_since_2005
         AND network_id IN (2,4)
       GROUP BY flight_id, flight_metric
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_units DFP 1.0 Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_flight_dim a, refer.date_dim b
       WHERE a.dt_effective::date <= b.full_date
         AND b.date_sk = v_date_sk_end 
         AND a.network_id IN (2,4)
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND a.data_source = 1
;

RAISE NOTICE '% - booked_units DFP 2.0 Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_dim_flights a, refer.date_dim b
       WHERE a.dt_effective::date <= b.full_date
         AND b.date_sk = v_date_sk_end 
         AND a.network_id IN (2,4)
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND a.data_source = 2
;

RAISE NOTICE '% - remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET remaining_units = booked_units - total_units_up_to_month
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_impressions 
                         WHEN remaining_units < 0 AND (remaining_units + flight_impressions) > 0 THEN (remaining_units + flight_impressions) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpm'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_national_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_clicks 
                         WHEN remaining_units < 0 AND (remaining_units + flight_clicks) > 0 THEN (remaining_units + flight_clicks) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpc'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_national_revenue_v5 a
SET billable_units = flight_impressions
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_units_share Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_impressions
WHERE process_id = p_process_id
  AND flight_impressions > 0
  AND flight_metric <> 'cpc'
  AND month_since_2005=v_month_since_2005
;

UPDATE billing.ba_monthly_national_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_clicks
WHERE process_id = p_process_id
  AND flight_clicks > 0
  AND flight_metric = 'cpc'
  AND month_since_2005=v_month_since_2005
;

RAISE NOTICE '% - partner_remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET partner_remaining_units = partner_units_share * remaining_units
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET partner_billable_units = (CASE 
                                 WHEN a.remaining_units >= 0 THEN delivered_units
                                 WHEN a.remaining_units < 0 THEN partner_units_share * billable_units 
                                 ELSE 0 
                             END)
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_national_revenue_v5 a
SET partner_billable_units = delivered_units
WHERE a.process_id = p_process_id
  AND a.flight_metric = 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - gross_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET gross_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * booked_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * booked_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

/*Added by thohoang for RPT-303 on Oct 08, 2012 */
/*
1) Make a new column called "Billable CPM" - This will be the same as the Booked CPM, except for VLM campaigns, 
       where it will be set to $5.00 for CPM and $1.0 for CPC. 
2) Make a new column called "Billable Revenue" - This will be calculated the same as Gross Revenue except that it will use the "Billable CPM" for it's calculation. 
3) The "Net Revenue" calculation should be changed to use the ("Billable Revenue" * Pub Rev Share) rather than the "Gross Revenue". 
*/

RAISE NOTICE '% - billable_rate Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET billable_rate = (CASE 
                         WHEN network_id = 4 THEN
                             CASE flight_metric
                                 WHEN 'cpm' THEN
                                     CASE
                                         WHEN booked_rate >= 5 THEN 5.0
                                         ELSE booked_rate
                                     END
                                 WHEN 'cpc' THEN
                                     CASE
                                         WHEN booked_rate >= 1 THEN 1.0
                                         ELSE booked_rate
                                     END
                             END
                         ELSE booked_rate 
                     END)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET billable_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * billable_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * billable_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - revenue share Updating...',timeofday();

/* update revenue share for mobileweb, channel == 11|Mobile Web */
update billing.ba_monthly_national_revenue_v5 a
set p_net_revenue = billable_revenue * b.rev_share_mobileweb_national / 100 
   ,v_net_revenue = billable_revenue * (100-b.rev_share_mobileweb_national) / 100 
   ,partner_revenue_share = b.rev_share_mobileweb_national
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and b.is_active = 1
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - verve_rate sponsorship Updating...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET verve_rate = (v_net_revenue::float / delivered_units) * 1000
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005
;

/*--RPTPS-459--*/
RAISE NOTICE '% - booked_units Updating for sponsorship...',timeofday();

UPDATE billing.ba_monthly_national_revenue_v5 a
SET booked_rate = gross_revenue/(delivered_units::double precision/1000)
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_national_revenue_v5';

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_national_revenue_v5(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_national_revenue_v5(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ba_monthly_national_revenue_v5',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION billing.fn_build_ba_monthly_national_revenue_v5(p_month_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ba_monthly_publisher_revenue_v51(integer, integer, character varying); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_publisher_revenue_v51(p_month_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: billing.fn_build_ba_monthly_publisher_revenue_v51
||
|| Author: Tho Hoang
||
|| Date: 2013-03-25
||
|| Description: 
||     BA Monthly Publisher Revenue
||
|| Parameters: 
||     - IN  p_month_sk             -- integer
||        month
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
SELECT billing.fn_build_ba_monthly_publisher_revenue_v51(98,-1000,'PS');
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_start_date_of_month DATE;
 v_end_date_of_month DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;
 v_date_sk_start INTEGER:=0;
 v_date_sk_end INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_publisher_revenue_v51(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

SELECT COUNT(1) INTO v_count FROM adm.monthly_agg_adm_dbclk_revenue_v4 WHERE month_since_2005 = p_month_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE 'adm.monthly_agg_adm_dbclk_revenue_v4 has no data %',timeofday();
	RETURN p_process_status;
END IF;

SELECT COUNT(1) INTO v_count FROM adnetwork.ba_monthly_adnetwork_summary WHERE month_since_2005 = p_month_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE 'adnetwork.ba_monthly_adnetwork_summary has no data %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
SELECT calendar_year_month, month_since_2005, date_sk_start, date_sk_end
INTO   v_calendar_year_month,v_month_since_2005, v_date_sk_start, v_date_sk_end
FROM   refer.month_dim
WHERE  month_sk = p_month_sk
LIMIT 1
;

/*get date info */
SELECT full_date INTO v_start_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_start;
SELECT full_date INTO v_end_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_end;

RAISE NOTICE '% - Delete old data on month_since_2005 = %',timeofday(),v_month_since_2005;

DELETE FROM billing.ba_monthly_publisher_revenue_v5 WHERE month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - DFP Data Inserting...',timeofday();

INSERT INTO billing.ba_monthly_publisher_revenue_v5(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, month, year, data_source, network_id, publisher_id, 
            publisher_name, partner_id, partner_name, flight_id, flight_impressions, 
            flight_clicks, flight_metric, flight_rate, flight_budget, flight_start_date, 
            flight_end_date, booked_rate, billable_rate, impressions, clicks, 
            revenue, gross_revenue, billable_revenue, partner_revenue_share, 
            p_net_revenue, v_net_revenue, delivered_units, total_num_of_days_in_billing_period, 
            booked_units, total_units_up_to_month, partner_units_share, remaining_units, 
            partner_remaining_units, billable_units, partner_billable_units, 
            cf_factor, api_revenue, is_active, process_id)
SELECT      a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk
          , a.month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), a.data_source, a.network_id, a.publisher_id
          , COALESCE(b.company_name,'N/A'), a.partner_id, COALESCE(c.name,'N/A'), a.flight_id, a.flight_impressions
          , a.flight_clicks, lower(a.flight_metric), a.flight_rate, a.flight_budget, a.flight_start_date
          , a.flight_end_date, 0 as booked_rate, 0 as billable_rate, sum(a.impressions), sum(clicks)
          , sum(a.revenue), sum(a.revenue), sum(a.revenue), 0 as partner_revenue_share
          , 0 as p_net_revenue, 0 as v_net_revenue, 0 as delivered_units, a.total_num_of_days_in_billing_period
          , 0 as booked_units, 0 as total_units_up_to_month, 0 as partner_units_share, 0 as remaining_units
          , 0 as partner_remaining_units, 0 as billable_units, 0 as partner_billable_units
          , COALESCE(m.cf_factor, 1.0) as cf_factor, 0 as api_revenue, true, p_process_id
FROM adm.monthly_agg_adm_dbclk_revenue_v4 a
LEFT JOIN refer.adm_dim_accounts b ON b.dt_expire = '9999-12-31' AND b.accounts_id = a.publisher_id
LEFT JOIN refer.partner_dim c ON c.dt_expire = '9999-12-31' AND c.partner_id = a.partner_id
LEFT JOIN refer.correction_factor_dim m ON m.adnet_id = 10 AND m.adsource_id = a.network_id AND v_end_date_of_month::date between m.start_date::date and m.end_date::date - 1 AND m.cf_type = 1
WHERE a.is_active = true AND a.month_since_2005 = v_month_since_2005 AND a.network_id IN (2,4)
GROUP BY
  a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk, a.month_since_2005
, a.data_source, a.network_id, a.publisher_id, COALESCE(b.company_name,'N/A'), a.partner_id, COALESCE(c.name,'N/A')
, a.flight_id, a.flight_impressions, a.flight_clicks, lower(a.flight_metric), a.flight_rate
, a.flight_budget, a.flight_start_date, a.flight_end_date, a.total_num_of_days_in_billing_period, COALESCE(m.cf_factor, 1.0)
;

-- RPTPS-424 [ADM1.0/ADM2.0] running the same flights
-- When flight metric is Sponsorship run on both 1.0/2.0, we will set flight budget is 0 on 2.0
-- ==== Added by tho.hoang on Jul 10 2013
-- RPT-330 Verify ADM 1.0 starts with be reflected in the reporting ui
-- For sponsorship: 
-- ADM_DFP1.0: we will set flight.budget = 0 while calculating revenue for flights exist in both.
-- ADM_DFP2.0: we will set flight.budget = ADM1.0.budget and flight.start_date = ADM1.0.start_date
--             while calculating revenue for flights exist in both.
-- Removed business rule on RPTPS-424

RAISE NOTICE '% - Sponsorship Issue Handling ...',timeofday();
-- ADM_DFP1.0: we will set flight.budget = 0
UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET flight_budget = 0
FROM (
     -- Real flights are sponsorship run on ADM 2.0
     SELECT flight_id
     FROM   billing.ba_monthly_publisher_revenue_v5
     WHERE process_id = 102
       AND flight_metric = 'sponsorship'
       AND month_since_2005 = 102
       AND data_source = 2
     GROUP BY flight_id
) b
WHERE a.process_id = p_process_id
  AND a.month_since_2005 = v_month_since_2005
  AND a.flight_metric = 'sponsorship'
  AND a.data_source = 1
  AND a.flight_id = b.flight_id
;
-- ADM_DFP2.0: we will set flight.budget = ADM1.0.budget and flight.start_date = ADM1.0.start_date
UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET flight_budget = b.budget
  , flight_start_date = b.start_date
FROM (
      -- Flights are sponsorship in ADM 1.0 
      SELECT a.flight_id, a.budget, a.start_date
      FROM   refer.adm_flight_dim a 
      WHERE  a.dt_expire = '9999-12-31' 
        AND lower(a.metric) = 'sponsorship'
) b
WHERE a.process_id = p_process_id
  AND a.month_since_2005 = v_month_since_2005
  AND a.flight_metric = 'sponsorship'
  AND a.data_source = 2
  AND a.flight_id = b.flight_id
;

RAISE NOTICE '% - delivered_units Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET delivered_units = CASE
                          WHEN flight_metric = 'cpm' THEN impressions
                          WHEN flight_metric = 'sponsorship' THEN impressions
                          WHEN flight_metric = 'cpc' THEN clicks
                          ELSE 0
                      END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;
RAISE NOTICE '% - booked_units Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET booked_rate = CASE
                      WHEN flight_metric = 'cpm' THEN flight_rate
                      WHEN flight_metric = 'sponsorship' THEN 0
                      WHEN flight_metric = 'cpc' THEN flight_rate
                      ELSE 0
                  END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - total_units_up_to_month Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET total_units_up_to_month = b.total_units_up_to_month
FROM (
       SELECT flight_id, case when flight_metric = 'cpc' then sum(clicks) else sum(impressions) end as total_units_up_to_month
       FROM adm.monthly_agg_adm_dbclk_revenue_v4
       WHERE is_active = true
         AND month_since_2005 <= v_month_since_2005
         AND network_id IN (2,4)
       GROUP BY flight_id, flight_metric
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.month_since_2005 = v_month_since_2005
;
RAISE NOTICE '% - booked_units DFP 1.0 Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_flight_dim a, refer.date_dim b
       WHERE a.dt_effective::date <= b.full_date
         AND b.date_sk = v_date_sk_end 
         AND a.network_id IN (2,4)
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND data_source = 1
;
RAISE NOTICE '% - booked_units DFP 2.0 Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_dim_flights a, refer.date_dim b
       WHERE a.dt_effective::date <= b.full_date
         AND b.date_sk = v_date_sk_end 
         AND a.network_id IN (2,4)
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND data_source = 2
;

RAISE NOTICE '% - remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET remaining_units = booked_units - total_units_up_to_month
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_impressions 
                         WHEN remaining_units < 0 AND (remaining_units + flight_impressions) > 0 THEN (remaining_units + flight_impressions) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpm'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_clicks 
                         WHEN remaining_units < 0 AND (remaining_units + flight_clicks) > 0 THEN (remaining_units + flight_clicks) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpc'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET billable_units = flight_impressions
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_units_share Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_impressions
WHERE process_id = p_process_id
  AND flight_impressions > 0
  AND flight_metric <> 'cpc'
  AND month_since_2005=v_month_since_2005
;

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_clicks
WHERE process_id = p_process_id
  AND flight_clicks > 0
  AND flight_metric = 'cpc'
  AND month_since_2005=v_month_since_2005
;

RAISE NOTICE '% - partner_remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET partner_remaining_units = partner_units_share * remaining_units
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET partner_billable_units = (CASE 
                                 WHEN a.remaining_units >= 0 THEN delivered_units
                                 WHEN a.remaining_units < 0 THEN partner_units_share * billable_units 
                                 ELSE 0 
                             END)
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET partner_billable_units = delivered_units
WHERE a.process_id = p_process_id
  AND a.flight_metric = 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - gross_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET gross_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * booked_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * booked_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;


/*Added by thohoang for RPT-303 on Oct 08, 2012 */
/*
1) Make a new column called "Billable CPM" - This will be the same as the Booked CPM, except for VLM campaigns, 
       where it will be set to $5.00 for CPM and $1.0 for CPC. 
2) Make a new column called "Billable Revenue" - This will be calculated the same as Gross Revenue except that it will use the "Billable CPM" for it's calculation. 
3) The "Net Revenue" calculation should be changed to use the ("Billable Revenue" * Pub Rev Share) rather than the "Gross Revenue". 
*/

RAISE NOTICE '% - billable_rate Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET billable_rate = (CASE 
                         WHEN network_id = 4 THEN
                             CASE flight_metric
                                 WHEN 'cpm' THEN
                                     CASE
                                         WHEN booked_rate >= 5 THEN 5.0
                                         ELSE booked_rate
                                     END
                                 WHEN 'cpc' THEN
                                     CASE
                                         WHEN booked_rate >= 1 THEN 1.0
                                         ELSE booked_rate
                                     END
                             END
                         ELSE booked_rate 
                     END)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET billable_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * billable_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * billable_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '###### % - END - DFP REVENUE',timeofday();

--###############################################################################################################

RAISE NOTICE '% - 3rd Party Data Inserting...',timeofday();

INSERT INTO billing.ba_monthly_publisher_revenue_v5(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, month, year, data_source, network_id, publisher_id, 
            publisher_name, partner_id, partner_name, flight_id, flight_impressions, 
            flight_clicks, flight_metric, flight_rate, flight_budget, flight_start_date, 
            flight_end_date, booked_rate, billable_rate, impressions, clicks, 
            revenue, gross_revenue, billable_revenue, partner_revenue_share, 
            p_net_revenue, v_net_revenue, delivered_units, total_num_of_days_in_billing_period, 
            booked_units, total_units_up_to_month, partner_units_share, remaining_units, 
            partner_remaining_units, billable_units, partner_billable_units, 
            cf_factor, api_revenue, is_active, process_id)
SELECT      v_calendar_year_month, v_date_sk_start, v_date_sk_end
          , v_month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), 3 as data_source, 3 as network_id, COALESCE(b.publisher_id, -100)
          , COALESCE(d.company_name, 'N/A'), g.partner_id, g.partner_name, -100 as flight_id, 0 as flight_impressions
          , 0 as flight_clicks, 'N/A' as flight_metric, 0 as flight_rate, 0 as flight_budget, '9999-12-31' as flight_start_date
          , '9999-12-31' as flight_end_date, 0 as booked_rate, 0 as billable_rate, SUM(paid_impressions), SUM(clicks)
          , SUM(gross_revenue), SUM(gross_revenue), sum(g.gross_revenue), 0 as partner_revenue_share
          , 0 as p_net_revenue, 0 as v_net_revenue, SUM(paid_impressions) as delivered_units, 0
          , 0 as booked_units, 0 as total_units_up_to_month, 0 as partner_units_share, 0 as remaining_units
          , 0 as partner_remaining_units, 0 as billable_units, 0 as partner_billable_units
          , g.cf_factor, 0 as api_revenue, true, p_process_id
FROM (
/* AdSense DBCLK Channel */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case impressions_delivered when -1 then null else impressions_delivered end),0) as paid_impressions,
            COALESCE(SUM(case clicks_recorded when -1 then null else clicks_recorded end),0) as clicks,
            COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_adsense_dbclk_channel a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = -101 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* City Grid/City Grid Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_cg_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 29 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* City Grid Mobile = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_cg_mobile_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 38 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* iTunes */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case impressions when -1 then null else impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_it_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = -102 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* JumpTap = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),-1) as clicks,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_jt_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 11 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* Millennial Media = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_mm_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 4 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1  and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* Marchex/Marchex Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_mx_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 28 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* Superpages Blue/Superpages Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_sp_blue_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 30 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* Where = replace paid_impressions by displayed_impressions */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(case displayed_impressions when -1 then null else displayed_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicked when -1 then null else clicked end),0) as clicked,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_wh_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 25 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* AT&T Yellowpages = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_yp_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 33 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* AT&T Static Banner Yellowpages = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_yp_sb_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 32 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* AT&T No Logo Yellowpages = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_yp_no_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 33 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
UNION ALL
/* KlickThur = replace paid_impressions by fullfilled_code_y */
SELECT      partner_id, partner_name, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case gross_revenue when -1 then null else gross_revenue end),0)::NUMERIC,3) as gross_revenue,
            (CASE WHEN b.cf_factor IS NOT NULL THEN b.cf_factor ELSE 1 END) as cf_factor
FROM        adnetwork.ba_monthly_kt_performance a
LEFT JOIN   refer.correction_factor_dim b ON b.adnet_id = 35 and b.adsource_id = 3 and v_end_date_of_month between b.start_date::date and b.end_date::date - 1 and b.cf_type = 1
WHERE       a.is_active = true AND a.month_since_2005 = v_month_since_2005
GROUP BY    partner_id, partner_name, portal_id, b.cf_factor
) g
LEFT JOIN  refer.adm_dim_properties b ON b.dt_expire = '9999-12-31' AND b.partner_id = g.partner_id
LEFT JOIN  refer.adm_mapping_portals c ON c.dt_expire = '9999-12-31' AND c.portal_id = g.portal_id
LEFT JOIN refer.adm_dim_accounts d ON d.dt_expire = '9999-12-31' AND d.accounts_id = b.publisher_id
GROUP BY   COALESCE(b.publisher_id, -100), COALESCE(d.company_name, 'N/A'), g.partner_id, g.partner_name, g.cf_factor
;

RAISE NOTICE '% - partner_revenue_share Updating...',timeofday();

/* update revenue share for mobileweb, channel == 11|Mobile Web */
update billing.ba_monthly_publisher_revenue_v5 a
set partner_revenue_share = case 
                                when network_id = 3 then b.rev_share_mobileweb_mediation::float / 100 
                                when network_id = 2 then b.rev_share_mobileweb_national::float / 100
                                when network_id = 4 then b.rev_share_mobileweb_national::float / 100
                                else 0
                            end
   ,p_net_revenue = case 
                      when network_id = 3 then billable_revenue * b.rev_share_mobileweb_mediation / 100 
                      when network_id = 2 then billable_revenue * b.rev_share_mobileweb_national / 100
                      when network_id = 4 then billable_revenue * b.rev_share_mobileweb_national / 100
                  end
   ,v_net_revenue = case 
                      when network_id = 3 then billable_revenue * (100 - b.rev_share_mobileweb_mediation) / 100 
                      when network_id = 2 then billable_revenue * (100 - b.rev_share_mobileweb_national) / 100
                      when network_id = 4 then billable_revenue * (100 - b.rev_share_mobileweb_national) / 100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and b.is_active = 1
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - api_revenue Updating...',timeofday();

/* update api_revenue */
update billing.ba_monthly_publisher_revenue_v5 a
set api_revenue = case 
                      when p_net_revenue IS NOT NULL then p_net_revenue * cf_factor 
                  end
where a.process_id = p_process_id AND a.month_since_2005 = v_month_since_2005;

/* update adjusted_billable_revenue */
update billing.ba_monthly_publisher_revenue_v5 a
set adjusted_billable_revenue = billable_revenue * cf_factor
where a.process_id = p_process_id AND a.month_since_2005 = v_month_since_2005;


/*--RPTPS-459--*/
RAISE NOTICE '% - booked_units Updating for sponsorship...',timeofday();

UPDATE billing.ba_monthly_publisher_revenue_v5 a
SET booked_rate = gross_revenue/(delivered_units::double precision/1000)
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005;



/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ba_monthly_publisher_revenue_v51';

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_publisher_revenue_v51(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_publisher_revenue_v51(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ba_monthly_publisher_revenue_v51',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION billing.fn_build_ba_monthly_publisher_revenue_v51(p_month_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ba_monthly_vlm_revenue_v51(integer, integer, character varying); Type: FUNCTION; Schema: billing; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ba_monthly_vlm_revenue_v51(p_month_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: billing.fn_build_ba_monthly_vlm_revenue_v51
||
|| Author: Nhut Le
||
|| Date: 2013-04-10
||
|| Description: 
||     BA Monthly VLM Revenue
||
|| Parameters: 
||     - IN  p_month_sk             -- integer
||        month
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_start_date_of_month DATE;
 v_end_date_of_month DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;
 v_date_sk_start INTEGER:=0;
 v_date_sk_end INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % billing.fn_build_ba_monthly_vlm_revenue_v51(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

SELECT COUNT(1) INTO v_count FROM adm.monthly_agg_adm_dbclk_revenue_v4 WHERE month_since_2005 = p_month_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE 'adm.monthly_agg_adm_dbclk_revenue_v4 has no data %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
SELECT calendar_year_month, month_since_2005, date_sk_start, date_sk_end
INTO   v_calendar_year_month,v_month_since_2005, v_date_sk_start, v_date_sk_end
FROM   refer.month_dim
WHERE  month_sk = p_month_sk
LIMIT 1
;

/*get date info */
SELECT full_date INTO v_start_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_start;
SELECT full_date INTO v_end_date_of_month FROM refer.date_dim WHERE date_sk = v_date_sk_end;

RAISE NOTICE '% - Delete old data on month_since_2005 = %',timeofday(),v_month_since_2005;

DELETE FROM billing.ba_monthly_vlm_revenue_v5 WHERE month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - Data Inserting... network 4,6',timeofday();

/*the publisher name derived from order->publisher_id->publisher_name. 
It is considered as input publisher that John will send the bill to ( Pay for). 
This means who make the order to Verve
*/
INSERT INTO billing.ba_monthly_vlm_revenue_v5(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, "month", "year", data_source, network_id, dfp_advertiser_id, 
            dfp_advertiser_name, adm_order_id, adm_order_name, publisher_id, 
            publisher_name, partner_id, partner_revenue_share, flight_id, 
            flight_impressions, flight_clicks, flight_metric, flight_rate, 
            flight_budget, flight_start_date, flight_end_date, verve_rate, 
            booked_rate, billable_rate, impressions, clicks, revenue, gross_revenue, 
            billable_revenue, p_net_revenue, v_net_revenue, delivered_units, 
            total_num_of_days_in_billing_period, booked_units, total_units_up_to_month, 
            partner_units_share, remaining_units, partner_remaining_units, 
            billable_units, partner_billable_units, is_active, process_id)
SELECT 	    a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk
          , a.month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), a.data_source, a.network_id, COALESCE(c.dfp_advertiser_id,-100)
          , COALESCE(c.dfp_advertiser_name,'N/A'), a.adm_order_id, b.name_current, b.publisher_id
          , b.publisher_name, a.partner_id, 0 as partner_revenue_share, a.flight_id
          , a.flight_impressions, a.flight_clicks, lower(a.flight_metric), a.flight_rate
          , a.flight_budget, a.flight_start_date, a.flight_end_date, 0 as verve_rate
          , 0 as booked_rate, 0 as billable_rate, sum(a.impressions), sum(a.clicks), sum(a.revenue), sum(a.revenue)
          , sum(a.revenue), 0 as p_net_revenue, 0 as v_net_revenue, 0 as delivered_units
          , a.total_num_of_days_in_billing_period, -1 as booked_units, 0 as total_units_up_to_month
          , 0 as partner_units_share, 0 as remaining_units, 0 as partner_remaining_units
          , 0 as billable_units, 0 as partner_billable_units, true, p_process_id
FROM adm.monthly_agg_adm_dbclk_revenue_v4 a
LEFT JOIN (
       SELECT a.*, COALESCE(b.company_name_current ,'N/A') as publisher_name
	from (
	SELECT order_id, name_current, publisher_id FROM refer.adm_dim_orders WHERE dt_expire='9999-12-31'
        UNION
        SELECT order_id, name_current,publisher_id FROM refer.adm_order_dim a WHERE a.dt_expire = '9999-12-31'
        AND NOT EXISTS (SELECT 1 FROM refer.adm_dim_orders b WHERE b.dt_expire = '9999-12-31' AND b.order_id = a.order_id)
	) a
	LEFT JOIN refer.adm_dim_accounts b ON b.dt_expire = '9999-12-31' AND b.accounts_id = a.publisher_id
) b ON b.order_id = a.adm_order_id
LEFT JOIN (
       SELECT 1 as data_source, dc_order_id as dfp_order_id, advertiser_id as dfp_advertiser_id, advertiser_name_current as dfp_advertiser_name
       FROM refer.dc_order_dim WHERE dt_expire='9999-12-31'
       UNION
       SELECT 2 as data_source, a.order_id as dfp_order_id, a.advertiser_id as dfp_advertiser_id, b.short_name_current as dfp_advertiser_name
       FROM refer.dfp_dim_orders a
       LEFT JOIN refer.dfp_dim_advertisers b ON b.dt_expire = '9999-12-31' AND b.advertiser_id = a.advertiser_id
       WHERE a.dt_expire = '9999-12-31'
) c ON c.dfp_order_id = a.dc_order_id AND c.data_source = a.data_source
WHERE a.is_active = true AND a.month_since_2005 = v_month_since_2005 AND a.network_id IN (4,6)
GROUP BY a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk, a.month_since_2005
       , a.data_source, a.network_id, c.dfp_advertiser_id, c.dfp_advertiser_name, a.adm_order_id, b.name_current
       , b.publisher_id, b.publisher_name, a.partner_id, a.flight_id, a.flight_impressions, a.flight_clicks
       , lower(a.flight_metric), a.flight_rate, a.flight_budget, a.flight_start_date, a.flight_end_date, a.total_num_of_days_in_billing_period
;

RAISE NOTICE '% - Data Inserting... network 1 + Agency',timeofday();
/*the publisher name derived from order->publisher_id->publisher_name. 
It is considered as input publisher that John will send the bill to ( Pay for). 
This means who make the order to Verve
- include account is 'Agency' only
*/

INSERT INTO billing.ba_monthly_vlm_revenue_v5(
            calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, 
            month_since_2005, "month", "year", data_source, network_id, dfp_advertiser_id, 
            dfp_advertiser_name, adm_order_id, adm_order_name, publisher_id, 
            publisher_name, partner_id, partner_revenue_share, flight_id, 
            flight_impressions, flight_clicks, flight_metric, flight_rate, 
            flight_budget, flight_start_date, flight_end_date, verve_rate, 
            booked_rate, billable_rate, impressions, clicks, revenue, gross_revenue, 
            billable_revenue, p_net_revenue, v_net_revenue, delivered_units, 
            total_num_of_days_in_billing_period, booked_units, total_units_up_to_month, 
            partner_units_share, remaining_units, partner_remaining_units, 
            billable_units, partner_billable_units, is_active, process_id)
SELECT 	    a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk
          , a.month_since_2005, to_char(v_end_date_of_month, 'Mon'), EXTRACT(YEAR FROM v_end_date_of_month), a.data_source, a.network_id, COALESCE(c.dfp_advertiser_id,-100)
          , COALESCE(c.dfp_advertiser_name,'N/A'), a.adm_order_id, b.name_current, b.publisher_id
          , b.publisher_name, a.partner_id, 0 as partner_revenue_share, a.flight_id
          , a.flight_impressions, a.flight_clicks, lower(a.flight_metric), a.flight_rate
          , a.flight_budget, a.flight_start_date, a.flight_end_date, 0 as verve_rate
          , 0 as booked_rate, 0 as billable_rate, sum(impressions), sum(clicks), sum(revenue), sum(revenue)
          , 0 as billable_revenue, 0 as p_net_revenue, 0 as v_net_revenue, 0 as delivered_units
          , a.total_num_of_days_in_billing_period, -1 as booked_units, 0 as total_units_up_to_month
          , 0 as partner_units_share, 0 as remaining_units, 0 as partner_remaining_units
          , 0 as billable_units, 0 as partner_billable_units , true, p_process_id
FROM adm.monthly_agg_adm_dbclk_revenue_v4 a
INNER JOIN (
        SELECT a.*, COALESCE(b.company_name_current ,'N/A') as publisher_name
	FROM (
	SELECT order_id, name_current, publisher_id FROM refer.adm_dim_orders WHERE dt_expire='9999-12-31'
        UNION
        SELECT order_id, name_current, publisher_id FROM refer.adm_order_dim a WHERE a.dt_expire = '9999-12-31'
        AND NOT EXISTS (SELECT 1 FROM refer.adm_dim_orders b WHERE b.dt_expire = '9999-12-31' AND b.order_id = a.order_id)
	) a
	INNER JOIN refer.adm_dim_accounts b ON b.dt_expire = '9999-12-31' AND lower(b.type) = 'agency' AND b.accounts_id = a.publisher_id
) b ON b.order_id = a.adm_order_id
LEFT JOIN (
       SELECT 1 as data_source, dc_order_id as dfp_order_id, advertiser_id as dfp_advertiser_id, advertiser_name_current as dfp_advertiser_name
       FROM refer.dc_order_dim WHERE dt_expire='9999-12-31'
       UNION
       SELECT 2 as data_source, a.order_id as dfp_order_id, a.advertiser_id as dfp_advertiser_id, b.short_name_current as dfp_advertiser_name
       FROM refer.dfp_dim_orders a
       LEFT JOIN refer.dfp_dim_advertisers b ON b.dt_expire = '9999-12-31' AND b.advertiser_id = a.advertiser_id
       WHERE a.dt_expire = '9999-12-31'
) c ON c.dfp_order_id = a.dc_order_id AND c.data_source = a.data_source
WHERE a.is_active = true AND a.month_since_2005 = v_month_since_2005 AND a.network_id IN (1)
GROUP BY 
  a.calendar_year_month, a.eastern_start_date_sk, a.eastern_end_date_sk, a.month_since_2005
, a.data_source, a.network_id, c.dfp_advertiser_id, c.dfp_advertiser_name, a.adm_order_id
, b.name_current, b.publisher_id, b.publisher_name, a.partner_id, a.flight_id, a.flight_impressions
, a.flight_clicks, lower(a.flight_metric), a.flight_rate, a.flight_budget, a.flight_start_date
, a.flight_end_date, a.total_num_of_days_in_billing_period
;

RAISE NOTICE '% - Updating Advertiser Name...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET dfp_advertiser_name = b.dfp_advertiser_name
FROM (
        SELECT flight_id, dfp_advertiser_name
        FROM billing.ba_monthly_vlm_revenue_v5
        WHERE data_source = 1
          AND month_since_2005 = v_month_since_2005
) b
WHERE a.data_source = 2
  AND b.flight_id = a.flight_id
  AND month_since_2005 = v_month_since_2005;

RAISE NOTICE '% - delivered_units Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET delivered_units = CASE
                          WHEN flight_metric = 'cpm' THEN impressions
                          WHEN flight_metric = 'sponsorship' THEN impressions
                          WHEN flight_metric = 'cpc' THEN clicks
                          ELSE 0
                      END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_units Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET booked_rate = CASE
                      WHEN flight_metric = 'cpm' THEN flight_rate
                      WHEN flight_metric = 'sponsorship' THEN 0
                      WHEN flight_metric = 'cpc' THEN flight_rate
                      ELSE 0
                  END
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - total_units_up_to_month Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET total_units_up_to_month = b.total_units_up_to_month
FROM (
       SELECT flight_id, case when flight_metric = 'cpc' then sum(clicks) else sum(impressions) end as total_units_up_to_month
       FROM adm.monthly_agg_adm_dbclk_revenue_v4
       WHERE is_active = true
         AND month_since_2005 <= v_month_since_2005
         AND network_id IN (1,4,6)
       GROUP BY flight_id, flight_metric
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - booked_units DFP 1.0 Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_flight_dim a
       WHERE a.dt_effective::date <= v_end_date_of_month
         AND lower(a.metric) <> 'sponsorship'
         AND a.network_id IN (1,4,6)
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND a.booked_units = -1
;

RAISE NOTICE '% - booked_units DFP 2.0 Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET booked_units = b.booked_units
FROM (
       SELECT a.flight_id, max(a.quantity) as booked_units 
       FROM  refer.adm_dim_flights a
       WHERE a.dt_effective::date <= v_end_date_of_month
         AND lower(a.metric) <> 'sponsorship'
         AND a.network_id IN (1,4,6)
       GROUP BY a.flight_id
) b
WHERE a.process_id = p_process_id
  AND a.flight_id = b.flight_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
  AND a.booked_units = -1
;

RAISE NOTICE '% - booked_units sponsorship Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET booked_units = 0
WHERE a.process_id = p_process_id
  AND a.flight_metric = 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET remaining_units = booked_units - total_units_up_to_month
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_impressions 
                         WHEN remaining_units < 0 AND (remaining_units + flight_impressions) > 0 THEN (remaining_units + flight_impressions) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpm'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET billable_units = (CASE
                         WHEN remaining_units >=0 THEN flight_clicks 
                         WHEN remaining_units < 0 AND (remaining_units + flight_clicks) > 0 THEN (remaining_units + flight_clicks) 
                         ELSE 0 
                     END)
WHERE process_id = p_process_id
  AND flight_metric = 'cpc'
  AND month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET billable_units = flight_impressions
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_units_share Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_impressions
WHERE process_id = p_process_id
  AND flight_impressions > 0
  AND flight_metric <> 'cpc'
  AND month_since_2005=v_month_since_2005
;

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET partner_units_share = delivered_units::float / flight_clicks
WHERE process_id = p_process_id
  AND flight_clicks > 0
  AND flight_metric = 'cpc'
  AND month_since_2005=v_month_since_2005
;

RAISE NOTICE '% - partner_remaining_units Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET partner_remaining_units = partner_units_share * remaining_units
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - partner_billable_units Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET partner_billable_units = (CASE 
                                 WHEN a.remaining_units >= 0 THEN delivered_units
                                 WHEN a.remaining_units < 0 THEN partner_units_share * billable_units 
                                 ELSE 0 
                             END)
WHERE a.process_id = p_process_id
  AND a.flight_metric <> 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET partner_billable_units = delivered_units
WHERE a.process_id = p_process_id
  AND a.flight_metric = 'sponsorship'
  AND a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - gross_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET gross_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * booked_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * booked_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

/*Added by thohoang for RPT-303 on Oct 08, 2012 */
/*
1) Make a new column called "Billable CPM" - This will be the same as the Booked CPM, except for VLM campaigns, 
       where it will be set to $5.00 for CPM and $1.0 for CPC. 
2) Make a new column called "Billable Revenue" - This will be calculated the same as Gross Revenue except that it will use the "Billable CPM" for it's calculation. 
3) The "Net Revenue" calculation should be changed to use the ("Billable Revenue" * Pub Rev Share) rather than the "Gross Revenue". 
*/

RAISE NOTICE '% - billable_rate Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET billable_rate = (CASE 
                         WHEN network_id = 4 THEN
                             CASE flight_metric
                                 WHEN 'cpm' THEN
                                     CASE
                                         WHEN booked_rate >= 5 THEN 5.0
                                         ELSE booked_rate
                                     END
                                 WHEN 'cpc' THEN
                                     CASE
                                         WHEN booked_rate >= 1 THEN 1.0
                                         ELSE booked_rate
                                     END
                             END
                         ELSE booked_rate 
                     END)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - billable_revenue Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET billable_revenue = COALESCE((CASE
                                  WHEN flight_metric = 'cpm' THEN partner_billable_units::double precision * billable_rate / 1000
                                  WHEN flight_metric = 'sponsorship'
                                      THEN flight_budget::float * total_num_of_days_in_billing_period * partner_units_share / (flight_end_date::date - flight_start_date::date + 1)
                                  WHEN flight_metric = 'cpc' THEN partner_billable_units::double precision * billable_rate
                                  ELSE 0
                              END), 0)
WHERE process_id = p_process_id
  AND month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - revenue share Updating...',timeofday();

/* update revenue share for mobileweb, channel == 11|Mobile Web */
update billing.ba_monthly_vlm_revenue_v5 a
set p_net_revenue = case 
                      when network_id = 1 then billable_revenue * b.rev_share_mobileweb_local / 100 
                      when network_id = 4 then billable_revenue * b.rev_share_mobileweb_national / 100 
                      when network_id = 6 then billable_revenue * b.rev_share_mobileweb_national / 100 
                  end
   ,v_net_revenue = case 
                      when network_id = 1 then billable_revenue * (100 - b.rev_share_mobileweb_local) / 100 
                      when network_id = 4 then billable_revenue * (100 - b.rev_share_mobileweb_national) / 100
                      when network_id = 6 then billable_revenue * (100 - b.rev_share_mobileweb_national) / 100 
                  end
   ,partner_revenue_share = case 
                                when network_id = 1 then b.rev_share_mobileweb_local
                                when network_id = 4 then b.rev_share_mobileweb_national
                                when network_id = 6 then b.rev_share_mobileweb_national
                            end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and b.is_active = 1
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.month_since_2005 = v_month_since_2005
;

RAISE NOTICE '% - verve_rate sponsorship Updating...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET verve_rate = (v_net_revenue::float / delivered_units) * 1000
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005
;

/*--RPTPS-459--*/

RAISE NOTICE '% - booked_rate Updating for sponsorship...',timeofday();

UPDATE billing.ba_monthly_vlm_revenue_v5 a
SET booked_rate = gross_revenue / (delivered_units::double precision / 1000)
WHERE process_id = p_process_id
  AND flight_metric = 'sponsorship'
  AND delivered_units > 0
  AND month_since_2005 = v_month_since_2005;

RAISE DEBUG 'ENDING: % billing.fn_build_ba_monthly_vlm_revenue_v51(%,%,''%'')',timeofday(),p_month_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % billing.fn_build_ba_monthly_vlm_revenue_v51(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ba_monthly_vlm_revenue_v51',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION billing.fn_build_ba_monthly_vlm_revenue_v51(p_month_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

SET search_path = control, pg_catalog;

--
-- Name: fn_refresh_import_aggregate_data(); Type: FUNCTION; Schema: control; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_import_aggregate_data() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_import_aggregate_data()
||
|| Author: Chinh Nguyen
||
|| Date: 2013-06-24
||
||
|| Description: 
||
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||


SELECT * FROM control.fn_refresh_import_aggregate_data();
*/

DECLARE
 rec    RECORD;
 v_count integer;
 v_count_export_process_running integer;
 v_cmd character varying;
 v_max_process_running_at_a_time integer;
 v_file_name_array character varying[]='{}';
 v_data_file_config_id int;
BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_import_aggregate_data()',timeofday();
v_count_export_process_running:=0;
v_cmd:='';
v_max_process_running_at_a_time:=5;
v_data_file_config_id:=1000;

-- Load data file config id
SELECT data_file_config_id INTO v_data_file_config_id FROM control.data_file_configuration WHERE data_file_config_name='Aggregate Data File' AND data_file_config_description='Aggregate Data File' ORDER BY data_file_config_id desc LIMIT 1;

-- Count number of export process are runing
SELECT COUNT(1) INTO v_count_export_process_running FROM control.data_file WHERE file_status='PS' AND data_file_config_id=v_data_file_config_id;
IF(v_count_export_process_running=v_max_process_running_at_a_time) THEN
RETURN ;
ELSE
SELECT a.data_file_id,a.file_name,a.file_timestamp,b.import_dir,b.success_dir,b.error_dir,b.transform_script_name 
INTO rec 
FROM control.data_file a,control.data_file_configuration b
WHERE a.data_file_config_id=b.data_file_config_id
AND a.file_status='ER'
AND b.data_file_config_id=v_data_file_config_id
ORDER BY dt_file_queued 
LIMIT 1;

IF rec IS NOT NULL THEN
RAISE NOTICE 'Process data file: %',rec.data_file_id;

-- call cmd import file to table
v_cmd:='cd /home/file_xfer/bin/; perl '||rec.transform_script_name||' '||rec.data_file_id||' "'||rec.file_name||'" "'||rec.import_dir||'" "'||rec.success_dir||'" "'||rec.error_dir||'"';
v_cmd:=' SELECT * FROM staging.fn_cmd_shell('''||v_cmd||''')';
EXECUTE v_cmd;

-- move file to sucess dir
v_cmd:='mv '||rec.import_dir||rec.file_name||' '||rec.success_dir||rec.file_name;
v_cmd:=' SELECT * FROM staging.fn_cmd_shell('''||v_cmd||''')';
EXECUTE v_cmd;

UPDATE control.data_file 
SET file_status='SU'
WHERE data_file_id=rec.data_file_id;
RAISE NOTICE 'Import sucessfull';
END IF;


END IF;

RETURN ;

RAISE DEBUG 'ENDING: % fn_refresh_import_aggregate_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_import_aggregate_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_refresh_load_adcel_data',SQLSTATE,SQLERRM);
        UPDATE control.data_file 
        SET file_status='EF'
        WHERE data_file_id=rec.data_file_id;
        v_cmd:='mv '||rec.import_dir||rec.file_name||' '||rec.error_dir||rec.file_name;
        v_cmd:=' SELECT * FROM staging.fn_cmd_shell('''||v_cmd||''')';
EXECUTE v_cmd;
RETURN ;
END;
$$;


ALTER FUNCTION control.fn_refresh_import_aggregate_data() OWNER TO warehouse_dbo;

SET search_path = dbclk, pg_catalog;

--
-- Name: fn_get_site_forecast(integer, date, date); Type: FUNCTION; Schema: dbclk; Owner: warehouse_dbo
--

CREATE FUNCTION fn_get_site_forecast(p_site_id integer, p_start_date date, p_end_date date) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: dbclk.fn_get_site_forecast(integer, date, date)
||
|| Author: Tho HOANG
||
|| Date: 2011-09-05
||
|| Description: 
||     calculate the forecast reserved impressions by site in date range
||
|| Parameters: 
||     - IN  p_site_id           -- integer
||        DoubleClick's site id
||     - IN  p_start_date        -- date
||        Forecasting start date
||     - IN  p_end_date          -- date
||        Forecasting end date
||
|| Return: -- recordset
||     - Success case: forecasting by site
||     - Failure case: null
||
*/

DECLARE

 v_forecast_start_date_sk INTEGER;
 v_forecast_end_date_sk   INTEGER;
 v_forecast_day_count     INTEGER;
 v_monthly_start_date_sk  INTEGER;
 v_monthly_end_date_sk    INTEGER;
 v_avg_inventory          INTEGER;
 v_site_daily_avg         FLOAT;
 v_site_name              TEXT;
 v_current_date           DATE;
 v_order_count            INTEGER;

BEGIN

-- get current date
SELECT CURRENT_TIMESTAMP::date INTO v_current_date;

IF p_start_date < v_current_date OR p_start_date > p_end_date THEN
	RAISE DEBUG 'FAILED: % dbclk.fn_get_site_forecast(%, %, %) - Input paramenter is invalid',timeofday(),p_site_id,p_start_date,p_end_date;
	RETURN;
END IF;

/* get date range info */
SELECT date_sk INTO v_forecast_start_date_sk
FROM refer.date_dim
WHERE full_date= p_start_date;

SELECT date_sk INTO v_forecast_end_date_sk
FROM refer.date_dim
WHERE full_date= p_end_date;

v_forecast_day_count := v_forecast_end_date_sk - v_forecast_start_date_sk + 1;

/* calculate site monthly inventory (use 30 days rolling data) */
SELECT start_date_sk, end_date_sk, impressions_delivered::float/(end_date_sk - start_date_sk + 1), ((impressions_delivered::float/(end_date_sk - start_date_sk + 1))*v_forecast_day_count)::INTEGER, dart_site_name::TEXT
INTO v_monthly_start_date_sk, v_monthly_end_date_sk, v_site_daily_avg, v_avg_inventory, v_site_name
FROM dbclk.monthly_agg_site a
WHERE a.is_active = true
  AND a.month_since_2005 = 32767
  AND a.dc_site_id = p_site_id
LIMIT 1;

/* count orders in selected site */
SELECT count(order_id) INTO v_order_count
FROM dbclk.site_order_forecast_fact a
INNER JOIN refer.dc_site_dim b ON a.dc_site_sk = b.dc_site_sk
WHERE b.dc_site_id = p_site_id
  AND a.order_status = 'Approved'
  AND (  p_start_date BETWEEN a.order_start_date AND a.order_end_date
        OR p_end_date BETWEEN a.order_start_date AND a.order_end_date
      );

RAISE NOTICE 'NOTICE: v_order_count = %', v_order_count;

/* calculate forecate reversed impressions */
IF v_order_count > 0 THEN
	RETURN QUERY
	SELECT a.site_name, a.estimate_impressions, sum(a.reserved_impressions)::integer as reserved_impressions
	FROM (
	SELECT v_site_name as site_name
	     , v_avg_inventory as estimate_impressions
	     , a.order_id
	     , CASE a.ad_type
		 WHEN 'STANDARD' THEN (a.order_cpm_booked::float / ((a.order_end_date - a.order_start_date) + 1) / number_of_creatives) * (a.site_order_impressions_delivered::float / b.total_order_impressions_delivered) * v_forecast_day_count
		 WHEN 'SPONSORSHIP' THEN (a.ad_weight::float / 100) * v_site_daily_avg * v_forecast_day_count
	       ELSE 0 END AS reserved_impressions
	FROM 
	    (SELECT a.*, COALESCE(b.impressions_delivered,0) as site_order_impressions_delivered
	     FROM (
		    SELECT DISTINCT order_id, order_start_date, order_end_date, order_cpm_booked, ad_type, ad_weight
		    FROM dbclk.site_order_forecast_fact a
		    WHERE a.site_id = p_site_id
		      AND a.order_status = 'Approved'
		      AND (  p_start_date BETWEEN a.order_start_date AND a.order_end_date
			    OR p_end_date BETWEEN a.order_start_date AND a.order_end_date
			  )
	     ) a
	     INNER JOIN dbclk.site_order_forecast_fact b ON b.order_id = a. order_id
	     WHERE b.site_id = p_site_id
	       AND b.eastern_date_sk = v_monthly_end_date_sk
	    ) a
	    ,(SELECT order_id, SUM(impressions_delivered) as total_order_impressions_delivered, COUNT(DISTINCT creative_id) as number_of_creatives
	      FROM dbclk.site_order_forecast_fact 
	      WHERE eastern_date_sk = v_monthly_end_date_sk
	      GROUP BY order_id
	      HAVING sum(impressions_delivered) > 0
	      ) b
	WHERE a.order_id = b.order_id
	) a
	GROUP BY site_name, estimate_impressions
	;
/*
RETURN QUERY
SELECT a.site_name, a.estimate_impressions, sum(a.reserved_impressions)::integer as reserved_impressions
FROM (
SELECT v_site_name as site_name
     , v_avg_inventory as estimate_impressions
     , a.order_id
     , CASE a.ad_type
         WHEN 'STANDARD' THEN (a.order_cpm_booked::float / (a.order_end_date - a.order_start_date + 1) / b.site_count) * v_forecast_day_count
         WHEN 'SPONSORSHIP' THEN (a.ad_weight::float / 100) * v_site_daily_avg * v_forecast_day_count
       ELSE 0 END AS reserved_impressions
FROM 
    (SELECT DISTINCT order_id, order_start_date, order_end_date, order_cpm_booked, ad_type, ad_weight
     FROM dbclk.site_order_forecast_fact a
     INNER JOIN refer.dc_site_dim b ON a.dc_site_sk = b.dc_site_sk
     WHERE b.dc_site_id = p_site_id
       AND a.order_status = 'Approved'
       AND (  p_start_date BETWEEN a.order_start_date AND a.order_end_date
             OR p_end_date BETWEEN a.order_start_date AND a.order_end_date
            )
     ) a
    ,(SELECT order_id, count(distinct site_id) as site_count 
      FROM dbclk.site_order_forecast_fact 
      WHERE eastern_date_sk BETWEEN v_monthly_start_date_sk AND v_monthly_end_date_sk
      GROUP BY order_id
      ) b
WHERE a.order_id = b.order_id
) a
GROUP BY site_name, estimate_impressions
;
*/
ELSE
	RETURN QUERY
	SELECT v_site_name as site_name, v_avg_inventory as estimate_impressions, 0 as reserved_impressions;
END IF;

EXCEPTION
WHEN others THEN
    RAISE NOTICE 'FAILED: % dbclk.fn_get_site_forecast(%, %, %); SQLSTATE=% SQLERRM=%',timeofday(),p_site_id,p_start_date,p_end_date,SQLSTATE,SQLERRM;
    RETURN;
END;
$$;


ALTER FUNCTION dbclk.fn_get_site_forecast(p_site_id integer, p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_get_site_forecast_by_month(integer, text); Type: FUNCTION; Schema: dbclk; Owner: warehouse_dbo
--

CREATE FUNCTION fn_get_site_forecast_by_month(p_site_id integer, p_calendar_year_month text) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: dbclk.fn_get_site_forecast(integer, text)
||
|| Author: Tho HOANG
||
|| Date: 2011-09-05
||
|| Description: 
||     calculate the forecast reserved impressions by site in month
||
|| Parameters: 
||     - IN  p_site_id           -- integer
||        DoubleClick's site id
||     - IN  p_calendar_year_month        -- text
||        Forecasting month
||
|| Return: -- recordset
||     - Success case: forecasting by site
||     - Failure case: null
||
*/

DECLARE

 v_start_date_sk INTEGER;
 v_end_date_sk   INTEGER;
 v_start_full_date DATE;
 v_start_end_date DATE;

BEGIN

/* get date range in month */
SELECT date_sk_start, date_sk_end
INTO v_start_date_sk, v_end_date_sk
FROM refer.month_dim
WHERE calendar_year_month = p_calendar_year_month
LIMIT 1;

SELECT full_date INTO v_start_full_date FROM refer.date_dim WHERE date_sk = v_start_date_sk LIMIT 1;

SELECT full_date INTO v_start_end_date FROM refer.date_dim WHERE date_sk = v_end_date_sk LIMIT 1;

/* call function to calculate the forecast reserved impressions by site in date range */
RETURN QUERY
SELECT *
FROM dbclk.fn_get_site_forecast(p_site_id::integer, v_start_full_date::date, v_start_end_date::date) 
AS myschema(site_name text, estimate_impressions integer, reserved_impressions integer);

END;
$$;


ALTER FUNCTION dbclk.fn_get_site_forecast_by_month(p_site_id integer, p_calendar_year_month text) OWNER TO warehouse_dbo;

--
-- Name: fn_get_site_forecast_by_months(integer, text, text); Type: FUNCTION; Schema: dbclk; Owner: warehouse_dbo
--

CREATE FUNCTION fn_get_site_forecast_by_months(p_site_id integer, p_calendar_year_month_start text, p_calendar_year_month_end text) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: dbclk.fn_get_site_forecast_by_months(integer, text, text)
||
|| Author: Tho HOANG
||
|| Date: 2011-09-05
||
|| Description: 
||     calculate the forecast reserved impressions by site in month range
||
|| Parameters: 
||     - IN  p_site_id           -- integer
||        DoubleClick's site id
||     - IN  p_calendar_year_month_start        -- text
||        Forecasting start month
||     - IN  p_calendar_year_month_end          -- text
||        Forecasting end month
||
|| Return: -- recordset
||     - Success case: forecasting by site
||     - Failure case: null
||
*/

DECLARE

 v_start_date_sk INTEGER;
 v_end_date_sk   INTEGER;
 v_start_full_date DATE;
 v_start_end_date DATE;

BEGIN

/* get date range in month */
SELECT date_sk_start INTO v_start_date_sk FROM refer.month_dim WHERE calendar_year_month = p_calendar_year_month_start LIMIT 1;

SELECT date_sk_end INTO v_end_date_sk FROM refer.month_dim WHERE calendar_year_month = p_calendar_year_month_end LIMIT 1;

SELECT full_date INTO v_start_full_date FROM refer.date_dim WHERE date_sk = v_start_date_sk LIMIT 1;

SELECT full_date INTO v_start_end_date FROM refer.date_dim WHERE date_sk= v_end_date_sk LIMIT 1;

/* call function to calculate the forecast reserved impressions by site in date range */
RETURN QUERY
SELECT *
FROM dbclk.fn_get_site_forecast(p_site_id::integer, v_start_full_date::date, v_start_end_date::date) 
AS myschema(site_name text, estimate_impressions integer, reserved_impressions integer);

END;
$$;


ALTER FUNCTION dbclk.fn_get_site_forecast_by_months(p_site_id integer, p_calendar_year_month_start text, p_calendar_year_month_end text) OWNER TO warehouse_dbo;

--
-- Name: fn_get_sites_forecast(text, date, date); Type: FUNCTION; Schema: dbclk; Owner: warehouse_dbo
--

CREATE FUNCTION fn_get_sites_forecast(p_sites_id text, p_start_date date, p_end_date date) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: dbclk.fn_get_sites_forecast(text, date, date)
||
|| Author: Tho HOANG
||
|| Date: 2011-09-05
||
|| Description: 
||     calculate the forecast reserved impressions by sites in date range
||
|| Parameters: 
||     - IN  p_sites_id          -- text
||        DoubleClick's sites id (id1,id2,id3)
||     - IN  p_start_date        -- date
||        Forecasting start date
||     - IN  p_end_date          -- date
||        Forecasting end date
||
|| Return: -- recordset
||     - Success case: forecasting by site
||     - Failure case: null
||
*/

DECLARE

 v_current_date        DATE;
 v_cmd                 TEXT='';
 v_rec                 RECORD;

BEGIN

-- get current date
SELECT CURRENT_TIMESTAMP::date INTO v_current_date;

IF p_start_date < v_current_date OR p_start_date > p_end_date THEN
	RAISE DEBUG 'FAILED: % dbclk.fn_get_sites_forecast(%, %, %) - Input paramenter is invalid',timeofday(),p_sites_id,p_start_date,p_end_date;
	RETURN;
END IF;

/* get list of sites */
v_cmd := '
           SELECT dc_site_id, dart_site_name::text as site_name, 0::integer as estimate_impressions, 0::integer as reserved_impressions
           FROM dbclk.monthly_agg_site a
           WHERE a.is_active = true
             AND a.month_since_2005 = 32767
             AND a.dc_site_id IN (' || p_sites_id || ')
           ORDER BY dart_site_name
         ';

FOR v_rec in EXECUTE v_cmd LOOP

    SELECT site_name, estimate_impressions, reserved_impressions
    INTO v_rec.site_name, v_rec.estimate_impressions, v_rec.reserved_impressions
    FROM dbclk.fn_get_site_forecast(v_rec.dc_site_id, p_start_date, p_end_date) 
    AS myschema(site_name text, estimate_impressions integer, reserved_impressions integer);

    RETURN NEXT v_rec;
END LOOP;

EXCEPTION
WHEN others THEN
    RAISE NOTICE 'FAILED: % dbclk.fn_get_sites_forecast(%, %, %); SQLSTATE=% SQLERRM=%',timeofday(),p_sites_id,p_start_date,p_end_date,SQLSTATE,SQLERRM;
    RETURN;
END;
$$;


ALTER FUNCTION dbclk.fn_get_sites_forecast(p_sites_id text, p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

SET search_path = public, pg_catalog;

--
-- Name: addauth(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addauth(text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
$_$;


ALTER FUNCTION public.addauth(text) OWNER TO postgres;

--
-- Name: addgeometrycolumn(character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- Name: addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- Name: addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	new_type alias for $6;
	new_dim alias for $7;
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;

BEGIN

	-- Verify geometry type
	IF ( NOT ( (new_type = 'GEOMETRY') OR
			   (new_type = 'GEOMETRYCOLLECTION') OR
			   (new_type = 'POINT') OR
			   (new_type = 'MULTIPOINT') OR
			   (new_type = 'POLYGON') OR
			   (new_type = 'MULTIPOLYGON') OR
			   (new_type = 'LINESTRING') OR
			   (new_type = 'MULTILINESTRING') OR
			   (new_type = 'GEOMETRYCOLLECTIONM') OR
			   (new_type = 'POINTM') OR
			   (new_type = 'MULTIPOINTM') OR
			   (new_type = 'POLYGONM') OR
			   (new_type = 'MULTIPOLYGONM') OR
			   (new_type = 'LINESTRINGM') OR
			   (new_type = 'MULTILINESTRINGM') OR
			   (new_type = 'CIRCULARSTRING') OR
			   (new_type = 'CIRCULARSTRINGM') OR
			   (new_type = 'COMPOUNDCURVE') OR
			   (new_type = 'COMPOUNDCURVEM') OR
			   (new_type = 'CURVEPOLYGON') OR
			   (new_type = 'CURVEPOLYGONM') OR
			   (new_type = 'MULTICURVE') OR
			   (new_type = 'MULTICURVEM') OR
			   (new_type = 'MULTISURFACE') OR
			   (new_type = 'MULTISURFACEM')) )
	THEN
		RAISE EXCEPTION 'Invalid type name - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM,
	or GEOMETRYCOLLECTIONM';
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <0) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid != -1 ) THEN
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumns() - invalid SRID';
			RETURN 'fail';
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD COLUMN ' || quote_ident(column_name) ||
		' geometry ';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Delete stale record in geometry_columns (if any)
	sql := 'DELETE FROM geometry_columns WHERE
		f_table_catalog = ' || quote_literal('') ||
		' AND f_table_schema = ' ||
		quote_literal(real_schema) ||
		' AND f_table_name = ' || quote_literal(table_name) ||
		' AND f_geometry_column = ' || quote_literal(column_name);
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add record in geometry_columns
	sql := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema,f_table_name,' ||
										  'f_geometry_column,coord_dimension,srid,type)' ||
		' VALUES (' ||
		quote_literal('') || ',' ||
		quote_literal(real_schema) || ',' ||
		quote_literal(table_name) || ',' ||
		quote_literal(column_name) || ',' ||
		new_dim::text || ',' ||
		new_srid::text || ',' ||
		quote_literal(new_type) || ')';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add table CHECKs
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_srid_' || column_name)
		|| ' CHECK (ST_SRID(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_dims_' || column_name)
		|| ' CHECK (ST_NDims(' || quote_ident(column_name) ||
		') = ' || new_dim::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	IF ( NOT (new_type = 'GEOMETRY')) THEN
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
			quote_ident('enforce_geotype_' || column_name) ||
			' CHECK (GeometryType(' ||
			quote_ident(column_name) || ')=' ||
			quote_literal(new_type) || ' OR (' ||
			quote_ident(column_name) || ') is null)';
		RAISE DEBUG '%', sql;
		EXECUTE sql;
	END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- Name: checkauth(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauth(text, text) RETURNS integer
    LANGUAGE sql
    AS $_$ SELECT CheckAuth('', $1, $2) $_$;


ALTER FUNCTION public.checkauth(text, text) OWNER TO postgres;

--
-- Name: checkauth(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauth(text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
$_$;


ALTER FUNCTION public.checkauth(text, text, text) OWNER TO postgres;

--
-- Name: disablelongtransactions(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disablelongtransactions() RETURNS text
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
$$;


ALTER FUNCTION public.disablelongtransactions() OWNER TO postgres;

--
-- Name: dropgeometrycolumn(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying) OWNER TO postgres;

--
-- Name: dropgeometrycolumn(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: dropgeometrycolumn(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Remove ref from geometry_columns table
	EXECUTE 'delete from geometry_columns where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: dropgeometrytable(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying) RETURNS text
    LANGUAGE sql STRICT
    AS $_$ SELECT DropGeometryTable('','',$1) $_$;


ALTER FUNCTION public.dropgeometrytable(character varying) OWNER TO postgres;

--
-- Name: dropgeometrytable(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying, character varying) RETURNS text
    LANGUAGE sql STRICT
    AS $_$ SELECT DropGeometryTable('',$1,$2) $_$;


ALTER FUNCTION public.dropgeometrytable(character varying, character varying) OWNER TO postgres;

--
-- Name: dropgeometrytable(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- Remove refs from geometry_columns table
	EXECUTE 'DELETE FROM geometry_columns WHERE ' ||
		'f_table_schema = ' || quote_literal(real_schema) ||
		' AND ' ||
		' f_table_name = ' || quote_literal(table_name);

	-- Remove table
	EXECUTE 'DROP TABLE '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name);

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
$_$;


ALTER FUNCTION public.dropgeometrytable(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: enablelongtransactions(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enablelongtransactions() RETURNS text
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
$$;


ALTER FUNCTION public.enablelongtransactions() OWNER TO postgres;

--
-- Name: find_srid(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_srid(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;

	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$_$;


ALTER FUNCTION public.find_srid(character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: fix_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fix_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	mislinked record;
	result text;
	linked integer;
	deleted integer;
	foundschema integer;
BEGIN

	-- Since 7.3 schema support has been added.
	-- Previous postgis versions used to put the database name in
	-- the schema column. This needs to be fixed, so we try to
	-- set the correct schema for each geometry_colums record
	-- looking at table, column, type and srid.
	UPDATE geometry_columns SET f_table_schema = n.nspname
		FROM pg_namespace n, pg_class c, pg_attribute a,
			pg_constraint sridcheck, pg_constraint typecheck
			WHERE ( f_table_schema is NULL
		OR f_table_schema = ''
			OR f_table_schema NOT IN (
					SELECT nspname::varchar
					FROM pg_namespace nn, pg_class cc, pg_attribute aa
					WHERE cc.relnamespace = nn.oid
					AND cc.relname = f_table_name::name
					AND aa.attrelid = cc.oid
					AND aa.attname = f_geometry_column::name))
			AND f_table_name::name = c.relname
			AND c.oid = a.attrelid
			AND c.relnamespace = n.oid
			AND f_geometry_column::name = a.attname

			AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid(% = %)'
			AND sridcheck.consrc ~ textcat(' = ', srid::text)

			AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype(%) = ''%''::text) OR (% IS NULL))'
			AND typecheck.consrc ~ textcat(' = ''', type::text)

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS foundschema = ROW_COUNT;

	-- no linkage to system table needed
	return 'fixed:'||foundschema::text;

END;
$$;


ALTER FUNCTION public.fix_geometry_columns() OWNER TO postgres;

--
-- Name: fn_build_monthly_ad_serving_stats_by_date(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_ad_serving_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_ad_serving_stats_by_date
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_ad_serving_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_ad_serving_stats_by_date(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_ad_serving_stats_by_date(
            calendar_year_month, month_since_2005, full_date,
            ad_network_id, ad_network_name, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            duration, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
b.full_date,
c.ad_network_id,
c.ad_network_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date,
c.ad_network_id,
c.ad_network_name_current
;

UPDATE adstraffic.monthly_ad_serving_stats_by_date a
SET total_ad_requests = COALESCE ((
        SELECT SUM(b.fullfilled_code_count) 
        FROM   adstraffic.ad_response_fact_stats_forecast b
        INNER JOIN refer.ad_network_dim c ON c.ad_network_sk = b.ad_network_sk
        INNER JOIN refer.date_dim d ON d.date_sk = b.eastern_date_sk
        WHERE  d.full_date = a.full_date
          AND  c.ad_network_id = a.ad_network_id
        GROUP BY d.full_date, c.ad_network_id), -1)
WHERE process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_ad_serving_stats_by_date';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_ad_serving_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_ad_serving_stats_by_date(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_ad_serving_stats_by_date',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION public.fn_build_monthly_ad_serving_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: get_proj4_from_srid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_proj4_from_srid(integer) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$_$;


ALTER FUNCTION public.get_proj4_from_srid(integer) OWNER TO postgres;

--
-- Name: lockrow(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $_$;


ALTER FUNCTION public.lockrow(text, text, text) OWNER TO postgres;

--
-- Name: lockrow(text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, text) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $_$;


ALTER FUNCTION public.lockrow(text, text, text, text) OWNER TO postgres;

--
-- Name: lockrow(text, text, text, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, timestamp without time zone) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $_$;


ALTER FUNCTION public.lockrow(text, text, text, timestamp without time zone) OWNER TO postgres;

--
-- Name: lockrow(text, text, text, text, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, text, timestamp without time zone) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$_$;


ALTER FUNCTION public.lockrow(text, text, text, text, timestamp without time zone) OWNER TO postgres;

--
-- Name: longtransactionsenabled(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION longtransactionsenabled() RETURNS boolean
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$$;


ALTER FUNCTION public.longtransactionsenabled() OWNER TO postgres;

--
-- Name: populate_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION populate_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	EXECUTE 'TRUNCATE geometry_columns';

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
	AND t.typname = 'geometry'
	AND a.attisdropped = false
	AND a.atttypid = t.oid
	AND a.attrelid = c.oid
	AND c.relnamespace = n.oid
	AND n.nspname NOT ILIKE 'pg_temp%';

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	-- Add views to geometry columns table
	RAISE DEBUG 'Processing Views.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	IF oldcount > inserted THEN
	stale = oldcount-inserted;
	ELSE
	stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted|| ' conflicts:'||probed-inserted|| ' deleted:'||stale;
END

$$;


ALTER FUNCTION public.populate_geometry_columns() OWNER TO postgres;

--
-- Name: populate_geometry_columns(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION populate_geometry_columns(tbl_oid oid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

	RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;

	gc_is_valid := true;

	-- Try to find srid check from system tables (pg_constraint)
	gsrid :=
		(SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %');
	IF (gsrid IS NULL) THEN
		-- Try to find srid from the geometry itself
		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		-- Try to apply srid check to column
		IF (gsrid IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || '
						 CHECK (srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find ndims check from system tables (pg_constraint)
	gndims :=
		(SELECT replace(split_part(s.consrc, ' = ', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %');
	IF (gndims IS NULL) THEN
		-- Try to find ndims from the geometry itself
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		-- Try to apply ndims check to column
		IF (gndims IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
						 CHECK (ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find geotype check from system tables (pg_constraint)
	gtype :=
		(SELECT replace(split_part(s.consrc, '''', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %');
	IF (gtype IS NULL) THEN
		-- Try to find geotype from the geometry itself
		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;
		--IF (gtype IS NULL) THEN
		--    gtype := 'GEOMETRY';
		--END IF;

		-- Try to apply geometrytype check to column
		IF (gtype IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
				CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
			EXCEPTION
				WHEN check_violation THEN
					-- No geometry check can be applied. This column contains a number of geometry types.
					RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
			END;
		END IF;
	END IF;

	IF (gsrid IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gndims IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the number of dimensions', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gtype IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the geometry type', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSE
		-- Only insert into geometry_columns if table constraints could be applied.
		IF (gc_is_valid) THEN
			INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type)
			VALUES ('', gcs.nspname, gcs.relname, gcs.attname, gndims, gsrid, gtype);
			inserted := inserted + 1;
		END IF;
	END IF;
	END LOOP;

	-- Add views to geometry columns table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
		RAISE DEBUG 'Processing view %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;
	  
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;

		IF (gndims IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine ndims', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gsrid IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gtype IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine gtype', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSE
			query := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type) ' ||
					 'VALUES ('''', ' || quote_literal(gcs.nspname) || ',' || quote_literal(gcs.relname) || ',' || quote_literal(gcs.attname) || ',' || gndims || ',' || gsrid || ',' || quote_literal(gtype) || ')';
			EXECUTE query;
			inserted := inserted + 1;
		END IF;
	END LOOP;

	RETURN inserted;
END

$$;


ALTER FUNCTION public.populate_geometry_columns(tbl_oid oid) OWNER TO postgres;

--
-- Name: postgis_full_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_full_version() RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
	libver text;
	projver text;
	geosver text;
	libxmlver text;
	usestats bool;
	dbproc text;
	relproc text;
	fullver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_uses_stats() INTO usestats;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;

	fullver = 'POSTGIS="' || libver || '"';

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF usestats THEN
		fullver = fullver || ' USE_STATS';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (procs from ' || dbproc || ' need upgrade)';
	END IF;

	RETURN fullver;
END
$$;


ALTER FUNCTION public.postgis_full_version() OWNER TO postgres;

--
-- Name: postgis_scripts_build_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_build_date() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$SELECT '2011-07-20 03:52:33'::text AS version$$;


ALTER FUNCTION public.postgis_scripts_build_date() OWNER TO postgres;

--
-- Name: postgis_scripts_installed(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_installed() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$SELECT '1.5 r7360'::text AS version$$;


ALTER FUNCTION public.postgis_scripts_installed() OWNER TO postgres;

--
-- Name: probe_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION probe_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted integer;
	oldcount integer;
	probed integer;
	stale integer;
BEGIN

	SELECT count(*) INTO oldcount FROM geometry_columns;

	SELECT count(*) INTO probed
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck

		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'
		;

	INSERT INTO geometry_columns SELECT
		''::varchar as f_table_catalogue,
		n.nspname::varchar as f_table_schema,
		c.relname::varchar as f_table_name,
		a.attname::varchar as f_geometry_column,
		2 as coord_dimension,
		trim(both  ' =)' from
			replace(replace(split_part(
				sridcheck.consrc, ' = ', 2), ')', ''), '(', ''))::integer AS srid,
		trim(both ' =)''' from substr(typecheck.consrc,
			strpos(typecheck.consrc, '='),
			strpos(typecheck.consrc, '::')-
			strpos(typecheck.consrc, '=')
			))::varchar as type
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck
		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(st_srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS inserted = ROW_COUNT;

	IF oldcount > probed THEN
		stale = oldcount-probed;
	ELSE
		stale = 0;
	END IF;

	RETURN 'probed:'||probed::text||
		' inserted:'||inserted::text||
		' conflicts:'||(probed-inserted)::text||
		' stale:'||stale::text;
END

$$;


ALTER FUNCTION public.probe_geometry_columns() OWNER TO postgres;

--
-- Name: rename_geometry_table_constraints(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rename_geometry_table_constraints() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$
SELECT 'rename_geometry_table_constraint() is obsoleted'::text
$$;


ALTER FUNCTION public.rename_geometry_table_constraints() OWNER TO postgres;

--
-- Name: st_area(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Area($1::geometry);  $_$;


ALTER FUNCTION public.st_area(text) OWNER TO postgres;

--
-- Name: st_asbinary(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(text) RETURNS bytea
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsBinary($1::geometry);  $_$;


ALTER FUNCTION public.st_asbinary(text) OWNER TO postgres;

--
-- Name: st_asgeojson(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsGeoJson($1::geometry);  $_$;


ALTER FUNCTION public.st_asgeojson(text) OWNER TO postgres;

--
-- Name: st_asgml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsGML($1::geometry);  $_$;


ALTER FUNCTION public.st_asgml(text) OWNER TO postgres;

--
-- Name: st_askml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsKML($1::geometry);  $_$;


ALTER FUNCTION public.st_askml(text) OWNER TO postgres;

--
-- Name: st_assvg(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsSVG($1::geometry);  $_$;


ALTER FUNCTION public.st_assvg(text) OWNER TO postgres;

--
-- Name: st_astext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsText($1::geometry);  $_$;


ALTER FUNCTION public.st_astext(text) OWNER TO postgres;

--
-- Name: st_coveredby(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_coveredby(text, text) OWNER TO postgres;

--
-- Name: st_covers(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_Covers($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_covers(text, text) OWNER TO postgres;

--
-- Name: st_distance(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(text, text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Distance($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_distance(text, text) OWNER TO postgres;

--
-- Name: st_dwithin(text, text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(text, text, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $_$;


ALTER FUNCTION public.st_dwithin(text, text, double precision) OWNER TO postgres;

--
-- Name: st_intersects(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_Intersects($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_intersects(text, text) OWNER TO postgres;

--
-- Name: st_length(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Length($1::geometry);  $_$;


ALTER FUNCTION public.st_length(text) OWNER TO postgres;

--
-- Name: unlockrows(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION unlockrows(text) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$_$;


ALTER FUNCTION public.unlockrows(text) OWNER TO postgres;

--
-- Name: updategeometrysrid(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, integer) OWNER TO postgres;

--
-- Name: updategeometrysrid(character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- Name: updategeometrysrid(character varying, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Update ref from geometry_columns table
	EXECUTE 'UPDATE geometry_columns SET SRID = ' || new_srid::text ||
		' where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Make up constraint name
	cname = 'enforce_srid_'  || column_name;

	-- Drop enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' DROP constraint ' || quote_ident(cname);

	-- Update geometries SRID
	EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' SET ' || quote_ident(column_name) ||
		' = setSRID(' || quote_ident(column_name) ||
		', ' || new_srid::text || ')';

	-- Reset enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' ADD constraint ' || quote_ident(cname) ||
		' CHECK (srid(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')';

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, character varying, character varying, integer) OWNER TO postgres;

SET search_path = staging, pg_catalog;

--
-- Name: emjmonthlysite(); Type: FUNCTION; Schema: staging; Owner: ejohnst
--

CREATE FUNCTION emjmonthlysite() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_manage_process_tasks()
||
|| This job adds tasks to the process queue, and
|| in the case of jobs that can have concurrent
|| processes, will signal that a process is complete.
||
|| $Id$
||
*/

DECLARE
 v_current_data_file_id INTEGER;
 v_last_data_file_id INTEGER;
 v_current_process_id INTEGER;
 v_last_process_id INTEGER;
 v_max_eastern_date_sk INTEGER;

 v_yesterday_date_sk INTEGER;

 rec2 RECORD;
 rec3 RECORD;
 rec4 RECORD;

BEGIN

RAISE DEBUG 'STARTING: % emjmonthlysite()',timeofday();

/* process_config_id=3; monthly site traffic */
-- Let's only queue if we've finished the last job

IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=3 AND process_status<>'SU' LIMIT 1) THEN

-- We're only going to run this from the 1st to the 11th for the previous month,
-- so let's see where we are today.
IF EXTRACT(DAY FROM CURRENT_TIMESTAMP) BETWEEN 1 AND 12 THEN
	
	/* re-initialize variables */
	v_current_process_id:=NULL;
	v_last_process_id:=NULL;
	v_max_eastern_date_sk:=NULL;

	-- get checkpoints
	SELECT COALESCE(max(process_id),0) INTO v_current_process_id
	FROM process
	WHERE process_status='SU'
	AND process_config_id=1; -- 1=cumulative page view fact agg

	v_current_process_id=COALESCE(v_current_process_id,0);
	
	SELECT last_key INTO v_last_process_id
	FROM process_checkpoint
	WHERE process_config_id=3;

	IF NOT FOUND THEN
	
	v_last_process_id=0;

	INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
	VALUES (3,v_last_process_id,clock_timestamp());

	END IF;
	
	IF v_current_process_id > v_last_process_id THEN
	
		SELECT 	a1.calendar_year_month,
			a1.month_since_2005,
			b1.max_data_file_id,
			min(a1.date_sk) AS min_date_sk,
			max(a1.date_sk) AS max_date_sk INTO rec3
		FROM dw.date_dim a1
		INNER JOIN (
			SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
			FROM dw.date_dim a,
			(
				SELECT min(min_partition_key) AS min_date_sk, max(max_partition_key) AS max_date_sk, max(max_data_file_id) AS max_data_file_id
				FROM process
				WHERE process_status='SU'
				AND process_config_id=1
				AND process_id > v_last_process_id
				AND process_id <= v_current_process_id) b
			WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk) b1 ON a1.calendar_year_month=b1.calendar_year_month
		WHERE b1.month_since_2005 = (
					SELECT month_since_2005 
					FROM dw.date_dim 
					WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date) 
					--WHERE full_date=CURRENT_TIMESTAMP::date) 
		GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;

		-- Any data from previous month?  If so, queue monthly report request
		IF FOUND THEN

		INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
		VALUES (3,'PS',rec3.min_date_sk,rec3.max_date_sk,rec3.max_data_file_id,clock_timestamp());

		END IF;

        	UPDATE process_checkpoint
        	SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
        	WHERE process_config_id=3;

	END IF;

END IF;
END IF;

RAISE DEBUG 'ENDING: % emjmonthlysite()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % emjmonthlysite(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('emjmonthlysite',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.emjmonthlysite() OWNER TO ejohnst;

--
-- Name: fn_3rd_party_performance_fact_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_3rd_party_performance_fact_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_3rd_party_performance_fact_load
||
|| Load routine for 3rd party performance fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_3rd_party_performance_fact_load.sql 4422 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_3rd_party_performance_fact_load()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (39,40,41,43,44,49,50,51,52,53)
AND a.file_status = 'LR' -- need load into fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_3rd_party_performance_fact_data()'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

IF v_rec.data_file_config_id = 39 THEN
	/* JumpTap - adnetwork.fact_jt_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_jt_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_jt_performance(
		eastern_date_sk, 
		eastern_time_sk, 
		local_date_sk, 
		local_time_sk, 
		gmt_date_sk, 
		gmt_time_sk, 
		partner_sk, 
		portal_sk,
		site, 
		spot, 
		primary_category, 
		size, 
		placement, 
		requests, 
		paid_impressions, 
		fill_rate, 
		clicks, 
		click_thru_rate, 
		net_revenue, 
		net_cost_per_click, 
		net_ecpm, 
		net_revenue_per_thousand, 
		gen_jt_pub_performance_id, 
		data_file_id
	)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		-2,
		a.site, 
		a.spot, 
		a.primary_category, 
		0,
		a.placement, 
		CAST(a.requests AS integer) as requests,
		CAST(a.paid_impressions AS integer) as paid_impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.click_thru_rate AS float) as click_thru_rate,
		CAST(a.net_revenue AS float) as net_revenue,
		CAST(a.net_cost_per_click AS float) as net_cost_per_click,
		CAST(a.net_ecpm AS float) as net_ecpm,
		CAST(a.net_revenue_per_thousand AS float) as net_revenue_per_thousand,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_jt_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 39 THEN
ELSIF v_rec.data_file_config_id = 40 THEN
	/* Google AdSense - adnetwork.fact_ga_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_ga_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_ga_performance(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
	    partner_sk,
            portal_sk,
            site, 
            ad_requests, 
            coverage, 
            clicks, 
            ad_request_ctr, 
            cpc, 
            ad_request_rpm, 
            estimated_earnings, 
            gen_adsense_performance_id, 
            data_file_id
	)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		-2,
		a.site, 
		CAST(a.ad_requests AS integer) as ad_requests,
		CAST(a.coverage AS float) as coverage,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.ad_request_ctr AS float) as ad_request_ctr,
		CASE a.cpc WHEN '''' THEN 0 ELSE CAST(a.cpc AS float) END as cpc,
		CAST(a.ad_request_rpm AS float) as ad_request_rpm,
		CAST(a.estimated_earnings AS float) as estimated_earnings,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_ga_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 40 THEN
ELSIF v_rec.data_file_config_id = 41 THEN
	/* Millennial Media - adnetwork.fact_mm_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_mm_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_mm_performance(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            partner_sk,
            portal_sk,
            id, 
            "name", 
            requests, 
            ads_served, 
            fill_rate, 
            clicks, 
            click_thru_rate, 
            net_revenue, 
            net_ecpm, 
            gen_adnetwork_performance_id, 
            data_file_id
	)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		CAST(a.id AS integer) as id,
		a.name, 
		CAST(a.requests AS integer) as requests,
		CAST(a.ads_served AS integer) as ads_served,
		CAST(a.fill_rate_percentage AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.click_thru_rate_percentage AS float) as click_thru_rate,
		CAST(a.net_revenue AS float) as net_revenue,
		CAST(a.net_ecpm AS float) as net_ecpm,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_mm_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 41 THEN
ELSIF v_rec.data_file_config_id = 43 THEN
	/* Marchex - adnetwork.fact_mx_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_mx_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_mx_performance(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            partner_sk, 
			portal_sk,
            id, 
            "name", 
            site_name, 
            avgcpc, 
            clicks, 
            converion_rate, 
            conversions, 
            "cost", 
            cost_per_conversion, 
            queries, 
            gen_adnetwork_performance_id, 
            data_file_id
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		-2,
		CAST(a.id AS integer) as id,
		a.name, 
		a.site_name,
		CAST(a.avgcpc AS float) as avgcpc,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.converion_rate AS float) as converion_rate,
		CAST(a.conversions AS integer) as conversions,
		CAST(a.cost AS float) as cost,
		CAST(a.cost_per_conversion AS float) as cost_per_conversion,
		CAST(a.queries AS integer) as queries,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_mx_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 43 THEN
ELSIF v_rec.data_file_config_id = 44 THEN
	/* Where - adnetwork.fact_wh_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_wh_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_wh_performance(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            partner_sk, 
	    portal_sk,
            pubid, 
            placement, 
            gmtoffset, 
            startdatehour, 
            enddatehour, 
            requests, 
            filled, 
            clicked, 
            revenue, 
            fillpercent, 
            ctr, 
            ecpm, 
            partner_keyword, 
            placement_1, 
            placement_2, 
            gen_where_performance_id, 
            data_file_id
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		-2,
		pubid, 
		placement, 
		CAST(a.gmtoffset AS integer) as gmtoffset,
		startdatehour, 
		enddatehour, 
		CAST(a.requests AS integer) as requests,
		CAST(a.filled AS integer) as filled,
		CAST(a.clicked AS integer) as clicked,
		CAST(a.revenue AS float) as revenue,
		CAST(a.fillpercent AS float) as fillpercent,
		CAST(a.ctr AS float) as ctr,
		CAST(a.ecpm AS float) as ecpm,
		a.partner_keyword, 
		a.placement_1, 
		a.placement_2,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_wh_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 44 THEN
ELSIF v_rec.data_file_config_id = 49 THEN
	/* SuperPages - adnetwork.fact_sp_daily_sum */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* insert new -- adnetwork.fact_jt_daily_sum */
	v_cmd := '
	INSERT INTO adnetwork.fact_sp_daily_sum(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, ppc_revenue, src, searches, ppc_billable_clicks, 
            affiliate_name, coverage, rpc, gen_superpages_daily_sum_id, data_file_id, 
            ad_network_id, ad_network_sk, verve_revenue_share, revenue
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2), COALESCE(a.eastern_time_sk,-2), COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2), COALESCE(a.gmt_date_sk,-2), COALESCE(a.gmt_time_sk,-2),
		CAST(a.ppc_revenue AS float) as ppc_revenue,
		a.src,
		CAST(a.searches AS integer) as searches,
		CAST(a.ppc_billable_clicks AS integer) as ppc_billable_clicks,
		a.affiliate_name, 
		CAST(a.coverage AS float) as coverage,
		CAST(a.rpc AS float) as rpc,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id,
		a.ad_network_id,
		a.ad_network_sk,
		0.45 as verve_revenue_share,
		CAST(a.ppc_revenue AS float)*0.45 as revenue
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_sp_daily_sum b 
	                  WHERE b.eastern_date_sk = a.eastern_date_sk AND b.ad_network_id = a.ad_network_id
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* update old -- adnetwork.fact_jt_daily_sum */
	v_cmd := '
	UPDATE adnetwork.fact_sp_daily_sum a
	SET ppc_revenue = CAST(b.ppc_revenue AS float)
	   ,src = b.src
	   ,searches = CAST(b.searches AS integer)
	   ,ppc_billable_clicks = CAST(b.ppc_billable_clicks AS integer)
	   ,affiliate_name = b.affiliate_name
	   ,coverage = CAST(b.coverage AS float)
	   ,rpc = CAST(b.rpc AS float)
	   ,data_file_id = b.data_file_id
	   ,ad_network_sk = b.ad_network_sk
	   ,verve_revenue_share = 0.45
	   ,revenue = 0.45*CAST(b.ppc_revenue AS float)
	FROM staging.' || v_rec.data_file_target_table || ' b
	WHERE a.eastern_date_sk = b.eastern_date_sk AND a.ad_network_id = b.ad_network_id
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_sp_daily_sum a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 49 THEN
ELSIF v_rec.data_file_config_id = 50 THEN
	/* Yellowpages - adnetwork.fact_yp_daily_sum */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_yp_daily_sum */
	v_cmd := '
	INSERT INTO adnetwork.fact_yp_daily_sum(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            site_name, 
            requests, 
            impressions, 
            fill_rate, 
            clicks, 
            ctr, 
            ecpm, 
            est_earnings, 
            gen_yellowpages_daily_sum_id, 
            data_file_id
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		a.site_name,
		CAST(a.requests AS integer) as requests,
		CAST(a.impressions AS integer) as impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.ctr AS float) as ctr,
		CAST(a.ecpm AS float) as ecpm,
		CAST(a.est_earnings AS float) as est_earnings,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_yp_daily_sum a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 50 THEN
ELSIF v_rec.data_file_config_id = 51 THEN
	/* JumpTap Daily Sum - adnetwork.fact_jt_daily_sum */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* insert new -- adnetwork.fact_jt_daily_sum */
	v_cmd := '
	INSERT INTO adnetwork.fact_jt_daily_sum(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, gmt_date_sk, gmt_time_sk, 
            requests, paid_impressions, clicks, net_revenue, fill_rate, click_thru_rate, net_cost_per_click, 
            net_ecpm, net_revenue_per_thousand, gen_jumptap_daily_sum_id, data_file_id
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2), COALESCE(a.eastern_time_sk,-2), COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2), COALESCE(a.gmt_date_sk,-2), COALESCE(a.gmt_time_sk,-2),
		CAST(a.requests AS integer) as requests,
		CAST(a.paid_impressions AS integer) as paid_impressions,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.net_revenue AS float) as net_revenue,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.click_thru_rate AS float) as click_thru_rate,
		CAST(a.net_cost_per_click AS float) as net_cost_per_click,
		CAST(a.net_ecpm AS float) as net_ecpm,
		CAST(a.net_revenue_per_thousand AS float) as net_revenue_per_thousand,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_jt_daily_sum b WHERE b.eastern_date_sk = a.eastern_date_sk)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* update old -- adnetwork.fact_jt_daily_sum */
	v_cmd := '
	UPDATE adnetwork.fact_jt_daily_sum a
	SET requests = CAST(b.requests AS integer)
	   ,paid_impressions = CAST(b.paid_impressions AS integer)
	   ,clicks = CAST(b.clicks AS integer)
	   ,net_revenue = CAST(b.net_revenue AS float)
	   ,fill_rate = CAST(b.fill_rate AS float)
	   ,click_thru_rate = CAST(b.click_thru_rate AS float)
	   ,net_cost_per_click = CAST(b.net_cost_per_click AS float)
	   ,net_ecpm = CAST(b.net_ecpm AS float)
	   ,net_revenue_per_thousand = CAST(b.net_revenue_per_thousand AS float)
	   ,data_file_id = b.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' b
	WHERE a.eastern_date_sk = b.eastern_date_sk
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_jt_daily_sum a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 51 THEN
ELSIF v_rec.data_file_config_id = 52 THEN
	/* iTunes 7day performance - adnetwork.fact_it_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* insert new -- adnetwork.fact_it_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_it_performance(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, partner_sk, portal_sk, app_name, revenue, 
            ecpm, requests, impressions, fill_rate, ctr, gen_itunes_performance_id, 
            data_file_id
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2), COALESCE(a.eastern_time_sk,-2), COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2), COALESCE(a.gmt_date_sk,-2), COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		app_name,
		CAST(a.revenue AS float) as revenue,
		CAST(a.ecpm AS float) as ecpm,
		CAST(requests AS float) as requests,
		CAST(impressions AS float) as impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.ctr AS float) as ctr,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 
	                  FROM adnetwork.fact_it_performance b 
	                  WHERE b.eastern_date_sk = a.eastern_date_sk AND b.app_name = a.app_name
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* update old -- adnetwork.fact_it_performance */
	v_cmd := '
	UPDATE adnetwork.fact_it_performance a
	SET revenue = CAST(b.revenue AS float)
	   ,ecpm = CAST(b.ecpm AS float)
	   ,requests = CAST(b.requests AS float)
	   ,impressions = CAST(b.impressions AS float)
	   ,fill_rate = CAST(b.fill_rate AS float)
	   ,ctr = CAST(b.ctr AS float)
	   ,data_file_id = b.data_file_id
	   ,portal_sk = b.portal_sk
	   ,partner_sk = b.partner_sk
	FROM staging.' || v_rec.data_file_target_table || ' b
	WHERE a.eastern_date_sk = b.eastern_date_sk
	  AND a.app_name = b.app_name
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_it_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 52 THEN
ELSIF v_rec.data_file_config_id = 53 THEN
	/* City Grid performance - adnetwork.fact_cg_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_cg_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_cg_performance(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            partner_sk, 
            portal_sk, 
            placement, 
            billable_leads, 
            estimated_net_earnings, 
            gen_citygrid_performance_id, 
            data_file_id)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.partner_sk,-2),
		-2,
		a.placement,
		CAST(a.billable_leads AS integer) as billable_leads,
		CAST(a.estimated_net_earnings AS float) as estimated_net_earnings,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_cg_performance a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 53 THEN
END IF;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_3rd_party_performance_fact_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_3rd_party_performance_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_3rd_party_performance_fact_load() OWNER TO warehouse_dbo;

--
-- Name: fn_ad_network_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_network_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_network_dim_load
||
|| Load routine for ad network dimension.
||
|| $Id: fn_ad_network_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='ad_network_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_ad_network_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.ad_network_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_ad_network a 
WHERE a.ad_network_id=b.ad_network_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.ad_network_name<>b.ad_network_name OR
a.bill_type<>b.bill_type OR
a.account_number<>b.account_number OR
a.url_base<>b.url_base OR
a.is_active<>b.is_active OR
a.service_key <> b.service_key OR
a.timeout <> b.timeout OR
a.portal_aware <> b.portal_aware
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.ad_network_dim(
            ad_network_id, ad_network_name, bill_type, account_number, 
            url_base, is_active, service_key, timeout, portal_aware, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, ad_network_name_current, 
            account_number_current, url_base_current, service_key_current)
SELECT a.ad_network_id,a.ad_network_name, a.bill_type, a.account_number,
       a.url_base,a.is_active,a.service_key, a.timeout, a.portal_aware, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A','N/A','N/A'
FROM staging.stg_ad_network a
INNER JOIN refer.ad_network_dim b ON a.ad_network_id=b.ad_network_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.ad_network_dim(
            ad_network_id, ad_network_name, bill_type, account_number, 
            url_base, is_active, service_key, timeout, portal_aware, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, ad_network_name_current, 
            account_number_current, url_base_current, service_key_current)
SELECT a.ad_network_id,a.ad_network_name, a.bill_type, a.account_number,
       a.url_base,a.is_active,a.service_key, a.timeout, a.portal_aware, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A','N/A','N/A'
FROM staging.stg_ad_network a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.ad_network_dim b 
WHERE a.ad_network_id=b.ad_network_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.ad_network_dim b
SET     ad_network_name_current=a.ad_network_name,
        account_number_current=a.account_number,
        url_base_current=a.url_base,
        service_key_current=a.service_key
FROM staging.stg_ad_network a
WHERE a.ad_network_id=b.ad_network_id
AND a.data_file_id=p_data_file_id
AND (   b.ad_network_name_current<>a.ad_network_name OR
        b.account_number_current<>a.account_number OR
        b.url_base_current<>a.url_base OR
        b.service_key_current<>a.service_key )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_network_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_network_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_ad_network_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_network_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_network_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_network_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for ad network dimension.
||
|| $Id: fn_ad_network_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_ad_network_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_ad_network_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_ad_network_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_ad_network_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_ad_network_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_ad_network_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_network_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_network_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_dim_transform
||
|| Transform routine for portal dimension.
||
|| $Id: fn_portal_dim_transform.sql 4383 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % fn_ad_network_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_ad_network
SET ad_network_name=COALESCE(rtrim(ltrim(ad_network_name)),'N/A'),
        bill_type=COALESCE(bill_type,-100),
        account_number=COALESCE(rtrim(ltrim(account_number)),'N/A'),
        url_base=COALESCE(rtrim(ltrim(url_base)),'N/A'),
        is_active=COALESCE(is_active,-100),
        service_key=COALESCE(rtrim(ltrim(service_key)),'N/A'),
        timeout= COALESCE(timeout,-100),
        portal_aware= COALESCE(portal_aware,-100)
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_network_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_network_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;


END;
$_$;


ALTER FUNCTION staging.fn_ad_network_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_network_param_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_network_param_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_network_param_dim_load
||
|| Load routine for ad network dimension.
||
|| $Id: fn_ad_network_param_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='ad_network_param_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_ad_network_param_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */

/* expire changed dim records */
UPDATE refer.ad_network_param_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_ad_network_param a 
WHERE a.ad_network_id=b.ad_network_id 
AND a.target_char_id=b.target_char_id 
AND a.attr_id=b.attr_id 
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.param_value<>b.param_value OR
a.dtcreated<>b.dtcreated OR
a.dtdeleted<>b.dtdeleted OR
a.prov_status<>b.prov_status OR
a.dtmodified<>b.dtmodified 
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
/*
ad_network_id integer NOT NULL,
  target_char_id integer NOT NULL,
  attr_id integer NOT NULL,
  param_value character varying(255) NOT NULL,
  dtcreated timestamp with time zone NOT NULL,
  dtdeleted date,
  prov_status integer NOT NULL,
  dtmodified timestamp with time zone NOT NULL,
  data_file_id integer,
  dt_effective timestamp without time zone NOT NULL,
  dt_expire timestamp without time zone NOT NULL,
  param_value_current character varying(255) NOT NULL,
 
INSERT INTO refer.ad_network_param_dim(
            ad_network_id, ad_network_name, bill_type, account_number, 
            url_base, is_active, service_key, timeout, portal_aware, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, ad_network_name_current, 
            account_number_current, url_base_current, service_key_current)
SELECT a.ad_network_id,a.ad_network_name, a.bill_type, a.account_number,
       a.url_base,a.is_active,a.service_key, a.timeout, a.portal_aware, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A','N/A','N/A'
FROM staging.stg_ad_network a
INNER JOIN refer.ad_network_param_dim b ON a.ad_network_id=b.ad_network_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;
 */


INSERT INTO refer.ad_network_param_dim(
            ad_network_id, target_char_id, attr_id, 
            param_value, dtcreated, dtdeleted, prov_status, dtmodified, data_file_id, 
            dt_effective, dt_expire, param_value_current)
SELECT a.ad_network_id, a.target_char_id, a.attr_id,
       a.param_value, a.dtcreated, a.dtdeleted, a.prov_status, a.dtmodified, a.data_file_id, 
       dt_expire_old + interval '1 second','9999-12-31', 'N/A'
FROM staging.stg_ad_network_param a
INNER JOIN refer.ad_network_param_dim b ON a.ad_network_id=b.ad_network_id AND a.target_char_id=b.target_char_id AND a.attr_id=b.attr_id 
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
/*
INSERT INTO refer.ad_network_param_dim(
            ad_network_id, ad_network_name, bill_type, account_number, 
            url_base, is_active, service_key, timeout, portal_aware, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, ad_network_name_current, 
            account_number_current, url_base_current, service_key_current)
SELECT a.ad_network_id,a.ad_network_name, a.bill_type, a.account_number,
       a.url_base,a.is_active,a.service_key, a.timeout, a.portal_aware, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A','N/A','N/A'
FROM staging.stg_ad_network a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.ad_network_param_dim b 
WHERE a.ad_network_id=b.ad_network_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
*/
INSERT INTO refer.ad_network_param_dim(
            ad_network_id, target_char_id, attr_id, 
            param_value, dtcreated, dtdeleted, prov_status, dtmodified, data_file_id, 
            dt_effective, dt_expire, param_value_current)
SELECT a.ad_network_id, a.target_char_id, a.attr_id,
       a.param_value, a.dtcreated, a.dtdeleted, a.prov_status, a.dtmodified, a.data_file_id, 
       dt_expire_old + interval '1 second','9999-12-31', 'N/A'
FROM staging.stg_ad_network_param a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.ad_network_param_dim b 
WHERE a.ad_network_id=b.ad_network_id AND a.target_char_id=b.target_char_id AND a.attr_id=b.attr_id 
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.ad_network_param_dim b
SET     param_value_current=a.param_value
FROM staging.stg_ad_network_param a
WHERE a.ad_network_id=b.ad_network_id AND a.target_char_id=b.target_char_id AND a.attr_id=b.attr_id 
AND a.data_file_id=p_data_file_id
AND (   b.param_value_current<>a.param_value );

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_network_param_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_network_param_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_param_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_ad_network_param_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_network_param_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_network_param_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_network_param_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for ad network dimension.
||
|| $Id: fn_ad_network_param_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_ad_network_param_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_ad_network_param_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_ad_network_param_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_ad_network_param_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_ad_network_param_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_ad_network_param_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_network_param_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_network_param_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_dim_transform
||
|| Transform routine for portal dimension.
||
|| $Id: fn_ad_network_param_dim_transform.sql 4383 2008-08-27 00:35:24Z tho.hoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % fn_ad_network_param_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_ad_network_param
SET 	ad_network_id=COALESCE(ad_network_id,-100),
	target_char_id=COALESCE(target_char_id,-100),
	attr_id=COALESCE(attr_id,-100),
        param_value=COALESCE(rtrim(ltrim(param_value)),'N/A'),
        prov_status= COALESCE(prov_status,-100)
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_network_param_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_network_param_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_param_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;


END;
$_$;


ALTER FUNCTION staging.fn_ad_network_param_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_response_fact_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_response_fact_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_response_fact_load
||
|| Load routine for adcel response fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_ad_response_fact_load.sql 4422 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_load()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'content_category_dim',
 'display_block_dim',
 'portal_dim',
 'partner_dim',
 'partner_module_dim',
 'portal_host_dim',
 'ad_network_dim'
);

IF v_dim_table_check < 7 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (11,12,13,14,15,16,17,18,19,20,27,28,29)
AND a.file_status = 'LR' -- need load into ad_response_fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_load_adcel_data(%,%)'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

IF v_rec.data_file_config_id >= 16 AND v_rec.data_file_config_id <= 29 THEN
	/* ad-response data: load data to fact table */

	RAISE NOTICE 'v_rec.server_name=%',v_rec.server_name;

	/* insert missing user agents */
	v_cmd := '
	INSERT INTO refer.user_agent_dim (user_agent_name,device_manufacturer,
	device_type,organic,auto_generated,suppress,data_file_id)
	SELECT distinct a.user_agent,''Unallocated'',
	''Unallocated'',FALSE,TRUE,FALSE,a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (
					   SELECT 1
					   FROM refer.user_agent_dim b
					   WHERE a.user_agent=b.user_agent_name
					  )
	AND a.user_agent IS NOT NULL
	AND a.data_file_id = ' || v_rec.data_file_id || '
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	--EXECUTE v_cmd;

	/* transform user_agent_sk */
	v_cmd := '
	 UPDATE ' || v_rec.data_file_target_table::text || ' a
	 SET 	
	   user_agent_sk=COALESCE(b.user_agent_sk,-2)
	 FROM refer.user_agent_dim b
	 WHERE a.user_agent=b.user_agent_name
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	--EXECUTE v_cmd;
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;
	
	RAISE NOTICE 'FACT LOADING...';

	v_app_server_id:=-1;
	IF v_rec.data_file_config_id = 16 THEN
	 v_app_server_id:=3;
	ELSIF v_rec.data_file_config_id = 17 THEN
	 v_app_server_id:=4;
	ELSIF v_rec.data_file_config_id = 18 THEN
	 v_app_server_id:=6;
	ELSIF v_rec.data_file_config_id = 19 THEN
	 v_app_server_id:=8;
	ELSIF v_rec.data_file_config_id = 20 THEN
	 v_app_server_id:=9;
	ELSIF v_rec.data_file_config_id = 27 THEN
	 v_app_server_id:=12;
	ELSIF v_rec.data_file_config_id = 28 THEN
	 v_app_server_id:=13;
	ELSIF v_rec.data_file_config_id = 29 THEN
	 v_app_server_id:=14;
	END IF;

	v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET duration = 0 WHERE (char_length(duration) = 5 and duration > ''327%'') OR (char_length(duration) > 7);';
	EXECUTE v_cmd;

	--  Add on Nov 26 2011 by thohoang
	v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET remote_ip = null WHERE remote_ip = ''null'';';
	EXECUTE v_cmd;

	/* load adstraffic.ad_response_fact */
	IF v_max_eastern_date_sk < 2270 THEN -- transaction_id # session_id
		v_cmd := '
		INSERT INTO adstraffic.ad_response_fact (
		eastern_date_sk,
		eastern_time_sk,
		local_date_sk,
		local_time_sk,
		gmt_date_sk,
		gmt_time_sk,
		portal_sk,
		partner_sk,
		ad_content_category_sk,
		ad_network_sk,
		user_agent_sk,
		remote_ip,
		session_id,
		request_guid,
		ad_response_url,
		status_code,
		duration,
		fullfilled_code,
		fullfilled_code_count,
		fullfilled_code_y,
		fullfilled_code_n,
		fullfilled_code_e,
		fullfilled_code_t,
		placement_id,
		gen_ad_response_app_id,
		app_server,
		data_file_id,
		app_server_id,
		transaction_id,
		dc_site_sk,
		location_id,
		location_quality,
		partner_module_sk)
		SELECT 
		COALESCE(eastern_date_sk,-2),
		COALESCE(eastern_time_sk,-2),
		COALESCE(local_date_sk,-2),
		COALESCE(local_time_sk,-2),
		COALESCE(gmt_date_sk,-2),
		COALESCE(gmt_time_sk,-2),
		COALESCE(portal_sk,-2),
		COALESCE(partner_sk,-2),
		COALESCE(ad_content_category_sk,-2),
		COALESCE(ad_network_sk,-2),
		COALESCE(user_agent_sk,-2),
		CAST(a.remote_ip as inet),
		a.session_id,
		a.request_guid,
		a.ad_response_url,
		CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
		CAST(a.duration AS smallint),
		a.fullfilled_code,
		CAST(a.fullfilled_code_count AS smallint),
		CAST(a.fullfilled_code_y AS smallint),
		CAST(a.fullfilled_code_n AS smallint),
		CAST(a.fullfilled_code_e AS smallint),
		CAST(a.fullfilled_code_t AS smallint),
		CAST(a.placement_id AS integer),
		a.' || v_rec.data_file_target_table || '_id,
		a.app_server,
		a.data_file_id,
		' || v_app_server_id || ',
		0,
		COALESCE(dc_site_sk,-2),
		CAST(a.location_id AS integer),
		CAST(a.location_quality AS integer),
		COALESCE(partner_module_sk,-2)
		FROM staging.' || v_rec.data_file_target_table || ' a
		;';
	ELSE
		v_cmd := '
		INSERT INTO adstraffic.ad_response_fact (
		eastern_date_sk,
		eastern_time_sk,
		local_date_sk,
		local_time_sk,
		gmt_date_sk,
		gmt_time_sk,
		portal_sk,
		partner_sk,
		ad_content_category_sk,
		ad_network_sk,
		user_agent_sk,
		remote_ip,
		session_id,
		request_guid,
		ad_response_url,
		status_code,
		duration,
		fullfilled_code,
		fullfilled_code_count,
		fullfilled_code_y,
		fullfilled_code_n,
		fullfilled_code_e,
		fullfilled_code_t,
		placement_id,
		gen_ad_response_app_id,
		app_server,
		data_file_id,
		app_server_id,
		transaction_id,
		dc_site_sk,
		location_id,
		location_quality,
		partner_module_sk,
		location_quality_100)
		SELECT 
		COALESCE(eastern_date_sk,-2),
		COALESCE(eastern_time_sk,-2),
		COALESCE(local_date_sk,-2),
		COALESCE(local_time_sk,-2),
		COALESCE(gmt_date_sk,-2),
		COALESCE(gmt_time_sk,-2),
		COALESCE(portal_sk,-2),
		COALESCE(partner_sk,-2),
		COALESCE(ad_content_category_sk,-2),
		COALESCE(ad_network_sk,-2),
		COALESCE(user_agent_sk,-2),
		CAST(a.remote_ip as inet),
		a.session_id,
		a.request_guid,
		a.ad_response_url,
		CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
		CAST(a.duration AS smallint),
		a.fullfilled_code,
		CAST(a.fullfilled_code_count AS smallint),
		CAST(a.fullfilled_code_y AS smallint),
		CAST(a.fullfilled_code_n AS smallint),
		CAST(a.fullfilled_code_e AS smallint),
		CAST(a.fullfilled_code_t AS smallint),
		CAST(a.placement_id AS integer),
		a.' || v_rec.data_file_target_table || '_id,
		a.app_server,
		a.data_file_id,
		' || v_app_server_id || ',
		CASE a.session_id WHEN ''""'' THEN -100 ELSE CAST(a.session_id AS bigint) END,
		COALESCE(dc_site_sk,-2),
		CAST(a.location_id AS integer),
		CAST(a.location_quality AS integer),
		COALESCE(partner_module_sk,-2),
		CASE a.location_quality WHEN ''100'' THEN 1 ELSE 0 END
		FROM staging.' || v_rec.data_file_target_table || ' a
		WHERE a.user_agent_sk > 0
		;';
	END IF;

	--RAISE NOTICE 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	-- copy unresolve user agent to update table
	v_cmd := '
		INSERT INTO adstraffic.ad_response_fact_user_agent (
		eastern_date_sk,
		eastern_time_sk,
		local_date_sk,
		local_time_sk,
		gmt_date_sk,
		gmt_time_sk,
		portal_sk,
		partner_sk,
		ad_content_category_sk,
		ad_network_sk,
		user_agent_sk,
		remote_ip,
		session_id,
		request_guid,
		ad_response_url,
		status_code,
		duration,
		fullfilled_code,
		fullfilled_code_count,
		fullfilled_code_y,
		fullfilled_code_n,
		fullfilled_code_e,
		fullfilled_code_t,
		placement_id,
		gen_ad_response_app_id,
		app_server,
		data_file_id,
		app_server_id,
		transaction_id,
		dc_site_sk,
		location_id,
		location_quality,
		partner_module_sk,
		location_quality_100,
		user_agent)
		SELECT 
		COALESCE(eastern_date_sk,-2),
		COALESCE(eastern_time_sk,-2),
		COALESCE(local_date_sk,-2),
		COALESCE(local_time_sk,-2),
		COALESCE(gmt_date_sk,-2),
		COALESCE(gmt_time_sk,-2),
		COALESCE(portal_sk,-2),
		COALESCE(partner_sk,-2),
		COALESCE(ad_content_category_sk,-2),
		COALESCE(ad_network_sk,-2),
		COALESCE(user_agent_sk,-2),
		CAST(a.remote_ip as inet),
		a.session_id,
		a.request_guid,
		a.ad_response_url,
		CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
		CAST(a.duration AS smallint),
		a.fullfilled_code,
		CAST(a.fullfilled_code_count AS smallint),
		CAST(a.fullfilled_code_y AS smallint),
		CAST(a.fullfilled_code_n AS smallint),
		CAST(a.fullfilled_code_e AS smallint),
		CAST(a.fullfilled_code_t AS smallint),
		CAST(a.placement_id AS integer),
		a.' || v_rec.data_file_target_table || '_id,
		a.app_server,
		a.data_file_id,
		' || v_app_server_id || ',
		CASE a.session_id WHEN ''""'' THEN -100 ELSE CAST(a.session_id AS bigint) END,
		COALESCE(dc_site_sk,-2),
		CAST(a.location_id AS integer),
		CAST(a.location_quality AS integer),
		COALESCE(partner_module_sk,-2),
		CASE a.location_quality WHEN ''100'' THEN 1 ELSE 0 END,
		a.user_agent
		FROM staging.' || v_rec.data_file_target_table || ' a
		WHERE a.user_agent_sk is null OR a.user_agent_sk < 0
		;';

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adstraffic.ad_response_fact a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id || ';';

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_ad_response_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id >= 16 AND v_rec.data_file_config_id <= 20 THEN
ELSIF v_rec.data_file_config_id >= 11 AND v_rec.data_file_config_id <= 15 THEN
	/* ad-request data: update file_status is FL - Fact Load */

	/* insert missing user agents */
	v_cmd := '
	INSERT INTO refer.user_agent_dim (user_agent_name,device_manufacturer,
	device_type,organic,auto_generated,suppress,data_file_id)
	SELECT distinct a.user_agent,''Unallocated'',
	''Unallocated'',FALSE,TRUE,FALSE,a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (
					   SELECT 1
					   FROM refer.user_agent_dim b
					   WHERE a.user_agent=b.user_agent_name
					  )
	AND a.user_agent IS NOT NULL
	AND a.data_file_id = ' || v_rec.data_file_id || '
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;

	/* transform user_agent_sk */
	v_cmd := '
	UPDATE ' || v_rec.data_file_target_table::text || ' a
	SET user_agent_sk=COALESCE(b.user_agent_sk,-2)
	FROM refer.user_agent_dim b
	WHERE a.user_agent=b.user_agent_name
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;
	
	/* insert missing referrer_hostnames */
	v_cmd :='
	INSERT INTO refer.referrer_hostname_dim (hostname,domain,referrer_type,
	auto_generated,suppress,data_file_id)
	SELECT distinct a.referrer_hostname,a.domain,''Unknown'',
	TRUE,FALSE,p_data_file_id
	FROM ' || v_rec.data_file_target_table::text || ' a
	WHERE NOT EXISTS (
						SELECT 1
						FROM refer.referrer_hostname_dim b
						WHERE a.referrer_hostname = b.hostname
					 )
	AND a.referrer_hostname IS NOT NULL';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;

	/* transform referrer_hostname_sk */
	v_cmd := '
	UPDATE ' || v_rec.data_file_target_table::text || ' a
	SET referrer_hostname_sk=COALESCE(b.referrer_hostname_sk,-2)
	FROM refer.referrer_hostname_dim b
	WHERE a.referrer_hostname=b.hostname
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='FL';
	
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
	WHERE data_file_id=v_rec.data_file_id;

	-- END IF v_rec.data_file_config_id >= 11 AND v_rec.data_file_config_id <= 15 THEN
END IF;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_response_fact_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_response_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_ad_response_fact_load() OWNER TO warehouse_dbo;

--
-- Name: fn_ad_response_fact_load(text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_response_fact_load(p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_response_fact_load
||
|| Load routine for adcel response fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_ad_response_fact_load.sql 4422 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_load(''%'',%)',timeofday(),p_app_server,p_file_config_id;

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'content_category_dim',
 'display_block_dim',
 'portal_dim',
 'partner_dim',
 'partner_module_dim',
 'portal_host_dim',
 'ad_network_dim'
);

IF v_dim_table_check < 7 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id = p_file_config_id
AND a.file_status = 'LR' -- need load into ad_response_fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_load_adcel_data(%,%)'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

RAISE NOTICE 'v_rec.server_name=%',v_rec.server_name;

/* insert missing user agents */
v_cmd := '
INSERT INTO refer.user_agent_dim (user_agent_name,device_manufacturer,
device_type,organic,auto_generated,suppress,data_file_id)
SELECT distinct a.user_agent,''Unallocated'',
''Unallocated'',FALSE,TRUE,FALSE,a.data_file_id
FROM staging.' || v_rec.data_file_target_table || ' a
WHERE NOT EXISTS (
				   SELECT 1
				   FROM refer.user_agent_dim b
				   WHERE a.user_agent=b.user_agent_name
				  )
AND a.user_agent IS NOT NULL
AND a.data_file_id = ' || v_rec.data_file_id || '
;';

--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
--EXECUTE v_cmd;

/* transform user_agent_sk */
v_cmd := '
 UPDATE ' || v_rec.data_file_target_table::text || ' a
 SET 	
   user_agent_sk=COALESCE(b.user_agent_sk,-2)
 FROM refer.user_agent_dim b
 WHERE a.user_agent=b.user_agent_name
;';

--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
--EXECUTE v_cmd;

v_previous_file_status:=v_rec.file_status;
v_file_status:='SU';

/* get min/max eastern date keys for constraint exclusion in partitioned table
(in case we want to do future processing on this file) */
-- earliest/latest date_dim keys; anything earlier or later gets dropped
v_cmd := '
SELECT min(eastern_date), max(eastern_date)
FROM staging.' || v_rec.data_file_target_table || '
WHERE data_file_id = ' || v_rec.data_file_id::text || '
  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
;';

EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

SELECT date_sk INTO v_min_eastern_date_sk
FROM refer.date_dim
WHERE full_date=v_min_eastern_date;

SELECT date_sk INTO v_max_eastern_date_sk
FROM refer.date_dim
WHERE full_date=v_max_eastern_date;

RAISE NOTICE 'FACT LOADING...';

v_app_server_id:=-1;
IF v_rec.data_file_config_id = 16 THEN
 v_app_server_id:=3;
ELSIF v_rec.data_file_config_id = 17 THEN
 v_app_server_id:=4;
ELSIF v_rec.data_file_config_id = 18 THEN
 v_app_server_id:=6;
ELSIF v_rec.data_file_config_id = 19 THEN
 v_app_server_id:=8;
ELSIF v_rec.data_file_config_id = 20 THEN
 v_app_server_id:=9;
ELSIF v_rec.data_file_config_id = 27 THEN
 v_app_server_id:=12;
ELSIF v_rec.data_file_config_id = 28 THEN
 v_app_server_id:=13;
ELSIF v_rec.data_file_config_id = 29 THEN
 v_app_server_id:=14;
ELSIF v_rec.data_file_config_id = 81 THEN
 v_app_server_id:=15;
END IF;

v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET duration = 0 WHERE (char_length(duration) = 5 and duration > ''327%'') OR (char_length(duration) > 7);';
EXECUTE v_cmd;

--  Add on Nov 26 2011 by thohoang
v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET remote_ip = null WHERE remote_ip = ''null'';';
EXECUTE v_cmd;

--  Add on Jan 05 2012 by thohoang
-- v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET placement_id= ''71374'' WHERE placement_id = ''71374+'';';
-- EXECUTE v_cmd;

v_cmd := '
INSERT INTO adstraffic.ad_response_fact (
eastern_date_sk,
eastern_time_sk,
local_date_sk,
local_time_sk,
gmt_date_sk,
gmt_time_sk,
portal_sk,
partner_sk,
ad_content_category_sk,
ad_network_sk,
user_agent_sk,
remote_ip,
session_id,
request_guid,
ad_response_url,
status_code,
duration,
fullfilled_code,
fullfilled_code_count,
fullfilled_code_y,
fullfilled_code_n,
fullfilled_code_e,
fullfilled_code_t,
placement_id,
gen_ad_response_app_id,
app_server,
data_file_id,
app_server_id,
transaction_id,
dc_site_sk,
location_id,
location_quality,
partner_module_sk,
location_quality_100)
SELECT 
COALESCE(eastern_date_sk,-2),
COALESCE(eastern_time_sk,-2),
COALESCE(local_date_sk,-2),
COALESCE(local_time_sk,-2),
COALESCE(gmt_date_sk,-2),
COALESCE(gmt_time_sk,-2),
COALESCE(portal_sk,-2),
COALESCE(partner_sk,-2),
COALESCE(ad_content_category_sk,-2),
COALESCE(ad_network_sk,-2),
COALESCE(user_agent_sk,-2),
CAST(a.remote_ip as inet),
a.session_id,
a.request_guid,
a.ad_response_url,
CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
CAST(a.duration AS smallint),
a.fullfilled_code,
CAST(a.fullfilled_code_count AS smallint),
CAST(a.fullfilled_code_y AS smallint),
CAST(a.fullfilled_code_n AS smallint),
CAST(a.fullfilled_code_e AS smallint),
CAST(a.fullfilled_code_t AS smallint),
CAST(a.placement_id AS integer),
a.' || v_rec.data_file_target_table || '_id,
a.app_server,
a.data_file_id,
' || v_app_server_id || ',
CASE a.session_id WHEN ''""'' THEN -100 ELSE CAST(a.session_id AS bigint) END,
COALESCE(dc_site_sk,-2),
CAST(a.location_id AS integer),
CAST(a.location_quality AS integer),
COALESCE(partner_module_sk,-2),
CASE a.location_quality WHEN ''100'' THEN 1 ELSE 0 END
FROM staging.' || v_rec.data_file_target_table || ' a
WHERE a.user_agent_sk > 0
;';

--RAISE NOTICE 'v_cmd=%',v_cmd;

EXECUTE v_cmd;

-- copy unresolve user agent to update table
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_user_agent (
eastern_date_sk,
eastern_time_sk,
local_date_sk,
local_time_sk,
gmt_date_sk,
gmt_time_sk,
portal_sk,
partner_sk,
ad_content_category_sk,
ad_network_sk,
user_agent_sk,
remote_ip,
session_id,
request_guid,
ad_response_url,
status_code,
duration,
fullfilled_code,
fullfilled_code_count,
fullfilled_code_y,
fullfilled_code_n,
fullfilled_code_e,
fullfilled_code_t,
placement_id,
gen_ad_response_app_id,
app_server,
data_file_id,
app_server_id,
transaction_id,
dc_site_sk,
location_id,
location_quality,
partner_module_sk,
location_quality_100,
user_agent)
SELECT 
COALESCE(eastern_date_sk,-2),
COALESCE(eastern_time_sk,-2),
COALESCE(local_date_sk,-2),
COALESCE(local_time_sk,-2),
COALESCE(gmt_date_sk,-2),
COALESCE(gmt_time_sk,-2),
COALESCE(portal_sk,-2),
COALESCE(partner_sk,-2),
COALESCE(ad_content_category_sk,-2),
COALESCE(ad_network_sk,-2),
COALESCE(user_agent_sk,-2),
CAST(a.remote_ip as inet),
a.session_id,
a.request_guid,
a.ad_response_url,
CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
CAST(a.duration AS smallint),
a.fullfilled_code,
CAST(a.fullfilled_code_count AS smallint),
CAST(a.fullfilled_code_y AS smallint),
CAST(a.fullfilled_code_n AS smallint),
CAST(a.fullfilled_code_e AS smallint),
CAST(a.fullfilled_code_t AS smallint),
CAST(a.placement_id AS integer),
a.' || v_rec.data_file_target_table || '_id,
a.app_server,
a.data_file_id,
' || v_app_server_id || ',
CASE a.session_id WHEN ''""'' THEN -100 ELSE CAST(a.session_id AS bigint) END,
COALESCE(dc_site_sk,-2),
CAST(a.location_id AS integer),
CAST(a.location_quality AS integer),
COALESCE(partner_module_sk,-2),
CASE a.location_quality WHEN ''100'' THEN 1 ELSE 0 END,
a.user_agent
FROM staging.' || v_rec.data_file_target_table || ' a
WHERE a.user_agent_sk is null OR a.user_agent_sk < 0
;';

EXECUTE v_cmd;

/* get rowcount GET DIAGNOSTICS won't work here 'cause
we're inserting into a partitioned table */
v_cmd := 'SELECT COUNT(*) FROM adstraffic.ad_response_fact a
WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
AND a.data_file_id=' || v_rec.data_file_id;

--RAISE DEBUG 'v_cmd=%',v_cmd;

EXECUTE v_cmd INTO STRICT v_row_count;

/* on successful load, truncate staging tables */
v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
EXECUTE v_cmd;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
WHERE data_file_id=v_rec.data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_response_fact_load(''%'',%)',timeofday(),p_app_server,p_file_config_id;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_response_fact_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ad_response_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_ad_response_fact_load(p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_response_fact_load_by_app(text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_response_fact_load_by_app(p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_response_fact_load_by_app
||
|| Load routine for adcel responses fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_ad_response_fact_load_by_app.sql 4422 2009-02-01 11:49:14 thohoang $
||                                        2012-03-21 23:50:10 thohoang
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;
 v_table_name             TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_ad_response_fact_load_by_app(''%'',%)',timeofday(),p_app_server,p_file_config_id;

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'content_category_dim',
 'display_block_dim',
 'portal_dim',
 'partner_dim',
 'partner_module_dim',
 'portal_host_dim',
 'ad_network_dim'
);

IF v_dim_table_check < 7 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id = p_file_config_id
AND a.file_status = 'LR' -- need load into ad_response_fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_load_adcel_data(%,%)'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

RAISE NOTICE 'v_rec.server_name=%',v_rec.server_name;

v_previous_file_status:=v_rec.file_status;
v_file_status:='SU';

/* get min/max eastern date keys for constraint exclusion in partitioned table
(in case we want to do future processing on this file) */
-- earliest/latest date_dim keys; anything earlier or later gets dropped
v_cmd := '
SELECT min(eastern_date), max(eastern_date)
FROM staging.' || v_rec.data_file_target_table || '
WHERE data_file_id = ' || v_rec.data_file_id::text || '
  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
;';

EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

SELECT date_sk INTO v_min_eastern_date_sk
FROM refer.date_dim
WHERE full_date=v_min_eastern_date;

SELECT date_sk INTO v_max_eastern_date_sk
FROM refer.date_dim
WHERE full_date=v_max_eastern_date;

RAISE NOTICE 'FACT LOADING...';

v_app_server_id:=-1;
v_table_name:='';
IF v_rec.data_file_config_id = 16 THEN
 v_app_server_id:=3;
 v_table_name:='ad_response_fact_app3';
ELSIF v_rec.data_file_config_id = 17 THEN
 v_app_server_id:=4;
 v_table_name:='ad_response_fact_app4';
ELSIF v_rec.data_file_config_id = 18 THEN
 v_app_server_id:=6;
 v_table_name:='ad_response_fact_app6';
ELSIF v_rec.data_file_config_id = 19 THEN
 v_app_server_id:=8;
 v_table_name:='ad_response_fact_app8';
ELSIF v_rec.data_file_config_id = 20 THEN
 v_app_server_id:=9;
 v_table_name:='ad_response_fact_app9';
ELSIF v_rec.data_file_config_id = 27 THEN
 v_app_server_id:=12;
 v_table_name:='ad_response_fact_app12';
ELSIF v_rec.data_file_config_id = 28 THEN
 v_app_server_id:=13;
 v_table_name:='ad_response_fact_app13';
ELSIF v_rec.data_file_config_id = 29 THEN
 v_app_server_id:=14;
 v_table_name:='ad_response_fact_app14';
ELSIF v_rec.data_file_config_id = 81 THEN
 v_app_server_id:=15;
 v_table_name:='ad_response_fact_app015';
ELSIF v_rec.data_file_config_id = 82 THEN
 v_app_server_id:=3;
 v_table_name:='ad_response_fact_app3';
ELSIF v_rec.data_file_config_id = 83 THEN
 v_app_server_id:=4;
 v_table_name:='ad_response_fact_app4';
ELSIF v_rec.data_file_config_id = 84 THEN
 v_app_server_id:=6;
 v_table_name:='ad_response_fact_app6';
ELSIF v_rec.data_file_config_id = 85 THEN
 v_app_server_id:=8;
 v_table_name:='ad_response_fact_app8';
ELSIF v_rec.data_file_config_id = 86 THEN
 v_app_server_id:=9;
 v_table_name:='ad_response_fact_app9';
ELSIF v_rec.data_file_config_id = 87 THEN
 v_app_server_id:=12;
 v_table_name:='ad_response_fact_app12';
ELSIF v_rec.data_file_config_id = 88 THEN
 v_app_server_id:=13;
 v_table_name:='ad_response_fact_app13';
ELSIF v_rec.data_file_config_id = 89 THEN
 v_app_server_id:=14;
 v_table_name:='ad_response_fact_app14';
ELSIF v_rec.data_file_config_id = 90 THEN
 v_app_server_id:=15;
 v_table_name:='ad_response_fact_app015';
END IF;

v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET duration = 0 WHERE (char_length(duration) = 5 and duration > ''327%'') OR (char_length(duration) > 7);';
EXECUTE v_cmd;

--  Add on Nov 26 2011 by thohoang
v_cmd := 'UPDATE staging.' || v_rec.data_file_target_table || ' SET remote_ip = null WHERE remote_ip = ''null'';';
EXECUTE v_cmd;

v_cmd := '
INSERT INTO adstraffic.' || v_table_name || ' (
eastern_date_sk,
eastern_time_sk,
local_date_sk,
local_time_sk,
gmt_date_sk,
gmt_time_sk,
portal_sk,
partner_sk,
ad_content_category_sk,
ad_network_sk,
user_agent_sk,
remote_ip,
session_id,
request_guid,
ad_response_url,
status_code,
duration,
fullfilled_code,
fullfilled_code_count,
fullfilled_code_y,
fullfilled_code_n,
fullfilled_code_e,
fullfilled_code_t,
placement_id,
gen_ad_response_app_id,
app_server,
data_file_id,
app_server_id,
transaction_id,
dc_site_sk,
location_id,
location_quality,
partner_module_sk,
location_quality_100)
SELECT 
COALESCE(eastern_date_sk,-2),
COALESCE(eastern_time_sk,-2),
COALESCE(local_date_sk,-2),
COALESCE(local_time_sk,-2),
COALESCE(gmt_date_sk,-2),
COALESCE(gmt_time_sk,-2),
COALESCE(portal_sk,-2),
COALESCE(partner_sk,-2),
COALESCE(ad_content_category_sk,-2),
COALESCE(ad_network_sk,-2),
COALESCE(user_agent_sk,-2),
CAST(a.remote_ip as inet),
a.session_id,
a.request_guid,
a.ad_response_url,
CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
CAST(a.duration AS smallint),
a.fullfilled_code,
CAST(a.fullfilled_code_count AS smallint),
CAST(a.fullfilled_code_y AS smallint),
CAST(a.fullfilled_code_n AS smallint),
CAST(a.fullfilled_code_e AS smallint),
CAST(a.fullfilled_code_t AS smallint),
CAST(a.placement_id AS integer),
a.' || v_rec.data_file_target_table || '_id,
a.app_server,
a.data_file_id,
' || v_app_server_id || ',
CASE a.session_id WHEN ''""'' THEN -100 ELSE CAST(a.session_id AS bigint) END,
COALESCE(dc_site_sk,-2),
CAST(a.location_id AS integer),
CAST(a.location_quality AS integer),
COALESCE(partner_module_sk,-2),
CASE a.location_quality WHEN ''100'' THEN 1 ELSE 0 END
FROM staging.' || v_rec.data_file_target_table || ' a
WHERE a.user_agent_sk > 0
;';

--RAISE NOTICE 'v_cmd=%',v_cmd;

EXECUTE v_cmd;

RAISE NOTICE 'MISSING USER AGENT...';

-- copy unresolve user agent to update table
v_cmd := '
INSERT INTO adstraffic.' || v_table_name || '_user_agent (
eastern_date_sk,
eastern_time_sk,
local_date_sk,
local_time_sk,
gmt_date_sk,
gmt_time_sk,
portal_sk,
partner_sk,
ad_content_category_sk,
ad_network_sk,
user_agent_sk,
remote_ip,
session_id,
request_guid,
ad_response_url,
status_code,
duration,
fullfilled_code,
fullfilled_code_count,
fullfilled_code_y,
fullfilled_code_n,
fullfilled_code_e,
fullfilled_code_t,
placement_id,
gen_ad_response_app_id,
app_server,
data_file_id,
app_server_id,
transaction_id,
dc_site_sk,
location_id,
location_quality,
partner_module_sk,
location_quality_100,
user_agent)
SELECT 
COALESCE(eastern_date_sk,-2),
COALESCE(eastern_time_sk,-2),
COALESCE(local_date_sk,-2),
COALESCE(local_time_sk,-2),
COALESCE(gmt_date_sk,-2),
COALESCE(gmt_time_sk,-2),
COALESCE(portal_sk,-2),
COALESCE(partner_sk,-2),
COALESCE(ad_content_category_sk,-2),
COALESCE(ad_network_sk,-2),
COALESCE(user_agent_sk,-2),
CAST(a.remote_ip as inet),
a.session_id,
a.request_guid,
a.ad_response_url,
CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END,
CAST(a.duration AS smallint),
a.fullfilled_code,
CAST(a.fullfilled_code_count AS smallint),
CAST(a.fullfilled_code_y AS smallint),
CAST(a.fullfilled_code_n AS smallint),
CAST(a.fullfilled_code_e AS smallint),
CAST(a.fullfilled_code_t AS smallint),
CAST(a.placement_id AS integer),
a.' || v_rec.data_file_target_table || '_id,
a.app_server,
a.data_file_id,
' || v_app_server_id || ',
CASE a.session_id WHEN ''""'' THEN -100 ELSE CAST(a.session_id AS bigint) END,
COALESCE(dc_site_sk,-2),
CAST(a.location_id AS integer),
CAST(a.location_quality AS integer),
COALESCE(partner_module_sk,-2),
CASE a.location_quality WHEN ''100'' THEN 1 ELSE 0 END,
a.user_agent
FROM staging.' || v_rec.data_file_target_table || ' a
WHERE a.user_agent_sk is null OR a.user_agent_sk < 0
;';

EXECUTE v_cmd;

RAISE NOTICE 'COUNTING RECORDS...';

/* get rowcount GET DIAGNOSTICS won't work here 'cause
we're inserting into a partitioned table */
v_cmd := 'SELECT COUNT(*) FROM adstraffic.' || v_table_name || ' a
WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
AND a.data_file_id=' || v_rec.data_file_id;

--RAISE DEBUG 'v_cmd=%',v_cmd;

--EXECUTE v_cmd INTO STRICT v_row_count;
v_row_count := 1;

/* on successful load, truncate staging tables */
v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
EXECUTE v_cmd;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
WHERE data_file_id=v_rec.data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_response_fact_load_by_app(''%'',%)',timeofday(),p_app_server,p_file_config_id;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_response_fact_load_by_app(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ad_response_fact_load_by_app',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_ad_response_fact_load_by_app(p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ad_response_insert_user_agent(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ad_response_insert_user_agent() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_ad_response_fact_load
||
|| Load routine for adcel response fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_ad_response_fact_load.sql 4422 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status            staging.data_file.file_status%TYPE;
 v_previous_file_status   staging.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_session_padding        INTEGER;
 v_max_session_duration   INTEGER;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_ad_response_insert_user_agent()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM dw.data_current_up_to_date
WHERE table_name IN (
 'content_category_dim',
 'display_block_dim',
 'portal_dim',
 'partner_dim',
 'partner_module_dim',
 'portal_host_dim',
 'ad_network_dim'
);

IF v_dim_table_check < 7 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM staging.data_file a
INNER JOIN staging.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (16,17,18,19,20)
AND a.file_status = 'UA' -- need insert new user agent
AND a.file_timestamp <= v_current_up_to -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_load_adcel_data(%,%)'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

v_previous_file_status:=v_rec.file_status;
v_file_status:='LR';

RAISE NOTICE '% - % ''%''',timeofday(),v_rec.data_file_id,v_rec.file_name;

/******************/
/* DIMENSION LOAD */
/*****************/
/* insert missing user agents */
v_cmd := '
INSERT INTO dw.user_agent_dim (user_agent_name,device_manufacturer,
device_type,organic,auto_generated,suppress,data_file_id)
SELECT distinct a.user_agent,''Unallocated'',
''Unallocated'',FALSE,TRUE,FALSE,a.data_file_id
FROM staging.' || v_rec.data_file_target_table || ' a
WHERE NOT EXISTS (
                   SELECT 1
                   FROM dw.user_agent_dim b
                   WHERE a.user_agent=b.user_agent_name
				  )
AND a.user_agent IS NOT NULL
AND a.data_file_id = ' || v_rec.data_file_id || '
;';

--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
EXECUTE v_cmd;


/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=v_rec.data_file_id;

RAISE DEBUG 'ENDING: % fn_ad_response_insert_user_agent()',timeofday();

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_ad_response_insert_user_agent(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_response_insert_user_agent',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_ad_response_insert_user_agent() OWNER TO warehouse_dbo;

--
-- Name: fn_adm_advertiser_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_advertiser_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_advertiser_dim_load
||
|| Load routine for adm advertiser dimension.
||
|| $Id: fn_adm_advertiser_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_advertiser_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_advertiser_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_advertiser_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_advertiser a 
WHERE a.advertiser_id=b.advertiser_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.name<>b.name OR
a.created_at::timestamp with time zone<>b.created_at OR
a.updated_at::timestamp with time zone<>b.updated_at OR
a.publisher_id<>b.publisher_id OR
a.organization_id<>b.organization_id OR
a.kind_id<>b.kind_id OR
a.notes<>b.notes OR
a.email<>b.email
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_advertiser_dim(
            advertiser_id, "name", publisher_id, organization_id, 
            created_at, updated_at, kind_id, notes, email, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, name_current)
SELECT a.advertiser_id, a.name, a.publisher_id, a.organization_id,
       a.created_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.kind_id, a.notes, a.email, FALSE, 
       FALSE, a.data_file_id, dt_expire_old + interval '1 second', '9999-12-31', 'N/A'
FROM staging.stg_adm_advertiser a
INNER JOIN refer.adm_advertiser_dim b ON a.advertiser_id=b.advertiser_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_advertiser_dim(
            advertiser_id, "name", publisher_id, organization_id, 
            created_at, updated_at, kind_id, notes, email, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, name_current)
SELECT a.advertiser_id, a.name, a.publisher_id, a.organization_id,
       a.created_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.kind_id, a.notes, a.email, FALSE, 
       FALSE, a.data_file_id, dt_expire_old + interval '1 second', '9999-12-31', 'N/A'
FROM staging.stg_adm_advertiser a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_advertiser_dim b 
WHERE a.advertiser_id=b.advertiser_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_advertiser_dim b
SET     name_current=a.name
FROM staging.stg_adm_advertiser a
WHERE a.advertiser_id=b.advertiser_id
AND a.data_file_id=p_data_file_id
AND (   b.name_current<>a.name )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_advertiser_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_advertiser_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_advertiser_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_advertiser_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_advertiser_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_advertiser_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm advertiser dimension.
||
|| $Id: fn_adm_advertiser_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_advertiser_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_advertiser_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_advertiser_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_advertiser_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_advertiser_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_advertiser_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_advertiser_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_advertiser_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_advertiser_dim_transform
||
|| Transform routine for adm advertiser dimension.
||
|| $Id: fn_adm_advertiser_dim_transform.sql 4383 2011-12-20 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_advertiser_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_advertiser
SET
 advertiser_id=COALESCE(advertiser_id,-100),
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 publisher_id=COALESCE(publisher_id,-100),
 organization_id=COALESCE(organization_id,-100),
 kind_id=COALESCE(kind_id,-100),
 notes=COALESCE(rtrim(ltrim(notes)),''),
 email=COALESCE(rtrim(ltrim(email)),'')
WHERE data_file_id=p_data_file_id;

/* Transform text - replace ##### to comma */
/* We are fixing for importing CSV to Table
UPDATE staging.stg_adm_advertiser
SET
 "name"=replace("name", '#####', ',')
WHERE data_file_id=p_data_file_id;
 */
 
SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_advertiser
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_advertiser_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_advertiser_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_advertiser_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_channel_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_channel_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_channel_dim_load
||
|| Load routine for adm channel dimension.
||
|| $Id: fn_adm_channel_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_channel_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_channel_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_channel_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_channel a 
WHERE a.id=b.channel_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.keyname<>b.keyname OR
a.name<>b.name OR
a.portal_id<>b.portal_id OR
a.portal_sk<>b.portal_sk
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_channel_dim(
            channel_id, keyname, "name", portal_id, portal_sk, 
            auto_generated, suppress, data_file_id, dt_effective, dt_expire, 
            name_current, keyname_current)
SELECT a.id, a.keyname, a.name, a.portal_id, a.portal_sk, 
       FALSE, FALSE, a.data_file_id, dt_expire_old + interval '1 second', '9999-12-31', 
       'N/A', 'N/A'
FROM staging.stg_adm_channel a
INNER JOIN refer.adm_channel_dim b ON a.id=b.channel_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_channel_dim(
            channel_id, keyname, "name", portal_id, portal_sk, 
            auto_generated, suppress, data_file_id, dt_effective, dt_expire, 
            name_current, keyname_current)
SELECT a.id, a.keyname, a.name, a.portal_id, a.portal_sk, 
       FALSE, FALSE, a.data_file_id, dt_expire_old + interval '1 second', '9999-12-31', 
       'N/A', 'N/A'
FROM staging.stg_adm_channel a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_channel_dim b 
WHERE a.id=b.channel_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_channel_dim b
SET     keyname_current=a.keyname,
        name_current=a.name
FROM staging.stg_adm_channel a
WHERE a.id=b.channel_id
AND a.data_file_id=p_data_file_id
AND (   b.keyname_current<>a.keyname OR
        b.name_current<>a.name )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_channel_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_channel_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_channel_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_channel_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_channel_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_channel_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm channel dimension.
||
|| $Id: fn_adm_channel_dim_main.sql 88 2012-02-17 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_channel_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_channel_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_channel_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_channel_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_channel_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_adm_channel_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_channel_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_channel_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_channel_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_channel_dim_transform
||
|| Transform routine for adm channel dimension.
||
|| $Id: fn_adm_channel_dim_transform.sql 4383 2012-02-17 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_channel_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_channel
SET
 id=COALESCE(id,-100),
 keyname=COALESCE(rtrim(ltrim(keyname)),'N/A'),
 "name"=COALESCE(rtrim(ltrim("name")),'N/A')
WHERE data_file_id=p_data_file_id;

UPDATE staging.stg_adm_channel a
SET
 portal_id=b.portal_id,
 portal_sk=b.portal_sk
FROM refer.portal_dim b
WHERE a.data_file_id=p_data_file_id
  AND b.keyword = a.keyname
  AND b.dt_expire = '9999-12-31';

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_channel
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_channel_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_channel_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_channel_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_creative_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_creative_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_creative_dim_load
||
|| Load routine for adm creative dimension.
||
|| $Id: fn_adm_creative_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_creative_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_creative_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_creative_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_creative a 
WHERE a.creative_id=b.creative_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.name<>b.name OR
a.remote_id<>b.remote_id OR
a.created_at::timestamp with time zone<>b.created_at OR
a.flight_id<>b.flight_id OR
a.campaign_id<>b.campaign_id OR
a.third_party<>b.third_party OR
a.updated_at::timestamp with time zone<>b.updated_at OR
a.updated_by<>b.updated_by OR
a.impressio_tracking_url<>b.impressio_tracking_url OR
a.click_through_url<>b.click_through_url OR
a.click_tracking_url<>b.click_tracking_url OR
a.digest<>b.digest OR
a.active<>b.active
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_creative_dim(
            creative_id, "name", remote_id, created_at, flight_id, 
            campaign_id, third_party, updated_at, updated_by, impressio_tracking_url, 
            click_through_url, click_tracking_url, digest, active, auto_generated, suppress, 
            data_file_id, dt_effective, dt_expire, name_current, digest_current)
SELECT a.creative_id, a.name, a.remote_id, a.created_at::timestamp with time zone, a.flight_id,
       a.campaign_id, a.third_party, a.updated_at::timestamp with time zone, a.updated_by, a.impressio_tracking_url, 
       a.click_through_url, a.click_tracking_url, a.digest, a.active, FALSE, FALSE,
       a.data_file_id, dt_expire_old + interval '1 second','9999-12-31', 'N/A', 'N/A'
FROM staging.stg_adm_creative a
INNER JOIN refer.adm_creative_dim b ON a.creative_id=b.creative_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_creative_dim(
            creative_id, "name", remote_id, created_at, flight_id, 
            campaign_id, third_party, updated_at, updated_by, impressio_tracking_url, 
            click_through_url, click_tracking_url, digest, active, auto_generated, suppress, 
            data_file_id, dt_effective, dt_expire, name_current, digest_current)
SELECT a.creative_id, a.name, a.remote_id, a.created_at::timestamp with time zone, a.flight_id,
       a.campaign_id, a.third_party, a.updated_at::timestamp with time zone, a.updated_by, a.impressio_tracking_url, 
       a.click_through_url, a.click_tracking_url, a.digest, a.active, FALSE, FALSE,
       a.data_file_id, dt_expire_old + interval '1 second','9999-12-31', 'N/A', 'N/A'
FROM staging.stg_adm_creative a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_creative_dim b 
WHERE a.creative_id=b.creative_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_creative_dim b
SET     name_current=a.name
       ,digest_current=a.digest
FROM staging.stg_adm_creative a
WHERE a.creative_id=b.creative_id
AND a.data_file_id=p_data_file_id
AND (   b.name_current<>a.name OR 
        b.digest_current<>a.digest)
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_creative_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_creative_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_creative_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_creative_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_creative_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_creative_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm creative dimension.
||
|| $Id: fn_adm_creative_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_creative_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_creative_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_creative_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_creative_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_creative_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_creative_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_creative_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_creative_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_creative_dim_transform
||
|| Transform routine for site dimension.
||
|| $Id: fn_adm_creative_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_creative_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_creative
SET
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 remote_id=COALESCE(remote_id,-100),
 flight_id=COALESCE(flight_id,-100),
 campaign_id=COALESCE(campaign_id,-100),
 third_party=COALESCE(third_party,false),
 creative_id=COALESCE(creative_id,-100),
 updated_by=COALESCE(rtrim(ltrim(updated_by)),''),
 impressio_tracking_url=COALESCE(rtrim(ltrim(impressio_tracking_url)),''),
 click_through_url=COALESCE(rtrim(ltrim(click_through_url)),''),
 click_tracking_url=COALESCE(rtrim(ltrim(click_tracking_url)),''),
 digest=COALESCE(digest,'N/A'),
 active=COALESCE(active,false)
WHERE data_file_id=p_data_file_id;
  
SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_creative
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_creative_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_creative_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_creative_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_flight_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_flight_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_flight_dim_load
||
|| Load routine for adm flight dimension.
||
|| $Id: fn_adm_flight_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_flight_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_flight_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_flight_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_flight a 
WHERE a.flight_id=b.flight_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.remote_id<>b.remote_id OR
a.salt<>b.salt OR
a.start_date::timestamp without time zone<>COALESCE(b.start_date,'9999-12-31') OR
a.created_at::timestamp with time zone<>b.created_at OR
a.share_of_voice<>b.share_of_voice OR
a.creatives_count<>b.creatives_count OR
a.impressions<>b.impressions OR
a.quantity<>b.quantity OR
a.order_id<>b.order_id OR
a.submitted_at::timestamp with time zone<>b.submitted_at OR
a.updated_at::timestamp with time zone<>b.updated_at OR
a.paused_at::timestamp with time zone<>b.paused_at OR
a.rate<>b.rate OR
a.ready_at::timestamp with time zone<>b.ready_at OR
a.cancelled_at::timestamp with time zone<>b.cancelled_at OR
a.clicks<>b.clicks OR
a.approved_at::timestamp with time zone<>b.approved_at OR
a.complete<>b.complete OR
a.updated_by<>b.updated_by OR
a.budget<>b.budget OR
a.end_date::timestamp without time zone<>COALESCE(b.end_date,'9999-12-31') OR
a.number<>b.number OR
a.metric<>b.metric OR
a.digest<>b.digest OR
a."name"<>b."name" OR
a.placement_ids<>b.placement_ids OR
a.zone_ids<>b.zone_ids OR
a.target_ids<>b.target_ids OR
a.metro_id<>b.metro_id OR
a.ad_unit_id<>b.ad_unit_id OR
a.bundle_package<>b.bundle_package OR
a.kind<>b.kind
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_flight_dim(
            flight_id, remote_id, salt, start_date, created_at, 
            share_of_voice, creatives_count, impressions, quantity, order_id, 
            submitted_at, updated_at, paused_at, rate, ready_at, cancelled_at, 
            clicks, approved_at, complete, updated_by, budget, end_date, 
            "number", metric, digest, "name", placement_ids, zone_ids,
            target_ids, metro_id, ad_unit_id, bundle_package, kind, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, rate_current, budget_current, metric_current, start_date_current, end_date_current, digest_current, name_current, kind_current)
SELECT a.flight_id, a.remote_id, a.salt, a.start_date::timestamp without time zone, a.created_at::timestamp with time zone, 
       a.share_of_voice, a.creatives_count, a.impressions, a.quantity, a.order_id, 
       a.submitted_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.paused_at::timestamp with time zone, a.rate, a.ready_at::timestamp with time zone, a.cancelled_at::timestamp with time zone, 
       a.clicks, a.approved_at::timestamp with time zone, a.complete, a.updated_by, a.budget, a.end_date::timestamp without time zone, 
       a.number, a.metric, a.digest, a.name, a.placement_ids, a.zone_ids,
       a.target_ids, a.metro_id, a.ad_unit_id, a.bundle_package, a.kind, FALSE, FALSE, a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 0, 0, 'N/A','9999-12-31','9999-12-31','N/A','N/A','N/A'
FROM staging.stg_adm_flight a
INNER JOIN refer.adm_flight_dim b ON a.flight_id=b.flight_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_flight_dim(
            flight_id, remote_id, salt, start_date, created_at, 
            share_of_voice, creatives_count, impressions, quantity, order_id, 
            submitted_at, updated_at, paused_at, rate, ready_at, cancelled_at, 
            clicks, approved_at, complete, updated_by, budget, end_date, 
            "number", metric, digest, "name", placement_ids, zone_ids,
            target_ids, metro_id, ad_unit_id, bundle_package, kind, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, rate_current, budget_current, metric_current,start_date_current, end_date_current, digest_current, name_current, kind_current)
SELECT a.flight_id, a.remote_id, a.salt, a.start_date::timestamp without time zone, a.created_at::timestamp with time zone, 
       a.share_of_voice, a.creatives_count, a.impressions, a.quantity, a.order_id, 
       a.submitted_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.paused_at::timestamp with time zone, a.rate, a.ready_at::timestamp with time zone, a.cancelled_at::timestamp with time zone, 
       a.clicks, a.approved_at::timestamp with time zone, a.complete, a.updated_by, a.budget, a.end_date::timestamp without time zone, 
       a.number, a.metric, a.digest, a.name, a.placement_ids, a.zone_ids,
       a.target_ids, a.metro_id, a.ad_unit_id, a.bundle_package, a.kind, FALSE, FALSE, a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 0, 0, 'N/A','9999-12-31','9999-12-31','N/A','N/A','N/A'
FROM staging.stg_adm_flight a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_flight_dim b 
WHERE a.flight_id=b.flight_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_flight_dim b
SET     rate_current=a.rate,
        budget_current=a.budget,
        metric_current=a.metric,
        start_date_current=a.start_date::timestamp without time zone,
        end_date_current=a.end_date::timestamp without time zone,
        digest_current=a.digest,
        name_current=a.name,
        kind_current=a.kind
FROM staging.stg_adm_flight a
WHERE a.flight_id=b.flight_id
AND a.data_file_id=p_data_file_id
AND (   b.rate_current<>a.rate OR
        b.budget_current<>a.budget OR
        b.metric_current<>a.metric OR
        b.start_date_current<>a.start_date::timestamp without time zone OR
        b.end_date_current<>a.end_date::timestamp without time zone OR
        b.digest_current<>a.digest OR
        b.name_current<>a.name OR
        b.kind_current<>a.kind)
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_flight_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_flight_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_flight_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_flight_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_flight_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_flight_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm website dimension.
||
|| $Id: fn_adm_flight_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_flight_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_flight_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_flight_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_flight_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_flight_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_flight_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_flight_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_flight_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_flight_dim_transform
||
|| Transform routine for adm flight dimension.
||
|| $Id: fn_adm_flight_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_flight_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_flight
SET
 order_id=COALESCE(order_id,-100),
 remote_id=COALESCE(remote_id,-100),
 flight_id=COALESCE(flight_id,-100),
 digest=COALESCE(digest,'N/A'),
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 placement_ids=COALESCE(placement_ids,''),
 zone_ids=COALESCE(zone_ids,''),
 target_ids=COALESCE(target_ids,''),
 metro_id=COALESCE(metro_id,-100),
 ad_unit_id=COALESCE(ad_unit_id,-100),
 bundle_package=COALESCE(bundle_package,'N/A')
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_flight
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_flight_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_flight_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_flight_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_order_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_order_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_order_dim_load
||
|| Load routine for adm order dimension.
||
|| $Id: fn_adm_order_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_order_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_order_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_order_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_order a 
WHERE a.order_id=b.order_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a."name"<>b."name" OR
a.order_date::timestamp without time zone<>COALESCE(b.order_date,'9999-12-31') OR
a.platform_id<>b.platform_id OR
a.remote_id<>b.remote_id OR
a.start_date::timestamp without time zone<>COALESCE(b.start_date,'9999-12-31') OR
a.created_at::timestamp with time zone<>COALESCE(b.created_at,'9999-12-31') OR
a.updated_at::timestamp with time zone<>COALESCE(b.updated_at,'9999-12-31') OR
a.advertiser_id<>b.advertiser_id OR
a.advertiser_io<>b.advertiser_io OR
a.updated_by<>b.updated_by OR
a.end_date::timestamp without time zone<>COALESCE(b.end_date,'9999-12-31') OR
a.flights_count<>b.flights_count OR
a.organization_id<>b.organization_id OR
a.publisher_id<>b.publisher_id OR
a.kind<>b.kind OR
a."number"<>b."number" OR
a.website_id<>b.website_id OR
a.network<>b.network OR
a.network_id<>b.network_id
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_order_dim(
            order_id, "name", order_date, platform_id, remote_id, 
            start_date, created_at, updated_at, advertiser_id, advertiser_io, updated_by, 
            end_date, flights_count, organization_id, publisher_id, kind, 
            "number", website_id, network, network_id, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, name_current, kind_current, number_current, flights_count_current)
SELECT a.order_id, a."name", a.order_date::timestamp without time zone, a.platform_id, a.remote_id, 
       a.start_date::timestamp without time zone, a.created_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.advertiser_id, a.advertiser_io, a.updated_by, 
       a.end_date::timestamp without time zone, a.flights_count, a.organization_id, a.publisher_id, a.kind, 
       a."number", a.website_id, a.network, a.network_id, FALSE, FALSE, a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 'N/A', 'N/A', 'N/A', 0
FROM staging.stg_adm_order a
INNER JOIN refer.adm_order_dim b ON a.order_id=b.order_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_order_dim(
            order_id, "name", order_date, platform_id, remote_id, 
            start_date, created_at, updated_at, advertiser_id, advertiser_io, updated_by, 
            end_date, flights_count, organization_id, publisher_id, kind, 
            "number", website_id, network, network_id, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, name_current, kind_current, number_current, flights_count_current)
SELECT a.order_id, a."name", a.order_date::timestamp without time zone, a.platform_id, a.remote_id, 
       a.start_date::timestamp without time zone, a.created_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.advertiser_id, a.advertiser_io, a.updated_by, 
       a.end_date::timestamp without time zone, a.flights_count, a.organization_id, a.publisher_id, a.kind, 
       a."number", a.website_id, a.network, a.network_id, FALSE, FALSE, a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 'N/A', 'N/A', 'N/A', 0
FROM staging.stg_adm_order a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_order_dim b 
WHERE a.order_id=b.order_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_order_dim b
SET     name_current=a.name,
        kind_current=a.kind,
        number_current=a.number,
        flights_count_current=a.flights_count
FROM staging.stg_adm_order a
WHERE a.order_id=b.order_id
AND a.data_file_id=p_data_file_id
AND (   b.name_current<>a.name OR
        b.kind_current<>a.kind OR
        b.number_current<>a.number OR
        b.flights_count_current<>a.flights_count)
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_order_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_order_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_order_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_order_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_order_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_order_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm website dimension.
||
|| $Id: fn_adm_order_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_order_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_order_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_order_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_order_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_order_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_order_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_order_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_order_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_order_dim_transform
||
|| Transform routine for adm flight dimension.
||
|| $Id: fn_adm_order_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_order_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_order
SET
 order_id=COALESCE(order_id,-100),
 platform_id=COALESCE(platform_id,-100),
 remote_id=COALESCE(remote_id,-100),
 advertiser_id=COALESCE(advertiser_id,-100),
 organization_id=COALESCE(organization_id,-100),
 publisher_id=COALESCE(publisher_id,-100),
 kind=COALESCE(rtrim(ltrim(kind)),'N/A'),
 "number"=COALESCE(rtrim(ltrim("number")),'N/A'),
 website_id=COALESCE(website_id,-100),
 network_id = CASE
                  WHEN network = true THEN 2
                  WHEN network = false THEN 1
              END
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_order
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_order_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_order_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_order_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_organization_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_organization_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_organization_dim_load
||
|| Load routine for adm organization dimension.
||
|| $Id: fn_adm_organization_dim_load.sql 5343 2011-12-20 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_organization_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_organization_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_organization_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_organization a 
WHERE a.organization_id=b.organization_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.name<>b.name OR
a.created_at::timestamp with time zone<>b.created_at OR
a.updated_at::timestamp with time zone<>b.updated_at OR
a.domain<>b.domain OR
a.clients_count<>b.clients_count OR
a.advertisers_count<>b.advertisers_count OR
a.active<>b.active OR
a.old_id<>b.old_id
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_organization_dim(
            organization_id, "name", created_at, updated_at, "domain", 
            clients_count, advertisers_count, active, old_id, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, name_current, domain_current)
SELECT a.organization_id, a.name, a.created_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.domain, 
       a.clients_count, a.advertisers_count, a.active, a.old_id, FALSE, 
       FALSE, a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A', 'N/A'
FROM staging.stg_adm_organization a
INNER JOIN refer.adm_organization_dim b ON a.organization_id=b.organization_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_organization_dim(
            organization_id, "name", created_at, updated_at, "domain", 
            clients_count, advertisers_count, active, old_id, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, name_current, domain_current)
SELECT a.organization_id, a.name, a.created_at::timestamp with time zone, a.updated_at::timestamp with time zone, a.domain, 
       a.clients_count, a.advertisers_count, a.active, a.old_id, FALSE, 
       FALSE, a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A', 'N/A'
FROM staging.stg_adm_organization a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_organization_dim b 
WHERE a.organization_id=b.organization_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_organization_dim b
SET     name_current=a.name,
        domain_current=a.domain
FROM staging.stg_adm_organization a
WHERE a.organization_id=b.organization_id
AND a.data_file_id=p_data_file_id
AND (   b.name_current<>a.name OR
        b.domain_current<>a.domain )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_organization_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_organization_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_organization_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_organization_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_organization_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_organization_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm organization dimension.
||
|| $Id: fn_adm_organization_dim_main.sql 88 2011-12-20 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_organization_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_organization_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_organization_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_organization_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_organization_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_organization_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_organization_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_organization_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_organization_dim_transform
||
|| Transform routine for adm organization dimension.
||
|| $Id: fn_adm_organization_dim_transform.sql 4383 2011-12-20 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_organization_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_organization
SET
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 "domain"=COALESCE(rtrim(ltrim("domain")),'N/A'),
 clients_count=COALESCE(clients_count,0),
 advertisers_count=COALESCE(advertisers_count,0),
 organization_id=COALESCE(organization_id,-100),
 active=COALESCE(active,false),
 old_id=COALESCE(old_id,0)
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_organization
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_organization_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_organization_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_organization_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_placement_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_placement_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_placement_dim_load
||
|| Load routine for dc site dimension.
||
|| $Id: fn_adm_placement_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_placement_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_placement_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_placement_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_placement a 
WHERE a.placement_id=b.placement_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.cpm<>b.cpm OR
a."name"<>b."name" OR
a.created_at::timestamp with time zone<>b.created_at OR
a.keyname<>b.keyname OR
a.website_id<>b.website_id OR
a.chanel_id<>b.chanel_id OR
a.updated_at::timestamp with time zone<>b.updated_at OR
a.monthly_impressions<>b.monthly_impressions OR
a.description<>b.description OR
a.active<>b.active
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_placement_dim(
            placement_id, cpm, "name", created_at, keyname, 
            website_id, chanel_id, updated_at, monthly_impressions, description, 
            active, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, cpm_current, name_current, keyname_current, description_current)
SELECT a.placement_id, a.cpm, a.name, a.created_at::timestamp with time zone, a.keyname, 
       a.website_id, a.chanel_id, a.updated_at::timestamp with time zone, a.monthly_impressions, a.description, 
       a.active, FALSE, FALSE,a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 0, 'N/A', 'N/A', 'N/A'
FROM staging.stg_adm_placement a
INNER JOIN refer.adm_placement_dim b ON a.placement_id=b.placement_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_placement_dim(
            placement_id, cpm, "name", created_at, keyname, 
            website_id, chanel_id, updated_at, monthly_impressions, description, 
            active, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, cpm_current, name_current, keyname_current, description_current)
SELECT a.placement_id, a.cpm, a.name, a.created_at::timestamp with time zone, a.keyname, 
       a.website_id, a.chanel_id, a.updated_at::timestamp with time zone, a.monthly_impressions, a.description, 
       a.active, FALSE, FALSE,a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 0, 'N/A', 'N/A', 'N/A'
FROM staging.stg_adm_placement a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_placement_dim b 
WHERE a.placement_id=b.placement_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_placement_dim b
SET     cpm_current=a.cpm,
        name_current=a.name,
        description_current=a.description,
        keyname_current=a.keyname
FROM staging.stg_adm_placement a
WHERE a.placement_id=b.placement_id
AND a.data_file_id=p_data_file_id
AND (   b.cpm_current<>a.cpm OR
        b.name_current<>a.name OR
        b.description_current<>a.description OR
        b.keyname_current<>a.keyname )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_placement_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_placement_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_placement_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_placement_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_placement_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_placement_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for dc site dimension.
||
|| $Id: fn_adm_placement_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_placement_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_placement_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_placement_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_placement_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_placement_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_placement_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_placement_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_placement_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_placement_dim_transform
||
|| Transform routine for adm placement dimension.
||
|| $Id: fn_adm_placement_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_placement_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_placement
SET
 cpm=COALESCE(cpm,0),
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 keyname=COALESCE(rtrim(ltrim(keyname)),'N/A'),
 website_id=COALESCE(website_id,-100),
 chanel_id=COALESCE(chanel_id,-100),
 monthly_impressions=COALESCE(monthly_impressions,0),
 placement_id=COALESCE(placement_id,-100),
 description=COALESCE(rtrim(ltrim(description)),''),
 active=COALESCE(active,false)
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_placement
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_placement_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_placement_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_placement_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_portal_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_portal_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_portal_dim_load
||
|| Load routine for adm portal dimension.
||
|| $Id: fn_adm_portal_dim_load.sql 5343 2012-02-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_portal_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_portal_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_portal_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_portal a 
WHERE a.portal_id=b.portal_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.portal_name<>b.portal_name OR
a.channel_id<>b.channel_id
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_portal_dim(
            portal_id, portal_name, channel_id, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, portal_name_current, 
            channel_id_current)
SELECT a.portal_id, a.portal_name, a.channel_id, FALSE, 
       FALSE, a.data_file_id, dt_expire_old + interval '1 second', '9999-12-31', 'N/A', 
       -100
FROM staging.stg_adm_portal a
INNER JOIN refer.adm_portal_dim b ON a.portal_id=b.portal_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_portal_dim(
            portal_id, portal_name, channel_id, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, portal_name_current, 
            channel_id_current)
SELECT a.portal_id, a.portal_name, a.channel_id, FALSE, 
       FALSE, a.data_file_id, dt_expire_old + interval '1 second', '9999-12-31', 'N/A', 
       -100
FROM staging.stg_adm_portal a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_portal_dim b 
WHERE a.portal_id=b.portal_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_portal_dim b
SET     portal_name_current=a.portal_name,
        channel_id_current=a.channel_id
FROM staging.stg_adm_portal a
WHERE a.portal_id=b.portal_id
AND a.data_file_id=p_data_file_id
AND (   b.portal_name_current<>a.portal_name OR
        b.channel_id_current<>a.channel_id )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_portal_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_portal_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_portal_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_portal_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_portal_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_portal_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm portal dimension.
||
|| $Id: fn_adm_portal_dim_main.sql 88 2012-02-23 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_portal_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_portal_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_portal_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_portal_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_portal_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_adm_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_portal_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_portal_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_portal_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_portal_dim_transform
||
|| Transform routine for adm portal dimension.
||
|| $Id: fn_adm_portal_dim_transform.sql 4383 2012-02-23 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_portal_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_portal
SET
 portal_id=COALESCE(portal_id,-100),
 channel_id=COALESCE(channel_id,-100),
 portal_name=COALESCE(rtrim(ltrim(portal_name)),'N/A')
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_portal
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_portal_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_portal_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_portal_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_publication_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_publication_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_publication_dim_load
||
|| Load routine for adm publication dimension.
||
|| $Id: fn_adm_publication_dim_load.sql 5343 2012-01-12 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_publication_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_publication_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_publication_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_publication a 
WHERE a.publication_id=b.publication_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a."name"<>b."name" OR
a.publisher_id<>b.publisher_id OR
a.created_at::timestamp with time zone<>b.created_at OR
a.updated_at::timestamp with time zone<>b.updated_at
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_publication_dim(
            publication_id, "name", publisher_id, created_at, 
            updated_at, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, name_current)
SELECT a.publication_id, a."name", a.publisher_id, a.created_at::timestamp with time zone, 
       a.updated_at::timestamp with time zone, FALSE, FALSE, a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 'N/A'
FROM staging.stg_adm_publication a
INNER JOIN refer.adm_publication_dim b ON a.publication_id=b.publication_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_publication_dim(
            publication_id, "name", publisher_id, created_at, 
            updated_at, auto_generated, suppress, data_file_id, dt_effective, 
            dt_expire, name_current)
SELECT a.publication_id, a."name", a.publisher_id, a.created_at::timestamp with time zone, 
       a.updated_at::timestamp with time zone, FALSE, FALSE, a.data_file_id,
       dt_expire_old + interval '1 second','9999-12-31', 'N/A'
FROM staging.stg_adm_publication a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_publication_dim b 
WHERE a.publication_id=b.publication_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_publication_dim b
SET     name_current=a.name
FROM staging.stg_adm_publication a
WHERE a.publication_id=b.publication_id
AND a.data_file_id=p_data_file_id
AND (   b.name_current<>a.name)
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_publication_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_publication_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_publication_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_publication_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_publication_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_publication_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm publication dimension.
||
|| $Id: fn_adm_publication_dim_main.sql 88 2012-01-12 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_publication_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_publication_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_publication_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_publication_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_publication_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_publication_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_publication_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_publication_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_publication_dim_transform
||
|| Transform routine for adm publication dimension.
||
|| $Id: fn_adm_publication_dim_transform.sql 4383 2012-01-11 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_publication_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_publication
SET
 publication_id=COALESCE(publication_id,-100),
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 publisher_id=COALESCE(publisher_id,-100)
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_publication
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_publication_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_publication_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_publication_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_publisher_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_publisher_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_publisher_dim_load
||
|| Load routine for dc site dimension.
||
|| $Id: fn_adm_publisher_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_publisher_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_publisher_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_publisher_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_publisher a 
WHERE a.publisher_id=b.publisher_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.company_name<>b.company_name OR
a.email<>b.email OR
a.partner_group_id<>b.partner_group_id
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_publisher_dim(
            publisher_id, company_name, email, partner_group_id, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, company_name_current, 
            email_current)
SELECT a.publisher_id, a.company_name, a.email, a.partner_group_id, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A'
FROM staging.stg_adm_publisher a
INNER JOIN refer.adm_publisher_dim b ON a.publisher_id=b.publisher_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_publisher_dim(
            publisher_id, company_name, email, partner_group_id, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, company_name_current, 
            email_current)
SELECT a.publisher_id, a.company_name, a.email, a.partner_group_id, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A'
FROM staging.stg_adm_publisher a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_publisher_dim b 
WHERE a.publisher_id=b.publisher_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_publisher_dim b
SET     company_name_current=a.company_name,
        email_current=a.email
FROM staging.stg_adm_publisher a
WHERE a.publisher_id=b.publisher_id
AND a.data_file_id=p_data_file_id
AND (   b.company_name_current<>a.company_name OR
        b.email_current<>a.email )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_publisher_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_publisher_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_publisher_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_publisher_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_publisher_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_publisher_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for dc site dimension.
||
|| $Id: fn_adm_publisher_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_publisher_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_publisher_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_publisher_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_publisher_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_publisher_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_publisher_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_publisher_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_publisher_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_publisher_dim_transform
||
|| Transform routine for site dimension.
||
|| $Id: fn_adm_publisher_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_publisher_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_publisher
SET
 publisher_id=COALESCE(publisher_id,-100),
 company_name=COALESCE(rtrim(ltrim(company_name)),'N/A'),
 email=COALESCE(rtrim(ltrim(email)),'N/A'),
 partner_group_id=COALESCE(partner_group_id,-100)
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_publisher
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_publisher_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_publisher_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_publisher_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_website_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_website_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_website_dim_load
||
|| Load routine for dc site dimension.
||
|| $Id: fn_adm_website_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='adm_website_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_website_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.adm_website_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_adm_website a 
WHERE a.website_id=b.website_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.minimum_budget<>b.minimum_budget OR
a.name<>b.name OR
a.store_name<>b.store_name OR
a.created_at::timestamp with time zone<>b.created_at OR
a.keyname<>b.keyname OR
a.currency_id<>b.currency_id OR
a.updated_at::timestamp with time zone<>b.updated_at OR
a.url<>b.url OR
a.network<>b.network OR
a.introduction<>b.introduction OR
a.partner_id<>b.partner_id OR
a.publisher_id<>b.publisher_id OR
a.publication_id<>b.publication_id
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.adm_website_dim(
            website_id, minimum_budget, "name", store_name, created_at, 
            keyname, currency_id, updated_at, url, network, introduction, 
            partner_id, publisher_id, auto_generated, suppress, data_file_id, 
            dt_effective, dt_expire, minimum_budget_current, name_current, 
            store_name_current, keyname_current, introduction_current, publication_id)
SELECT a.website_id, a.minimum_budget, a.name, a.store_name, a.created_at::timestamp with time zone, 
       a.keyname, a.currency_id, a.updated_at::timestamp with time zone, a.url, a.network, a.introduction, 
       a.partner_id, a.publisher_id, FALSE, FALSE, a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 0, 'N/A',
       'N/A', 'N/A', 'N/A', a.publication_id
FROM staging.stg_adm_website a
INNER JOIN refer.adm_website_dim b ON a.website_id=b.website_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.adm_website_dim(
            website_id, minimum_budget, "name", store_name, created_at, 
            keyname, currency_id, updated_at, url, network, introduction, 
            partner_id, publisher_id, auto_generated, suppress, data_file_id, 
            dt_effective, dt_expire, minimum_budget_current, name_current, 
            store_name_current, keyname_current, introduction_current, publication_id)
SELECT a.website_id, a.minimum_budget, a.name, a.store_name, a.created_at::timestamp with time zone, 
       a.keyname, a.currency_id, a.updated_at::timestamp with time zone, a.url, a.network, a.introduction, 
       a.partner_id, a.publisher_id, FALSE, FALSE, a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 0, 'N/A',
       'N/A', 'N/A', 'N/A', a.publication_id
FROM staging.stg_adm_website a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.adm_website_dim b 
WHERE a.website_id=b.website_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.adm_website_dim b
SET     minimum_budget_current=a.minimum_budget,
        name_current=a.name,
        store_name_current=a.store_name,
        keyname_current=a.keyname,
        introduction_current=a.introduction
FROM staging.stg_adm_website a
WHERE a.website_id=b.website_id
AND a.data_file_id=p_data_file_id
AND (   b.minimum_budget_current<>a.minimum_budget OR
        b.name_current<>a.name OR
        b.store_name_current<>a.store_name OR
        b.keyname_current<>a.keyname OR
        b.introduction_current<>a.introduction )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_website_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_website_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_adm_website_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_website_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_website_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_website_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for adm website dimension.
||
|| $Id: fn_adm_website_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_adm_website_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_website_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_adm_website_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_adm_website_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adm_website_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_adm_website_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_adm_website_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adm_website_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adm_website_dim_transform
||
|| Transform routine for adm website dimension.
||
|| $Id: fn_adm_website_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adm_website_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_adm_website
SET
 minimum_budget=COALESCE(minimum_budget,0),
 "name"=COALESCE(rtrim(ltrim("name")),'N/A'),
 store_name=COALESCE(rtrim(ltrim(store_name)),'N/A'),
 keyname=COALESCE(rtrim(ltrim(keyname)),'N/A'),
 currency_id=COALESCE(currency_id,-100),
 url=COALESCE(rtrim(ltrim(url)),''),
 website_id=COALESCE(website_id,-100),
 network=COALESCE(network,false),
 introduction=COALESCE(rtrim(ltrim(introduction)),''),
 partner_id=COALESCE(partner_id,-100),
 publisher_id=COALESCE(publisher_id,-100),
 publication_id=COALESCE(publication_id,-100)
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_adm_website
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_adm_website_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_adm_website_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_adm_website_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_adnetwork_mapping_ga_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adnetwork_mapping_ga_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adnetwork_mapping_ga_load
||
|| Load google adsense mapping data.
||
|| $Id: fn_adnetwork_mapping_ga_load.sql 5343 2011-11-16 21:06:34Z thohoang $
||
*/

DECLARE
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adnetwork_mapping_ga_load()',timeofday();

/* tranform data */
SELECT count(*) INTO v_count FROM staging.stg_mapping_ga;
IF v_count = 0 THEN
	RAISE NOTICE 'NO DATA';
	RETURN 'NO';
END IF;

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_mapping_ga
SET
 partner_id=COALESCE(partner_id,'-200'),
 new_google_adsense_site = COALESCE(new_google_adsense_site,'N/A')
;

/* UPDATE partner/group */
UPDATE staging.stg_mapping_ga a
SET partner_keyword = b.keyword
,partner_name = b.name_current
,partner_group_id = b.parent1_id_current::text
,partner_group_name = b.parent1_name_current
FROM refer.partner_dim b
WHERE b.dt_expire = '9999-12-31'
AND a.partner_id::integer = b.partner_id;

/* SCD2 */
/* expire changed dim records */
UPDATE adnetwork.mapping_ga a
SET partner_keyword=b.partner_keyword
,partner_id = b.partner_id::integer
,partner_name=b.partner_name
,partner_group_id=b.partner_group_id::integer
,partner_group_name=b.partner_group_name
,new_google_adsense_site=b.new_google_adsense_site
,note=b.note
FROM staging.stg_mapping_ga b
WHERE a.current_google_adsense_site=b.current_google_adsense_site;

/* add new records to replace the ones we just expired */
INSERT INTO adnetwork.mapping_ga(
            current_google_adsense_site, partner_keyword, partner_id, partner_name, 
            partner_group_id, partner_group_name, new_google_adsense_site, 
            note)
SELECT current_google_adsense_site, COALESCE(partner_keyword,'N/A'), partner_id::integer, partner_name, 
       partner_group_id::integer, partner_group_name, new_google_adsense_site, 
       note
  FROM staging.stg_mapping_ga a
WHERE NOT EXISTS (SELECT 1
FROM adnetwork.mapping_ga b 
WHERE a.current_google_adsense_site=b.current_google_adsense_site);

/* clean data */
TRUNCATE staging.stg_mapping_ga;

RAISE DEBUG 'ENDING: % fn_adnetwork_mapping_ga_load()',timeofday();

RETURN 'SU';

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adnetwork_mapping_ga_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN 'EF';
END;
$_$;


ALTER FUNCTION staging.fn_adnetwork_mapping_ga_load() OWNER TO warehouse_dbo;

--
-- Name: fn_adnetwork_mapping_mm_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_adnetwork_mapping_mm_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_adnetwork_mapping_mm_load
||
|| Load google adsense mapping data.
||
|| $Id: fn_adnetwork_mapping_mm_load.sql 5343 2011-11-16 21:06:34Z thohoang $
||
*/

DECLARE
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_adnetwork_mapping_mm_load()',timeofday();

/* tranform data */
SELECT count(*) INTO v_count FROM staging.stg_mapping_mm;
IF v_count = 0 THEN
	RAISE NOTICE 'NO DATA';
	RETURN 'NO';
END IF;

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_mapping_mm
SET
 partner_id=COALESCE(partner_id,'-200'),
 portal_id=COALESCE(portal_id,'-200'),
 new_millennial_media_name = COALESCE(new_millennial_media_name,'N/A')
;

/* UPDATE partner/group */
UPDATE staging.stg_mapping_mm a
SET partner_keyword = b.keyword
,partner_name = b.name_current
,group_id = b.parent1_id_current
,group_name = b.parent1_name_current
FROM refer.partner_dim b
WHERE b.dt_expire = '9999-12-31'
AND a.partner_id::integer = b.partner_id;

/* UPDATE portal */
UPDATE staging.stg_mapping_mm a
SET portal_name = b.portal_name_current
FROM refer.portal_dim b
WHERE b.dt_expire = '9999-12-31'
AND a.portal_id::integer = b.portal_id;

/* SCD2 */
/* expire changed dim records */
UPDATE adnetwork.mapping_mm a
SET partner_keyword=b.partner_keyword
,partner_id = b.partner_id::integer
,partner_name=b.partner_name
,group_id=b.group_id::integer
,group_name=b.group_name
,portal_id=b.portal_id::integer
,portal_name=b.portal_name
,new_millennial_media_name=b.new_millennial_media_name
,note=b.note
FROM staging.stg_mapping_mm b
WHERE a.current_millennial_media_name=b.current_millennial_media_name;

/* add new records to replace the ones we just expired */
INSERT INTO adnetwork.mapping_mm(
            current_millennial_media_name, partner_keyword, partner_id, partner_name, 
            group_id, group_name, portal_id, portal_name, new_millennial_media_name, 
            note)
SELECT current_millennial_media_name, COALESCE(partner_keyword,'N/A'), partner_id::integer, partner_name, 
       group_id::integer, group_name, portal_id::integer, portal_name, new_millennial_media_name, 
       note
  FROM staging.stg_mapping_mm a
WHERE NOT EXISTS (SELECT 1
FROM adnetwork.mapping_mm b 
WHERE a.current_millennial_media_name=b.current_millennial_media_name);

/* clean data */
TRUNCATE staging.stg_mapping_mm;

RAISE DEBUG 'ENDING: % fn_adnetwork_mapping_mm_load()',timeofday();

RETURN 'SU';

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_adnetwork_mapping_mm_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN 'EF';
END;
$_$;


ALTER FUNCTION staging.fn_adnetwork_mapping_mm_load() OWNER TO warehouse_dbo;

--
-- Name: fn_alter_page_view_indexes(date, date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_alter_page_view_indexes(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_alter_page_view_indexes
||
|| Generates the DDL to create partitions for the dw.page_view_fact table.  At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_alter_page_view_indexes.sql 55 2008-07-12 04:09:43Z abyfield $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE tmp_partition_info (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM dw.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

/* select results */
RETURN query SELECT
	/* drop indexes */
'DROP INDEX idx_page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_local_date_sk_local_time_sk;
DROP INDEX idx_page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_gmt_date_sk_gmt_time_sk;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_data_file_id ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (data_file_id) TABLESPACE warehouse_data1;
'
FROM tmp_partition_info;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_alter_page_view_indexes(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_alter_page_view_indexes(p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_adnetwork_summary(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_adnetwork_summary
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork summary loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_adnetwork_summary(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_adnetwork_summary(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


/* insert records */
INSERT INTO adnetwork.ba_monthly_adnetwork_summary(
            calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, requests, paid_impressions, clicks, 
            net_revenue, fullfilled_code_count, fullfilled_code_y, gross_revenue, p_net_revenue, v_net_revenue, process_id)
/* AdSense DBCLK Channel */
SELECT      calendar_year_month, month_since_2005,
            '-1' as ad_network_id, 'AdSense DBCLK Channel' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions_delivered),0) as paid_impressions,
            COALESCE(SUM(clicks_recorded),0) as clicks,
            COALESCE(SUM(estimated_earnings),0) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_adsense_dbclk_channel
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* City Grid */
SELECT      calendar_year_month, month_since_2005,
            '20,29' as ad_network_id, 'City Grid/City Grid Proxy' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            COALESCE(SUM(estimated_net_earnings),0) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_cg_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* iTunes */
SELECT      calendar_year_month, month_since_2005,
            '-1' as ad_network_id, 'iTunes' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            COALESCE(SUM(revenue),0) as net_revenue,
            0 as fullfilled_code_count,
            0 as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_it_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* JumpTap */
SELECT      calendar_year_month, month_since_2005,
            '11' as ad_network_id, 'JumpTap' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(net_revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_jt_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Millennial Media */
SELECT      calendar_year_month, month_since_2005,
            '4' as ad_network_id, 'Millennial Media' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(ads_served),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(net_revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_mm_performance
WHERE       is_active = true AND requests > 0 AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Marchex */
SELECT      calendar_year_month, month_since_2005,
            '21,28' as ad_network_id, 'Marchex/Marchex Proxy' as ad_network_name,
            COALESCE(SUM(total_ad_requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM("cost"),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_mx_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Superpages Blue */
SELECT      calendar_year_month, month_since_2005,
            '30,26' as ad_network_id, 'Superpages Prpoxy/Blue' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_sp_blue_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Where */
SELECT      calendar_year_month, month_since_2005,
            '23,25' as ad_network_id, 'Where/Where HTML' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(filled),0) as paid_impressions,
            COALESCE(SUM(clicked),0) as clicked,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_wh_performance
WHERE       is_active = true AND requests > 0 AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* AT&T Yellowpages */
SELECT      calendar_year_month, month_since_2005,
            '27' as ad_network_id, 'AT&T Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_yp_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* AT&T Static Banner Yellowpages */
SELECT      calendar_year_month, month_since_2005,
            '32' as ad_network_id, 'AT&T Static Banner Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            COALESCE(SUM(gross_revenue),0) as gross_revenue,
            COALESCE(SUM(p_net_revenue),0) as p_net_revenue,
            COALESCE(SUM(v_net_revenue),0) as v_net_revenue,
            p_process_id
FROM        adnetwork.ba_monthly_yp_sb_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_adnetwork_summary';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_adnetwork_summary(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_adnetwork_summary(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_adnetwork_summary',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_adsense_dbclk_channel(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_adsense_dbclk_channel(p_month_sk integer, p_start_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_ad_monthly_adsense_dbclk_channel
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Google AdSense - DBCLK Channel Mapping
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_adsense_dbclk_channel(%,%,%,''%'',%)',timeofday(),p_month_sk,p_start_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_adsense_dbclk_channel(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  month_sk=p_month_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* =========================================== */
/* ===== adnetwork.ad_adsense_dblck_channel ===== */

/* truncate temporary data */
TRUNCATE adnetwork.ba_adsense_dblck_channel;

/* copy new data to temporary table 


*/
INSERT INTO adnetwork.ba_adsense_dblck_channel(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, ga_channel_sk, 
       dc_site_sk, partner_sk, portal_sk, eastern_start_full_date, eastern_end_full_date, 
       impressions_delivered, clicks_recorded, channel_page_views, channel_clicks, 
       channel_page_ctr, channel_cpc, channel_page_rpm, channel_estimated_earnings, 
       total_clicks_recorded, estimated_earnings, process_id)
SELECT a.month_sk, a.eastern_start_date_sk, a.eastern_end_date_sk, a.ga_channel_sk, 
       a.dc_site_sk, a.partner_sk, a.portal_sk, a.eastern_start_full_date, a.eastern_end_full_date, 
       a.impressions_delivered, a.clicks_recorded,
       b.page_views, b.clicks, b.page_ctr, b.cpc, b.page_rpm, b.estimated_earnings, 
       0, 0, p_process_id
  FROM adnetwork.fact_monthly_ad_channel_site a
INNER JOIN adnetwork.fact_monthly_ga_channel b ON a.month_sk = b.month_sk AND a.ga_channel_sk = b.ga_channel_sk
WHERE a.month_sk = p_month_sk
  AND a.ga_channel_sk > 0;

/* update total_clicks_recorded */
UPDATE adnetwork.ba_adsense_dblck_channel a
SET total_clicks_recorded = b.total_clicks_recorded
FROM (
    SELECT ga_channel_sk, SUM(clicks_recorded) as total_clicks_recorded 
    FROM adnetwork.ba_adsense_dblck_channel 
    WHERE process_id = p_process_id
    GROUP BY ga_channel_sk
) b
WHERE a.ga_channel_sk = b.ga_channel_sk AND a.process_id = p_process_id;

/* update estimated_earnings */
UPDATE adnetwork.ba_adsense_dblck_channel
SET estimated_earnings = (channel_estimated_earnings::float/total_clicks_recorded)*clicks_recorded
WHERE total_clicks_recorded > 0 AND process_id = p_process_id;

/* =================================================== */
/* ===== adnetwork.ad_monthly_adsense_dbclk_channel ===== 

*/

INSERT INTO adnetwork.ba_monthly_adsense_dbclk_channel(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
       partner_description, parent1_id, parent1_name, partner_keyword, 
       portal_id, portal_name, portal_keyword, impressions_delivered, 
       clicks_recorded, estimated_earnings, channel_id, gross_revenue, p_net_revenue, 
       v_net_revenue, requests, fullfilled_code_count, fullfilled_code_y, 
       fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT v_calendar_year_month, v_month_since_2005, c.partner_id, c.name_current, 
       c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
       d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
       sum(impressions_delivered), sum(clicks_recorded), sum(estimated_earnings),e.channel_id ,
       sum(estimated_earnings), 0, 0, 0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.ba_adsense_dblck_channel a
INNER JOIN refer.partner_dim c on a.partner_sk = c.partner_sk 
INNER JOIN refer.portal_dim d on a.portal_sk = d.portal_sk 
--INNER jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,e.channel_id;

/*

*/
update adnetwork.ba_monthly_adsense_dbclk_channel a
set p_net_revenue = case 
                      when channel_id = 41820  then a.estimated_earnings*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.estimated_earnings*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_adsense_dbclk_channel a
set p_net_revenue =  a.estimated_earnings*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.estimated_earnings*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_adsense_dbclk_channel';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_adsense_dbclk_channel(%,%,%,''%'',%)',timeofday(),p_month_sk,p_start_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_adsense_dbclk_channel(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_month_sk,p_start_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ba_monthly_adsense_dbclk_channel',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_adsense_dbclk_channel(p_month_sk integer, p_start_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_agg_adm_data_feed(integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_agg_adm_data_feed(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_agg_adm_data_feed
||
|| Author: Phap Ta
||
|| Date: 2012-02-29
||
|| Description: 
||     monthly adm data feed loading
||
|| Parameters: 
||     - IN  p_start_date_sk              -- integer
||        date
||	   - IN  p_end_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_agg_adm_data_feed(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;

/* insert records */
INSERT INTO adm.monthly_agg_adm_data_feed(
            eastern_start_date_sk, eastern_end_date_sk, calendar_year_month, 
       month_since_2005, creative_id, placement_id, website_id, publication_id, publisher_id, portal_keyword, portal_id, 
       order_id, impressions, clicks, revenue, gross_revenue, p_net_revenue, 
       v_net_revenue, flight_id, flight_impressions, flight_metric, 
       flight_rate, flight_budget, flight_start_date, flight_end_date,network_id,partner_id , 
        adm_order_id,
	dc_order_id ,
	dc_order_start_date ,
	dc_order_end_date ,
	dc_order_cpm_booked ,
	ad_id ,
	ad_name ,
	ad_cost_type , 
        process_id)
SELECT p_start_date_sk
 ,p_end_date_sk
 ,v_calendar_year_month
 ,v_month_since_2005
 ,m.remote_id
 ,a.site_id as placement_id
 ,c.website_id
 ,d.publication_id
 ,e.publisher_id
 ,h.portal_keyword
 ,l.portal_id
 ,a.order_id
 ,SUM(a.impressions_delivered) as impressions
 ,SUM(clicks_recorded) as clicks
 ,0 
 ,0 
 ,0 
 ,0 
 ,f.flight_id 
 ,0 
 ,f.metric_current 
 ,f.rate_current 
 ,f.budget_current 
 ,f.start_date_current 
 ,f.end_date_current 
 ,g.network_id
 ,n.partner_id
 ,g.order_id,
  a.order_id ,
  a.order_start_date ,
  a.order_end_date ,
  a.order_cpm_booked ,
  a.ad_id ,
  a.ad_name ,
  a.ad_cost_type 
 ,p_process_id
FROM adnetwork.fact_monthly_ad_channel_site a
INNER JOIN  refer.adm_placement_dim b ON b.dt_expire = '9999-12-31' AND b.placement_id = a.site_id
INNER JOIN  refer.adm_website_dim c ON c.dt_expire = '9999-12-31' AND c.website_id = b.website_id
INNER JOIN  refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND d.publication_id = c.publication_id
INNER JOIN  refer.adm_publisher_dim e ON e.dt_expire = '9999-12-31' AND e.publisher_id = d.publisher_id
INNER JOIN  refer.adm_creative_dim m ON m.remote_id = a.creative_id AND m.dt_expire='9999-12-31'
INNER JOIN  refer.adm_flight_dim f ON f.dt_expire = '9999-12-31' AND f.flight_id = m.flight_id
INNER JOIN  refer.adm_order_dim g ON g.dt_expire = '9999-12-31' AND g.order_id = f.order_id
INNER JOIN  refer.adm_organization_dim i ON i.dt_expire = '9999-12-31' AND i.organization_id = g.organization_id
INNER JOIN  refer.partner_dim n ON n.partner_sk = a.partner_sk
INNER JOIN  refer.dc_site_dim h ON h.dt_expire = '9999-12-31' AND h.dc_site_id = a.site_id
INNER JOIN  refer.portal_dim l ON l.dt_expire = '9999-12-31' AND l.keyword = h.portal_keyword
LEFT JOIN   refer.adm_advertiser_dim j ON j.dt_expire = '9999-12-31' AND j.advertiser_id = g.advertiser_id


--inner join refer.adm_placement_dim b ON b.dt_expire = '9999-12-31' AND b.placement_id = a.site_id
--INNER JOIN  refer.adm_website_dim c ON c.dt_expire = '9999-12-31' AND c.website_id = b.website_id
--INNER JOIN  refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND d.publication_id = c.publication_id
--INNER JOIN  refer.adm_publisher_dim e ON e.dt_expire = '9999-12-31' AND e.publisher_id = d.publisher_id
--INNER JOIN  refer.dc_order_dim g ON g.dt_expire = '9999-12-31' AND g.dc_order_id = a.order_id
--INNER JOIN  refer.dc_site_dim h ON h.dt_expire = '9999-12-31' AND h.dc_site_id = a.site_id
--INNER JOIN  refer.portal_dim l ON l.dt_expire = '9999-12-31' AND l.keyword = h.portal_keyword
--INNER JOIN  refer.adm_portal_dim k ON k.dt_expire = '9999-12-31' AND k.portal_id = l.portal_id
--INNER JOIN  refer.adm_creative_dim m ON m.remote_id = a.creative_id AND m.dt_expire='9999-12-31'
--INNER JOIN  refer.adm_flight_dim f ON f.dt_expire = '9999-12-31' AND f.flight_id = m.flight_id
--INNER JOIN  refer.partner_dim n ON n.partner_sk = a.partner_sk
WHERE a.month_sk = v_month_since_2005
GROUP BY 
  f.flight_id
 ,c.website_id
 ,d.publication_id
 ,e.publisher_id
 --,l.keyword
-- ,k.portal_id
 ,m.remote_id
 ,n.partner_id
 ,a.site_id
 ,a.order_id
 ,f.metric_current
 ,f.rate_current
 ,f.budget_current
 ,f.start_date_current
 ,f.end_date_current
 ,g.network_id
 ,h.portal_keyword
 ,l.portal_id
 ,g.order_id,
  a.order_id ,
  a.order_start_date ,
  a.order_end_date ,
  a.order_cpm_booked ,
  a.ad_id ,
  a.ad_name ,
  a.ad_cost_type 
;

-- update flight_impressions
UPDATE adm.monthly_agg_adm_data_feed a
SET flight_impressions = COALESCE ((
        SELECT  SUM(impressions) 
        FROM   adm.monthly_agg_adm_data_feed b
        WHERE  b.month_since_2005 = a.month_since_2005
          AND  b.flight_id=a.flight_id
        GROUP BY b.month_since_2005, b.flight_id), 0)
WHERE a.month_since_2005 = v_month_since_2005 AND a.process_id = p_process_id;


-- calculate revenue
UPDATE adm.monthly_agg_adm_data_feed a
SET revenue = COALESCE ((
        CASE lower(flight_metric)
	         WHEN 'cpm'         THEN impressions * flight_rate / 1000
                 WHEN 'sponsorship' THEN impressions / flight_impressions * flight_budget / (flight_end_date::date - flight_start_date::date + 1)
                 ELSE 0
               END), 0)
WHERE a.month_since_2005 = v_month_since_2005
  AND a.process_id = p_process_id 
  AND flight_budget > 0 
  AND flight_impressions > 0
;
/* update gross revenue */
UPDATE adm.monthly_agg_adm_data_feed a
SET gross_revenue=revenue
WHERE a.process_id = p_process_id 
      and a.month_since_2005 = v_month_since_2005;

/* update revenue share for mobileweb, portal_id = 4 - Partner Portal */
update adm.monthly_agg_adm_data_feed a
set p_net_revenue = case 
                      when network_id = 1 then revenue*b.rev_share_mobileweb_local/100 
                      when network_id = 2 then revenue*b.rev_share_mobileweb_national/100
                      when network_id = 3 then revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when network_id = 1 then revenue*(100-b.rev_share_mobileweb_local)/100 
                      when network_id = 2 then revenue*(100-b.rev_share_mobileweb_national)/100
                      when network_id = 3 then revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and portal_id = 4
  and a.month_since_2005 = v_month_since_2005
;

/* update revenue share for apps, portal_id <> 4 - Partner Portal */
update adm.monthly_agg_adm_data_feed a
set p_net_revenue = case 
                      when network_id = 1 then revenue*b.rev_share_apps_local/100 
                      when network_id = 2 then revenue*b.rev_share_apps_national/100
                      when network_id = 3 then revenue*b.rev_share_apps_mediation/100
                  end
   ,v_net_revenue = case 
                      when network_id = 1 then revenue*(100-b.rev_share_apps_local)/100 
                      when network_id = 2 then revenue*(100-b.rev_share_apps_national)/100
                      when network_id = 3 then revenue*(100-b.rev_share_apps_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and portal_id > 0
  and portal_id <> 4
  and a.month_since_2005 = v_month_since_2005
;
/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_agg_adm_data_feed';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_agg_adm_data_feed(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_agg_adm_data_feed(%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ba_monthly_agg_adm_data_feed',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_agg_adm_data_feed(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_cg_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_cg_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_cg_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: City Grid/City Grid Proxy
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_cg_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_cg_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.ba_monthly_cg_performance */
INSERT INTO adnetwork.ba_monthly_cg_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, placement, 
            requests, paid_impressions, clicks, total_estimated_net_earnings, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, estimated_net_earnings, process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword, a.placement, 
        0, sum(a.billable_connections), 0, sum(a.revenue),   
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0,p_process_id,COALESCE(e.channel_id, -200), 0, 0, 0
FROM adnetwork.fact_monthly_cg_performance a
INNER JOIN refer.month_dim b ON a.month_sk = b.month_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (20,29) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_monthly_cg_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk 
                  WHERE aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.month_sk=v_month_since_2005
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.placement
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t
,e.channel_id;

/* update total yes adresponses */
UPDATE adnetwork.ba_monthly_cg_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.ba_monthly_cg_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update clicks, cost */
UPDATE adnetwork.ba_monthly_cg_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,estimated_net_earnings = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_estimated_net_earnings)::float
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.ba_monthly_cg_performance a
SET estimated_net_earnings = total_estimated_net_earnings
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* update goss revenue*/
UPDATE adnetwork.ba_monthly_cg_performance a
SET gross_revenue=estimated_net_earnings
WHERE a.process_id = p_process_id;

/* update revenue share */
update adnetwork.ba_monthly_cg_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.estimated_net_earnings*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.estimated_net_earnings*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_cg_performance a
set p_net_revenue =  a.estimated_net_earnings*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.estimated_net_earnings*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update paid impressions  */
UPDATE adnetwork.ba_monthly_cg_performance a
SET paid_impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*paid_impressions)::int
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;
/*update paid impressions when total_fullfilled_code_y =0  */

UPDATE adnetwork.ba_monthly_cg_performance a
SET paid_impressions = 0
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_cg_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_cg_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_cg_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_cg_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_cg_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_it_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_it_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_it_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: iTunes
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_it_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_it_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.ba_monthly_it_performance */
INSERT INTO adnetwork.ba_monthly_it_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, app_name, requests, impressions, 
            clicks, revenue, process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        a.app_name, sum(requests), sum(impressions), 0, sum(a.revenue), 
	p_process_id, COALESCE(e.channel_id, -200), 0, 0, 0
  FROM adnetwork.fact_monthly_itunes_performance a
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk 
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk 
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.month_sk = v_month_since_2005
AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.app_name
,e.channel_id;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_it_performance a
SET gross_revenue=revenue
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_it_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_it_performance a
set p_net_revenue =  a.revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_it_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_it_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_it_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ba_monthly_it_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_it_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_jt_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_jt_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_jt_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: JumpTap
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_jt_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_jt_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

INSERT INTO adnetwork.ba_monthly_jt_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, site, 
            total_requests, total_paid_impressions, total_clicks, total_net_revenue, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t,
            total_fullfilled_code_y, fullfilled_code_y_rate, requests, paid_impressions, clicks, net_revenue, process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword,
        a.site, sum(a.requests), sum(a.paid_impressions), sum(a.clicks), sum(a.net_revenue),  
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0, 0, 0, 0, p_process_id ,COALESCE(e.channel_id, -200), sum(a.net_revenue), 0, 0
FROM adnetwork.fact_monthly_jumptap_performance a
INNER JOIN refer.month_dim b ON a.month_sk = b.month_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk 
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (11) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_monthly_jumptap_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk 
                  WHERE  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.month_sk=v_month_since_2005
  AND (a.requests > 0 or a.paid_impressions > 0 or a.clicks > 0 or a.net_revenue > 0)
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t
,e.channel_id;

/* update total yes adresponses */
UPDATE adnetwork.ba_monthly_jt_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.ba_monthly_jt_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.ba_monthly_jt_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,paid_impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_paid_impressions)::int
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,net_revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_net_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.ba_monthly_jt_performance a
SET requests = total_requests
   ,paid_impressions = total_paid_impressions
   ,clicks = total_clicks
   ,net_revenue = total_net_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* update revenue share */
update adnetwork.ba_monthly_jt_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.net_revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.net_revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_jt_performance a
set p_net_revenue =  a.net_revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.net_revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;


/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_jt_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_jt_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_jt_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_jt_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_jt_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_mm_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_mm_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_mm_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Millennial Media
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_mm_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_mm_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.ba_monthly_mm_performance */
INSERT INTO adnetwork.ba_monthly_mm_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, portal_id, portal_name, portal_keyword,
            id, "name", requests, ads_served, clicks, net_revenue, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT v_calendar_year_month, v_month_since_2005,
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword, 
	d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
    a.id, a.name, Sum(a.requests), sum(a.ads_served), sum(a.clicks), sum(a.net_revenue), 
	sum(COALESCE(e.fullfilled_code_count,0)), 
	sum(COALESCE(e.fullfilled_code_y,0)), 
	sum(COALESCE(e.fullfilled_code_n,0)), 
	sum(COALESCE(e.fullfilled_code_e,0)), 
	sum(COALESCE(e.fullfilled_code_t,0)), p_process_id, COALESCE(f.channel_id, -200), 0, 0, 0
  FROM adnetwork.fact_monthly_mm_performance a
  INNER JOIN refer.month_dim b ON a.month_sk = b.month_since_2005
  INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk 
  INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk 
LEFT JOIN (
    SELECT  aa.partner_id, aa.portal_id,
    sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    WHERE aa.is_active = true AND aa.ad_network_id = 4 AND aa.partner_id > 0 AND aa.portal_id > 0  AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
	AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_monthly_mm_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk 
                  WHERE aaa.month_sk = v_month_since_2005
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY  aa.partner_id, aa.portal_id
) e ON e.partner_id = c.partner_id AND e.portal_id = d.portal_id
LEFT JOIN refer.adm_portal_dim f on d.portal_id=f.portal_id and f.dt_expire='9999-12-31'
WHERE a.month_sk = v_month_since_2005
GROUP BY
a.month_sk
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.id
,a.name
,f.channel_id;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_mm_performance a
SET gross_revenue=net_revenue
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_mm_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.net_revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.net_revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_mm_performance a
set p_net_revenue =  a.net_revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.net_revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_mm_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_mm_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_mm_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ba_monthly_mm_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_mm_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_mx_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_mx_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_mx_performance
||
|| Author: Phap ta
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: Marchex/Marchex Proxy
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_mx_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_mx_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_mx_performance */
INSERT INTO adnetwork.ba_monthly_mx_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, site_name, 
            total_ad_requests, paid_impressions, total_clicks, total_cost, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, clicks, "cost", process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue, ad_network_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword, a.site_name, 
        0, 0, sum(a.clicks), sum(a.cost),   
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0, 0, p_process_id, COALESCE(e.channel_id, -200), 0, 0, 0, COALESCE(d.ad_network_id, -200)
FROM adnetwork.fact_monthly_mx_performance a
INNER JOIN refer.month_dim b ON a.month_sk = b.month_since_2005
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk 
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,aa.ad_network_id,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (21,28) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_monthly_mx_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk 
                  WHERE aaa.month_sk =v_month_since_2005
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword, aa.ad_network_id
) d ON d.partner_id = c.partner_id
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.month_sk =v_month_since_2005
  AND (a.clicks > 0 or a.cost > 0)
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site_name
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t
,e.channel_id
,d.ad_network_id;

/* update total yes adresponses */
UPDATE adnetwork.ba_monthly_mx_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.ba_monthly_mx_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update clicks, cost */
UPDATE adnetwork.ba_monthly_mx_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,"cost" = (fullfilled_code_y::float/total_fullfilled_code_y)*total_cost
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.ba_monthly_mx_performance a
SET clicks = total_clicks
   ,"cost" = total_cost
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_mx_performance a
SET gross_revenue="cost"
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_mx_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.cost*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.cost*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_mx_performance a
set p_net_revenue =  a.cost*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.cost*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_mx_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_mx_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_mx_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_mx_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_mx_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_sp_blue_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_sp_blue_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_sp_blue_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Superpages Blue
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_sp_blue_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_sp_blue_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.monthly_sp_blue_performance ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.ba_monthly_sp_blue_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            verve_revenue_share, total_ppc_revenue, ppc_revenue, revenue, requests, paid_impressions, clicks, process_id, ad_network_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0.45, 0, 0, 0, 0, 0, 0, p_process_id, c.ad_network_id, COALESCE(e.channel_id, -200), 0, 0, 0
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk=b.partner_sk 
INNER JOIN refer.ad_network_dim c ON c.ad_network_id IN (26,30) AND a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.portal_dim d ON d.portal_sk = a.portal_sk 
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY b.partner_id
,b.name_current
,b.description_current
,b.parent1_id_current
,b.parent1_name_current
,b.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,c.ad_network_id
,e.channel_id;

/* update total yes adresponses */
UPDATE adnetwork.ba_monthly_sp_blue_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.ba_monthly_sp_blue_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.ba_monthly_sp_blue_performance a
SET total_ppc_revenue = b.ppc_revenue
FROM (
       SELECT sum(aa.ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_monthly_sp_performance aa
       WHERE  ad_network_id IN (26,30)
         AND  month_sk=v_month_since_2005
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id IN (26,30) AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.ba_monthly_sp_blue_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,ppc_revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_ppc_revenue
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_ppc_revenue*verve_revenue_share
WHERE a.process_id = p_process_id;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_sp_blue_performance a
SET gross_revenue=revenue
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_sp_blue_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_sp_blue_performance a
set p_net_revenue =  a.revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_sp_blue_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_sp_blue_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_sp_blue_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_sp_blue_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_sp_blue_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_wh_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_wh_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_wh_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: WHERE/WHERE HTML
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_wh_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_wh_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_wh_performance */
INSERT INTO adnetwork.ba_monthly_wh_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, site_keyword,
            total_requests, total_filled, total_clicked, total_revenue, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, total_fullfilled_code_y, fullfilled_code_y_rate,
            requests, filled, clicked, revenue, process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword,
        a.partner_keyword as site_keyword, 
        sum(a.requests), sum(a.filled), sum(a.clicked), sum(a.revenue),
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0, 0, 0, 0, p_process_id, COALESCE(e.channel_id, -200), 0, 0, 0
FROM adnetwork.fact_monthly_wh_performance a
INNER JOIN refer.month_dim b ON a.month_sk = b.month_since_2005
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk 
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
       sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (23,25) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_monthly_wh_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk 
                  WHERE  aa.eastern_date_sk between aaa.eastern_start_date_sk and aaa.eastern_end_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.month_sk=v_month_since_2005
  AND (a.requests > 0 or a.filled > 0 or a.clicked > 0 or a.revenue > 0)
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.partner_keyword
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t
,e.channel_id;

/* update total yes adresponses */
UPDATE adnetwork.ba_monthly_wh_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.ba_monthly_wh_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.ba_monthly_wh_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,filled = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_filled)::int
   ,clicked = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicked)::int
   ,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.ba_monthly_wh_performance a
SET requests = total_requests
   ,filled = total_filled
   ,clicked = total_clicked
   ,revenue = total_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_wh_performance a
SET gross_revenue=revenue
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_wh_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_wh_performance a
set p_net_revenue =  a.revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_wh_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_wh_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_wh_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_wh_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_wh_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_yp_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_yp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_yp_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Yellowpages
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_yp_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_yp_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.ba_monthly_yp_performance ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.ba_monthly_yp_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_requests, requests, total_impressions, impressions, total_clicks, clicks, process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, p_process_id, COALESCE(e.channel_id, -200), 0, 0, 0
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk = b.partner_sk 
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 27 AND a.ad_network_sk = c.ad_network_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk 
--LEFT jOIN refer.adm_channel_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY b.partner_id
,b.name_current
,b.description_current
,b.parent1_id_current
,b.parent1_name_current
,b.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,e.channel_id;

/* update total_fullfilled_code_y */
UPDATE adnetwork.ba_monthly_yp_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.ba_monthly_yp_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total requests, impressions, clicks, revenue */
UPDATE adnetwork.ba_monthly_yp_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM (
       SELECT sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_monthly_yp_performance aa
       WHERE  month_sk=v_month_since_2005
         AND  site_name = 'Verve (iPhone)'
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 27 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.ba_monthly_yp_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_yp_performance a
SET gross_revenue=revenue
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_yp_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_yp_performance a
set p_net_revenue =  a.revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_yp_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_yp_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_yp_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_yp_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_yp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_ba_monthly_yp_sb_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_ba_monthly_yp_sb_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_ba_monthly_yp_sb_performance
||
|| Author: Phap Ta
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: AT&T Static Banner - Yellowpages
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_ba_monthly_yp_sb_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id !=45 THEN
	RAISE DEBUG 'ENDING: % fn_ba_monthly_yp_sb_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */

	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;


SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.ba_monthly_yp_sb_performance ===== */
/* insert adcel responses data */
INSERT INTO adnetwork.ba_monthly_yp_sb_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_requests, requests, total_impressions, impressions, total_clicks, clicks, process_id, channel_id, gross_revenue, p_net_revenue, v_net_revenue)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, p_process_id, COALESCE(e.channel_id, -200), 0, 0, 0
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk = b.partner_sk 
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 32 AND a.ad_network_sk = c.ad_network_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk 
LEFT JOIN refer.adm_portal_dim e on d.portal_id=e.portal_id and e.dt_expire='9999-12-31'
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY b.partner_id
,b.name_current
,b.description_current
,b.parent1_id_current
,b.parent1_name_current
,b.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,e.channel_id;

/* update total yes adresponses */
UPDATE adnetwork.ba_monthly_yp_sb_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.ba_monthly_yp_sb_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.ba_monthly_yp_sb_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM (
       SELECT sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_monthly_yp_performance aa
       WHERE  month_sk=v_month_since_2005
         AND  site_name = 'Verve Wireless (Mobile Web) - Lower'
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 32 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.ba_monthly_yp_sb_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id;

/* update gross revenue */
UPDATE adnetwork.ba_monthly_yp_sb_performance a
SET gross_revenue=revenue
WHERE a.process_id = p_process_id;

/*update revenue share */
update adnetwork.ba_monthly_yp_sb_performance a
set p_net_revenue = case 
                      when channel_id = 41820  then a.revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_net_revenue = case 
                      when channel_id = 41820  then a.revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id = 41820;

/* update revenue share for apps, channel <> 41820 */
update adnetwork.ba_monthly_yp_sb_performance a
set p_net_revenue =  a.revenue*b.rev_share_apps_national/100
                 
   ,v_net_revenue =  a.revenue*(100-b.rev_share_apps_national)/100
                  
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.channel_id > 0 and channel_id <> 41820;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_ba_monthly_yp_sb_performance';

RAISE DEBUG 'ENDING: % staging.fn_ba_monthly_yp_sb_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_ba_monthly_yp_sb_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_ba_monthly_yp_sb_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_ba_monthly_yp_sb_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_request(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_request(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_request
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_request(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

TRUNCATE adstraffic.ad_response_fact_agg_inday_forecast;

INSERT INTO adstraffic.ad_response_fact_agg_inday_forecast(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            fullfilled_code_count, process_id, country_id, region_id, metro_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app3_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app4_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app6_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app8_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app9_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app12_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app13_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app14_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app015_inday_request_forecast
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_request';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_request(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_request(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_request',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_request(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_01(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_01(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_01
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_01(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';


select count(b.process_id) INTO v_count 
from control.process a
inner join control.process_concurrent_trans b on b.process_id = a.process_id
  and b.concurrent_trans_name in ('fn_build_ad_response_fact_stats_01_app015-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app12-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app13-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app14-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app3-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app4-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app6-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app8-adcel'
                                 ,'fn_build_ad_response_fact_stats_01_app9-adcel')
  and b.is_complete = true
where a.process_config_id = 50
  and a.min_partition_key = p_date_sk
  and a.max_partition_key = p_date_sk
;

IF (v_count < 9) THEN
	RAISE NOTICE 'SUB PROCESSES ARE NOT DONE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_01;

RAISE NOTICE 'TRUNCATED DATA';

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_01(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id, location_quality_100)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app3_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app4_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app6_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app8_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app9_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app12_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app13_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app14_inday_stats_01
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       p_process_id, location_quality_100
  FROM adstraffic.ad_response_fact_app015_inday_stats_01
;

RAISE NOTICE 'INSERTED DATA';

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_01';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_01(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_01(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_01',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_01(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_event(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_event(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_event
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_event(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';


select count(b.process_id) INTO v_count 
from control.process a
inner join control.process_concurrent_trans b on b.process_id = a.process_id
  and b.concurrent_trans_name in ('fn_build_ad_response_fact_stats_filled_app015-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app12-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app13-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app14-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app3-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app4-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app6-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app8-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app9-adcel')
  and b.is_complete = true
where a.process_config_id = 50
  and a.min_partition_key = p_date_sk
  and a.max_partition_key = p_date_sk
;

IF (v_count < 9) THEN
	RAISE NOTICE 'SUB PROCESSES ARE NOT DONE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

TRUNCATE evttracker.ad_response_fact_inday;

DROP INDEX IF EXISTS evttracker.idx_ad_response_fact_inday_01;

DROP INDEX IF EXISTS evttracker.idx_ad_response_fact_inday_02;

RAISE NOTICE '% TRUNCATED DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app3_inday_filled;

RAISE NOTICE '% INSERTED APP3 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app4_inday_filled;

RAISE NOTICE '% INSERTED APP4 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app6_inday_filled;

RAISE NOTICE '% INSERTED APP6 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app8_inday_filled;

RAISE NOTICE '% INSERTED APP8 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app9_inday_filled;

RAISE NOTICE '% INSERTED APP9 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app12_inday_filled;

RAISE NOTICE '% INSERTED APP12 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app13_inday_filled;

RAISE NOTICE '% INSERTED APP13 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app14_inday_filled;

RAISE NOTICE '% INSERTED APP14 DATA',timeofday();

INSERT INTO evttracker.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_app015_inday_filled;

RAISE NOTICE '% INSERTED APP015 DATA',timeofday();

CREATE INDEX idx_ad_response_fact_inday_01
  ON evttracker.ad_response_fact_inday
  USING btree
  (app_server_id,transaction_id)
TABLESPACE evttracker_tablespace;

CREATE INDEX idx_ad_response_fact_inday_02
  ON evttracker.ad_response_fact_inday
  USING btree
  (location_id)
TABLESPACE evttracker_tablespace;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_event';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_event(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_event(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_event',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_event(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_filled(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_filled(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_filled
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_filled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

select count(b.process_id) INTO v_count 
from control.process a
inner join control.process_concurrent_trans b on b.process_id = a.process_id
  and b.concurrent_trans_name in ('fn_build_ad_response_fact_stats_filled_app015-adcell'
                                 ,'fn_build_ad_response_fact_stats_filled_app12-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app13-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app14-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app3-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app4-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app6-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app8-adcel'
                                 ,'fn_build_ad_response_fact_stats_filled_app9-adcel')
  and b.is_complete = true
where a.process_config_id = 50
  and a.min_partition_key = p_date_sk
  and a.max_partition_key = p_date_sk
;

IF (v_count < 9) THEN
	RAISE NOTICE 'SUB PROCESSES ARE NOT DONE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

RAISE NOTICE '% STARTED PROCESS',timeofday();

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_filled;

RAISE NOTICE '% TRUNCATED DATA',timeofday();

DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_agg_inday_stats_filled_01;

RAISE NOTICE '% DROPED INDEX',timeofday();

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_filled(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app3_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app4_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app6_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app8_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app9_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app12_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app13_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app14_inday_filled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app015_inday_filled_location
;

RAISE NOTICE '% INSERTED DATA',timeofday();

CREATE INDEX idx_ad_response_fact_agg_inday_stats_filled_01
  ON adstraffic.ad_response_fact_agg_inday_stats_filled
  USING btree
  (eastern_date_sk,portal_sk,partner_sk,ad_content_category_sk,ad_network_sk,user_agent_sk
,partner_module_sk,app_server_id,app_server,transaction_id,location_id,location_quality,country_id,region_id,metro_id,postal_code_id)
TABLESPACE working_tablespace;

RAISE NOTICE '% CREATED INDEX',timeofday();

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_filled';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_filled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_filled(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_filled',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_filled(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_forecast(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_forecast(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_forecast
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_forecast(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

select count(b.process_id) INTO v_count 
from control.process a
inner join control.process_concurrent_trans b on b.process_id = a.process_id
  and b.concurrent_trans_name in ('fn_build_ad_response_fact_stats_request_app015-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app12-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app13-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app14-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app3-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app4-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app6-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app8-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app9-adcel')
  and b.is_complete = true
where a.process_config_id = 50
  and a.min_partition_key = p_date_sk
  and a.max_partition_key = p_date_sk
;

IF (v_count < 9) THEN
	RAISE NOTICE 'SUB PROCESSES ARE NOT DONE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

RAISE NOTICE '% STARTED PROCESS',timeofday();

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_forecast;

RAISE NOTICE '% TRUNCATED DATA',timeofday();

DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_agg_inday_stats_forecast_01;

RAISE NOTICE '% DROPED INDEX',timeofday();

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_forecast(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            fullfilled_code_count, process_id, country_id, region_id, metro_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app3_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app4_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app6_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app8_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app9_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app12_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app13_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app14_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app015_inday_request_forecast
;

RAISE NOTICE '% INSERTED DATA',timeofday();

CREATE INDEX idx_ad_response_fact_agg_inday_stats_forecast_01
  ON adstraffic.ad_response_fact_agg_inday_stats_forecast
  USING btree
  (eastern_date_sk,portal_sk,partner_sk,ad_content_category_sk,ad_network_sk,user_agent_sk,partner_module_sk,location_id,country_id,region_id,metro_id)
TABLESPACE working_tablespace;

RAISE NOTICE '% CREATED INDEX',timeofday();

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_forecast';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_forecast(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_forecast(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_forecast',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_forecast(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_request(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_request(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_request
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_request(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_forecast;

RAISE NOTICE 'TRUNCATED DATA';

DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_agg_inday_stats_forecast_01;

RAISE NOTICE 'DROPED INDEX';

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_forecast(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            fullfilled_code_count, process_id, country_id, region_id, metro_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app3_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app4_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app6_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app8_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app9_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app12_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app13_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app14_inday_request_forecast
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       fullfilled_code_count, p_process_id, country_id, region_id, metro_id
  FROM adstraffic.ad_response_fact_app015_inday_request_forecast
;

RAISE NOTICE 'INSERTED DATA';

CREATE INDEX idx_ad_response_fact_agg_inday_stats_forecast_01
  ON adstraffic.ad_response_fact_agg_inday_stats_forecast
  USING btree
  (eastern_date_sk,portal_sk,partner_sk,ad_content_category_sk,ad_network_sk,user_agent_sk,partner_module_sk,location_id,country_id,region_id,metro_id)
TABLESPACE working_tablespace;

RAISE NOTICE 'CREATED INDEX';

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_trxids;

RAISE NOTICE 'TRUNCATED DATA';

DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_agg_inday_stats_trxids_01;

RAISE NOTICE 'DROPED INDEX';

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_trxids(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            location_quality, fullfilled_code_count, country_id, region_id, 
            metro_id, postal_code_id, process_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app3_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app4_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app6_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app8_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app9_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app12_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app13_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app14_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app015_inday_request_trxids
;

RAISE NOTICE 'INSERTED DATA';

CREATE INDEX idx_ad_response_fact_agg_inday_stats_trxids_01
  ON adstraffic.ad_response_fact_agg_inday_stats_trxids
  USING btree
  (eastern_date_sk,portal_sk,partner_sk,ad_content_category_sk,ad_network_sk,user_agent_sk,partner_module_sk,location_id,location_quality,country_id,region_id,metro_id,postal_code_id)
TABLESPACE working_tablespace;

RAISE NOTICE 'CREATED INDEX';

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_request';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_request(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_request(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_request',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_request(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_trxids(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_trxids(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_trxids
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_trxids(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

select count(b.process_id) INTO v_count 
from control.process a
inner join control.process_concurrent_trans b on b.process_id = a.process_id
  and b.concurrent_trans_name in ('fn_build_ad_response_fact_stats_request_app015-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app12-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app13-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app14-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app3-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app4-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app6-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app8-adcel'
                                 ,'fn_build_ad_response_fact_stats_request_app9-adcel')
  and b.is_complete = true
where a.process_config_id = 50
  and a.min_partition_key = p_date_sk
  and a.max_partition_key = p_date_sk
;

IF (v_count < 9) THEN
	RAISE NOTICE 'SUB PROCESSES ARE NOT DONE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

RAISE NOTICE '% STARTED PROCESS',timeofday();

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_trxids;

RAISE NOTICE '% TRUNCATED DATA',timeofday();

DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_agg_inday_stats_trxids_01;

RAISE NOTICE '% DROPED INDEX',timeofday();

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_trxids(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            location_quality, fullfilled_code_count, country_id, region_id, 
            metro_id, postal_code_id, process_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app3_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app4_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app6_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app8_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app9_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app12_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app13_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app14_inday_request_trxids
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, fullfilled_code_count, country_id, region_id, 
       metro_id, postal_code_id, process_id
  FROM adstraffic.ad_response_fact_app015_inday_request_trxids
;

RAISE NOTICE '% INSERTED DATA',timeofday();

CREATE INDEX idx_ad_response_fact_agg_inday_stats_trxids_01
  ON adstraffic.ad_response_fact_agg_inday_stats_trxids
  USING btree
  (eastern_date_sk,portal_sk,partner_sk,ad_content_category_sk,ad_network_sk,user_agent_sk,partner_module_sk,location_id,location_quality,country_id,region_id,metro_id,postal_code_id)
TABLESPACE working_tablespace;

RAISE NOTICE '% CREATED INDEX',timeofday();

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_trxids';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_trxids(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_trxids(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_trxids',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_trxids(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_agg_inday_stats_unfilled(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_agg_inday_stats_unfilled(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_agg_inday_stats_unfilled
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_agg_inday_stats_unfilled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

select count(b.process_id) INTO v_count 
from control.process a
inner join control.process_concurrent_trans b on b.process_id = a.process_id
  and b.concurrent_trans_name in ('fn_build_ad_response_fact_stats_unfilled_app015-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app12-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app13-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app14-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app3-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app4-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app6-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app8-adcel'
                                 ,'fn_build_ad_response_fact_stats_unfilled_app9-adcel')
  and b.is_complete = true
where a.process_config_id = 50
  and a.min_partition_key = p_date_sk
  and a.max_partition_key = p_date_sk
;

IF (v_count < 9) THEN
	RAISE NOTICE 'SUB PROCESSES ARE NOT DONE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

TRUNCATE adstraffic.ad_response_fact_agg_inday_stats_unfilled;

RAISE NOTICE 'NOTICE: TRUNCATED';

DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_agg_inday_stats_unfilled_01;

RAISE NOTICE 'NOTICE: DROPED INDEX';

INSERT INTO adstraffic.ad_response_fact_agg_inday_stats_unfilled(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app3_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app4_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app6_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app8_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app9_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app12_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app13_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app14_inday_unfilled_location
UNION ALL
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
       app_server, transaction_id, location_id, location_quality, location_quality_100, 
       fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
       p_process_id
  FROM adstraffic.ad_response_fact_app015_inday_unfilled_location
;

RAISE NOTICE 'NOTICE: INSERTED DATA';

CREATE INDEX idx_ad_response_fact_agg_inday_stats_unfilled_01
  ON adstraffic.ad_response_fact_agg_inday_stats_unfilled
  USING btree
  (eastern_date_sk,portal_sk,partner_sk,ad_content_category_sk,ad_network_sk,user_agent_sk,partner_module_sk,app_server_id,
app_server,transaction_id,location_id,location_quality,location_quality_100,country_id,region_id,metro_id,postal_code_id)
TABLESPACE working_tablespace;

RAISE NOTICE 'NOTICE: CREATED INDEX';

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_agg_inday_stats_unfilled';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_agg_inday_stats_unfilled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_agg_inday_stats_unfilled(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_agg_inday_stats_unfilled',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_agg_inday_stats_unfilled(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_copy(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_copy(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_copy
||
|| Author: Tho HOANG
||
|| Date: 2011-12-26
||
|| Description: 
||     copy daily ad responses to working table
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_copy(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* clear up old data */
TRUNCATE adstraffic.ad_response_fact_copy;

/* copy data in day */
INSERT INTO adstraffic.ad_response_fact_copy(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100, process_id)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100, p_process_id
FROM adstraffic.ad_response_fact
WHERE  eastern_date_sk = p_date_sk;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_copy';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_copy(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_copy(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_copy(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_copy(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_copy(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_copy
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     copy daily ad responses to working table per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_copy(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

set autocommit = on;

v_process_name:='fn_build_ad_response_fact_copy_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_'|| v_table_name || '_inday;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_'|| v_table_name || '_inday_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_'|| v_table_name || '_inday_02;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* copy data in day */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_'|| v_table_name || '_inday (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100, process_id)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100, ' || p_process_id || '
FROM adstraffic.ad_response_fact_'|| v_table_name || ' 
WHERE  eastern_date_sk = ' || p_date_sk || '
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_'|| v_table_name || '_inday_01
  ON adstraffic.ad_response_fact_'|| v_table_name || '_inday
  USING btree
  (app_server_id, transaction_id, fullfilled_code_y)
TABLESPACE adstraffic_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_'|| v_table_name || '_inday_02
  ON adstraffic.ad_response_fact_'|| v_table_name || '_inday
  USING btree
  (app_server_id, transaction_id)
TABLESPACE adstraffic_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_copy(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        v_process_name:='fn_build_ad_response_fact_copy_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_copy(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_copy(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_copy_index(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_copy_index(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_copy_index
||
|| Author: Tho HOANG
||
|| Date: 2011-12-26
||
|| Description: 
||     copy daily ad responses to working table
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_copy_index(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

set autocommit = on;

/* clear up old data */
TRUNCATE adstraffic.ad_response_fact_copy_index;

/* drop index */ 
DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_copy_index_01;

/* copy data in day */
INSERT INTO adstraffic.ad_response_fact_copy_index(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100, process_id)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100, 0
FROM adstraffic.ad_response_fact
WHERE  eastern_date_sk = p_date_sk;

/* create index */
CREATE INDEX idx_ad_response_fact_copy_index_01
  ON adstraffic.ad_response_fact_copy_index
  USING btree
  (app_server_id, transaction_id, fullfilled_code_y)
TABLESPACE adstraffic_tablespace;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_copy_index';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_copy_index(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_copy_index(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_copy_index',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_copy_index(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_filled_filter(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_filled_filter(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_filled_filter
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_filled_filter(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_filled_filter_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_filled;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_' || v_table_name || '_inday_filled_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_filled(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk, location_quality_100
FROM   adstraffic.ad_response_fact_' || v_table_name || '_inday
WHERE  fullfilled_code_y = 1
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_' || v_table_name || '_inday_filled_01
  ON adstraffic.ad_response_fact_' || v_table_name || '_inday_filled
  USING btree
  (location_id)
TABLESPACE working_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_filled_filter(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_filled_filter_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_filled_filter(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_filled_filter(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_filled_location(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_filled_location(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_filled_location
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_filled_location(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_stats_filled_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_filled_location;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_filled_location(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
        a.ad_network_sk, a.user_agent_sk, a.partner_module_sk, a.app_server_id,
        a.app_server, a.transaction_id, a.location_id, a.location_quality, sum(a.location_quality_100), 
        sum(a.fullfilled_code_count), COALESCE(b.country_id, -1), COALESCE(b.region_id, -1), COALESCE(b.metro_id, -1), COALESCE(b.postal_code_id, -1),
        ' || p_process_id || '
FROM    adstraffic.ad_response_fact_' || v_table_name || '_inday_filled a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY  a.eastern_date_sk
,a.portal_sk
,a.partner_sk
,a.ad_content_category_sk
,a.ad_network_sk
,a.user_agent_sk
,a.partner_module_sk
,a.app_server_id
,a.app_server
,a.transaction_id
,a.location_id
,a.location_quality
,b.country_id
,b.region_id
,b.metro_id
,b.postal_code_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_filled_location(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_stats_filled_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_filled_location(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_filled_location(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_request_copy(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_request_copy(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_request_copy
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_request_copy(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_request_copy_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_request;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_' || v_table_name || '_inday_request_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_request (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT a.eastern_date_sk, a.eastern_time_sk, a.local_date_sk, a.local_time_sk, 
            a.gmt_date_sk, a.gmt_time_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, a.remote_ip, a.session_id, a.request_guid, 
            a.ad_response_url, a.status_code, a.duration, a.fullfilled_code, a.fullfilled_code_count, 
            a.fullfilled_code_y, a.fullfilled_code_n, a.fullfilled_code_e, a.fullfilled_code_t, 
            a.placement_id, a.gen_ad_response_app_id, a.app_server, a.data_file_id, 
            a.app_server_id, a.transaction_id, a.dc_site_sk, a.location_id, a.location_quality, 
            a.partner_module_sk, a.location_quality_100
FROM   adstraffic.ad_response_fact_' || v_table_name || '_inday a
     , adstraffic.ad_response_fact_' || v_table_name || '_filter_request b
WHERE a.transaction_id = b.transaction_id
AND  a.gen_ad_response_app_id = b.gen_ad_response_app_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_' || v_table_name || '_inday_request_01
  ON adstraffic.ad_response_fact_' || v_table_name || '_inday_request
  USING btree
  (location_id)
TABLESPACE working_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_request_copy(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_request_copy_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_request_copy(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_request_copy(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_request_filter(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_request_filter(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_request_filter
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_request_filter(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_request_filter_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_filter_request;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_' || v_table_name || '_filter_request_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_filter_request(
            gen_ad_response_app_id, app_server_id, transaction_id)
SELECT   MIN(gen_ad_response_app_id) AS gen_ad_response_app_id, app_server_id, transaction_id
FROM     adstraffic.ad_response_fact_' || v_table_name || '_inday
GROUP BY app_server_id, transaction_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_' || v_table_name || '_filter_request_01
  ON adstraffic.ad_response_fact_' || v_table_name || '_filter_request
  USING btree
  (app_server_id, transaction_id, gen_ad_response_app_id)
TABLESPACE working_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_request_filter(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_request_filter_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_request_filter(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_request_filter(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_01(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_01(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_01
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_01(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_01 where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_agg_inday_stats_01 where eastern_date_sk = p_date_sk;
IF (v_count = 0) THEN
	RAISE NOTICE 'WORKING TABLE NO DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

/* insert records */
INSERT INTO adstraffic.ad_response_fact_stats_01(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, location_quality_100,
            process_id)
SELECT  eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, sum(duration), sum(fullfilled_code_count), 
            sum(fullfilled_code_y), sum(fullfilled_code_n), sum(fullfilled_code_e), sum(fullfilled_code_t), sum(location_quality_100),
            p_process_id
FROM    adstraffic.ad_response_fact_agg_inday_stats_01 a
WHERE a.eastern_date_sk = p_date_sk
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_01';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_01(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_01(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_01(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_01(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_01(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_01
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_stats_01(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_01 where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

v_process_name:='fn_build_ad_response_fact_stats_01_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_stats_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_stats_01 (
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, duration, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            location_quality_100, process_id)
SELECT  eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, 0, sum(fullfilled_code_count), 
            sum(fullfilled_code_y), sum(fullfilled_code_n), sum(fullfilled_code_e), sum(fullfilled_code_t), sum(location_quality_100),
            ' || p_process_id || '
FROM    adstraffic.ad_response_fact_' || v_table_name || '_inday a
WHERE a.eastern_date_sk = ' || p_date_sk || '
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_stats_01(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_stats_01_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_stats_01(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_01(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_02(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_02(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_02
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_02(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_02 where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

/* insert records */
INSERT INTO adstraffic.ad_response_fact_stats_02(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, duration, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, location_quality_100, process_id)
SELECT  eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, sum(duration), sum(fullfilled_code_count), 
            sum(fullfilled_code_y), sum(fullfilled_code_n), sum(fullfilled_code_e), sum(fullfilled_code_t), sum(location_quality_100),
            p_process_id
FROM    adstraffic.ad_response_fact a
WHERE a.eastern_date_sk = p_date_sk
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_02';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_02(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_02(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_02(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_db_sellthrough(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_db_sellthrough(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_db_sellthrough
||
|| Author: Tho HOANG
||
|| Date: 2011-08-26
||
|| Description: 
||     daily cumulative ad response for doubleclick sell through
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_db_sellthrough(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_db_sellthrough where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

/* insert records */
INSERT INTO adstraffic.ad_response_fact_stats_db_sellthrough (
            eastern_date_sk, ad_network_sk, dc_site_sk, location_id, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            country_id, region_id, metro_id, postal_code_id, process_id)
SELECT  a.eastern_date_sk, a.ad_network_sk, a.dc_site_sk, a.location_id, sum(a.fullfilled_code_count), 
            sum(a.fullfilled_code_y), sum(a.fullfilled_code_n), sum(a.fullfilled_code_e), sum(a.fullfilled_code_t), 
            COALESCE(c.country_id, -1), COALESCE(c.region_id, -1), COALESCE(c.metro_id, -1), COALESCE(c.postal_code_id, -1), p_process_id
FROM    adstraffic.ad_response_fact a
INNER JOIN refer.ad_network_dim b ON b.ad_network_sk = a.ad_network_sk
LEFT JOIN verveloc.location c ON c.id = a.location_id
WHERE a.eastern_date_sk = p_date_sk
  AND b.ad_network_id = 10
GROUP BY 
a.eastern_date_sk,
a.ad_network_sk,
a.dc_site_sk,
a.location_id,
c.country_id,
c.region_id,
c.metro_id,
c.postal_code_id
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_db_sellthrough';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_db_sellthrough(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_db_sellthrough(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_db_sellthrough(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_dbclk(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_dbclk(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_dbclk
||
|| Author: Tho HOANG
||
|| Date: 2011-12-26
||
|| Description: 
||     daily cumulative ad response for doubleclick sell through
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_dbclk(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_db_sellthrough where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

/* insert records */
INSERT INTO adstraffic.ad_response_fact_stats_db_sellthrough (
            eastern_date_sk, ad_network_sk, dc_site_sk, location_id, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            country_id, region_id, metro_id, postal_code_id, process_id)
SELECT  a.eastern_date_sk, a.ad_network_sk, a.dc_site_sk, a.location_id, sum(a.fullfilled_code_count), 
            sum(a.fullfilled_code_y), sum(a.fullfilled_code_n), sum(a.fullfilled_code_e), sum(a.fullfilled_code_t), 
            COALESCE(c.country_id, -1), COALESCE(c.region_id, -1), COALESCE(c.metro_id, -1), COALESCE(c.postal_code_id, -1), p_process_id
FROM    adstraffic.ad_response_fact_copy_index  a
INNER JOIN refer.ad_network_dim b ON b.ad_network_id = 10 AND b.ad_network_sk = a.ad_network_sk
LEFT JOIN verveloc.location c ON c.id = a.location_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY 
a.eastern_date_sk,
a.ad_network_sk,
a.dc_site_sk,
a.location_id,
c.country_id,
c.region_id,
c.metro_id,
c.postal_code_id
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_dbclk';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_dbclk(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_dbclk(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_dbclk(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_filled(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_filled(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_filled
||
|| Author: Tho HOANG
||
|| Date: 2012-03-01
||
|| Description: 
||     daily cumulative ad response for filled reports
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_filled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RAISE NOTICE '% STARTED PROCESS',timeofday();

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_filled where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

RAISE NOTICE '% RUNNING PROCESS',timeofday();

/* insert records */
/*
INSERT INTO adstraffic.ad_response_fact_stats_filled(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
        a.ad_network_sk, a.user_agent_sk, a.partner_module_sk, a.app_server_id,
        a.app_server, a.transaction_id, a.location_id, a.location_quality, sum(a.location_quality_100), 
        sum(a.fullfilled_code_count), b.country_id, b.region_id, b.metro_id, b.postal_code_id,
        p_process_id
FROM    adstraffic.ad_response_fact a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
WHERE a.eastern_date_sk = p_date_sk
  AND a.fullfilled_code_y = 1
GROUP BY  a.eastern_date_sk
,a.portal_sk
,a.partner_sk
,a.ad_content_category_sk
,a.ad_network_sk
,a.user_agent_sk
,a.partner_module_sk
,a.app_server_id
,a.app_server
,a.transaction_id
,a.location_id
,a.location_quality
,b.country_id
,b.region_id
,b.metro_id
,b.postal_code_id
;
*/

INSERT INTO adstraffic.ad_response_fact_stats_filled(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
        a.ad_network_sk, a.user_agent_sk, a.partner_module_sk, a.app_server_id,
        a.app_server, a.transaction_id, a.location_id, a.location_quality, sum(a.location_quality_100), 
        sum(a.fullfilled_code_count), a.country_id, a.region_id, a.metro_id, a.postal_code_id,
        p_process_id
FROM    adstraffic.ad_response_fact_agg_inday_stats_filled a
GROUP BY  a.eastern_date_sk
,a.portal_sk
,a.partner_sk
,a.ad_content_category_sk
,a.ad_network_sk
,a.user_agent_sk
,a.partner_module_sk
,a.app_server_id
,a.app_server
,a.transaction_id
,a.location_id
,a.location_quality
,a.country_id
,a.region_id
,a.metro_id
,a.postal_code_id
;

RAISE NOTICE '% FINISHED PROCESS',timeofday();

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_filled';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_filled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_filled(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_stats_filled',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_filled(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_forecast(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_forecast(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_forecast
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_cmd text:='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_forecast(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_forecast where eastern_date_sk = p_date_sk LIMIT 1;
IF (v_count > 0) THEN
	RAISE NOTICE 'ad_response_fact_stats_forecast - NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_trxids where eastern_date_sk = p_date_sk LIMIT 1;
IF (v_count > 0) THEN
	RAISE NOTICE 'ad_response_fact_stats_trxids - NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;

--set autocommit = on;

RAISE NOTICE '% PROCESS STARTED',timeofday();

/* clear up old data */
v_cmd := '
TRUNCATE adstraffic.ad_response_fact_inday;
';

--EXECUTE v_cmd;

--RAISE NOTICE '% TRUNCATED adstraffic.ad_response_fact_inday',timeofday();

v_cmd := '
TRUNCATE adstraffic.ad_response_fact_filter;
';

--EXECUTE v_cmd;

--RAISE NOTICE '% TRUNCATED adstraffic.ad_response_fact_filter',timeofday();

/* copy data in day */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk
FROM   adstraffic.ad_response_fact
WHERE  eastern_date_sk = ' || p_date_sk || ';
';

--EXECUTE v_cmd;

--RAISE NOTICE '% INSERTED adstraffic.ad_response_fact_inday',timeofday();

/* filter by unique transaction id and app server */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_filter(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk)
SELECT a.*
FROM   adstraffic.ad_response_fact_inday a
    , (select app_server, transaction_id, max(gen_ad_response_app_id) as gen_ad_response_app_id
       from   adstraffic.ad_response_fact_inday
       GROUP BY app_server, transaction_id) b
WHERE a.app_server = b.app_server
AND  a.transaction_id = b.transaction_id
AND  a.gen_ad_response_app_id = b.gen_ad_response_app_id;
';

--EXECUTE v_cmd;

--RAISE NOTICE '% INSERTED adstraffic.ad_response_fact_filter',timeofday();

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_stats_forecast(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            fullfilled_code_count, process_id, country_id, region_id, metro_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.location_id,
            sum(fullfilled_code_count), ' || p_process_id || ', COALESCE(b.country_id, -1), COALESCE(b.region_id,-1), COALESCE(b.metro_id, -1)
FROM    adstraffic.ad_response_fact_filter a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id,
b.country_id,
b.region_id,
b.metro_id;
';

--EXECUTE v_cmd;

INSERT INTO adstraffic.ad_response_fact_stats_forecast(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            fullfilled_code_count, process_id, country_id, region_id, metro_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       sum(fullfilled_code_count), p_process_id, country_id, region_id, metro_id
FROM   adstraffic.ad_response_fact_agg_inday_stats_forecast a
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id,
a.country_id,
a.region_id,
a.metro_id
;

RAISE NOTICE '% INSERTED adstraffic.ad_response_fact_stats_forecast',timeofday();

/* added on 2012-02-09 by thohoang */
/* RPT-140 Quality scores for each Unique trxids */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_stats_trxids(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            location_quality, fullfilled_code_count, country_id, region_id, 
            metro_id, postal_code_id, process_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.location_id,
            a.location_quality, sum(fullfilled_code_count), COALESCE(b.country_id, -1), COALESCE(b.region_id,-1),
            COALESCE(b.metro_id, -1), COALESCE(b.postal_code_id, -1), ' || p_process_id || '
FROM    adstraffic.ad_response_fact_filter a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id,
a.location_quality,
b.country_id,
b.region_id,
b.metro_id,
b.postal_code_id;
';

--EXECUTE v_cmd;

INSERT INTO adstraffic.ad_response_fact_stats_trxids(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            location_quality, fullfilled_code_count, country_id, region_id, 
            metro_id, postal_code_id, process_id)
SELECT eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
       location_quality, sum(fullfilled_code_count), country_id, region_id, 
       metro_id, postal_code_id, p_process_id
FROM    adstraffic.ad_response_fact_agg_inday_stats_trxids a
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id,
a.location_quality,
a.country_id,
a.region_id,
a.metro_id,
a.postal_code_id;

RAISE NOTICE '% INSERTED adstraffic.ad_response_fact_stats_trxids',timeofday();


/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_forecast';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_forecast(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_forecast(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_stats_forecast',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_forecast(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_forecast_filter(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_forecast_filter(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_forecast_filter
||
|| Author: Tho HOANG
||
|| Date: 2012-03-09
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_cmd text:='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_forecast_filter(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

RAISE NOTICE '% PROCESS STARTED',timeofday();

/* clear up old data */
v_cmd := '
TRUNCATE adstraffic.ad_response_fact_filter;
';

EXECUTE v_cmd;

RAISE NOTICE '% TRUNCATED adstraffic.ad_response_fact_filter',timeofday();

/* filter by unique transaction id and app server */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_filter(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk)
SELECT a.*
FROM   adstraffic.ad_response_fact_inday a
    , (select app_server, transaction_id, max(gen_ad_response_app_id) as gen_ad_response_app_id
       from   adstraffic.ad_response_fact_inday
       GROUP BY app_server, transaction_id) b
WHERE a.app_server = b.app_server
AND  a.transaction_id = b.transaction_id
AND  a.gen_ad_response_app_id = b.gen_ad_response_app_id;
';

EXECUTE v_cmd;

RAISE NOTICE '% INSERTED adstraffic.ad_response_fact_filter',timeofday();

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_forecast_filter(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_forecast_filter(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_stats_forecast_filter',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_forecast_filter(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_forecast_inday(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_forecast_inday(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_forecast_inday
||
|| Author: Tho HOANG
||
|| Date: 2012-03-09
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_cmd text:='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_forecast_inday(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

RAISE NOTICE '% PROCESS STARTED',timeofday();

/* clear up old data */
v_cmd := '
TRUNCATE adstraffic.ad_response_fact_inday;
';

EXECUTE v_cmd;

RAISE NOTICE '% TRUNCATED adstraffic.ad_response_fact_inday',timeofday();

/* copy data in day */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
       ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
       ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
       fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
       placement_id, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
       partner_module_sk
FROM   adstraffic.ad_response_fact
WHERE  eastern_date_sk = ' || p_date_sk || ';
';

EXECUTE v_cmd;

RAISE NOTICE '% INSERTED adstraffic.ad_response_fact_inday',timeofday();

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_forecast_inday(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_forecast_inday(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_stats_forecast_inday',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_forecast_inday(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_req_location(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_req_location(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_req_location
||
|| Author: Tho HOANG
||
|| Date: 2011-08-26
||
|| Description: 
||     daily cumulative unique trxids ad request for location OLAP cubes
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_req_location(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* clear up old data */
TRUNCATE adstraffic.ad_response_fact_location_inday;

TRUNCATE adstraffic.ad_response_fact_location_filter;

DELETE FROM adstraffic.ad_response_fact_stats_req_location where eastern_date_sk = p_date_sk;

/* copy data in day */
INSERT INTO adstraffic.ad_response_fact_location_inday(
            eastern_date_sk, fullfilled_code_count, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, location_id, partner_sk)
SELECT eastern_date_sk, fullfilled_code_count, gen_ad_response_app_id, app_server, data_file_id, 
       app_server_id, transaction_id, location_id, partner_sk
FROM   adstraffic.ad_response_fact
WHERE  eastern_date_sk = p_date_sk;

/* filter by unique transaction id and app server */
INSERT INTO adstraffic.ad_response_fact_location_filter(
            eastern_date_sk, fullfilled_code_count, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, location_id, partner_sk)
SELECT a.*
FROM   adstraffic.ad_response_fact_location_inday a
    , (select app_server, transaction_id, max(gen_ad_response_app_id) as gen_ad_response_app_id
       from   adstraffic.ad_response_fact_location_inday
       GROUP BY app_server, transaction_id) b
WHERE a.app_server = b.app_server
AND  a.transaction_id = b.transaction_id
AND  a.gen_ad_response_app_id = b.gen_ad_response_app_id
;

/* insert records */
INSERT INTO adstraffic.ad_response_fact_stats_req_location (
            eastern_date_sk, partner_sk, location_id, country_id, region_id, metro_id, postal_code_id, trxids_count, process_id
            )
SELECT  a.eastern_date_sk, a.partner_sk, a.location_id, COALESCE(b.country_id, -1), COALESCE(b.region_id,-1), COALESCE(b.metro_id, -1), COALESCE(b.postal_code_id, -1), sum(fullfilled_code_count), p_process_id
FROM    adstraffic.ad_response_fact_location_filter a
INNER JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.partner_sk,
a.location_id,
b.country_id,
b.region_id,
b.metro_id,
b.postal_code_id
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_req_location';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_req_location(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_req_location(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_req_location(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_request(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_request(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_request
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_stats_request(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_stats_request_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_request_forecast;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_request_forecast(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            fullfilled_code_count, process_id, country_id, region_id, metro_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.location_id,
            sum(fullfilled_code_count), ' || p_process_id || ', COALESCE(b.country_id, -1), COALESCE(b.region_id,-1), COALESCE(b.metro_id, -1)
FROM    adstraffic.ad_response_fact_' || v_table_name || '_inday_request a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id,
b.country_id,
b.region_id,
b.metro_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

RAISE NOTICE 'NOTICE: INSERTED FORECAST';

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_request_trxids;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_request_trxids(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, location_id, 
            location_quality, fullfilled_code_count, country_id, region_id, 
            metro_id, postal_code_id, process_id)
SELECT  a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.location_id,
            a.location_quality, sum(fullfilled_code_count), COALESCE(b.country_id, -1), COALESCE(b.region_id,-1),
            COALESCE(b.metro_id, -1), COALESCE(b.postal_code_id, -1), ' || p_process_id || '
FROM    adstraffic.ad_response_fact_' || v_table_name || '_inday_request a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.location_id,
a.location_quality,
b.country_id,
b.region_id,
b.metro_id,
b.postal_code_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_stats_request(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_stats_request_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_stats_request(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_request(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_res_location(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_res_location(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_res_location
||
|| Author: Tho HOANG
||
|| Date: 2011-08-26
||
|| Description: 
||     daily cumulative ad response for location OLAP cubes
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_res_location(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* delete data on same date */
delete from adstraffic.ad_response_fact_stats_res_location where eastern_date_sk = p_date_sk;

/* insert records */
INSERT INTO adstraffic.ad_response_fact_stats_res_location (
            eastern_date_sk, partner_sk, location_id, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id)
SELECT  eastern_date_sk, partner_sk, location_id, sum(fullfilled_code_count), 
            sum(fullfilled_code_y), sum(fullfilled_code_n), sum(fullfilled_code_e), sum(fullfilled_code_t), 
            p_process_id
FROM    adstraffic.ad_response_fact a
WHERE a.eastern_date_sk = p_date_sk
GROUP BY 
a.eastern_date_sk,
a.partner_sk,
a.location_id
;

UPDATE adstraffic.ad_response_fact_stats_res_location a
SET
  country_id = COALESCE(b.country_id, -1)
 ,region_id = COALESCE(b.region_id, -1)
 ,metro_id = COALESCE(b.metro_id, -1)
 ,postal_code_id = COALESCE(b.postal_code_id, -1)
FROM verveloc.location b
WHERE a.process_id = p_process_id
  AND b.id = a.location_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_res_location';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_res_location(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_res_location(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_res_location(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_stats_unfilled(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_stats_unfilled(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_stats_unfilled
||
|| Author: Tho HOANG
||
|| Date: 2012-02-02
||
|| Description: 
||     daily cumulative ad response
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_ad_response_fact_stats_unfilled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';
/*
SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_unfilled where eastern_date_sk = p_date_sk;
IF (v_count > 0) THEN
	RAISE NOTICE 'NEED DELETE OLD DATA IN SAME DATE - %',p_date_sk;
	RETURN v_previous_process_status;
END IF;
*/
/*
SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_copy where eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'FACT COPY HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;
*/
/* clear up old data */
--TRUNCATE adstraffic.ad_response_fact_filter_unfilled;

/* filter by unique transaction id and app server */
/*
INSERT INTO adstraffic.ad_response_fact_filter_unfilled(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100, process_id, dt_lastchange)
SELECT a.*
FROM   adstraffic.ad_response_fact_copy a
    , (SELECT aa.app_server_id, aa.transaction_id, min(aa.gen_ad_response_app_id) as gen_ad_response_app_id
       FROM   adstraffic.ad_response_fact_copy aa
       WHERE NOT EXISTS (SELECT 1 
                         FROM   adstraffic.ad_response_fact_copy bb 
                         WHERE  bb.app_server_id = aa.app_server_id 
                           AND  bb.transaction_id = aa.transaction_id 
                           AND  bb.fullfilled_code_y = 1
                         LIMIT  1)
       GROUP BY aa.app_server_id, aa.transaction_id) b
WHERE a.app_server_id = b.app_server_id
  AND a.transaction_id = b.transaction_id
  AND a.gen_ad_response_app_id = b.gen_ad_response_app_id
;
*/
/* insert records */
/*
INSERT INTO adstraffic.ad_response_fact_stats_unfilled(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT      a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.app_server_id,
            a.app_server, a.transaction_id, a.location_id, a.location_quality, a.location_quality_100,
            sum(fullfilled_code_count), COALESCE(b.country_id, -1), COALESCE(b.region_id,-1), COALESCE(b.metro_id, -1), COALESCE(b.postal_code_id, -1), 
            p_process_id
FROM    adstraffic.ad_response_fact_filter_unfilled a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.app_server_id,
a.app_server,
a.transaction_id,
a.location_id,
a.location_quality,
a.location_quality_100,
b.country_id,
b.region_id,
b.metro_id,
b.postal_code_id
;
*/

INSERT INTO adstraffic.ad_response_fact_stats_unfilled(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT      a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.app_server_id,
            a.app_server, a.transaction_id, a.location_id, a.location_quality, a.location_quality_100,
            sum(fullfilled_code_count), COALESCE(a.country_id, -1), COALESCE(a.region_id,-1), COALESCE(a.metro_id, -1), COALESCE(a.postal_code_id, -1), 
            p_process_id
FROM    adstraffic.ad_response_fact_agg_inday_stats_unfilled a
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.app_server_id,
a.app_server,
a.transaction_id,
a.location_id,
a.location_quality,
a.location_quality_100,
a.country_id,
a.region_id,
a.metro_id,
a.postal_code_id
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_ad_response_fact_stats_unfilled';

RAISE DEBUG 'ENDING: % staging.fn_build_ad_response_fact_stats_unfilled(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_ad_response_fact_stats_unfilled(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_ad_response_fact_stats_unfilled',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_stats_unfilled(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_unfilled_copy(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_unfilled_copy(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_unfilled_copy
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_unfilled_copy(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_unfilled_copy_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_unfilled;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_' || v_table_name || '_inday_unfilled_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_unfilled(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT a.eastern_date_sk, a.eastern_time_sk, a.local_date_sk, a.local_time_sk, 
       a.gmt_date_sk, a.gmt_time_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
       a.ad_network_sk, a.user_agent_sk, a.remote_ip, a.session_id, a.request_guid, 
       a.ad_response_url, a.status_code, a.duration, a.fullfilled_code, a.fullfilled_code_count, 
       a.fullfilled_code_y, a.fullfilled_code_n, a.fullfilled_code_e, a.fullfilled_code_t, 
       a.placement_id, a.gen_ad_response_app_id, a.app_server, a.data_file_id, 
       a.app_server_id, a.transaction_id, a.dc_site_sk, a.location_id, a.location_quality, 
       a.partner_module_sk, a.location_quality_100
FROM   adstraffic.ad_response_fact_' || v_table_name || '_inday a
     , adstraffic.ad_response_fact_' || v_table_name || '_filter_unfilled b
WHERE a.transaction_id = b.transaction_id
AND  a.gen_ad_response_app_id = b.gen_ad_response_app_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_' || v_table_name || '_inday_unfilled_01
  ON adstraffic.ad_response_fact_' || v_table_name || '_inday_unfilled
  USING btree
  (location_id)
TABLESPACE working_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_unfilled_copy(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_unfilled_copy_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_unfilled_copy(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_unfilled_copy(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_unfilled_filter(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_unfilled_filter(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_unfilled_filter
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_app_server TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_unfilled_filter(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_unfilled_filter_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_app_server:='3';
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_app_server:='4';
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_app_server:='6';
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_app_server:='8';
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_app_server:='9';
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_app_server:='12';
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_app_server:='13';
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_app_server:='14';
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_app_server:='15';
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_filter_unfilled;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* drop index */ 
v_cmd := 'DROP INDEX IF EXISTS adstraffic.idx_ad_response_fact_' || v_table_name || '_filter_unfilled_01;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_filter_unfilled(
            app_server_id, transaction_id, gen_ad_response_app_id)
SELECT aa.app_server_id, aa.transaction_id, min(aa.gen_ad_response_app_id) as gen_ad_response_app_id
FROM   adstraffic.ad_response_fact_' || v_table_name || '_inday aa
WHERE aa.app_server_id = ' || v_app_server || ' AND aa.fullfilled_code_y = 0 AND NOT EXISTS (SELECT 1 
        FROM   adstraffic.ad_response_fact_' || v_table_name || '_inday bb 
        WHERE  bb.app_server_id = ' || v_app_server || ' 
          AND  bb.transaction_id = aa.transaction_id 
          AND  bb.fullfilled_code_y = 1
        LIMIT  1)
GROUP BY aa.app_server_id, aa.transaction_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* create index */
v_cmd := '
CREATE INDEX idx_ad_response_fact_' || v_table_name || '_filter_unfilled_01
  ON adstraffic.ad_response_fact_' || v_table_name || '_filter_unfilled
  USING btree
  (app_server_id, transaction_id, gen_ad_response_app_id)
TABLESPACE working_tablespace;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_unfilled_filter(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_unfilled_filter_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_unfilled_filter(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_unfilled_filter(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_ad_response_fact_unfilled_location(integer, integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_ad_response_fact_unfilled_location(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_ad_response_fact_unfilled_location
||
|| Author: Tho HOANG
||
|| Date: 2012-03-22
||
|| Description: 
||     daily cumulative ad response per server
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_count integer:=0;
 v_process_name TEXT:='';
 v_table_name TEXT:='';
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_ad_response_fact_unfilled_location(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

v_process_name:='fn_build_ad_response_fact_stats_unfilled_' || p_app_server;
v_table_name:='';

IF p_file_config_id = 16 THEN
 v_table_name:='app3';
ELSIF p_file_config_id = 17 THEN
 v_table_name:='app4';
ELSIF p_file_config_id = 18 THEN
 v_table_name:='app6';
ELSIF p_file_config_id = 19 THEN
 v_table_name:='app8';
ELSIF p_file_config_id = 20 THEN
 v_table_name:='app9';
ELSIF p_file_config_id = 27 THEN
 v_table_name:='app12';
ELSIF p_file_config_id = 28 THEN
 v_table_name:='app13';
ELSIF p_file_config_id = 29 THEN
 v_table_name:='app14';
ELSIF p_file_config_id = 81 THEN
 v_table_name:='app015';
END IF;

/* clear up old data */
v_cmd := 'TRUNCATE adstraffic.ad_response_fact_' || v_table_name || '_inday_unfilled_location;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* insert records */
v_cmd := '
INSERT INTO adstraffic.ad_response_fact_' || v_table_name || '_inday_unfilled_location(
            eastern_date_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, partner_module_sk, app_server_id, 
            app_server, transaction_id, location_id, location_quality, location_quality_100, 
            fullfilled_code_count, country_id, region_id, metro_id, postal_code_id, 
            process_id)
SELECT      a.eastern_date_sk, a.portal_sk, a.partner_sk, a.ad_content_category_sk, 
            a.ad_network_sk, a.user_agent_sk, COALESCE(a.partner_module_sk, -2), a.app_server_id,
            a.app_server, a.transaction_id, a.location_id, a.location_quality, a.location_quality_100,
            sum(fullfilled_code_count), COALESCE(b.country_id, -1), COALESCE(b.region_id,-1), COALESCE(b.metro_id, -1), COALESCE(b.postal_code_id, -1), 
            ' || p_process_id || '
FROM    adstraffic.ad_response_fact_' || v_table_name || '_inday_unfilled a
LEFT JOIN verveloc.location b ON b.id = a.location_id 
GROUP BY 
a.eastern_date_sk,
a.portal_sk,
a.partner_sk,
a.ad_content_category_sk,
a.ad_network_sk,
a.user_agent_sk,
a.partner_module_sk,
a.app_server_id,
a.app_server,
a.transaction_id,
a.location_id,
a.location_quality,
a.location_quality_100,
b.country_id,
b.region_id,
b.metro_id,
b.postal_code_id
;';

RAISE NOTICE 'NOTICE: %',v_cmd;

EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name=v_process_name;

RAISE DEBUG 'ENDING: % fn_build_ad_response_fact_unfilled_location(%,%,''%'',''%'',%)',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
	v_process_name:='fn_build_ad_response_fact_stats_unfilled_' || p_app_server;
        RAISE NOTICE 'FAILED: % fn_build_ad_response_fact_unfilled_location(%,%,''%'',''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification(v_process_name,SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_ad_response_fact_unfilled_location(p_date_sk integer, p_process_id integer, p_process_status character varying, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_cumulative_page_view_agg_main(integer, integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_cumulative_page_view_agg_main(p_date_sk_start integer, p_date_sk_end integer, p_min_data_file_id integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_cumulative_page_view_agg_main
||
|| $Id$
||
*/

DECLARE 
 v_process_status data_file.file_status%TYPE:=p_process_status;

BEGIN

RAISE DEBUG 'STARTING: % fn_build_cumulative_page_view_agg_main(%,%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,p_process_status;

IF v_process_status = 'PS' THEN
  SELECT * INTO v_process_status FROM fn_build_page_view_fact_agg_03(p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,p_process_status);
END IF;

IF v_process_status = '03' THEN
  SELECT * INTO v_process_status FROM fn_build_page_view_fact_agg_04(p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,p_process_status);
END IF;

RAISE DEBUG 'ENDING: % fn_build_cumulative_page_view_agg_main(%,%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,p_process_status;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_build_cumulative_page_view_agg_main(%,%,%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_cumulative_page_view_agg_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_build_cumulative_page_view_agg_main(p_date_sk_start integer, p_date_sk_end integer, p_min_data_file_id integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_ad_serving_stats(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_ad_serving_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_ad_serving_stats
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily ad serving statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_ad_serving_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_01 WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS 01 HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_ad_serving_stats(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, location_quality_100,
            duration, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(location_quality_100) as location_quality_100,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_ad_serving_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_ad_serving_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_ad_serving_stats(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_ad_serving_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_ad_serving_stats_by_content_category(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_ad_serving_stats_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_ad_serving_stats_by_content_category
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily ad serving statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_ad_serving_stats_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_01 WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS 01 HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_ad_serving_stats_by_content_category (
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, content_category_id, category_name, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, location_quality_100,
            duration, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(location_quality_100) as location_quality_100,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.content_category_dim f ON a.ad_content_category_sk=f.content_category_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_ad_serving_stats_by_content_category';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_ad_serving_stats_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_ad_serving_stats_by_content_category(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats_by_content_category',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_ad_serving_stats_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_ad_serving_stats_by_device(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_ad_serving_stats_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_ad_serving_stats_by_device
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily ad serving statistics by device loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_ad_serving_stats_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_01 WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS 01 HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_ad_serving_stats_by_device(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, organic, device_type, device_manufacturer, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, location_quality_100,
            duration, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(location_quality_100) as location_quality_100,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.user_agent_dim f ON a.user_agent_sk=f.user_agent_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_ad_serving_stats_by_device';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_ad_serving_stats_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_ad_serving_stats_by_device(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_ad_serving_stats_by_device',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_ad_serving_stats_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_adcel_stats(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_adcel_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_adcel_stats
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily adcel statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_date_sk integer;
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_adcel_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_01 WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS 01 HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_forecast WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'FORECASTING HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

RAISE NOTICE 'INSERT %',timeofday();

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_adcel_stats(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, 
            fullfilled_code_t, total_ad_requests, process_id)
SELECT 
a.eastern_date_sk,
v_full_date,
v_calendar_year_month,
v_month_since_2005,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
0,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk
;

RAISE NOTICE 'UPDATE %',timeofday();

UPDATE adstraffic.daily_adcel_stats a
SET total_ad_requests = COALESCE ((
        SELECT SUM(b.fullfilled_code_count) 
        FROM   adstraffic.ad_response_fact_stats_forecast b
        INNER JOIN refer.date_dim d ON d.date_sk = b.eastern_date_sk
        INNER JOIN refer.partner_dim e ON e.partner_sk = b.partner_sk
        WHERE  b.eastern_date_sk = a.eastern_date_sk
          AND  e.dtdeleted > v_full_date
        GROUP BY b.eastern_date_sk), 0)
WHERE process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_adcel_stats';

RAISE NOTICE 'FINISH %',timeofday();

RAISE DEBUG 'ENDING: % staging.fn_build_daily_adcel_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_adcel_stats(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_adcel_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_adcel_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_adnetwork_performance(integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_adnetwork_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_adnetwork_performance
||
|| Author: Tho HOANG
||
|| Date: 2012-01-15
||
|| Description: 
||     daily adnetwork performance for network datamart loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_adnetwork_performance(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adm.daily_network_fct_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, network_id, publisher_id, publication_id, property_id, 
            placement_id, organization_id, advertiser_id, order_id, flight_id, 
            creative_id, impressions, clicks, revenue, process_id)
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
            a.full_date - '1970-01-01'::date as date_since_1970, 3, b.publisher_id, b.publication_id, b.website_id,
            -100, -100, -100, -100, -100, -100, SUM(paid_impressions), SUM(clicks), SUM(net_revenue), p_process_id
FROM (
/* AdSense DBCLK Channel */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case impressions_delivered when -1 then null else impressions_delivered end),0) as paid_impressions,
            COALESCE(SUM(case clicks_recorded when -1 then null else clicks_recorded end),0) as clicks,
            COALESCE(SUM(case estimated_earnings when -1 then null else estimated_earnings end),0) as net_revenue
FROM        adnetwork.daily_adsense_dbclk_channel
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* City Grid */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case estimated_net_earnings when -1 then null else estimated_net_earnings end),0) as net_revenue
FROM        adnetwork.daily_cg_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* iTunes */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case impressions when -1 then null else impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue
FROM        adnetwork.daily_it_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* JumpTap */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),-1) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_jt_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* Millennial Media */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case ads_served when -1 then null else ads_served end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_mm_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* Marchex */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case "cost" when -1 then null else "cost" end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_mx_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* Superpages Blue */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            0,
            0,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_sp_blue_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* Where */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(case filled when -1 then null else filled end),0) as paid_impressions,
            COALESCE(SUM(case clicked when -1 then null else clicked end),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_wh_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* AT&T Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
UNION ALL
/* AT&T Static Banner Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_sb_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id
) a
INNER JOIN refer.adm_website_dim b ON b.dt_expire = '9999-12-31' and b.partner_id = a.partner_id
GROUP BY    a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, b.publisher_id, b.publication_id, b.website_id
;

/* ********************** NEW FACT ********************** */
/* insert records daily_network_fct_channel */
INSERT INTO adm.daily_network_fct_channel(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, network_id, publisher_id, publication_id, property_id, 
            placement_id, organization_id, advertiser_id, order_id, flight_id, 
            creative_id, channel_id, partner_id, portal_id, impressions, clicks, revenue, process_id)
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
            a.full_date - '1970-01-01'::date as date_since_1970, 3, b.publisher_id, b.publication_id, b.website_id,
            -100, -100, -100, -100, -100, -100, COALESCE(c.channel_id_current, -100), a.partner_id, a.portal_id, 
            SUM(paid_impressions), SUM(clicks), SUM(net_revenue), p_process_id
FROM (
/* AdSense DBCLK Channel */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case impressions_delivered when -1 then null else impressions_delivered end),0) as paid_impressions,
            COALESCE(SUM(case clicks_recorded when -1 then null else clicks_recorded end),0) as clicks,
            COALESCE(SUM(case estimated_earnings when -1 then null else estimated_earnings end),0) as net_revenue
FROM        adnetwork.daily_adsense_dbclk_channel
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* City Grid/City Grid Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case estimated_net_earnings when -1 then null else estimated_net_earnings end),0) as net_revenue
FROM        adnetwork.daily_cg_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* iTunes */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case impressions when -1 then null else impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue
FROM        adnetwork.daily_it_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* JumpTap */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),-1) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_jt_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Millennial Media */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_mm_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Marchex/Marchex Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case "cost" when -1 then null else "cost" end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_mx_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Superpages Blue/Superpages Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            0,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_sp_blue_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Where */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicked when -1 then null else clicked end),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_wh_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* AT&T Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* AT&T Static Banner Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_sb_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* AT&T No Logo Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_no_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
) a
INNER JOIN  refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
LEFT JOIN   refer.adm_portal_dim c ON c.dt_expire = '9999-12-31' AND c.portal_id = a.portal_id
GROUP BY    a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
b.publisher_id, b.publication_id, b.website_id, c.channel_id_current, a.partner_id, a.portal_id
;

/* update revenue share for mobileweb, portal_id = 4 - Partner Portal */
update adm.daily_network_fct_channel a
set p_rev_share = case 
                      when network_id = 1 then revenue*b.rev_share_mobileweb_local/100 
                      when network_id = 2 then revenue*b.rev_share_mobileweb_national/100
                      when network_id = 3 then revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_rev_share = case 
                      when network_id = 1 then revenue*(100-b.rev_share_mobileweb_local)/100 
                      when network_id = 2 then revenue*(100-b.rev_share_mobileweb_national)/100
                      when network_id = 3 then revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id = 4
;

/* update revenue share for apps, portal_id <> 4 - Partner Portal */
update adm.daily_network_fct_channel a
set p_rev_share = case 
                      when network_id = 1 then revenue*b.rev_share_apps_local/100 
                      when network_id = 2 then revenue*b.rev_share_apps_national/100
                      when network_id = 3 then revenue*b.rev_share_apps_mediation/100
                  end
   ,v_rev_share = case 
                      when network_id = 1 then revenue*(100-b.rev_share_apps_local)/100 
                      when network_id = 2 then revenue*(100-b.rev_share_apps_national)/100
                      when network_id = 3 then revenue*(100-b.rev_share_apps_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id > 0
  and portal_id <> 4
;

/* Pentaho reporting data */
/* insert data to report table */
INSERT INTO adm.daily_agg_network_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, network_id, network_name, publisher_id, publisher_name, 
            publication_id, publication_name, property_id, property_name, 
            placement_id, placement_name, organization_id, organization_name, 
            advertiser_id, advertiser_name, order_id, order_name, flight_id, 
            creative_id, creative_name, channel_id, channel_name, channel_keyword, 
            partner_id, partner_name, partner_keyword, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, portal_keyword, 
            impressions, clicks, revenue, p_rev_share, v_rev_share, process_id)
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
            a.period, a.network_id, COALESCE(b.name, 'N/A'), a.publisher_id, COALESCE(c.company_name, 'N/A'),
            a.publication_id, COALESCE(d.name_current, 'N/A'), a.property_id, COALESCE(e.name_current, 'N/A'), 
            a.placement_id, COALESCE(f.name_current, 'N/A'), a.organization_id, COALESCE(g.name_current, 'N/A'), 
            a.advertiser_id, COALESCE(h.name_current, 'N/A'), a.order_id, COALESCE(i.name_current, 'N/A'), a.flight_id, 
            a.creative_id, COALESCE(j.name_current, 'N/A'), a.channel_id, COALESCE(m.name_current, 'N/A'), COALESCE(m.keyname_current, 'N/A'),
            a.partner_id, COALESCE(k.name_current, 'N/A'), COALESCE(k.keyword, 'N/A'), COALESCE(k.description_current, 'N/A'),
            COALESCE(k.parent1_id_current, -100), COALESCE(k.parent1_name_current, 'N/A'), a.portal_id, COALESCE(l.portal_name_current, 'N/A'), COALESCE(l.keyword, 'N/A'),
            a.impressions, a.clicks, a.revenue, a.p_rev_share, a.v_rev_share, a.process_id
FROM adm.daily_network_fct_channel a
LEFT JOIN refer.adm_network_dim b ON b.dt_expire = '9999-12-31' AND a.network_id = b.network_id
LEFT JOIN refer.adm_publisher_dim c ON c.dt_expire = '9999-12-31' AND a.publisher_id = c.publisher_id
LEFT JOIN refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND a.publication_id = d.publication_id
LEFT JOIN refer.adm_website_dim e ON e.dt_expire = '9999-12-31' AND a.property_id = e.website_id
LEFT JOIN refer.adm_placement_dim f ON f.dt_expire = '9999-12-31' AND a.placement_id = f.placement_id
LEFT JOIN refer.adm_organization_dim g ON g.dt_expire = '9999-12-31' AND a.organization_id = g.organization_id
LEFT JOIN refer.adm_advertiser_dim h ON h.dt_expire = '9999-12-31' AND a.advertiser_id = h.advertiser_id
LEFT JOIN refer.adm_order_dim i ON i.dt_expire = '9999-12-31' AND a.order_id = i.order_id
LEFT JOIN refer.adm_creative_dim j ON j.dt_expire = '9999-12-31' AND a.creative_id = j.creative_id
LEFT JOIN refer.partner_dim k ON k.dt_expire = '9999-12-31' AND a.partner_id = k.partner_id
LEFT JOIN refer.portal_dim l ON l.dt_expire = '9999-12-31' AND a.portal_id = l.portal_id
LEFT JOIN refer.adm_channel_dim m ON m.dt_expire = '9999-12-31' AND a.channel_id = m.channel_id
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_adnetwork_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_adnetwork_performance(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_adnetwork_performance(%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_adnetwork_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_adnetwork_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_adnetwork_summary(integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_adnetwork_summary
||
|| Author: Tho HOANG
||
|| Date: 2011-12-05
||
|| Description: 
||     daily adnetwork summary report loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_adnetwork_summary(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_adnetwork_summary(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, requests, paid_impressions, clicks, 
            net_revenue, fullfilled_code_count, fullfilled_code_y, process_id)
/* AdSense DBCLK Channel */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '-1' as ad_network_id, 'AdSense DBCLK Channel' as ad_network_name,
            0,
            COALESCE(SUM(case impressions_delivered when -1 then null else impressions_delivered end),0) as paid_impressions,
            COALESCE(SUM(case clicks_recorded when -1 then null else clicks_recorded end),0) as clicks,
            COALESCE(SUM(case estimated_earnings when -1 then null else estimated_earnings end),0) as net_revenue,
            0,
            0,
            p_process_id
FROM        adnetwork.daily_adsense_dbclk_channel
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* City Grid */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '20,29' as ad_network_id, 'City Grid/City Grid Proxy' as ad_network_name,
            COALESCE(SUM(case requests when -1 then null else requests end),0) as requests,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case estimated_net_earnings when -1 then null else estimated_net_earnings end),0) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_cg_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* iTunes */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '-1' as ad_network_id, 'iTunes' as ad_network_name,
            COALESCE(SUM(case requests when -1 then null else requests end),0) as requests,
            COALESCE(SUM(case impressions when -1 then null else impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
            0,
            0,
            p_process_id
FROM        adnetwork.daily_it_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* JumpTap */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '11' as ad_network_id, 'JumpTap' as ad_network_name,
            COALESCE(SUM(case requests when -1 then null else requests end),0) as requests,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),-1) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_jt_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* Millennial Media */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '4' as ad_network_id, 'Millennial Media' as ad_network_name,
            COALESCE(SUM(case requests when -1 then null else requests end),0) as requests,
            COALESCE(SUM(case ads_served when -1 then null else ads_served end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_mm_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* Marchex */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '21,28' as ad_network_id, 'Marchex/Marchex Proxy' as ad_network_name,
            COALESCE(SUM(case total_ad_requests when -1 then null else total_ad_requests end),0) as requests,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case "cost" when -1 then null else "cost" end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_mx_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* Superpages Blue */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '30,26' as ad_network_id, 'Superpages Proxy/Blue' as ad_network_name,
            0,
            0,
            0,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_sp_blue_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* Where */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '23,25' as ad_network_id, 'Where/Where HTML' as ad_network_name,
            COALESCE(SUM(case requests when -1 then null else requests end),0) as requests,
            COALESCE(SUM(case filled when -1 then null else filled end),0) as paid_impressions,
            COALESCE(SUM(case clicked when -1 then null else clicked end),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_wh_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* AT&T Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '27' as ad_network_id, 'AT&T Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_yp_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* AT&T Static Banner Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '32' as ad_network_id, 'AT&T Static Banner Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_yp_sb_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
UNION
/* AT&T No Logo Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            '33' as ad_network_id, 'AT&T No Logo Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.daily_yp_no_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_adnetwork_summary';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_adnetwork_summary(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_adnetwork_summary(%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_adnetwork_summary',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_adsense_dbclk_channel(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_adsense_dbclk_channel(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_adsense_dbclk_channel
||
|| Author: Tho HOANG
||
|| Date: 2011-11-15
||
|| Description: 
||     daily google adsense and doubleclick channel performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_adsense_dbclk_channel(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adnetwork.fact_ad_channel_site WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' DBCLK CHANNEL NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT count(*) INTO v_count FROM adnetwork.fact_ga_channel WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' ADSENSE CHANNEL NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

TRUNCATE adnetwork.adsense_dblck_channel;
INSERT INTO adnetwork.adsense_dblck_channel(
            eastern_date_sk, ga_channel_sk, dc_site_sk, partner_sk, portal_sk, 
            impressions_delivered, clicks_recorded, channel_page_views, channel_clicks, 
            channel_page_ctr, channel_cpc, channel_page_rpm, channel_estimated_earnings, 
            total_clicks_recorded, estimated_earnings, process_id)
SELECT a.eastern_date_sk, a.ga_channel_sk, a.dc_site_sk, a.partner_sk, 
       a.portal_sk, a.impressions_delivered, a.clicks_recorded, 
       b.page_views, b.clicks, b.page_ctr, b.cpc, b.page_rpm, b.estimated_earnings, 
       0, 0, p_process_id
  FROM adnetwork.fact_ad_channel_site a
INNER JOIN adnetwork.fact_ga_channel b ON a.eastern_date_sk = b.eastern_date_sk AND a.ga_channel_sk = b.ga_channel_sk AND a.ga_channel_sk > 0 AND a.eastern_date_sk = p_date_sk;

UPDATE adnetwork.adsense_dblck_channel a
SET total_clicks_recorded = b.total_clicks_recorded
FROM (
    SELECT eastern_date_sk, ga_channel_sk, SUM(clicks_recorded) as total_clicks_recorded 
    FROM adnetwork.adsense_dblck_channel 
    WHERE process_id = p_process_id
    GROUP BY eastern_date_sk, ga_channel_sk
) b
WHERE a.eastern_date_sk = b.eastern_date_sk AND a.ga_channel_sk = b.ga_channel_sk AND a.process_id = p_process_id;

UPDATE adnetwork.adsense_dblck_channel
SET estimated_earnings = (channel_estimated_earnings::float/total_clicks_recorded)*clicks_recorded
WHERE total_clicks_recorded > 0 AND process_id = p_process_id;

/* insert records */
INSERT INTO adnetwork.daily_adsense_dbclk_channel(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            partner_keyword, portal_id, portal_name, portal_keyword, impressions_delivered, 
            clicks_recorded, estimated_earnings, 
            requests, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005,
       c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
       d.portal_id, portal_name_current, d.keyword as portal_keyword,
       sum(impressions_delivered), sum(clicks_recorded), sum(estimated_earnings), 
       0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.adsense_dblck_channel a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c on a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d on a.portal_sk = d.portal_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_adsense_dbclk_channel';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_adsense_dbclk_channel(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_adsense_dbclk_channel(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_adsense_dbclk_channel',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_adsense_dbclk_channel(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_adm_data_feed(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_adm_data_feed(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_adm_data_feed
||
|| Author: Thang Nguyen
||
|| Date: 2011-06-13
||
|| Description: 
||     daily adm data feed loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_adm_data_feed(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adm.daily_agg_adm_data_feed(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            date_since_1970, creative_id, placement_id, impressions, clicks, 
            revenue, flight_id, flight_impressions, flight_metric, flight_rate, 
            flight_budget, flight_start_date, flight_end_date, process_id)
SELECT a.eastern_date_sk
 ,b.full_date
 ,b.calendar_year_month
 ,b.month_since_2005
 ,b.full_date - '1970-01-01'::date as date_since_1970
 ,c.creative_id
 ,a.site_id as placement_id
 ,SUM(a.impressions_delivered) as impressions
 ,SUM(clicks_recorded) as clicks
 ,0 as revenue
 ,c.flight_id as flight_id
 ,0 as flight_impressions
 ,d.metric_current as flight_metric
 ,d.rate_current as flight_rate
 ,d.budget_current as flight_budget
 ,d.start_date_current as flight_start_date
 ,d.end_date_current as flight_end_date
 ,p_process_id
FROM dbclk.site_campaign_fact a
 INNER JOIN refer.date_dim b ON b.date_sk = a.eastern_date_sk
 INNER JOIN refer.adm_creative_dim c ON c.creative_sk = a.creative_sk
 INNER JOIN refer.adm_flight_dim d ON d.flight_id = c.flight_id
WHERE a.eastern_date_sk = p_date_sk
  AND d.dt_expire::date = '9999-12-31'
GROUP BY a.eastern_date_sk
 ,b.full_date
 ,b.calendar_year_month
 ,b.month_since_2005
 ,c.flight_id
 ,c.creative_id
 ,a.site_id
 ,d.metric_current
 ,d.rate_current
 ,d.budget_current
 ,d.start_date_current
 ,d.end_date_current
;

-- update flight_impressions
UPDATE adm.daily_agg_adm_data_feed a
SET flight_impressions = COALESCE ((
        SELECT  SUM(impressions) 
        FROM   adm.daily_agg_adm_data_feed b
        WHERE  b.eastern_date_sk = a.eastern_date_sk
          AND  b.flight_id=a.flight_id
        GROUP BY b.eastern_date_sk, b.flight_id), 0)
WHERE a.eastern_date_sk = p_date_sk AND a.process_id = p_process_id;


-- calculate revenue
UPDATE adm.daily_agg_adm_data_feed a
SET revenue = COALESCE ((
        CASE lower(flight_metric)
	         WHEN 'cpm'         THEN impressions * flight_rate / 1000
                 WHEN 'sponsorship' THEN impressions / flight_impressions * flight_budget / (flight_end_date::date - flight_start_date::date + 1)
                 ELSE 0
               END), 0)
WHERE a.eastern_date_sk = p_date_sk 
  AND a.process_id = p_process_id 
  AND flight_budget > 0 
  AND flight_impressions > 0
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_adm_data_feed';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_adm_data_feed(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_adm_data_feed(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_adm_data_feed',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_adm_data_feed(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_campaign(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_campaign(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_campaign
||
|| Author: Thang Nguyen
||
|| Date: 2011-06-13
||
|| Description: 
||     daily agg site order report  loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_campaign(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO dbclk.daily_agg_campaign(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            campaign_id, campaign_name, impression_count, click_count, revenue_total, 
            delta_prior_day_impressions, delta_prior_day_clicks, delta_prior_day_revenue, 
            process_id)
SELECT a.eastern_date_sk
 ,v_full_date
 ,v_calendar_year_month
 ,v_month_since_2005
 ,b.dc_order_id
 ,b.order_name_current
 ,SUM(a.impressions_delivered) as impression_count
 ,SUM(a.clicks_recorded) as click_count
 ,0
 ,'N/A'
 ,'N/A'
 ,'N/A'
 ,p_process_id
FROM dbclk.site_campaign_fact a
 INNER JOIN refer.dc_order_dim b ON b.dc_order_sk = a.dc_order_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
 ,b.dc_order_id
 ,b.order_name_current;

/* update delta_prior_day_impressions */
UPDATE dbclk.daily_agg_campaign a
SET delta_prior_day_impressions = COALESCE ((
        SELECT  (((a.impression_count * 1.0 - COALESCE(SUM(b.impression_count),0)) / a.impression_count)*100)::text
        FROM   dbclk.daily_agg_campaign b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.campaign_id=a.campaign_id
          AND  b.is_active = true
        GROUP BY b.campaign_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.impression_count > 0;

/* update delta_prior_day_clicks */
UPDATE dbclk.daily_agg_campaign a
SET delta_prior_day_clicks = COALESCE ((
        SELECT  (((a.click_count * 1.0 - COALESCE(SUM(b.click_count),0)) / a.click_count)*100)::text
        FROM   dbclk.daily_agg_campaign b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.campaign_id=a.campaign_id
          AND  b.is_active = true
        GROUP BY b.campaign_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.click_count > 0;

UPDATE dbclk.daily_agg_campaign aa
SET revenue_total = COALESCE ((
        SELECT  sum(bb.revenue_total)
        FROM   (
		SELECT a.eastern_date_sk,a.order_id,b.remote_id,SUM(a.revenue_total) as revenue_total
		FROM (
			SELECT a.eastern_date_sk,b.order_id,sum(a.revenue_total) as revenue_total
			FROM (
				SELECT a.eastern_date_sk,b.flight_id,sum(a.revenue) as revenue_total
				FROM   adm.daily_agg_adm_data_feed a
				INNER JOIN refer.adm_creative_dim b ON b.creative_id = a.creative_id
				WHERE a.is_active = true AND b.dt_expire = '9999-12-31' AND a.eastern_date_sk = aa.eastern_date_sk
				GROUP BY a.eastern_date_sk,b.flight_id
			     ) a
			INNER JOIN refer.adm_flight_dim b ON a.flight_id=b.flight_id
			WHERE b.dt_expire = '9999-12-31'
			GROUP BY a.eastern_date_sk,b.order_id			
		    )a
		INNER JOIN refer.adm_order_dim b ON a.order_id=b.order_id
		WHERE b.dt_expire = '9999-12-31'
		GROUP BY a.eastern_date_sk,a.order_id,b.remote_id
	       ) bb
        WHERE  bb.remote_id=aa.campaign_id
        GROUP BY bb.remote_id), 0)
WHERE aa.process_id = p_process_id;

UPDATE dbclk.daily_agg_campaign a
SET delta_prior_day_revenue = COALESCE ((
        SELECT  (((a.revenue_total * 1.0 - COALESCE(SUM(b.revenue_total),0)) / a.revenue_total)*100)::text
        FROM   dbclk.daily_agg_campaign b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.campaign_id=a.campaign_id
          AND  b.is_active = true
        GROUP BY b.campaign_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.revenue_total > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_campaign';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_campaign(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_campaign(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_campaign',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_campaign(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_delivery(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_delivery(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_delivery
||
|| Author: Chinh Nguyen
||
|| Date: 2012-07-18
||
|| Description: 
||     daily delivery agg
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
|| SELECT staging.fn_build_daily_agg_delivery(2753,1000,'PS');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer; 
 v_total_yes_responses integer;
 v_total_revenue_today double precision;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_delivery(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'Ad Serving Stats HAVE NO DATA%',timeofday();
	RETURN p_process_status;
END IF;

SELECT COUNT(*) INTO v_count FROM adm.daily_network_fct_channel WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'ADM DAILY NETWORK FCT CHANNEL HAVE NO DATA%',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/*Delete old data*/
RAISE NOTICE 'DROP old data...';
DELETE FROM adsops.daily_agg_delivery WHERE eastern_date_sk=p_date_sk;
/* insert records */
RAISE NOTICE 'INSERT new data...';
INSERT INTO adsops.daily_agg_delivery(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            ad_source_id,ad_source_name, 
            ad_network_id, ad_network_name, 
            partner_id, partner_name, partner_description, 
            publisher_id, publisher_name, 
            portal_id, portal_name
            , property_id, property_name
            , reported_impressions
            , clicks
            , reported_revenue
            , unreported_revenue
            , total_revenue
            , verve_revenue
            , pub_revenue
            , process_id
            )
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
	    --g.network_id as ad_source_id, n.name_current as ad_source_name,
	    4 as ad_source_id, 'Local&National' as ad_source_name,
	    10 as ad_network_id,m.ad_network_name_current as ad_network_name,
	    a.partner_id as partner_id,j.name_current as partner_name,j.description_current as partner_description,
	    a.publisher_id,e.company_name_current as publisher_name,
	    a.portal_id,k.portal_name_current as portal_name,
	    a.property_id as property_id, c.name_current as property_name,
	    sum(a.impressions) as reported_impressions, 
	    sum(a.clicks) as clicks, 
	    sum(a.revenue) as reported_revenue,
	    sum(a.today_estimate_revenue) as unreported_revenue,
	    sum(a.total_net_revenue) as total_revenue,
	    sum(a.total_v_rev_share) as verve_revenue,
	    sum(a.total_p_rev_share) as pub_revenue
	    ,p_process_id	    
FROM        adm.daily_network_fct_channel a
LEFT JOIN  refer.adm_website_dim c ON c.dt_expire = '9999-12-31' AND c.website_id = a.property_id
LEFT JOIN  refer.adm_publisher_dim e ON e.dt_expire = '9999-12-31' AND e.publisher_id = a.publisher_id
LEFT JOIN  refer.adm_portal_dim k ON k.dt_expire = '9999-12-31' AND k.portal_id = a.portal_id
LEFT JOIN   refer.ad_network_dim m ON m.dt_expire = '9999-12-31' AND m.ad_network_id=10
LEFT JOIN   refer.partner_dim j ON j.dt_expire = '9999-12-31' AND j.partner_id=a.partner_id
WHERE       a.is_active = true 
AND a.eastern_date_sk = p_date_sk
AND a.network_id<>3
GROUP BY 
	    a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
	    ad_source_id,ad_source_name,
	    ad_network_id,m.ad_network_name_current,
	    a.partner_id,partner_name,partner_description,
	    a.publisher_id, publisher_name,
	    a.portal_id,k.portal_name_current,
	    property_id, property_name;

/*INSERT from Remnant*/
RAISE NOTICE 'INSERT From Remnant network...';
INSERT INTO adsops.daily_agg_delivery(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            ad_source_id,ad_source_name, 
            ad_network_id, ad_network_name, 
            partner_id, partner_name, partner_description, 
            publisher_id, publisher_name, 
            portal_id, portal_name,
            property_id, property_name,
            reported_impressions,
            clicks,
            reported_revenue,
            unreported_revenue,
            process_id
            )
/*-----City Grid Mobile*/
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '38' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case estimated_net_earnings when -1 then null else estimated_net_earnings end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_cg_mobile_performance a
INNER JOIN  refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=38
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----City Grid/City Grid Proxy*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '20,29' as ad_network_id,'City Grid/City Grid Proxy' as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case estimated_net_earnings when -1 then null else estimated_net_earnings end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_cg_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=20
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,ad_network_name
/*-----Marchex/Marchex Proxy*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '21,28' as ad_network_id,'Marchex/Marchex Proxy' as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case "cost" when -1 then null else "cost" end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_mx_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=21
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,ad_network_name
/*-----Superpages Blue/Superpages Proxy*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '26,30' as ad_network_id,'Superpages Blue/Superpages Proxy' as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_sp_blue_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=26
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,ad_network_name
/*-----JumpTap*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '11' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_jt_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=11
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----Millennial Media*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '4' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_mm_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=4
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----Where HTML*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '25' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicked when -1 then null else clicked end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_wh_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=25
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----AT&T Yellowpages*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '27' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_yp_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=27
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----AT&T Static Banner Yellowpages*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '32' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_yp_sb_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=32
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----AT&T No Logo Yellowpages*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '33' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_yp_no_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=33
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----KlickThur*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '35' as ad_network_id,j.ad_network_name_current as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    ROUND(SUM(today_estimate_revenue)::NUMERIC,3) as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_kt_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=35
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,j.ad_network_name_current
/*-----AdSense DBCLK Channel*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '-101' as ad_network_id,'AdSense DBCLK Channel' as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case impressions_delivered when -1 then null else impressions_delivered end),0) as paid_impressions,
	    COALESCE(SUM(case clicks_recorded when -1 then null else clicks_recorded end),0) as clicks,
	    COALESCE(SUM(case estimated_earnings when -1 then null else estimated_earnings end),0) as net_revenue,
	    0 as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_adsense_dbclk_channel a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=35
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,ad_network_name
/*-----iTunes*/
UNION ALL
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    3 as ad_source_id,i.name_current as ad_source_name,
	    '-102' as ad_network_id,'iTunes' as ad_network_name,
	    a.partner_id,COALESCE(g.name_current,'N/A') as partner_name,COALESCE(g.description_current,'N/A') as partner_description,
	    COALESCE(b.publisher_id,-100) as publisher_id,COALESCE(f.company_name_current,'N/A') as publisher_name,
	    a.portal_id,COALESCE(h.portal_name_current,'N/A') as portal_name,
	    COALESCE(b.website_id,-100) as property_id,COALESCE(b.name_current,'N/A') as property_name,
	    COALESCE(SUM(case impressions when -1 then null else impressions end),0) as paid_impressions,
	    COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
	    COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue,
	    0 as today_estimate_revenue,
	    p_process_id
FROM        adnetwork.daily_it_performance a
INNER JOIN   refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
INNER JOIN   refer.adm_publisher_dim f ON f.dt_expire = '9999-12-31' AND f.publisher_id = b.publisher_id
LEFT JOIN   refer.partner_dim g ON g.dt_expire = '9999-12-31' AND g.partner_id=a.partner_id
LEFT JOIN   refer.adm_portal_dim h ON h.dt_expire = '9999-12-31' AND h.portal_id = a.portal_id
LEFT JOIN   refer.adm_network_dim i ON i.dt_expire = '9999-12-31' AND i.network_id=3
LEFT JOIN   refer.ad_network_dim j ON j.dt_expire = '9999-12-31' AND j.ad_network_id=35
WHERE       a.is_active = true AND a.eastern_date_sk =p_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    network_id,i.name_current,a.partner_id, a.portal_id, b.publisher_id, b.website_id,f.company_name_current,
	    h.portal_name_current,b.name_current,g.name_current,g.description_current,ad_network_id,ad_network_name;

/*UPDATE total_revenue*/
RAISE NOTICE 'UPDATE total_revenue for remant network...';
UPDATE adsops.daily_agg_delivery a
SET total_revenue= reported_revenue+unreported_revenue
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.ad_source_id=3;

/* update revenue share for mobileweb, portal_id = 4 - Partner Portal */
RAISE NOTICE 'UPDATE revenue share for remant network....';
UPDATE adsops.daily_agg_delivery a
set pub_revenue = case 
                      when ad_source_id = 3 then total_revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,verve_revenue = case 
                      when ad_source_id = 3 then total_revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.is_active = 1
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id = 4
  and a.ad_source_id=3
;

/* update revenue share for apps, portal_id <> 4 - Partner Portal */
UPDATE adsops.daily_agg_delivery a
set pub_revenue = case 
                      when ad_source_id = 3 then total_revenue*b.rev_share_apps_mediation/100
                  end
   ,verve_revenue = case 
                      when ad_source_id = 3 then total_revenue*(100-b.rev_share_apps_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.is_active = 1
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id > 0
  and portal_id <> 4
  and a.ad_source_id=3
;



/*UPDATE adcel data*/
RAISE NOTICE 'Update adcel data 4,10,11,25,27,32,33,35,38 ...';
UPDATE adsops.daily_agg_delivery a
SET fullfilled_code_count=b.fullfilled_code_count,
    fullfilled_code_y=b.fullfilled_code_y,
    fullfilled_code_n=b.fullfilled_code_n,
    fullfilled_code_e=b.fullfilled_code_e,
    fullfilled_code_t=b.fullfilled_code_t
FROM
(
	SELECT ad_network_id,partner_id,portal_id,b.publisher_id,
	       SUM(fullfilled_code_count) as fullfilled_code_count,
	       SUM(fullfilled_code_y) as fullfilled_code_y,
	       SUM(fullfilled_code_n) as fullfilled_code_n,
	       SUM(fullfilled_code_e) as fullfilled_code_e,
	       SUM(fullfilled_code_t) as fullfilled_code_t
	FROM adstraffic.daily_ad_serving_stats a
	LEFT JOIN refer.adm_publisher_dim b ON b.dt_expire='9999-12-31' AND b.partner_group_id=a.parent1_id
	WHERE is_active=true
	AND eastern_date_sk=p_date_sk
	AND ad_network_id IN (4,10,11,25,27,32,33,35,38)
	GROUP BY ad_network_id,partner_id,portal_id,b.publisher_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.ad_network_id IN ('4','10','11','25','27','32','33','35','38')
AND a.ad_network_id::int = b.ad_network_id
AND a.portal_id=b.portal_id
AND a.partner_id=b.partner_id
AND a.publisher_id=b.publisher_id;

/*UPDATE adcel data*/
RAISE NOTICE 'Update adcel data City Grid/City Grid Proxy (20,29) ...';
UPDATE adsops.daily_agg_delivery a
SET fullfilled_code_count=b.fullfilled_code_count,
    fullfilled_code_y=b.fullfilled_code_y,
    fullfilled_code_n=b.fullfilled_code_n,
    fullfilled_code_e=b.fullfilled_code_e,
    fullfilled_code_t=b.fullfilled_code_t
FROM
(
	SELECT partner_id,portal_id,b.publisher_id,
	       SUM(fullfilled_code_count) as fullfilled_code_count,
	       SUM(fullfilled_code_y) as fullfilled_code_y,
	       SUM(fullfilled_code_n) as fullfilled_code_n,
	       SUM(fullfilled_code_e) as fullfilled_code_e,
	       SUM(fullfilled_code_t) as fullfilled_code_t
	FROM adstraffic.daily_ad_serving_stats a
	LEFT JOIN refer.adm_publisher_dim b ON b.dt_expire='9999-12-31' AND b.partner_group_id=a.parent1_id
	WHERE is_active=true
	AND eastern_date_sk=p_date_sk
	AND ad_network_id IN (20,29)
	GROUP BY partner_id,portal_id,b.publisher_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.ad_network_id ='20,29'
AND a.portal_id=b.portal_id
AND a.partner_id=b.partner_id
AND a.publisher_id=b.publisher_id;

/*UPDATE adcel data*/
RAISE NOTICE 'Update adcel data Marchex/Marchex Proxy (21,28) ...';
UPDATE adsops.daily_agg_delivery a
SET fullfilled_code_count=b.fullfilled_code_count,
    fullfilled_code_y=b.fullfilled_code_y,
    fullfilled_code_n=b.fullfilled_code_n,
    fullfilled_code_e=b.fullfilled_code_e,
    fullfilled_code_t=b.fullfilled_code_t
FROM
(
	SELECT partner_id,portal_id,b.publisher_id,
	       SUM(fullfilled_code_count) as fullfilled_code_count,
	       SUM(fullfilled_code_y) as fullfilled_code_y,
	       SUM(fullfilled_code_n) as fullfilled_code_n,
	       SUM(fullfilled_code_e) as fullfilled_code_e,
	       SUM(fullfilled_code_t) as fullfilled_code_t
	FROM adstraffic.daily_ad_serving_stats a
	LEFT JOIN refer.adm_publisher_dim b ON b.dt_expire='9999-12-31' AND b.partner_group_id=a.parent1_id
	WHERE is_active=true
	AND eastern_date_sk=p_date_sk
	AND ad_network_id IN (21,28)
	GROUP BY partner_id,portal_id,b.publisher_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.ad_network_id ='21,28'
AND a.portal_id=b.portal_id
AND a.partner_id=b.partner_id
AND a.publisher_id=b.publisher_id;

/*UPDATE adcel data*/
RAISE NOTICE 'Update adcel data Superpages Prpoxy/Blue (26,30) ...';
UPDATE adsops.daily_agg_delivery a
SET fullfilled_code_count=b.fullfilled_code_count,
    fullfilled_code_y=b.fullfilled_code_y,
    fullfilled_code_n=b.fullfilled_code_n,
    fullfilled_code_e=b.fullfilled_code_e,
    fullfilled_code_t=b.fullfilled_code_t
FROM
(
	SELECT partner_id,portal_id,b.publisher_id,
	       SUM(fullfilled_code_count) as fullfilled_code_count,
	       SUM(fullfilled_code_y) as fullfilled_code_y,
	       SUM(fullfilled_code_n) as fullfilled_code_n,
	       SUM(fullfilled_code_e) as fullfilled_code_e,
	       SUM(fullfilled_code_t) as fullfilled_code_t
	FROM adstraffic.daily_ad_serving_stats a
	LEFT JOIN refer.adm_publisher_dim b ON b.dt_expire='9999-12-31' AND b.partner_group_id=a.parent1_id
	WHERE is_active=true
	AND eastern_date_sk=p_date_sk
	AND ad_network_id IN (30,26)
	GROUP BY partner_id,portal_id,b.publisher_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.ad_network_id ='26,30'
AND a.portal_id=b.portal_id
AND a.partner_id=b.partner_id
AND a.publisher_id=b.publisher_id;

/*Update adcel_requests*/
RAISE NOTICE 'Update adcel_requests...';
UPDATE adsops.daily_agg_delivery a
SET adcel_requests=COALESCE(b.requests,0)
FROM
(
	SELECT sum(requests) as requests,publisher_id FROM adm.daily_network_fct_request WHERE eastern_date_sk=p_date_sk
	GROUP BY publisher_id
)b
WHERE a.publisher_id=b.publisher_id
AND a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id;

/*Update response_percentage*/
RAISE NOTICE 'Update response_percentage...';
UPDATE adsops.daily_agg_delivery a
SET response_percentage=fullfilled_code_y::float/adcel_requests
WHERE a.eastern_date_sk=p_date_sk
AND a.adcel_requests>0
AND a.process_id=p_process_id;

/*UPDATE total_yes_responses*/
RAISE NOTICE 'UPDATE total_yes_responses...';
SELECT sum(fullfilled_code_y) INTO v_total_yes_responses FROM adsops.daily_agg_delivery WHERE eastern_date_sk=p_date_sk AND process_id=p_process_id;
UPDATE adsops.daily_agg_delivery a
SET total_yes_responses=v_total_yes_responses
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id;

/*UPDATE daily_share_response_percentage*/
RAISE NOTICE 'UPDATE daily_share_response_percentage...';
UPDATE adsops.daily_agg_delivery a
SET daily_share_response_percentage=fullfilled_code_y::float/total_yes_responses
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id;

/*UPDATE avg_daisy_chain_depth*/
RAISE NOTICE 'UPDATE avg_daisy_chain_depth...';
UPDATE adsops.daily_agg_delivery a
SET avg_daisy_chain_depth=fullfilled_code_n::float/fullfilled_code_y
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.fullfilled_code_y>0;

/*UPDATE verve_impressions...*/
RAISE NOTICE 'UPDATE verve_impressions 4,10,11,25,27,32,33,35,38...';
UPDATE adsops.daily_agg_delivery a
SET verve_impressions= b.verve_impressions
FROM 
(
	SELECT sum(event_count) as verve_impressions,ad_network_id,partner_id,portal_id FROM adstraffic.daily_event_stats
	WHERE eastern_date_sk=p_date_sk AND is_active=true
	AND ad_network_id IN (4,10,11,25,27,32,33,35,38)
	GROUP BY ad_network_id,partner_id,portal_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.partner_id=b.partner_id
AND a.portal_id=b.portal_id
AND a.ad_network_id IN ('4','10','11','25','27','32','33','35','38')
AND a.ad_network_id::int = b.ad_network_id;

/*UPDATE verve_impressions...*/
RAISE NOTICE 'UPDATE verve_impressions City Grid/City Grid Proxy (20,29)...';
UPDATE adsops.daily_agg_delivery a
SET verve_impressions= b.verve_impressions
FROM 
(
	SELECT sum(event_count) as verve_impressions,partner_id,portal_id FROM adstraffic.daily_event_stats
	WHERE eastern_date_sk=p_date_sk AND is_active=true
	AND ad_network_id IN (20,29)
	GROUP BY partner_id,portal_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.partner_id=b.partner_id
AND a.portal_id=b.portal_id
AND a.ad_network_id = '20,29';

/*UPDATE verve_impressions...*/
RAISE NOTICE 'UPDATE verve_impressions Marchex/Marchex Proxy (21,28)...';
UPDATE adsops.daily_agg_delivery a
SET verve_impressions= b.verve_impressions
FROM 
(
	SELECT sum(event_count) as verve_impressions,partner_id,portal_id FROM adstraffic.daily_event_stats
	WHERE eastern_date_sk=p_date_sk AND is_active=true
	AND ad_network_id IN (21,28)
	GROUP BY partner_id,portal_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.partner_id=b.partner_id
AND a.portal_id=b.portal_id
AND a.ad_network_id = '21,28';

/*UPDATE verve_impressions...*/
RAISE NOTICE 'UPDATE verve_impressions Superpages Prpoxy/Blue (26,30)...';
UPDATE adsops.daily_agg_delivery a
SET verve_impressions= b.verve_impressions
FROM 
(
	SELECT sum(event_count) as verve_impressions,partner_id,portal_id FROM adstraffic.daily_event_stats
	WHERE eastern_date_sk=p_date_sk AND is_active=true
	AND ad_network_id IN (30,26)
	GROUP BY partner_id,portal_id
)b
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.partner_id=b.partner_id
AND a.portal_id=b.portal_id
AND a.ad_network_id = '26,30';

/*UPDATE undisplayed_impressions*/
RAISE NOTICE 'UPDATE undisplayed_impressions...';
UPDATE adsops.daily_agg_delivery a
SET undisplayed_impressions= fullfilled_code_y-verve_impressions
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id;

/*UPDATE undisplayed_percentage*/
RAISE NOTICE 'UPDATE undisplayed_percentage...';
UPDATE adsops.daily_agg_delivery a
SET undisplayed_percentage= undisplayed_impressions::float/fullfilled_code_y
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.fullfilled_code_y>0;

/*UPDATE pub_fill_percentage*/
RAISE NOTICE 'UPDATE pub_fill_percentage...';
UPDATE adsops.daily_agg_delivery a
SET pub_fill_percentage= verve_impressions::float/adcel_requests
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.adcel_requests>0;

/*UPDATE impressions_discrepancy_percentage*/
RAISE NOTICE 'UPDATE impressions_discrepancy_percentage...';
UPDATE adsops.daily_agg_delivery a
SET impressions_discrepancy_percentage= reported_impressions::float/verve_impressions
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.verve_impressions>0;

/*UPDATE ctr*/
RAISE NOTICE 'UPDATE ctr...';
UPDATE adsops.daily_agg_delivery a
SET ctr= clicks::float/verve_impressions
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.verve_impressions>0;

/*UPDATE cpm*/
RAISE NOTICE 'UPDATE cpm...';
UPDATE adsops.daily_agg_delivery a
SET cpm= (total_revenue::float/verve_impressions)*1000
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.verve_impressions>0;


/*UPDATE verve_rpm*/
RAISE NOTICE 'UPDATE verve_rpm...';
UPDATE adsops.daily_agg_delivery a
SET verve_rpm= (verve_revenue::float/verve_impressions)*1000
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.verve_impressions>0;

/*UPDATE verve_rpm*/
RAISE NOTICE 'UPDATE pub_rpm...';
UPDATE adsops.daily_agg_delivery a
SET pub_rpm= (pub_revenue::float/verve_impressions)*1000
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id
AND a.verve_impressions>0;

/*UPDATE daily_rev_percentage*/
RAISE NOTICE 'UPDATE daily_rev_percentage...';
SELECT sum(total_revenue) INTO v_total_revenue_today FROM adsops.daily_agg_delivery WHERE eastern_date_sk=p_date_sk AND process_id=p_process_id;
RAISE NOTICE 'Total Revenue today = %',v_total_revenue_today;

UPDATE adsops.daily_agg_delivery a
SET total_revenue_today=v_total_revenue_today
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id;

UPDATE adsops.daily_agg_delivery a
SET daily_rev_percentage= (CASE WHEN total_revenue_today>0 THEN total_revenue::float/total_revenue_today ELSE 0 END)
WHERE a.eastern_date_sk=p_date_sk
AND a.process_id=p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_delivery';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_delivery(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_delivery(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_delivery',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_delivery(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_network_performance_handle(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_network_performance_handle(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_network_performance_handle
||
|| Author: Chinh Nguyen
||
|| Date: 2012-01-13
||
|| Description: 
||     Agg data from adm.daily_network_fct_performance
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||

SELECT staging.fn_build_daily_agg_network_performance_handle(2552, 20, '');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count INTEGER:=0;
 v_current_up_to TIMESTAMP;
 v_dim_table_check SMALLINT;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_network_performance_handle(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

--check available data
SELECT count(*) INTO v_count FROM adm.daily_network_fct_performance WHERE eastern_date_sk=p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' adm.daily_network_fct_performance NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
'adm_flight_dim',
'adm_order_dim',
'adm_placement_dim',
'adm_publisher_dim',
'adm_website_dim',
'adm_organization_dim',
'adm_creative_dim',
'adm_advertiser_dim',
'ad_network_dim'
);

IF v_dim_table_check < 9 THEN
RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/*DEL old row*/
DELETE FROM adm.daily_agg_network_performance WHERE eastern_date_sk=p_date_sk;

/* insert records */
INSERT INTO adm.daily_agg_network_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, 
            network_id, network_name, 
            publisher_id, publisher_name, 
            publication_id, publication_name, 
            website_id, website_name, 
            placement_id, placement_name, 
            organization_id, organization_name, 
            advertiser_id, advertiser_name, 
            order_id, order_name, 
            flight_id, 
            creative_id,creative_name, 
            impressions, clicks, revenue ,
            process_id
            )
SELECT
a.eastern_date_sk,a.full_date,a.calendar_year_month,a.month_since_2005,
a.period,
a.network_id,b.ad_network_name,
a.publisher_id,c.company_name_current,
a.publication_id,j.name_current,
a.website_id,d.name_current,
a.placement_id,e.name_current,
a.organization_id,f.name_current,
a.advertiser_id,g.name_current,
a.order_id,h.name_current,
a.flight_id,
a.creative_id,i.name_current,
a.impressions,
a.clicks,
a.revenue,
0
FROM adm.daily_network_fct_performance a
LEFT JOIN refer.ad_network_dim b ON a.network_id=b.ad_network_id AND b.dt_expire='9999-12-31'
LEFT JOIN refer.adm_publisher_dim c ON a.publisher_id=c.publisher_id AND c.dt_expire='9999-12-31'
LEFT JOIN refer.adm_publication_dim j ON a.publication_id=j.publication_id AND j.dt_expire='9999-12-31'
LEFT JOIN refer.adm_website_dim d ON a.website_id=d.website_id AND d.dt_expire='9999-12-31'
LEFT JOIN refer.adm_placement_dim e ON a.placement_id=e.placement_id AND e.dt_expire='9999-12-31'
LEFT JOIN refer.adm_organization_dim f ON a.organization_id=f.organization_id AND f.dt_expire='9999-12-31'
LEFT JOIN refer.adm_advertiser_dim g ON a.advertiser_id=g.advertiser_id AND g.dt_expire='9999-12-31'
LEFT JOIN refer.adm_order_dim h ON a.order_id=h.order_id AND h.dt_expire='9999-12-31'
LEFT JOIN refer.adm_creative_dim i ON a.creative_id=i.creative_id AND i.dt_expire='9999-12-31'
WHERE a.eastern_date_sk=p_date_sk AND a.is_active=true;



/* update process concurrent trans table w/ status 
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_network_performance';*/

UPDATE adm.daily_agg_network_performance
SET is_active=true
WHERE is_active=false AND eastern_date_sk=p_date_sk;

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_network_performance_handle(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_network_performance_handle(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_network_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_network_performance_handle(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_order_atc(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_order_atc(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_order_atc
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-30
||
|| Description: 
||     OLAP cube for order-placement-creative-flight-website-publisher-partner
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
SELECT staging.fn_build_daily_agg_order_placement_creative_flight(2754, 8815, 'PS');
UPDATE adm.daily_agg_order_placement_creative_flight SET is_active=true WHERE eastern_date_sk=2754;
SELECT staging.fn_build_daily_agg_order_atc(2754, 8815, 'PS');
UPDATE adm.daily_agg_order_atc SET is_active=true WHERE eastern_date_sk=2754;
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_order_atc(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adm.daily_agg_order_placement_creative_flight WHERE eastern_date_sk=p_date_sk AND process_id=p_process_id;
IF v_count = 0 THEN
	RAISE NOTICE ' adm.daily_agg_order_placement_creative_flight NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/*DEL old row*/
DELETE FROM adm.daily_agg_order_atc WHERE eastern_date_sk=p_date_sk;

/* insert records */
INSERT INTO adm.daily_agg_order_atc(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name, placement_id, placement_name, 
            creative_id, creative_name, flight_id, website_id, website_name, 
            publisher_id, publisher_name, partner_id, partner_name, revenue,impressions, 
            clicks,metric, process_id)
SELECT 
a.eastern_date_sk, 
a.full_date, 
a.calendar_year_month, 
a.month_since_2005, 
a.day_since_1970, 
a.order_id, 
a.order_name, 
a.placement_id, 
a.placement_name,
a.creative_id,
a.creative_name,
a.flight_id, 
a.website_id,
a.website_name,
a.publisher_id,
a.publisher_name,
a.partner_id,
b.name_current as partner_name,
a.revenue,
a.impressions,
a.clicks,
a.metric,
p_process_id
FROM
	(SELECT
	a.eastern_date_sk, 
	a.full_date, 
	a.calendar_year_month, 
	a.month_since_2005, 
	a.day_since_1970, 
	a.order_id, 
	a.order_name, 
	a.placement_id, 
	a.placement_name,
	a.creative_id,
	a.creative_name,
	a.flight_id, 
	a.website_id,
	a.name_current as website_name,
	a.publisher_id,
	b.company_name_current as publisher_name,
	a.partner_id,
	a.revenue,
	a.impressions,
	a.clicks,
	a.metric
	FROM
		(SELECT 
		  a.eastern_date_sk, 
		  a.full_date, 
		  a.calendar_year_month, 
		  a.month_since_2005, 
		  a.day_since_1970, 
		  a.order_id, 
		  a.order_name, 
		  a.placement_id, 
		  a.placement_name,
		  a.creative_id,
		  a.creative_name,
		  a.flight_id, 
		  a.website_id,
		  b.name_current,
		  b.publisher_id,
		  b.partner_id,
		  a.revenue,
		  a.impressions,
		  a.clicks,
		  a.metric		
		FROM
			(SELECT 
			  a.eastern_date_sk, 
			  a.full_date, 
			  a.calendar_year_month, 
			  a.month_since_2005, 
			  a.day_since_1970, 
			  a.order_id, 
			  a.order_name, 
			  a.placement_id, 
			  a.placement_name,
			  a.creative_id,
			  a.creative_name,
			  a.flight_id, 
			  b.website_id,
			  a.revenue,
			  a.impressions,
			  a.clicks,
			  a.metric
			FROM 
			  adm.daily_agg_order_placement_creative_flight a, 
			  refer.adm_placement_dim b
			WHERE 
			  a.placement_id = b.placement_id AND
			  a.process_id = p_process_id AND
			  b.dt_expire = '9999-12-31' AND			
			  a.eastern_date_sk=p_date_sk) a
		LEFT JOIN refer.adm_website_dim b ON a.website_id=b.website_id
		WHERE b.dt_expire='9999-12-31') a
	LEFT JOIN refer.adm_publisher_dim b ON a.publisher_id=b.publisher_id
	WHERE b.dt_expire='9999-12-31') a
LEFT JOIN refer.partner_dim b ON a.partner_id=b.partner_id
WHERE b.dt_expire='9999-12-31' ;

/*UPDATE organization*/
UPDATE adm.daily_agg_order_atc a
SET organization_name=b.name_current,organization_id=b.organization_id
FROM
(
SELECT a.organization_id,a.name_current,b.order_id FROM refer.adm_organization_dim a,refer.adm_order_dim b
WHERE a.dt_expire = '9999-12-31' AND b.dt_expire = '9999-12-31' AND a.organization_id=b.organization_id 
GROUP BY a.organization_id,a.name_current,b.order_id
)b
WHERE b.order_id=a.order_id
AND a.is_active=false
AND a.process_id=p_process_id
AND a.eastern_date_sk=p_date_sk;

/*UPDATE advertiser_name*/
UPDATE adm.daily_agg_order_atc a
SET advertiser_name=b.name_current,advertiser_id=b.advertiser_id
FROM
(
SELECT a.advertiser_id,a.name_current,b.order_id FROM refer.adm_advertiser_dim a,refer.adm_order_dim b
WHERE a.dt_expire = '9999-12-31' AND b.dt_expire = '9999-12-31' AND a.organization_id=b.organization_id 
GROUP BY a.advertiser_id,a.name_current,b.order_id
)b
WHERE b.order_id=a.order_id
AND a.is_active=false
AND a.process_id=p_process_id
AND a.eastern_date_sk=p_date_sk;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_order_atc';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_order_atc(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_order_atc(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_order_atc',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_order_atc(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_order_atc_handle(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_order_atc_handle(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_order_atc_handle
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-30
||
|| Description: 
||     OLAP cube for order-placement-creative-flight-website-publisher-partner
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||


SELECT staging.fn_build_daily_agg_order_atc_handle(2510, 20, '');

SELECT * FROM adm.daily_agg_order_atc WHERE is_active=true AND eastern_date_sk=2510 LIMIT 100
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_order_atc_handle(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

/*
SELECT count(*) INTO v_count FROM adm.daily_agg_order_placement_creative_flight WHERE eastern_date_sk=p_date_sk AND process_id=p_process_id;
IF v_count = 0 THEN
	RAISE NOTICE ' adm.daily_agg_order_placement_creative_flight NO DATA %',timeofday();
	RETURN p_process_status;
END IF;*/

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/*Set inActive*/
UPDATE adm.daily_agg_order_atc
SET is_active=false
WHERE is_active=true AND eastern_date_sk=p_date_sk;

/*DEL old row
DELETE FROM adm.daily_agg_order_atc WHERE eastern_date_sk=p_date_sk;*/

/* insert records 
INSERT INTO adm.daily_agg_order_atc(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name, placement_id, placement_name, 
            creative_id, creative_name, flight_id, website_id, website_name, 
            publisher_id, publisher_name, partner_id, partner_name, revenue,impressions, 
            clicks,metric, process_id,is_active)
SELECT 
a.eastern_date_sk, 
a.full_date, 
a.calendar_year_month, 
a.month_since_2005, 
a.day_since_1970, 
a.order_id, 
a.order_name, 
a.placement_id, 
a.placement_name,
a.creative_id,
a.creative_name,
a.flight_id, 
a.website_id,
a.website_name,
a.publisher_id,
a.publisher_name,
a.partner_id,
b.name_current as partner_name,
a.revenue,
a.impressions,
a.clicks,
a.metric,
p_process_id,
false
FROM
	(SELECT
	a.eastern_date_sk, 
	a.full_date, 
	a.calendar_year_month, 
	a.month_since_2005, 
	a.day_since_1970, 
	a.order_id, 
	a.order_name, 
	a.placement_id, 
	a.placement_name,
	a.creative_id,
	a.creative_name,
	a.flight_id, 
	a.website_id,
	a.name_current as website_name,
	a.publisher_id,
	b.company_name_current as publisher_name,
	a.partner_id,
	a.revenue,
	a.impressions,
	a.clicks,
	a.metric
	FROM
		(SELECT 
		  a.eastern_date_sk, 
		  a.full_date, 
		  a.calendar_year_month, 
		  a.month_since_2005, 
		  a.day_since_1970, 
		  a.order_id, 
		  a.order_name, 
		  a.placement_id, 
		  a.placement_name,
		  a.creative_id,
		  a.creative_name,
		  a.flight_id, 
		  a.website_id,
		  b.name_current,
		  b.publisher_id,
		  b.partner_id,
		  a.revenue,
		  a.impressions,
		  a.clicks,
		  a.metric		
		FROM
			(SELECT 
			  a.eastern_date_sk, 
			  a.full_date, 
			  a.calendar_year_month, 
			  a.month_since_2005, 
			  a.day_since_1970, 
			  a.order_id, 
			  a.order_name, 
			  a.placement_id, 
			  a.placement_name,
			  a.creative_id,
			  a.creative_name,
			  a.flight_id, 
			  b.website_id,
			  a.revenue,
			  a.impressions,
			  a.clicks,
			  a.metric
			FROM 
			  adm.daily_agg_order_placement_creative_flight a, 
			  refer.adm_placement_dim b
			WHERE 
			  a.placement_id = b.placement_id AND
			  a.process_id = p_process_id AND
			  b.dt_expire = '9999-12-31' AND			
			  a.eastern_date_sk=p_date_sk) a
		LEFT JOIN refer.adm_website_dim b ON a.website_id=b.website_id
		WHERE b.dt_expire='9999-12-31') a
	LEFT JOIN refer.adm_publisher_dim b ON a.publisher_id=b.publisher_id
	WHERE b.dt_expire='9999-12-31') a
LEFT JOIN refer.partner_dim b ON a.partner_id=b.partner_id
WHERE b.dt_expire='9999-12-31' ;*/




/*UPDATE organization
UPDATE adm.daily_agg_order_atc a
SET organization_name=b.name_current,organization_id=b.organization_id
FROM
(
SELECT a.organization_id,a.name_current,b.order_id FROM refer.adm_organization_dim a,refer.adm_order_dim b
WHERE a.dt_expire = '9999-12-31' AND b.dt_expire = '9999-12-31' AND a.organization_id=b.organization_id 
GROUP BY a.organization_id,a.name_current,b.order_id
)b
WHERE b.order_id=a.order_id
AND a.is_active=false
--AND a.process_id=p_process_id
AND a.eastern_date_sk=p_date_sk;*/

/*UPDATE advertiser_name*/
UPDATE adm.daily_agg_order_atc a
SET advertiser_name=b.name_current,advertiser_id=b.advertiser_id
FROM
(
SELECT a.advertiser_id,a.name_current,b.order_id FROM refer.adm_advertiser_dim a,refer.adm_order_dim b
WHERE a.dt_expire = '9999-12-31' AND b.dt_expire = '9999-12-31' AND a.organization_id=b.organization_id 
GROUP BY a.advertiser_id,a.name_current,b.order_id
)b
WHERE b.order_id=a.order_id
AND a.is_active=false
--AND a.process_id=p_process_id
AND a.eastern_date_sk=p_date_sk;

/* update process concurrent trans table w/ status 
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_order_atc_handle';*/

UPDATE adm.daily_agg_order_atc
SET is_active=true
WHERE is_active=false AND eastern_date_sk=p_date_sk;


RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_order_atc_handle(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_order_atc_handle(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_order_atc_handle',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_order_atc_handle(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_order_flight_date_sk(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_order_flight_date_sk(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_order_flight_date_sk
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-26
||
|| Description: 
||     OLAP cube for order-placement-creative-flight
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
SELECT date_sk from refer.date_dim where full_date='2011-12-18';

SELECT full_date,order_id,order_name,flight_id,f_start_date,f_end_date,f_budget_current,f_a_budget,f_rm_budget,f_nm_budget,revenue, cumulate_revenue,flight_status,process_id
FROM adm.daily_agg_order_flight WHERE is_active=true AND full_date BETWEEN '2011-06-10'::date AND '2011-12-18' AND f_nm_budget=-100 OR f_rm_budget=-100 ORDER BY order_id desc LIMIT 1000;

SELECT order_id,order_name,flight_id,f_start_date,f_end_date,f_budget_current,f_a_budget,f_rm_budget,f_nm_budget,revenue, cumulate_revenue,flight_status,process_id
FROM adm.daily_agg_order_flight WHERE order_id IN (1936) AND is_active=true AND full_date='2011-12-18' ORDER BY order_id desc ;

SELECT order_id,order_name,flight_id,f_start_date,f_end_date,f_budget_current,f_a_budget,f_rm_budget,f_nm_budget,revenue, cumulate_revenue,flight_status,process_id
FROM adm.daily_agg_order_flight WHERE is_active=true AND full_date='2011-07-15' AND flight_status='waiting' ORDER BY order_id desc ;

SELECT staging.fn_build_daily_agg_order_flight_date_sk(2543, 12345, '');
SELECT staging.fn_build_daily_agg_order_flight_date_sk(2353, 20, '');
SELECT staging.fn_build_daily_agg_order_flight_date_sk(2354, 20, '');
SELECT staging.fn_build_daily_agg_order_flight_date_sk(2355, 20, '');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_end_date_month Date;
 v_end_date_of_next_month Date;
 v_start_date_of_next_month Date;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_order_flight_date_sk(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

SELECT MAX(full_date) INTO v_end_date_month
FROM refer.date_dim 
WHERE month_since_2005=v_month_since_2005;

SELECT MAX(full_date) INTO v_end_date_of_next_month
FROM refer.date_dim 
WHERE month_since_2005=v_month_since_2005+1;

SELECT Min(full_date) INTO v_start_date_of_next_month
FROM refer.date_dim 
WHERE month_since_2005=v_month_since_2005+1;

/*SET is inactive
UPDATE adm.daily_agg_order_flight
SET is_active=false
WHERE eastern_date_sk=p_date_sk;*/


 
/*Del old records */
DELETE FROM adm.daily_agg_order_flight
 WHERE eastern_date_sk=p_date_sk;

/* insert records  */
INSERT INTO adm.daily_agg_order_flight(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name,flight_id,f_budget_current,f_start_date,f_end_date, impressions, clicks, revenue, 
            metric,is_active, process_id,month_sice_2005_of_f_end_date_current,cancelled_at)

SELECT
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	a.order_id,
	b.name_current as order_name,
	a.flight_id,
	a.budget_current,
	a.start_date_current,
	a.end_date_current,
	a.impressions_count as impressions_count,
	a.clicks_count as clicks_count,	
	a.revenue_count as revenue_count,	
	a.metric,
	false,
	p_process_id,
	0,
	a.cancelled_at
	FROM
		(SELECT
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		a.flight_id,
		b.order_id,
		b.start_date_current,
		b.end_date_current,
		b.budget_current,
		b.metric,
		b.cancelled_at,
		sum(a.revenue_count) as revenue_count,
		sum(a.clicks_count) as clicks_count,
		sum(a.impressions_count) as impressions_count
		FROM (SELECT
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  a.placement_id,
			  c.name_current as placement_name,
			  b.creative_id,
			  b.name_current as creative_name,
			  b.flight_id,
			  sum(a.revenue) as revenue_count,
			  sum(a.clicks) as clicks_count,
			  sum(a.impressions) as impressions_count
			FROM
			  adm.daily_agg_adm_data_feed a,
			  refer.adm_creative_dim b,
			  refer.adm_placement_dim c
			WHERE
			  a.creative_id = b.creative_id AND
			  a.placement_id=c.placement_id AND
			  c.dt_expire = '9999-12-31' AND
			  a.is_active = true AND
			  b.dt_expire = '9999-12-31' AND
			  a.eastern_date_sk=p_date_sk			 
			GROUP BY
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  a.placement_id,
			  placement_name,
			  b.creative_id,
			  creative_name,
			  b.flight_id			
			) a
		INNER JOIN
		refer.adm_flight_dim b ON a.flight_id=b.flight_id
		WHERE
		b.dt_expire = '9999-12-31'
		GROUP BY
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		a.flight_id,
		b.start_date_current,
		b.end_date_current,
		b.budget_current,
		b.order_id,
		b.metric,
		b.cancelled_at
		) a
	INNER JOIN refer.adm_order_dim b ON a.order_id=b.order_id
	WHERE
	b.dt_expire = '9999-12-31';

/*Insert flight not run: start_date <= full_date <= end_date*/
DELETE FROM adm.daily_agg_order_flight
 WHERE eastern_date_sk=p_date_sk AND flight_status='not run';
 
INSERT INTO adm.daily_agg_order_flight(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name,flight_id,f_budget_current,f_start_date,f_end_date, impressions, clicks, revenue, 
            metric,is_active, process_id,month_sice_2005_of_f_end_date_current,flight_status,cancelled_at)
SELECT
	p_date_sk,
	v_full_date,
	v_calendar_year_month,
	v_month_since_2005,
	-100,--a.date_since_1970,
	a.order_id,
	b.name as order_name,
	a.flight_id,
	a.budget_current,
	a.start_date_current,
	a.end_date_current,
	0 as impressions_count,
	0 as clicks_count,	
	0 as revenue_count,	
	a.metric,
	false,
	p_process_id,
	0,
	'not run',
	a.cancelled_at
	FROM
		(SELECT 
		order_id,
		flight_id,
		budget_current,
		start_date_current,
		end_date_current,
		cancelled_at,
		metric
		FROM refer.adm_flight_dim
		WHERE dt_expire='9999-12-31' AND v_full_date BETWEEN start_date_current AND end_date_current 
		AND flight_id NOT IN 
		(
		SELECT flight_id FROM adm.daily_agg_order_flight WHERE full_date=v_full_date GROUP BY flight_id
		) 
		) a
		LEFT JOIN refer.adm_order_dim b ON a.order_id=b.order_id
		WHERE b.dt_expire='9999-12-31';


/*Insert flight will run in future*/

DELETE FROM adm.daily_agg_order_flight
 WHERE eastern_date_sk=p_date_sk AND flight_status='waiting';
 
INSERT INTO adm.daily_agg_order_flight(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name,flight_id,f_budget_current,f_start_date,f_end_date, impressions, clicks, revenue, 
            metric,is_active, process_id,month_sice_2005_of_f_end_date_current,flight_status,cancelled_at)
SELECT
	p_date_sk,
	v_full_date,
	v_calendar_year_month,
	v_month_since_2005,
	-100,--a.date_since_1970,
	a.order_id,
	b.name as order_name,
	a.flight_id,
	a.budget_current,
	a.start_date_current,
	a.end_date_current,
	0 as impressions_count,
	0 as clicks_count,	
	0 as revenue_count,	
	a.metric,
	false,
	p_process_id,
	0,
	'waiting',
	a.cancelled_at
	FROM
		(SELECT 
		order_id,
		flight_id,
		budget_current,
		start_date_current,
		end_date_current,
		cancelled_at,
		metric
		FROM refer.adm_flight_dim
		WHERE dt_expire='9999-12-31' AND start_date_current>v_full_date AND created_at<=v_full_Date
		) a
		LEFT JOIN refer.adm_order_dim b ON a.order_id=b.order_id
		WHERE b.dt_expire='9999-12-31';



/*2012-03-02 Update status of Flights cancelled is cancelled*/
UPDATE adm.daily_agg_order_flight a
SET flight_status='cancelled'
WHERE cancelled_at is not null
AND cancelled_at::date<=v_full_date
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;

/*-----------------Update flights are runing or not run----------------------------*/

/*Update cumulate_revenue of flights are runing*/
UPDATE adm.daily_agg_order_flight a
SET cumulate_revenue=b.revenue
FROM
(
SELECT sum(revenue) as revenue,flight_id 
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk<p_date_sk
GROUP BY flight_id
) b
WHERE a.flight_id=b.flight_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status<>'waiting';


/*Update f_a_budget of flights are runing*/
UPDATE adm.daily_agg_order_flight a
SET f_a_budget=b.f_a_budget
FROM
(
SELECT f_budget_current-(cumulate_revenue+revenue) as f_a_budget,flight_id,f_end_date
FROM adm.daily_agg_order_flight b
WHERE b.eastern_date_sk=p_date_sk
) b
WHERE a.flight_id=b.flight_id
AND b.f_end_date>=v_full_date
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status<>'waiting';


/*Update f_rm_budget of flights are runing*/
UPDATE adm.daily_agg_order_flight a
SET f_rm_budget=b.remain_budget
FROM (
	select flight_id
	     , case
		when f_end_date=full_date then 0
		when f_end_date <= v_end_date_month::date then
			f_a_budget
		else 
			f_a_budget::float/(f_end_date::date - full_date::date) * (v_end_date_month::date - full_date::date)
	       end remain_budget
	from adm.daily_agg_order_flight
	WHERE full_date=v_full_date
) b
WHERE a.flight_id=b.flight_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status<>'waiting';

/*Update f_nm_budget of flights are runing or nut run*/
UPDATE adm.daily_agg_order_flight a
SET f_nm_budget=b.nm_budget
FROM (
	select flight_id
	     , case
		  when f_end_date::date <= v_end_date_month::date then 0
		  when f_end_date::date BETWEEN v_start_date_of_next_month::date AND v_end_date_of_next_month::date then 
			f_a_budget-f_rm_budget		  
		  else 
			(f_a_budget-f_rm_budget)/(f_end_date-v_start_date_of_next_month)*(v_end_date_of_next_month-v_start_date_of_next_month)

	       end nm_budget
	from adm.daily_agg_order_flight
	WHERE eastern_date_sk=p_date_sk AND flight_status<>'waiting' AND is_active = false
) b
WHERE a.flight_id=b.flight_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status<>'waiting';


/*------------------------------Update flights create at v_full_date but will run in future----------------------*/
/*Update f_a_budget*/

UPDATE adm.daily_agg_order_flight a
SET f_a_budget=b.f_budget_current
FROM (
	select flight_id,f_budget_current
	from adm.daily_agg_order_flight
	WHERE full_date=v_full_date
) b
WHERE a.flight_id=b.flight_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status='waiting';

/*Update f_rm_budget*/
UPDATE adm.daily_agg_order_flight a
SET f_rm_budget=b.remain_budget
FROM (
	select flight_id
	     , case
		  when f_start_date>=v_end_date_month then
			0
		  when f_start_date < v_end_date_month AND  f_end_date >= v_start_date_of_next_month then
			(f_budget_current/(f_end_date-f_start_date))*(v_end_date_month-f_start_date)	 
		  when f_end_date<v_start_date_of_next_month then
			f_budget_current							
		  else -100			
	       end remain_budget
	from adm.daily_agg_order_flight 
	WHERE full_date=v_full_date AND flight_status='waiting'
) b
WHERE a.flight_id=b.flight_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status='waiting';


/*Update f_nm_budget*/
UPDATE adm.daily_agg_order_flight a
SET f_nm_budget=b.nm_budget
FROM (
	select flight_id
	     , case
		  when f_start_date>v_end_date_of_next_month then 
			0
		  when f_end_date<=v_end_date_month then
			0
		  when f_start_date<v_end_date_month AND f_end_date BETWEEN v_start_date_of_next_month AND v_end_date_of_next_month then 
			(f_budget_current/(f_end_date-f_start_date))*(f_end_date-v_end_date_month)
		  when f_start_date<v_end_date_month AND  f_end_date> v_end_date_of_next_month then
			(f_budget_current/(f_end_date-f_start_date))*(v_end_date_of_next_month-v_end_date_month)
		  when f_start_date>=v_end_date_month AND f_end_date<=v_end_date_of_next_month then
			f_budget_current			
		  when f_start_date>=v_end_date_month AND f_end_date>v_end_date_of_next_month then 
			(f_budget_current/(f_end_date-f_start_date))*( v_end_date_of_next_month-f_start_date)
		  else -100			  
		  			
	       end nm_budget
	from adm.daily_agg_order_flight
	WHERE eastern_date_sk=p_date_sk AND flight_status='waiting'
) b
WHERE a.flight_id=b.flight_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.flight_status='waiting';

/*SET is active*/
UPDATE adm.daily_agg_order_flight a
SET is_active=true
WHERE a.is_active=false AND a.eastern_date_sk=p_date_sk;

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_order_flight_date_sk(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_order_flight_date_sk(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_order_flight_date_sk',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_order_flight_date_sk(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_order_placement_creative_flight(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_order_placement_creative_flight(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_order_placement_creative_flight
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-27
|| Update: 2012-07-20
|| Description: 
||     OLAP CUBE for ADM-DBCLICK order-placement-creative-flight
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||

SELECT staging.fn_build_daily_agg_order_placement_creative_flight(2410, 20, '');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_order_placement_creative_flight(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/*Del old records */
DELETE FROM adm.daily_agg_order_placement_creative_flight
 WHERE eastern_date_sk=p_date_sk;

 
/* insert records */
/* insert records */
INSERT INTO adm.daily_agg_order_placement_creative_flight(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name, placement_id, placement_name, 
            creative_id, creative_name, flight_id, impressions, clicks, revenue, 
            metric, process_id)
SELECT
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	a.order_id,
	COALESCE(b.name_current,'N/A') as order_name,
	a.placement_id,
	a.placement_name,
	a.creative_id,
	a.creative_name,
	a.flight_id,
	a.impressions_count as impressions_count,
	a.clicks_count as clicks_count,	
	a.revenue_count as revenue_count,	
	a.metric,
	p_process_id
	FROM
		(SELECT
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		a.placement_id,
		a.placement_name,
		a.creative_id,
		a.creative_name,
		a.flight_id,
		COALESCE(b.order_id,-100) as order_id,
		COALESCE(b.metric,'N/A') as metric,
		sum(a.revenue_count) as revenue_count,
		sum(a.clicks_count) as clicks_count,
		sum(a.impressions_count) as impressions_count
		FROM (SELECT
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  a.placement_id,
			  COALESCE(c.name_current,'N/A') as placement_name,
			  COALESCE(b.creative_id,-100) as creative_id,
			  COALESCE(b.name_current,'N/A') as creative_name,
			  COALESCE(b.flight_id,-100) as flight_id,
			  sum(a.revenue) as revenue_count,
			  sum(a.clicks) as clicks_count,
			  sum(a.impressions) as impressions_count
			FROM adm.daily_agg_adm_data_feed a
			  LEFT JOIN refer.adm_creative_dim b ON a.creative_id = b.creative_id AND b.dt_expire = '9999-12-31'
			  LEFT JOIN refer.adm_placement_dim c ON a.placement_id=c.placement_id AND c.dt_expire = '9999-12-31'
			WHERE
			  a.is_active = true AND
			  a.eastern_date_sk=p_date_sk			 
			GROUP BY
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  a.placement_id,
			  placement_name,
			  b.creative_id,
			  creative_name,
			  b.flight_id			
			) a
		LEFT JOIN refer.adm_flight_dim b ON a.flight_id=b.flight_id AND b.dt_expire = '9999-12-31'		
		GROUP BY
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		a.placement_id,
		a.placement_name,
		a.creative_id,
		a.creative_name,
		a.flight_id,
		b.order_id,
		b.metric
		) a
	LEFT JOIN refer.adm_order_dim b ON a.order_id=b.order_id AND b.dt_expire = '9999-12-31';

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_order_placement_creative_flight';

 
RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_order_placement_creative_flight(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_order_placement_creative_flight(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_order_placement_creative_flight',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_order_placement_creative_flight(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_order_placement_creative_flight_first(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_order_placement_creative_flight_first(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_order_placement_creative_flight_first
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-26
||
|| Description: 
||     OLAP cube for order-placement-creative-flight
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||

SELECT staging.fn_build_daily_agg_order_placement_creative_flight_first(1, 20, '');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_order_placement_creative_flight_first(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

TRUNCATE adm.daily_agg_order_placement_creative_flight  ;
/* insert records */
INSERT INTO adm.daily_agg_order_placement_creative_flight(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, order_id, order_name, placement_id, placement_name, 
            creative_id, creative_name, flight_id, impressions, clicks, revenue, 
            metric,is_active, process_id)

SELECT
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	a.order_id,
	b.name_current as order_name,
	a.placement_id,
	a.placement_name,
	a.creative_id,
	a.creative_name,
	a.flight_id,
	a.impressions_count as impressions_count,
	a.clicks_count as clicks_count,	
	a.revenue_count as revenue_count,	
	a.metric,
	false,
	p_process_id
	FROM
		(SELECT
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		a.placement_id,
		a.placement_name,
		a.creative_id,
		a.creative_name,
		a.flight_id,
		b.order_id,
		b.metric,
		sum(a.revenue_count) as revenue_count,
		sum(a.clicks_count) as clicks_count,
		sum(a.impressions_count) as impressions_count
		FROM (SELECT
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  a.placement_id,
			  c.name_current as placement_name,
			  b.creative_id,
			  b.name_current as creative_name,
			  b.flight_id,
			  sum(a.revenue) as revenue_count,
			  sum(a.clicks) as clicks_count,
			  sum(a.impressions) as impressions_count
			FROM
			  adm.daily_agg_adm_data_feed a,
			  refer.adm_creative_dim b,
			  refer.adm_placement_dim c
			WHERE
			  a.creative_id = b.creative_id AND
			  a.placement_id=c.placement_id AND
			  c.dt_expire = '9999-12-31' AND
			  a.is_active = true AND
			  b.dt_expire = '9999-12-31'			 
			GROUP BY
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  a.placement_id,
			  placement_name,
			  b.creative_id,
			  creative_name,
			  b.flight_id			
			) a
		INNER JOIN
		refer.adm_flight_dim b ON a.flight_id=b.flight_id
		WHERE
		b.dt_expire = '9999-12-31'
		GROUP BY
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		a.placement_id,
		a.placement_name,
		a.creative_id,
		a.creative_name,
		a.flight_id,
		b.order_id,
		b.metric
		) a
	INNER JOIN refer.adm_order_dim b ON a.order_id=b.order_id
	WHERE
	b.dt_expire = '9999-12-31' 
	ORDER BY
	revenue_count desc;


/*SET is active*/
UPDATE adm.daily_agg_order_placement_creative_flight a
SET is_active=true
WHERE a.is_active=false;

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_order_placement_creative_flight_first(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_order_placement_creative_flight_first(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_order_placement_creative_flight_first',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_order_placement_creative_flight_first(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_publisher_website_partner(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_publisher_website_partner(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_publisher_website_partner
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-29
||
|| Description: 
||     OLAP cube for publisher-website-partner
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||

SELECT staging.fn_build_daily_agg_publisher_website_partner(2431, 20, '');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_publisher_website_partner(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* DEL old rows */
DELETE FROM adm.daily_agg_publisher_website_partner 
 WHERE eastern_date_sk=p_date_sk; 
/* insert records */
INSERT INTO adm.daily_agg_publisher_website_partner(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, publisher_id, publisher_name, website_id, website_name, 
            partner_id, partner_name,revenue, impressions, clicks,
            process_id)
SELECT 
a.eastern_date_sk,
a.full_date,
a.calendar_year_month,
a.month_since_2005,
a.date_since_1970,
a.publisher_id,
a.company_name_current as publisher_name,
a.website_id,
a.website_name,
a.partner_id,
b.name_current as partner_name,
a.total_revenue ,
a.total_impressions ,
a.total_clicks,
p_process_id
FROM
	(SELECT 
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	b.company_name_current,
	a.publisher_id,
	a.website_id,
	a.name_current as website_name,
	a.partner_id,
	a.total_revenue ,
	a.total_impressions ,a.total_clicks
	from (SELECT
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		b.publisher_id,
		b.website_id,
		b.name_current,
		b.partner_id,
		sum(a.total_revenue) as total_revenue,
		sum(a.total_impressions) as total_impressions,
		sum(a.total_clicks) as total_clicks
		FROM (
			SELECT
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  b.website_id,
			  sum(a.revenue) as total_revenue,
			  sum(a.impressions) as total_impressions,
			  sum(a.clicks) as total_clicks
			FROM adm.daily_agg_adm_data_feed a
			 INNER JOIN refer.adm_placement_dim b ON a.placement_id = b.placement_id
			WHERE
			  a.is_active=true AND
			  b.dt_expire='9999-12-31' AND
			  a.eastern_date_sk=p_date_sk
			GROUP BY
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  b.website_id
			) a
		INNER JOIN refer.adm_website_dim b ON a.website_id=b.website_id
		WHERE
		b.dt_expire='9999-12-31'
		GROUP BY
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		b.publisher_id,
		b.website_id,
		b.name_current,
		b.partner_id
		) a
	INNER JOIN refer.adm_publisher_dim b ON a.publisher_id=b.publisher_id
	WHERE
	b.dt_expire='9999-12-31'
) a
INNER JOIN refer.partner_dim b ON a.partner_id=b.partner_id
WHERE  b.dt_expire='9999-12-31';

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_publisher_website_partner';
 
RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_publisher_website_partner(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_publisher_website_partner(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_publisher_website_partner',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_publisher_website_partner(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_publisher_website_partner_first(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_publisher_website_partner_first(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_publisher_website_partner_first
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-29
||
|| Description: 
||     OLAP cube for publisher-website-partner
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||

SELECT staging.fn_build_daily_agg_publisher_website_partner_first(1, 20, '');
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_min_full_date DATE;
 v_max_full_date DATE;
 v_total_date int;
 v_day_since_2005 int;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_publisher_website_partner_first(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_since_2005 INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_since_2005
FROM refer.date_dim
WHERE date_sk=p_date_sk;

TRUNCATE adm.daily_agg_publisher_website_partner  ;
/* insert records */
INSERT INTO adm.daily_agg_publisher_website_partner(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            day_since_1970, publisher_id, publisher_name, website_id, website_name, 
            partner_id, partner_name,revenue, impressions, clicks,
            is_active, process_id)

SELECT 
a.eastern_date_sk,
a.full_date,
a.calendar_year_month,
a.month_since_2005,
a.date_since_1970,
a.publisher_id,
a.company_name_current as publisher_name,
a.website_id,
a.website_name,
a.partner_id,
b.name_current as partner_name,
a.total_revenue ,
a.total_impressions ,
a.total_clicks,
false,
p_process_id
FROM
	(SELECT 
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	b.company_name_current,
	a.publisher_id,
	a.website_id,
	a.name_current as website_name,
	a.partner_id,
	a.total_revenue ,
	a.total_impressions ,a.total_clicks
	from (SELECT
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		b.publisher_id,
		b.website_id,
		b.name_current,
		b.partner_id,
		sum(a.total_revenue) as total_revenue,
		sum(a.total_impressions) as total_impressions,
		sum(a.total_clicks) as total_clicks
		FROM (
			SELECT
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  b.website_id,
			  sum(a.revenue) as total_revenue,
			  sum(a.impressions) as total_impressions,
			  sum(a.clicks) as total_clicks
			FROM adm.daily_agg_adm_data_feed a
			 INNER JOIN refer.adm_placement_dim b ON a.placement_id = b.placement_id
			WHERE
			  a.is_active=true AND
			  b.dt_expire='9999-12-31'
			GROUP BY
			  a.eastern_date_sk,
			  a.full_date,
			  a.calendar_year_month,
			  a.month_since_2005,
			  a.date_since_1970,
			  b.website_id
			) a
		INNER JOIN refer.adm_website_dim b ON a.website_id=b.website_id
		WHERE
		b.dt_expire='9999-12-31'
		GROUP BY
		a.eastern_date_sk,
		a.full_date,
		a.calendar_year_month,
		a.month_since_2005,
		a.date_since_1970,
		b.publisher_id,
		b.website_id,
		b.name_current,
		b.partner_id
		) a
	INNER JOIN refer.adm_publisher_dim b ON a.publisher_id=b.publisher_id
	WHERE
	b.dt_expire='9999-12-31'
) a
INNER JOIN refer.partner_dim b ON a.partner_id=b.partner_id
WHERE  b.dt_expire='9999-12-31';

/*SET is active*/
UPDATE adm.daily_agg_publisher_website_partner a
SET is_active=true
WHERE a.is_active=false;

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_publisher_website_partner_first(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_publisher_website_partner_first(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_publisher_website_partner_first',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_publisher_website_partner_first(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_publishers_day(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_publishers_day(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_publishers_day
||
|| Author: Thang Nguyen
||
|| Date: 2011-06-13
||
|| Description: 
||     daily agg site order report  loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_publishers_day(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO dbclk.daily_agg_publishers_day(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            publisher_id, publisher_name, impression_count, click_count, 
            revenue_total, delta_prior_day_impressions, delta_prior_day_clicks, 
            delta_prior_day_revenue, process_id)
SELECT a.eastern_date_sk
 ,b.full_date
 ,b.calendar_year_month
 ,b.month_since_2005
 ,c.publisher_id
 ,c.company_name_current
 ,SUM(a.impressions_delivered) as impression_count
 ,SUM(a.clicks_recorded) as click_count
 ,0
 ,'N/A'
 ,'N/A'
 ,'N/A'
 ,p_process_id
FROM dbclk.site_campaign_fact a
  INNER JOIN refer.date_dim b ON b.date_sk = a.eastern_date_sk
  INNER JOIN refer.adm_publisher_dim c ON c.publisher_sk = a.publisher_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
 ,b.full_date
 ,b.calendar_year_month
 ,b.month_since_2005
 ,c.publisher_id
 ,c.company_name_current;

/* update delta_prior_day_impressions */
UPDATE dbclk.daily_agg_publishers_day a
SET delta_prior_day_impressions = COALESCE ((
        SELECT  (((a.impression_count * 1.0 - COALESCE(SUM(b.impression_count),0)) / a.impression_count)*100)::text
        FROM   dbclk.daily_agg_publishers_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.publisher_id=a.publisher_id
          AND  b.is_active = true
        GROUP BY b.publisher_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.impression_count > 0;

/* update delta_prior_day_clicks */
UPDATE dbclk.daily_agg_publishers_day a
SET delta_prior_day_clicks = COALESCE ((
        SELECT  (((a.click_count * 1.0 - COALESCE(SUM(b.click_count),0)) / a.click_count)*100)::text
        FROM   dbclk.daily_agg_publishers_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.publisher_id=a.publisher_id
          AND  b.is_active = true
        GROUP BY b.publisher_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.click_count > 0;

UPDATE dbclk.daily_agg_publishers_day aa
SET revenue_total = COALESCE ((
        SELECT  sum(bb.revenue_total)
        FROM   (
		SELECT a.eastern_date_sk,b.publisher_id,SUM(a.revenue_total) as revenue_total
		FROM (
			SELECT a.eastern_date_sk,b.publisher_id,sum(a.revenue_total) as revenue_total
			FROM (
				SELECT a.eastern_date_sk,b.website_id,sum(a.revenue) as revenue_total
				FROM   adm.daily_agg_adm_data_feed a
				INNER JOIN refer.adm_placement_dim b ON b.placement_id = a.placement_id
				WHERE a.is_active = true AND b.dt_expire = '9999-12-31' AND a.eastern_date_sk = aa.eastern_date_sk
				GROUP BY a.eastern_date_sk,b.website_id
			     ) a
			INNER JOIN refer.adm_website_dim b ON a.website_id=b.website_id
			WHERE b.dt_expire = '9999-12-31'
			GROUP BY a.eastern_date_sk,b.publisher_id			
		    )a
		INNER JOIN refer.adm_publisher_dim b ON a.publisher_id=b.publisher_id
		WHERE b.dt_expire = '9999-12-31'
		GROUP BY a.eastern_date_sk,b.publisher_id
	       ) bb
        WHERE  bb.publisher_id=aa.publisher_id
        GROUP BY bb.publisher_id), 0)
WHERE aa.process_id = p_process_id;

 UPDATE dbclk.daily_agg_publishers_day a
SET delta_prior_day_revenue = COALESCE ((
        SELECT  (((a.revenue_total * 1.0 - COALESCE(SUM(b.revenue_total),0)) / a.revenue_total)*100)::text
        FROM   dbclk.daily_agg_publishers_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.publisher_id=a.publisher_id
        GROUP BY b.publisher_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.revenue_total > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_publishers_day';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_publishers_day(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_publishers_day(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_publishers_day',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_publishers_day(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_revenue_by_order(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_revenue_by_order(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_revenue_by_order
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-04
||
|| Description: 
||     daily double click orders' revenue
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
/*
SELECT staging.fn_build_daily_agg_revenue_by_order(
    2431,
    2258,
    'ER'
);
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
v_current_up_to TIMESTAMP;
v_dim_table_check SMALLINT;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_revenue_by_order(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
'adm_flight_dim',
'adm_order_dim',
'adm_placement_dim',
'adm_publisher_dim',
'adm_website_dim',
'adm_organization_dim',
'adm_creative_dim',
'adm_advertiser_dim'
);

IF v_dim_table_check < 8 THEN
RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;


/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/*Agg flight table at date*/
SELECT staging.fn_build_daily_agg_order_flight_date_sk(p_date_sk, p_process_id, p_process_status) INTO v_process_status;
IF v_process_status='ER' THEN
RETURN v_process_status;
END IF;


/*UPDATE in is_active
UPDATE adm.daily_agg_revenue_by_order a
SET is_active=false
WHERE is_active=true AND a.eastern_date_sk=p_date_sk;*/

/*Del old records */
DELETE FROM adm.daily_agg_revenue_by_order
 WHERE eastern_date_sk=p_date_sk;

/* insert records*/
INSERT INTO adm.daily_agg_revenue_by_order(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005,full_last_date_of_this_month, 
            date_since_1970, order_id,remote_id, order_name, revenue,clicks,impressions,
            start_date, end_date,month_since_2005_of_end_month, budget,metric,process_id,rank)
SELECT
a.eastern_date_sk,
a.full_date,
a.calendar_year_month,
a.month_since_2005,
a.full_date,
a.date_since_1970,
a.order_id,
b.remote_id,
b.name_current,
a.revenue_count as revenue_count,
a.clicks_count as clicks_count,
a.impressions_count as impressions_count,
b.start_date,
b.end_date,
0,
0,
'',
p_process_id,
RANK() OVER (PARTITION BY eastern_date_sk ORDER BY revenue_count DESC) revenueRANK
FROM
	(SELECT
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	b.order_id,
	sum(a.revenue_count) as revenue_count,
	sum(a.clicks_count) as clicks_count,
	sum(a.impressions_count) as impressions_count
	FROM (SELECT
		  eastern_date_sk,
		  full_date,
		  calendar_year_month,
		  month_since_2005,
		  date_since_1970,
		  flight_id,
		  sum(revenue) as revenue_count,
		  sum(clicks) as clicks_count,
		  sum(impressions) as impressions_count
		FROM
		  adm.daily_agg_adm_data_feed
		WHERE
		  is_active = true AND
		  eastern_date_sk=p_date_sk
		  --eastern_date_sk=2365
		GROUP BY
		  eastern_date_sk,
		  full_date,
		  calendar_year_month,
		  month_since_2005,
		  date_since_1970,
		  flight_id
		) a
	INNER JOIN
	refer.adm_flight_dim b ON a.flight_id=b.flight_id
	WHERE
	b.dt_expire = '9999-12-31'
	GROUP BY
	a.eastern_date_sk,
	a.full_date,
	a.calendar_year_month,
	a.month_since_2005,
	a.date_since_1970,
	b.order_id
	) a
INNER JOIN refer.adm_order_dim b ON a.order_id=b.order_id
WHERE
b.dt_expire = '9999-12-31'; 

/* update 1 day ago */
UPDATE adm.daily_agg_revenue_by_order a
SET impressions_1d_ago = COALESCE(b.impressions,0)
,clicks_1d_ago = COALESCE(b.clicks,0)
,revenue_1d_ago = COALESCE(b.revenue,0)
FROM adm.daily_agg_revenue_by_order b
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND b.eastern_date_sk = a.eastern_date_sk - 1
AND b.order_id=a.order_id;

/* update 7 day ago */
UPDATE adm.daily_agg_revenue_by_order a
SET impressions_7d_ago = COALESCE(b.impressions,0)
,clicks_7d_ago = COALESCE(b.clicks,0)
,revenue_7d_ago = COALESCE(b.revenue,0)
FROM adm.daily_agg_revenue_by_order b
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND b.eastern_date_sk = a.eastern_date_sk - 7
AND b.order_id=a.order_id
;

/* update 28 day ago */
UPDATE adm.daily_agg_revenue_by_order a
SET impressions_28d_ago = COALESCE(b.impressions,0)
,clicks_28d_ago = COALESCE(b.clicks,0)
,revenue_28d_ago = COALESCE(b.revenue,0)
FROM adm.daily_agg_revenue_by_order b
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND b.eastern_date_sk = a.eastern_date_sk - 28
AND b.order_id=a.order_id;

/*2012-03-02 Update order end_date by max flight end_date_current when order end_date is null */
UPDATE adm.daily_agg_revenue_by_order a
SET end_date=b.end_date
FROM 
(
SELECT order_id,max(end_date_current) as end_date
FROM refer.adm_flight_dim 
WHERE dt_expire='9999-12-31' AND created_at::date<=v_full_date
GROUP BY order_id
)b
WHERE a.order_id=b.order_id
AND a.end_date is null
AND a.eastern_date_sk=p_date_sk
AND a.process_id = p_process_id;


/*Up date total_revenue up to date*/
UPDATE adm.daily_agg_revenue_by_order a
SET cumulative_revenue= COALESCE( (SELECT sum(b.revenue)
					FROM adm.daily_agg_order_flight b
					WHERE b.eastern_date_sk < a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					)
,0)
	,cumulative_cpm_revenue= COALESCE( (SELECT sum(b.revenue)
					FROM adm.daily_agg_order_flight b
					WHERE b.eastern_date_sk < a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					AND b.metric='cpm'
					)
,0)
	,cumulative_sponsorship_revenue= COALESCE( (SELECT sum(b.revenue)
					FROM adm.daily_agg_order_flight b
					WHERE b.eastern_date_sk < a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					AND b.metric='sponsorship'
					)
,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;



/*update flight_count
UPDATE adm.daily_agg_revenue_by_order a
SET flight_count = b.flight_count
   ,flight_start_date = b.max_start_date
   ,flight_end_date = b.min_end_date
FROM (
SELECT order_id, count(*) as flight_count, max(start_date_current) as max_start_date, min(end_date_current) as min_end_date
FROM refer.adm_flight_dim
WHERE v_full_date BETWEEN start_date_current AND end_date_current AND dt_expire='9999-12-31'
GROUP BY order_id
) b
WHERE a.order_id = b.order_id
  AND a.process_id = p_process_id
  AND a.is_active = false
  AND a.eastern_date_sk=p_date_sk
;*/

/*update booked budget*/
UPDATE adm.daily_agg_revenue_by_order a
SET budget=b.budget
FROM
(
SELECT sum(budget) as budget, order_id
FROM refer.adm_flight_dim
WHERE dt_expire = '9999-12-31' AND created_at::date<=v_full_date
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;


/*update available budget*/
UPDATE adm.daily_agg_revenue_by_order a
SET abudget=b.f_a_budget
FROM
(
SELECT sum(f_a_budget) as f_a_budget, order_id
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk=p_date_sk AND flight_status<>'cancelled'
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;


/*Update cpm_revenue*/
UPDATE adm.daily_agg_revenue_by_order a
SET cpm_revenue= COALESCE( (SELECT sum(b.revenue)
					FROM adm.daily_agg_order_flight b
					WHERE b.eastern_date_sk = a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					AND b.metric='cpm'
					)
,0)
	,sponsorship_revenue= COALESCE( (SELECT sum(b.revenue)
					FROM adm.daily_agg_order_flight b
					WHERE b.eastern_date_sk = a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					AND b.metric='sponsorship'
					)
,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;

--update pracing
/**/
UPDATE adm.daily_agg_revenue_by_order a
SET pacing=COALESCE((((a.cumulative_cpm_revenue+a.cpm_revenue)/(1+a.full_date-a.start_date::date))/(a.budget/(1+a.end_date::date-a.start_date::date)))*100,0)
WHERE a.full_date-a.start_date :: date >= 0
AND a.budget/(1+a.end_date::date-a.start_date::date)>0
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;

/*update mtd_total_revenue*/
UPDATE adm.daily_agg_revenue_by_order a
SET mtd_total_revenue=COALESCE(
			(SELECT a.cumulative_revenue + a.revenue - min(b.cumulative_revenue)
			FROM adm.daily_agg_revenue_by_order b
			WHERE b.order_id = a.order_id			
			AND b.calendar_year_month = a.calendar_year_month
			AND b.metric = a.metric
			GROUP BY order_id,calendar_year_month,metric)
			,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;


/*Update num_days_of_this_month*/
UPDATE adm.daily_agg_revenue_by_order a
SET full_last_date_of_this_month=COALESCE((SELECT MAX(full_date)
					FROM refer.date_dim b
					WHERE b.calendar_year_month=a.calendar_year_month
					),a.full_date),
	month_since_2005_of_end_month=COALESCE((SELECT month_since_2005
					FROM refer.date_dim b
					WHERE b.full_date=a.end_date::date
					),a.month_since_2005)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;

/*Update Remaining Monthly Budget*/
UPDATE adm.daily_agg_revenue_by_order a
SET remaining_monthly_budget=b.f_rm_budget
FROM
(
SELECT sum(f_rm_budget) as f_rm_budget, order_id
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk=p_date_sk AND flight_status<>'cancelled'
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
--AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;


/*Update Next Monthly Budget*/
UPDATE adm.daily_agg_revenue_by_order a
SET next_month_budget=b.f_nm_budget
FROM
(
SELECT sum(f_nm_budget) as f_nm_budget, order_id
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk=p_date_sk AND flight_status<>'cancelled'
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;

/*Update yesterday ranting*/
UPDATE adm.daily_agg_revenue_by_order a
SET yesterday_rank=COALESCE(case when b.rank=0 then 999 else b.rank end,999)
FROM adm.daily_agg_revenue_by_order b
WHERE b.eastern_date_sk=a.eastern_date_sk-1
AND b.order_id=a.order_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;

/*Update rank_after_one_day*/
UPDATE adm.daily_agg_revenue_by_order a
SET rank_after_one_day=COALESCE(case when b.rank=0 then 999 else b.rank end,999)
FROM adm.daily_agg_revenue_by_order b
WHERE b.eastern_date_sk=p_date_sk
AND b.order_id=a.order_id
AND a.eastern_date_sk=p_date_sk-1
AND a.is_active = true;


/*Agg yesterday rank*/
SELECT staging.fn_build_daily_agg_revenue_by_order_yesterday(p_date_sk,p_process_id,'ER') INTO v_process_status;
IF v_process_status='ER' THEN
RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_revenue_by_order_yesterday(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
END IF;




/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_revenue_by_order';

/*UPDATE is_active
UPDATE adm.daily_agg_revenue_by_order a
SET is_active=true
WHERE a.eastern_date_sk=p_date_sk;*/

/* RUn staging.fn_build_daily_agg_order_flight(integer, integer, character varying)
SELECT staging.fn_build_daily_agg_order_flight(p_date_sk, p_process_id, p_process_status) INTO v_process_status;
SELECT staging.fn_build_daily_agg_publisher_website_partner(p_date_sk, p_process_id, p_process_status) INTO v_process_status;
SELECT staging.fn_build_daily_agg_order_atc(p_date_sk, p_process_id, p_process_status)INTO v_process_status;*/
RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_revenue_by_order(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;
RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_revenue_by_order(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_revenue_by_order',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_revenue_by_order(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_revenue_by_order_by_date_sk_range(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_revenue_by_order_by_date_sk_range(p_from_date_sk integer, p_to_date_sk integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range
||
|| Author: Chinh Nguyen
||
|| Date: 2011-12-09
||
|| Description: 
||     daily double click orders' revenue by date_sk range
||
|| Parameters: 
||     - IN  p_from_date_sk              -- integer
||        from date
||     - IN  p_to_date_sk           -- integer
||        to date
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
/*
SELECT date_sk from refer.date_dim where full_date='2012-03-06';
SELECT min(eastern_date_sk),max(eastern_date_sk) FROM adm.daily_agg_order_placement_creative_flight WHERE is_active=true;
SELECT staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(2557,2622,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(2401,2500,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(2501,2542,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(2352,2550,'ER');
--error 2366,2479,2485,2496,2498,2503,2507,2526,2527,2542,
SELECT staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(2600,2612,'ER');
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_current_date_sk integer;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(%,%)',timeofday(),p_from_date_sk,p_to_date_sk;
v_previous_process_status:=p_process_status;
v_process_status:='SU';
v_current_date_sk:=p_from_date_sk;

WHILE v_current_date_sk <= p_to_date_sk AND v_process_status='SU'
LOOP
    SELECT staging.fn_build_daily_agg_revenue_by_order_only(v_current_date_sk,-1000,'ER') INTO v_process_status;
    --SELECT staging.fn_build_daily_agg_order_atc_handle(v_current_date_sk,12345,'ER') INTO v_process_status;
    --SELECT staging.fn_build_daily_agg_revenue_by_publisher_handle(v_current_date_sk,12345,'ER') INTO v_process_status;
    --SELECT staging.fn_build_daily_agg_revenue_by_order_yesterday(v_current_date_sk,12345,'ER') INTO v_process_status;
    --SELECT staging.fn_build_daily_agg_network_performance_handle(v_current_date_sk,12345,'ER') INTO v_process_status;
    --SELECT staging.fn_build_daily_event_stats_adnet(v_current_date_sk,0,'ER') INTO v_process_status;
    
    v_current_date_sk:=v_current_date_sk+1;
END LOOP;

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(%,%)',timeofday(),p_from_date_sk,p_to_date_sk;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
	v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(%,%); SQLSTATE=% SQLERRM=%',timeofday(),p_from_date_sk,p_to_date_sk,SQLSTATE,SQLERRM;
        
RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_revenue_by_order_by_date_sk_range(p_from_date_sk integer, p_to_date_sk integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_revenue_by_order_only(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_revenue_by_order_only(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_revenue_by_order_only
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-04
||
|| Description: 
||     daily double click orders' revenue
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
/* 
SELECT date_sk FROM refer.date_dim WHERE full_date='2012-01-1';
SELECT staging.fn_build_daily_agg_revenue_by_order_only(2557,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_only(2549,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_only(2432,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_only(2432,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_order_only(2432,2258,'ER');

SELECT COUNT(*) FROM adm.daily_agg_revenue_by_order WHERE is_active=true AND yesterday_rank=0 AND full_date='2011-06-10';
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_flight_count int;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_revenue_by_order_only(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;
/*2012-03-02 Update order end_date by max flight end_date_current when order end_date is null */
UPDATE adm.daily_agg_revenue_by_order a
SET end_date=b.end_date,process_id = p_process_id
FROM 
(
SELECT order_id,max(end_date_current) as end_date
FROM refer.adm_flight_dim 
WHERE dt_expire='9999-12-31' AND created_at::date<=v_full_date
GROUP BY order_id
)b
WHERE a.order_id=b.order_id
AND a.end_date is null
AND a.eastern_date_sk=p_date_sk;

UPDATE adm.daily_agg_revenue_by_order a
SET pacing=COALESCE((((a.cumulative_cpm_revenue+a.cpm_revenue)/(1+a.full_date-a.start_date::date))/(a.budget/(1+a.end_date::date-a.start_date::date)))*100,0)
WHERE a.full_date-a.start_date :: date >= 0
AND a.end_date is null
AND a.budget/(1+a.end_date::date-a.start_date::date)>0
AND a.eastern_date_sk=p_date_sk;


--yesterday 

/*2012-03-02 Update order end_date by max flight end_date_current when order end_date is null */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET end_date=b.end_date,process_id = p_process_id
FROM 
(
SELECT order_id,max(end_date_current) as end_date
FROM refer.adm_flight_dim 
WHERE dt_expire='9999-12-31' AND created_at::date<=v_full_date
GROUP BY order_id
)b
WHERE a.order_id=b.order_id
AND a.end_date is null
AND a.eastern_date_sk=p_date_sk;

--update pracing
/*-- */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET pacing=b.pacing
FROM
(
SELECT order_id,case
	when full_date<=end_date then
	(((cumulative_revenue+revenue)/(1+full_date-start_date::date))/(budget/(1+end_date::date-start_date::date)))*100
	else 0
	end pacing
	FROM adm.daily_agg_revenue_by_order_yesterday
	WHERE eastern_date_sk=p_date_sk AND metric='cpm'
)b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.end_date is null
AND a.pacing is null
AND a.metric='cpm';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_revenue_by_order_only(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_revenue_by_order_only(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_revenue_by_order_only',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_revenue_by_order_only(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_revenue_by_order_yesterday(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_revenue_by_order_yesterday(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_revenue_by_order_yesterday
||
|| Author: Chinh Nguyen
||
|| Date: 2011-12-27
||
|| Description: 
||     daily double click orders' revenue
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
/*
SELECT date_sk FROM refer.date_dim WHERE full_date='2011-12-25';
SELECT full_date FROM refer.date_dim WHERE date_sk=2542;
SELECT * FROM adm.daily_agg_revenue_by_order_yesterday WHERE is_active=true AND full_date='2011-12-25' AND budget=null ORDER BY yesterday_rank ;
SELECT * FROM adm.daily_agg_revenue_by_order_yesterday WHERE is_active=true AND full_date='2011-12-26' ORDER BY yesterday_rank ;
SELECT staging.fn_build_daily_agg_revenue_by_order_yesterday(2366,2258,'ER');
SELECT order_id,order_name,COUNT(order_id) as count FROM adm.daily_agg_revenue_by_order WHERE eastern_date_sk=2478 GROUP BY order_id,order_name ORDER BY count desc;
SELECT sum(revenue) FROM adm.daily_agg_revenue_by_order WHERE eastern_date_sk=2541;
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_revenue_by_order_yesterday(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;



/*UPDATE in is_active
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET is_active=false
WHERE is_active=true AND a.eastern_date_sk=p_date_sk;*/

/*Del old records */
DELETE FROM adm.daily_agg_revenue_by_order_yesterday
 WHERE eastern_date_sk=p_date_sk;

/* insert records */
INSERT INTO adm.daily_agg_revenue_by_order_yesterday(
            eastern_date_sk, full_date,
            yesterday_rank,tdrank, 
            order_name,order_id,remote_id,start_date, end_date,
            budget,abudget,revenue,cumulative_revenue,impressions,clicks,pacing, 
            mtd_total_revenue, remaining_monthly_budget,next_month_budget, 
            impressions_1d_ago, clicks_1d_ago, revenue_1d_ago, 
            impressions_7d_ago, clicks_7d_ago, revenue_7d_ago, 
            impressions_28d_ago,clicks_28d_ago, revenue_28d_ago, 
            metric,is_active, process_id)


SELECT 
p_date_sk,
v_full_date,
a.rank,
a.tdrank,
a.name_current,
a.order_id,
a.remote_id,
a.start_date,
a.end_date,
b.budget,
b.abudget,
b.revenue_count,
b.cumulative_revenue,
b.impressions_count,
b.clicks_count,
b.pacing,
b.mtd_total_revenue,
b.remaining_monthly_budget,
b.next_month_budget,

b.impressions_count_1,
b.clicks_count_1,
b.revenue_count_1,

b.impressions_count_7,
b.clicks_count_7,
b.revenue_count_7,

b.impressions_count_28,
b.clicks_count_28,
b.revenue_count_28,
a.metric,
false,
p_process_id

FROM
	(
	--get all order in yesterday
	SELECT
	eastern_date_sk,
	full_date,
	rank,
	rank_after_one_day as tdrank,
	order_name as name_current,
	order_id,
	remote_id,
	start_date,
	end_date,
	metric,
	revenue
	FROM adm.daily_agg_revenue_by_order
	WHERE eastern_date_sk=p_date_sk-1
	--AND is_active=false
	ORDER BY revenue desc) a
	--map today value
	LEFT JOIN
	(
	SELECT
	order_id as td_order_id,
	budget,
	abudget,
	pacing,
	mtd_total_revenue,
	remaining_monthly_budget,
	next_month_budget,
	revenue as revenue_count,
	cumulative_revenue,
	clicks as clicks_count,
	impressions as impressions_count,
		
	revenue_1d_ago as revenue_count_1,
	clicks_1d_ago as clicks_count_1,
	impressions_1d_ago as impressions_count_1,

	revenue_7d_ago as revenue_count_7,
	clicks_7d_ago as clicks_count_7,
	impressions_7d_ago as impressions_count_7,

	revenue_28d_ago as revenue_count_28,
	clicks_28d_ago as clicks_count_28,
	impressions_28d_ago as impressions_count_28
	FROM adm.daily_agg_revenue_by_order
	WHERE eastern_date_sk=p_date_sk
	--AND is_active=false
	) b ON b.td_order_id=a.order_id;



/* update process concurrent trans table w/ status 
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_revenue_by_order_yesterday';*/

/* update 1 day ago */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET impressions_1d_ago = COALESCE( (
	SELECT b.impressions
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 1
	  AND b.order_id=a.order_id
    ), 0)
   ,clicks_1d_ago = COALESCE( (
	SELECT b.clicks
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 1
	  AND b.order_id=a.order_id
    ), 0)
   ,revenue_1d_ago = COALESCE( (
	SELECT b.revenue
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 1
	  AND b.order_id=a.order_id
    ), 0)
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk=p_date_sk
  AND a.is_active = false
  AND a.impressions_1d_ago is null;

/* update 7 day ago */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET impressions_7d_ago = COALESCE( (
	SELECT b.impressions
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 7
	  AND b.order_id=a.order_id
    ), 0)
   ,clicks_7d_ago = COALESCE( (
	SELECT b.clicks
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 7
	  AND b.order_id=a.order_id
    ), 0)
   ,revenue_7d_ago = COALESCE( (
	SELECT b.revenue
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 7
	  AND b.order_id=a.order_id
    ), 0)
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk=p_date_sk
  AND a.is_active = false
  AND a.impressions_7d_ago is null;

/* update 28 day ago */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET impressions_28d_ago = COALESCE( (
	SELECT b.impressions
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 28
	  AND b.order_id=a.order_id
    ), 0)
   ,clicks_28d_ago = COALESCE( (
	SELECT b.clicks
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 28
	  AND b.order_id=a.order_id
    ), 0)
   ,revenue_28d_ago = COALESCE( (
	SELECT b.revenue
	FROM adm.daily_agg_revenue_by_order b
	WHERE b.eastern_date_sk = a.eastern_date_sk - 28
	AND b.order_id=a.order_id
    ), 0)
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk=p_date_sk
  AND a.is_active = false
  AND a.impressions_28d_ago is null;

/*Up date total_revenue up to date*/
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET cumulative_revenue= COALESCE( (SELECT sum(b.revenue)
					FROM adm.daily_agg_revenue_by_order b
					WHERE b.eastern_date_sk < a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					)
,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.cumulative_revenue is null;



/*update booked budget*/
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET budget=b.budget
FROM
(
SELECT sum(budget) as budget, order_id
FROM refer.adm_flight_dim
WHERE dt_expire = '9999-12-31' AND created_at::date<=v_full_date
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.budget is null;

/* update revenue,imps */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET revenue = 0
   ,impressions = 0
   ,clicks = 0
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk=p_date_sk
  AND a.is_active = false
  AND a.revenue is null
  AND impressions is null
  AND clicks is null;


--update pracing
/*-- */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET pacing=b.pacing
FROM
(
SELECT order_id,case
	when full_date<=end_date then
	(((cumulative_revenue+revenue)/(1+full_date-start_date::date))/(budget/(1+end_date::date-start_date::date)))*100
	else 0
	end pacing
	FROM adm.daily_agg_revenue_by_order_yesterday
	WHERE eastern_date_sk=p_date_sk AND metric='cpm'
)b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.pacing is null
AND a.metric='cpm';


/*update mtd_total_revenue*/
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET mtd_total_revenue=COALESCE(
			(SELECT a.cumulative_revenue + a.revenue - min(b.cumulative_revenue)
			FROM adm.daily_agg_revenue_by_order b
			WHERE b.order_id = a.order_id			
			AND b.calendar_year_month = v_calendar_year_month
			AND b.metric = a.metric
			GROUP BY order_id,calendar_year_month,metric)
			,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.mtd_total_revenue is null;

/*update remaining_monthly_budget,next_month_budget,abudget*/
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET remaining_monthly_budget=COALESCE(
			(SELECT b.remaining_monthly_budget
			FROM adm.daily_agg_revenue_by_order b
			WHERE b.order_id = a.order_id			
			AND b.calendar_year_month = v_calendar_year_month
			AND b.eastern_date_sk<=a.eastern_date_sk ORDER BY b.eastern_date_sk desc LIMIT 1)
			,0)
	,next_month_budget=COALESCE(
			(SELECT b.next_month_budget
			FROM adm.daily_agg_revenue_by_order b
			WHERE b.order_id = a.order_id			
			AND b.calendar_year_month = v_calendar_year_month
			AND b.eastern_date_sk<=a.eastern_date_sk ORDER BY b.eastern_date_sk desc LIMIT 1)
			,0)
	,abudget=COALESCE(
			(SELECT b.abudget
			FROM adm.daily_agg_revenue_by_order b
			WHERE b.order_id = a.order_id
			AND b.eastern_date_sk<=a.eastern_date_sk ORDER BY b.eastern_date_sk desc LIMIT 1)
			,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.remaining_monthly_budget is null;

/*2012-03-02 Update order end_date by max flight end_date_current when order end_date is null */
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET end_date=b.end_date
FROM 
(
SELECT order_id,max(end_date_current) as end_date
FROM refer.adm_flight_dim 
WHERE dt_expire='9999-12-31' AND created_at::date<=v_full_date
GROUP BY order_id
)b
WHERE a.order_id=b.order_id
AND a.end_date is null
AND a.eastern_date_sk=p_date_sk
AND a.process_id = p_process_id;

/*UPDATE is_active*/
UPDATE adm.daily_agg_revenue_by_order_yesterday a
SET is_active=true
WHERE a.eastern_date_sk=p_date_sk;


RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_revenue_by_order_yesterday_only(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;


RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_revenue_by_order_yesterday(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_revenue_by_order_yesterday',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_revenue_by_order_yesterday(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_revenue_by_publisher_handle(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_revenue_by_publisher_handle(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_revenue_by_publisher_handle
||
|| Author: Chinh Nguyen
||
|| Date: 2011-08-04
||
|| Description: 
||     daily double click orders' revenue
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/
/* 
SELECT date_sk FROM refer.date_dim WHERE full_date='2011-12-21';
SELECT staging.fn_build_daily_agg_revenue_by_publisher_handle(2546,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_publisher_handle(2432,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_publisher_handle(2432,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_publisher_handle(2432,2258,'ER');
SELECT staging.fn_build_daily_agg_revenue_by_publisher_handle(2432,2258,'ER');
*/
DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_flight_count SMALLINT;
 v_count INT;
BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_revenue_by_publisher_handle(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adm.daily_agg_order_atc WHERE eastern_date_sk=p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' adm.daily_agg_order_atc NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;




/*UPDATE in is_active
UPDATE adm.daily_agg_revenue_by_publisher a
SET is_active=false
WHERE is_active=true AND a.eastern_date_sk=p_date_sk;*/

/*Del old records */
DELETE FROM adm.daily_agg_revenue_by_publisher
 WHERE eastern_date_sk=p_date_sk;

/* insert records */
INSERT INTO adm.daily_agg_revenue_by_publisher(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            date_since_1970, publisher_id,publisher_name,impressions,clicks,revenue,
            process_id,is_active)

SELECT
eastern_date_sk,
full_date,
calendar_year_month,
month_since_2005,
day_since_1970,
publisher_id,
publisher_name,
sum(impressions),
sum(clicks),
sum(revenue),
p_process_id,
--123,
false
FROM adm.daily_agg_order_atc
WHERE is_active=true 
AND eastern_date_sk=p_date_sk
GROUP BY
eastern_date_sk,
full_date,
calendar_year_month,
month_since_2005,
day_since_1970,
publisher_id,
publisher_name;

/* update 1 day ago 
UPDATE adm.daily_agg_revenue_by_publisher a
SET impressions_1d_ago = COALESCE(b.impressions,0)
,clicks_1d_ago = COALESCE(b.clicks,0)
,revenue_1d_ago = COALESCE(b.revenue,0)
FROM adm.daily_agg_revenue_by_publisher b
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND b.eastern_date_sk = a.eastern_date_sk - 1
AND b.order_id=a.order_id;*/

/* update 7 day ago 
UPDATE adm.daily_agg_revenue_by_publisher a
SET impressions_7d_ago = COALESCE(b.impressions,0)
,clicks_7d_ago = COALESCE(b.clicks,0)
,revenue_7d_ago = COALESCE(b.revenue,0)
FROM adm.daily_agg_revenue_by_publisher b
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND b.eastern_date_sk = a.eastern_date_sk - 7
AND b.order_id=a.order_id
;*/

/* update 28 day ago 
UPDATE adm.daily_agg_revenue_by_publisher a
SET impressions_28d_ago = COALESCE(b.impressions,0)
,clicks_28d_ago = COALESCE(b.clicks,0)
,revenue_28d_ago = COALESCE(b.revenue,0)
FROM adm.daily_agg_revenue_by_publisher b
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND b.eastern_date_sk = a.eastern_date_sk - 28
AND b.order_id=a.order_id;*/

/*Up date total_revenue up to date
UPDATE adm.daily_agg_revenue_by_publisher a
SET cumulative_revenue= COALESCE( (SELECT (b.cumulative_revenue+b.revenue)
					FROM adm.daily_agg_revenue_by_publisher b
					WHERE b.eastern_date_sk < a.eastern_date_sk					
					AND b.is_active=true
					AND b.order_id=a.order_id
					ORDER BY eastern_date_sk desc
					LIMIT 1)
,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/

/*update flight_count
UPDATE adm.daily_agg_revenue_by_publisher a
SET flight_count = b.flight_count
   ,flight_start_date = b.max_start_date
   ,flight_end_date = b.min_end_date
FROM (
SELECT order_id, count(*) as flight_count, max(start_date_current) as max_start_date, min(end_date_current) as min_end_date
FROM refer.adm_flight_dim
WHERE v_full_date BETWEEN start_date_current AND end_date_current AND dt_expire='9999-12-31'
GROUP BY order_id
) b
WHERE a.order_id = b.order_id
  AND a.process_id = p_process_id
  AND a.is_active = false
  AND a.eastern_date_sk=p_date_sk
;*/

/*update booked budget
UPDATE adm.daily_agg_revenue_by_publisher a
SET budget=b.budget
FROM
(
SELECT sum(budget) as budget, order_id
FROM refer.adm_flight_dim
WHERE dt_expire = '9999-12-31' AND created_at<=v_full_date
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/


/*update available budget
UPDATE adm.daily_agg_revenue_by_publisher a
SET abudget=b.f_a_budget
FROM
(
SELECT sum(f_a_budget) as f_a_budget, order_id
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk=p_date_sk
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
--AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/



--update pracing
/*
UPDATE adm.daily_agg_revenue_by_publisher a
SET pacing=COALESCE((((a.cumulative_revenue+a.revenue)/(1+a.full_date-a.start_date::date))/(a.budget/(1+a.end_date::date-a.start_date::date)))*100,0)
WHERE a.full_date-a.start_date :: date >= 0
AND a.budget/(1+a.end_date::date-a.start_date::date)>0
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false
AND a.metric='cpm';*/

/*update mtd_total_revenue
UPDATE adm.daily_agg_revenue_by_publisher a
SET mtd_total_revenue=COALESCE(
			(SELECT a.cumulative_revenue + a.revenue - min(b.cumulative_revenue)
			FROM adm.daily_agg_revenue_by_publisher b
			WHERE b.order_id = a.order_id			
			AND b.calendar_year_month = a.calendar_year_month
			AND b.metric = a.metric
			GROUP BY order_id,calendar_year_month,metric)
			,0)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/


/*Update num_days_of_this_month
UPDATE adm.daily_agg_revenue_by_publisher a
SET full_last_date_of_this_month=COALESCE((SELECT MAX(full_date)
					FROM refer.date_dim b
					WHERE b.calendar_year_month=a.calendar_year_month
					),a.full_date),
	month_since_2005_of_end_month=COALESCE((SELECT month_since_2005
					FROM refer.date_dim b
					WHERE b.full_date=a.end_date::date
					),a.month_since_2005)
WHERE a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/

/*Update Remaining Monthly Budget
UPDATE adm.daily_agg_revenue_by_publisher a
SET remaining_monthly_budget=b.f_rm_budget
FROM
(
SELECT sum(f_rm_budget) as f_rm_budget, order_id
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk=p_date_sk
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
--AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/


/*Update Next Monthly Budget
UPDATE adm.daily_agg_revenue_by_publisher a
SET next_month_budget=b.f_nm_budget
FROM
(
SELECT sum(f_nm_budget) as f_nm_budget, order_id
FROM adm.daily_agg_order_flight
WHERE is_active=true AND eastern_date_sk=p_date_sk
GROUP BY order_id
) b
WHERE a.order_id=b.order_id
--AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/

/*Update yesterday ranting
UPDATE adm.daily_agg_revenue_by_publisher a
SET yesterday_rank=COALESCE(b.rank,0)
FROM adm.daily_agg_revenue_by_publisher b
WHERE b.eastern_date_sk=a.eastern_date_sk-1
AND b.order_id=a.order_id
AND a.process_id = p_process_id
AND a.eastern_date_sk=p_date_sk
AND a.is_active = false;*/

/*Update rank_after_one_day
UPDATE adm.daily_agg_revenue_by_publisher a
SET rank_after_one_day=COALESCE(b.rank,0)
FROM adm.daily_agg_revenue_by_publisher b
WHERE b.eastern_date_sk=p_date_sk
AND b.order_id=a.order_id
AND a.eastern_date_sk=p_date_sk-1
AND a.is_active = true;*/

/* update process concurrent trans table w/ status 
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_revenue_by_publisher';*/

/*UPDATE is_active*/
UPDATE adm.daily_agg_revenue_by_publisher a
SET is_active=true
WHERE is_active=false AND a.eastern_date_sk=p_date_sk;

/* RUn staging.fn_build_daily_agg_order_flight(integer, integer, character varying)
SELECT staging.fn_build_daily_agg_order_flight(p_date_sk, p_process_id, p_process_status) INTO v_process_status;
SELECT staging.fn_build_daily_agg_publisher_website_partner(p_date_sk, p_process_id, p_process_status) INTO v_process_status;
SELECT staging.fn_build_daily_agg_order_atc(p_date_sk, p_process_id, p_process_status)INTO v_process_status;*/
RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_revenue_by_publisher_handle(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_revenue_by_publisher_handle(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_revenue_by_publisher_only',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_revenue_by_publisher_handle(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_site_campaign_day(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_site_campaign_day(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_site_campaign_day
||
|| Author: Thang Nguyen
||
|| Date: 2011-06-13
||
|| Description: 
||     daily agg site order report  loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_site_campaign_day(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO dbclk.daily_agg_site_campaign_day(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            site_id, site_name, campaign_id, campaign_name, impression_count, 
            click_count, revenue_total, delta_prior_day_impressions, delta_prior_day_clicks, 
            delta_prior_day_revenue, process_id)
SELECT a.eastern_date_sk
 ,v_full_date
 ,v_calendar_year_month
 ,v_month_since_2005
 ,b.dc_site_id
 ,b.dart_site_name_current
 ,c.dc_order_id
 ,c.order_name_current
 ,SUM(a.impressions_delivered) as impression_count
 ,SUM(a.clicks_recorded) as click_count
 ,0
 ,'N/A'
 ,'N/A'
 ,'N/A'
 ,p_process_id
FROM dbclk.site_campaign_fact a
 INNER JOIN refer.dc_site_dim b ON b.dc_site_sk = a.dc_site_sk
 INNER JOIN refer.dc_order_dim c ON c.dc_order_sk = a.dc_order_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
 ,b.dc_site_id
 ,b.dart_site_name_current
 ,c.dc_order_id
 ,c.order_name_current;

/* update delta_prior_day_impressions */
UPDATE dbclk.daily_agg_site_campaign_day a
SET delta_prior_day_impressions = COALESCE ((
        SELECT  (((a.impression_count * 1.0 - COALESCE(SUM(b.impression_count),0)) / a.impression_count)*100)::text
        FROM   dbclk.daily_agg_site_campaign_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.site_id=a.site_id
          AND  b.campaign_id=a.campaign_id
          AND  b.is_active = true
        GROUP BY b.site_id, b.campaign_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.impression_count > 0;

/* update delta_prior_day_clicks */
UPDATE dbclk.daily_agg_site_campaign_day a
SET delta_prior_day_clicks = COALESCE ((
        SELECT  (((a.click_count * 1.0 - COALESCE(SUM(b.click_count),0)) / a.click_count)*100)::text
        FROM   dbclk.daily_agg_site_campaign_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.site_id=a.site_id
          AND  b.campaign_id=a.campaign_id
          AND  b.is_active = true
        GROUP BY b.site_id, b.campaign_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.click_count > 0;

UPDATE dbclk.daily_agg_site_campaign_day aa
SET revenue_total = COALESCE ((
        SELECT  sum(bb.revenue_total)
        FROM   (
		SELECT a.eastern_date_sk,a.placement_id,a.order_id,b.remote_id,SUM(a.revenue_total) as revenue_total
		FROM (
			SELECT a.eastern_date_sk,a.placement_id,b.order_id,sum(a.revenue_total) as revenue_total
			FROM (
				SELECT a.eastern_date_sk,a.placement_id,b.flight_id,sum(a.revenue) as revenue_total
				FROM   adm.daily_agg_adm_data_feed a
				INNER JOIN refer.adm_creative_dim b ON b.creative_id = a.creative_id
				WHERE a.is_active = true AND b.dt_expire = '9999-12-31' AND a.eastern_date_sk = aa.eastern_date_sk
				GROUP BY a.eastern_date_sk,a.placement_id,b.flight_id
			     ) a
			INNER JOIN refer.adm_flight_dim b ON a.flight_id=b.flight_id
			WHERE b.dt_expire = '9999-12-31'
			GROUP BY a.eastern_date_sk,a.placement_id,b.order_id			
		    )a
		INNER JOIN refer.adm_order_dim b ON a.order_id=b.order_id
		WHERE b.dt_expire = '9999-12-31'
		GROUP BY a.eastern_date_sk,a.placement_id,a.order_id,b.remote_id
	       ) bb
        WHERE  bb.remote_id=aa.campaign_id
          AND  bb.placement_id=aa.site_id
        GROUP BY bb.remote_id,bb.placement_id), 0)
WHERE aa.process_id = p_process_id;

UPDATE dbclk.daily_agg_site_campaign_day a
SET delta_prior_day_revenue = COALESCE ((
        SELECT  (((a.revenue_total * 1.0 - COALESCE(SUM(b.revenue_total),0)) / a.revenue_total)*100)::text
        FROM   dbclk.daily_agg_site_campaign_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.site_id=a.site_id
          AND  b.campaign_id=a.campaign_id
        GROUP BY b.site_id, b.campaign_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.revenue_total > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_site_campaign_day';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_site_campaign_day(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_site_campaign_day(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_site_campaign_day',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_site_campaign_day(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_site_day(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_site_day(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_site_day
||
|| Author: Thang Nguyen
||
|| Date: 2011-06-13
||
|| Description: 
||     daily agg site order report  loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_site_day(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO dbclk.daily_agg_site_day(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            site_id, site_name, impression_count, click_count, revenue_total, 
            delta_prior_day_impressions, delta_prior_day_clicks, delta_prior_day_revenue, 
            process_id)
SELECT a.eastern_date_sk
 ,v_full_date
 ,v_calendar_year_month
 ,v_month_since_2005
 ,b.dc_site_id
 ,b.dart_site_name_current
 ,SUM(a.impressions_delivered) as impression_count
 ,SUM(a.clicks_recorded) as click_count
 ,0
 ,'N/A'
 ,'N/A'
 ,'N/A'
 ,p_process_id
FROM dbclk.site_campaign_fact a
 INNER JOIN refer.dc_site_dim b ON b.dc_site_sk = a.dc_site_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
 ,b.dc_site_id
 ,b.dart_site_name_current;

/* update delta_prior_day_impressions */
UPDATE dbclk.daily_agg_site_day a
SET delta_prior_day_impressions = COALESCE ((
        SELECT  (((a.impression_count * 1.0 - COALESCE(SUM(b.impression_count),0)) / a.impression_count)*100)::text
        FROM   dbclk.daily_agg_site_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.site_id=a.site_id
          AND  b.is_active = true
        GROUP BY b.site_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.impression_count > 0;

/* update delta_prior_day_clicks */
UPDATE dbclk.daily_agg_site_day a
SET delta_prior_day_clicks = COALESCE ((
        SELECT  (((a.click_count * 1.0 - COALESCE(SUM(b.click_count),0)) / a.click_count)*100)::text
        FROM   dbclk.daily_agg_site_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.site_id=a.site_id
          AND  b.is_active = true
        GROUP BY b.site_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.click_count > 0;

/* update revenue_total */
UPDATE dbclk.daily_agg_site_day a
SET revenue_total = COALESCE ((
        SELECT  sum(revenue)
        FROM   adm.daily_agg_adm_data_feed b
        WHERE  b.eastern_date_sk = a.eastern_date_sk
          AND  b.placement_id=a.site_id
          AND  b.is_active=true
        GROUP BY b.placement_id
               , b.eastern_date_sk), 0)
WHERE a.process_id = p_process_id;

/* update delta_prior_day_revenue */
UPDATE dbclk.daily_agg_site_day a
SET delta_prior_day_revenue = COALESCE ((
        SELECT  (((a.revenue_total * 1.0 - COALESCE(SUM(b.revenue_total),0)) / a.revenue_total)*100)::text
        FROM   dbclk.daily_agg_site_day b
        WHERE  b.eastern_date_sk = a.eastern_date_sk - 1
          AND  b.site_id=a.site_id
          AND  b.is_active = true
        GROUP BY b.site_id), 'N/A')
WHERE a.process_id = p_process_id
  AND a.revenue_total > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_site_day';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_site_day(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_site_day(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_site_day',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_site_day(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_agg_site_order(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_agg_site_order(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_agg_site_order
||
|| Author: Thang Nguyen
||
|| Date: 2011-06-13
||
|| Description: 
||     daily agg site order report  loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_agg_site_order(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO dbclk.daily_agg_site_order(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            publisher_id, publisher_name, campaign_id, campaign_name, ad_id, 
            creative_id, impression_count, click_count, revenue_total,  
            process_id)
SELECT a.eastern_date_sk
 ,b.full_date
 ,b.calendar_year_month
 ,b.month_since_2005
 ,c.publisher_id
 ,c.company_name_current
 ,d.dc_order_id
 ,d.order_name_current
 ,a.ad_id
 ,e.creative_id
 ,SUM(a.impressions_delivered) as impression_count
 ,SUM(a.clicks_recorded) as click_count
 ,0
 ,p_process_id
FROM dbclk.site_campaign_fact a
INNER JOIN refer.date_dim b ON b.date_sk = a.eastern_date_sk
INNER JOIN refer.adm_publisher_dim c ON c.publisher_sk = a.publisher_sk
INNER JOIN refer.dc_order_dim d ON d.dc_order_sk = a.dc_order_sk
INNER JOIN refer.adm_creative_dim e ON e.creative_sk = a.creative_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
 ,b.full_date
 ,b.calendar_year_month
 ,b.month_since_2005
 ,c.publisher_id
 ,c.company_name_current
 ,d.dc_order_id
 ,d.order_name_current
 ,a.ad_id
 ,e.creative_id;


/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_agg_site_order';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_agg_site_order(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_agg_site_order(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_agg_site_order',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_agg_site_order(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_cg_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_cg_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_cg_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily city grid performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_cg_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_cg_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            partner_keyword, portal_id, portal_name, portal_keyword, placement, 
            requests, paid_impressions, clicks, total_estimated_net_earnings, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, estimated_net_earnings, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
	COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword,
	a.placement, 
	0, 0, 0, sum(a.estimated_net_earnings), 
	COALESCE(sum(d.fullfilled_code_count),0), 
	COALESCE(sum(d.fullfilled_code_y),0), 
	COALESCE(sum(d.fullfilled_code_n),0), 
	COALESCE(sum(d.fullfilled_code_e),0), 
	COALESCE(sum(d.fullfilled_code_t),0), 
	0, 0, 0, p_process_id
FROM adnetwork.fact_cg_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (20,29) AND aa.partner_id > 0 AND aa.eastern_date_sk = p_date_sk 
    GROUP BY aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON a.eastern_date_sk = d.eastern_date_sk AND d.partner_id = c.partner_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY
a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.placement;

/* update total yes adresponses */
UPDATE adnetwork.daily_cg_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.daily_cg_performance 
    WHERE process_id = p_process_id
    GROUP BY eastern_date_sk, partner_id) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.daily_cg_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,estimated_net_earnings = (fullfilled_code_y::float/total_fullfilled_code_y)*total_estimated_net_earnings
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.daily_cg_performance a
SET estimated_net_earnings = total_estimated_net_earnings
WHERE a.process_id = p_process_id AND a.portal_id < 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_cg_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_cg_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_cg_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_cg_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_cg_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_db_sellthrough(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_db_sellthrough(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_db_sellthrough
||
|| Author: Tho HOANG
||
|| Date: 2011-08-27
||
|| Description: 
||     daily location statistic by metro loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_db_sellthrough(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_db_sellthrough(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, dc_site_id, dart_site_name, metro_id, 
            metro_name, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 
a.eastern_date_sk,
v_full_date,
v_calendar_year_month,
v_month_since_2005,
b.ad_network_id,
b.ad_network_name_current,
c.dc_site_id,
c.dart_site_name_current,
a.metro_id,
COALESCE(d.name,'N/A') as metro_name,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
p_process_id
FROM adstraffic.ad_response_fact_stats_db_sellthrough a
INNER JOIN refer.ad_network_dim b ON a.ad_network_sk = b.ad_network_sk
INNER JOIN refer.dc_site_dim c ON a.dc_site_sk = c.dc_site_sk
INNER JOIN verveloc.metro d ON a.metro_id = d.id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk,
b.ad_network_id,
b.ad_network_name_current,
c.dc_site_id,
c.dart_site_name_current,
a.metro_id,
d.name
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_db_sellthrough';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_db_sellthrough(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_db_sellthrough(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_db_sellthrough',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_db_sellthrough(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_db_sellthrough_by_metro(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_db_sellthrough_by_metro(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_db_sellthrough_by_metro
||
|| Author: Tho HOANG
||
|| Date: 2011-08-27
||
|| Description: 
||     daily doubleclick sell through by metro loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_day_of_week VARCHAR(32);
 v_cmd TEXT='';
 v_para_13                   INTEGER;
 v_para_15                   INTEGER;
 v_count		     INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_db_sellthrough_by_metro(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';
/*
SELECT COALESCE(a.last_key,0) INTO v_para_13
FROM control.process_checkpoint a
INNER JOIN control.process b ON b.process_status = 'SU' AND b.process_config_id = 13 AND a.last_key = b.max_partition_key
WHERE a.process_config_id = 13;

IF NOT FOUND THEN
	RAISE NOTICE 'PARA 13 DID NOT FOUND';
	RETURN p_process_status;
END IF;

SELECT COALESCE(last_key,0) INTO v_para_15 FROM control.process_checkpoint WHERE process_config_id = 15;

IF (p_date_sk > v_para_13 OR p_date_sk > v_para_15 OR v_para_13 < v_para_15) THEN
	RAISE NOTICE 'INVALID DATE: p_date_sk=% v_para_13=% v_para_15=%',p_date_sk,v_para_13,v_para_15;
	RETURN p_process_status;
END IF;
*/
SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_db_sellthrough WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'SELLTHROUGH HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;
RAISE NOTICE '% START',timeofday();

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_of_week INTO v_calendar_year_month,v_month_since_2005,v_full_date, v_day_of_week
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_db_sellthrough_by_metro(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, metro_id, 
            metro_name, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 
a.eastern_date_sk,
v_full_date,
v_day_of_week,
v_calendar_year_month,
v_month_since_2005,
b.ad_network_id,
b.ad_network_name_current,
a.metro_id,
COALESCE(d.name,'N/A') as metro_name,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
p_process_id
FROM adstraffic.ad_response_fact_stats_db_sellthrough a
INNER JOIN refer.ad_network_dim b ON a.ad_network_sk = b.ad_network_sk
INNER JOIN verveloc.metro d ON a.metro_id = d.id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk,
b.ad_network_id,
b.ad_network_name_current,
a.metro_id,
d.name
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_db_sellthrough_by_metro';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_db_sellthrough_by_metro(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_db_sellthrough_by_metro(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_db_sellthrough_by_metro',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_db_sellthrough_by_metro(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_db_sellthrough_by_site(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_db_sellthrough_by_site(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_db_sellthrough_by_site
||
|| Author: Tho HOANG
||
|| Date: 2011-08-27
||
|| Description: 
||     daily location statistic by metro loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status            control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status   control.process.process_status%TYPE;
 v_calendar_year_month       VARCHAR(32);
 v_full_date                 DATE;
 v_start_date                DATE;
 v_month_since_2005          SMALLINT;
 v_day_of_week               VARCHAR(32);
 v_cmd                       TEXT='';
 v_para_13                   INTEGER;
 v_para_15                   INTEGER;
 v_count		     INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_db_sellthrough_by_site(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';
/*
SELECT COALESCE(a.last_key,0) INTO v_para_13
FROM control.process_checkpoint a
INNER JOIN control.process b ON b.process_status = 'SU' AND b.process_config_id = 13 AND a.last_key = b.max_partition_key
WHERE a.process_config_id = 13;

IF NOT FOUND THEN
	RAISE NOTICE 'PARA 13 DID NOT FOUND';
	RETURN p_process_status;
END IF;

SELECT COALESCE(last_key,0) INTO v_para_15 FROM control.process_checkpoint WHERE process_config_id = 15;

IF (p_date_sk > v_para_13 OR p_date_sk > v_para_15 OR v_para_13 < v_para_15) THEN
	RAISE NOTICE 'INVALID DATE: p_date_sk=% v_para_13=% v_para_15=%',p_date_sk,v_para_13,v_para_15;
	RETURN p_process_status;
END IF;
*/
SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_db_sellthrough WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'SELLTHROUGH HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

RAISE NOTICE '% START',timeofday();

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date,day_of_week INTO v_calendar_year_month,v_month_since_2005,v_full_date,v_day_of_week
FROM refer.date_dim
WHERE date_sk=p_date_sk;

SELECT full_date INTO v_start_date
FROM refer.date_dim
WHERE date_sk=p_date_sk - 29;

/* insert records */
INSERT INTO adstraffic.daily_db_sellthrough_by_site(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, dc_site_id, dart_site_name,  
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 
a.eastern_date_sk,
v_full_date,
v_day_of_week,
v_calendar_year_month,
v_month_since_2005,
b.ad_network_id,
b.ad_network_name_current,
c.dc_site_id,
c.dart_site_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
p_process_id
FROM adstraffic.ad_response_fact_stats_db_sellthrough a
INNER JOIN refer.ad_network_dim b ON a.ad_network_sk = b.ad_network_sk
INNER JOIN refer.dc_site_dim c ON a.dc_site_sk = c.dc_site_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk,
b.ad_network_id,
b.ad_network_name_current,
c.dc_site_id,
c.dart_site_name_current
;

RAISE NOTICE '% INSERT',timeofday();

/* update dbclk impressions delivered */
UPDATE adstraffic.daily_db_sellthrough_by_site a
SET impressions_delivered =  COALESCE ((
        SELECT  sum(b.impressions_delivered)
        FROM   dbclk.site_order_forecast_fact b
        INNER JOIN refer.dc_site_dim c ON b.dc_site_sk = c.dc_site_sk
        WHERE  b.eastern_date_sk = a.eastern_date_sk
          AND  c.dc_site_id = a.dc_site_id
        GROUP BY b.eastern_date_sk, c.dc_site_id), 0)
WHERE a.eastern_date_sk = p_date_sk;

RAISE NOTICE '% UPDATE',timeofday();

/* truncate temp table */
truncate dbclk.daily_order_count_site;

INSERT INTO dbclk.daily_order_count_site (order_id, site_count)
SELECT order_id, count(distinct site_id) as site_count 
FROM dbclk.site_order_forecast_fact
WHERE v_full_date BETWEEN order_start_date AND order_end_date
GROUP BY order_id;

RAISE NOTICE '% TEMP',timeofday();

/* update dbclk impression booked */
UPDATE adstraffic.daily_db_sellthrough_by_site a
SET impressions_booked =  COALESCE ((
	SELECT sum(d.impressions_booked)::integer as impressions_booked
	FROM (
		SELECT b.order_id
		     , CASE b.ad_type
			 WHEN 'STANDARD' THEN (b.order_cpm_booked::float / (b.order_end_date - b.order_start_date + 1) / c.site_count)
			 WHEN 'SPONSORSHIP' THEN (b.ad_weight::float / 100) * a.impressions_delivered
		       ELSE 0 END AS impressions_booked
		FROM 
		    (SELECT DISTINCT order_id, order_start_date, order_end_date, order_cpm_booked, ad_type, ad_weight
		     FROM dbclk.site_order_forecast_fact aa
		     INNER JOIN refer.dc_site_dim bb ON aa.dc_site_sk = bb.dc_site_sk
		     WHERE bb.dc_site_id = a.dc_site_id
		       AND aa.order_status = 'Approved'
		       AND v_full_date BETWEEN aa.order_start_date AND aa.order_end_date
		     ) b
		    ,dbclk.daily_order_count_site c
		WHERE b.order_id = c.order_id
	   ) d 
	), 0)
WHERE a.eastern_date_sk = p_date_sk
;

RAISE NOTICE '% DONE',timeofday();

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_db_sellthrough_by_site';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_db_sellthrough_by_site(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_db_sellthrough_by_site(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_db_sellthrough_by_site',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_db_sellthrough_by_site(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_distance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_distance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: staging.fn_build_daily_event_distance
||
|| Author: Tho HOANG
||
|| Date: 2012-02-17
||
|| Description: 
||     daily event tracker by distance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_distance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert to fact table */
INSERT INTO evttracker.event_tracker_fact_distance(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
            event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
            adm_advertiser_sk, url_f, url_c, eastern_datetime, url_r, url_x, 
            distance_id, event_count)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
            event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
            adm_advertiser_sk, url_f, url_c, eastern_datetime, url_r, url_x::numeric, 
            case
                when url_x::numeric >= 0 AND url_x::numeric < 2 then 1
                when url_x::numeric >= 2 AND url_x::numeric < 5 then 2
                when url_x::numeric >= 5 AND url_x::numeric < 10 then 3
                when url_x::numeric >= 10 AND url_x::numeric < 15 then 4
                when url_x::numeric >= 15 AND url_x::numeric < 20 then 5
                when url_x::numeric >= 20 AND url_x::numeric < 30 then 6
                when url_x::numeric >= 30 AND url_x::numeric < 50 then 7
                when url_x::numeric >= 50 then 8
                else 0 
            end as distance_id,
            count(*)
FROM evttracker.event_tracker_fact
WHERE eastern_date_sk = p_date_sk
  AND url_x ~ E'^[0-9]+\.?[0-9]*$' = true
GROUP BY eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
adm_advertiser_sk, url_f, url_c, eastern_datetime, url_r, url_x;

/*insert daily_event_distance */
INSERT INTO evttracker.daily_event_by_distance(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, 
            month_since_2005, flight_id, creative_id, distance_id, distance_name, 
            event_name, event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.day_of_week, b.calendar_year_month, 
       b.month_since_2005, a.url_f, a.url_c, a.distance_id,
       case distance_id 
            when 0 then 'N/A' 
            when 1 then '<2' 
            when 2 then '2<5' 
            when 3 then '5<10' 
            when 4 then '10<15' 
            when 5 then '15<20' 
            when 6 then '20<30' 
            when 7 then '30<50' 
            when 8 then '>50' 
       end as distance_name,
       c.event_name, sum(event_count), p_process_id
FROM evttracker.event_tracker_fact_distance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
WHERE eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.day_of_week
,b.calendar_year_month
,b.month_since_2005
,a.url_f
,a.url_c
,a.distance_id
,c.event_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_distance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_distance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_distance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_event_distance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_daily_event_distance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_dma(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_dma(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_event_dma
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily event tracker by dma report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_dma(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

SELECT COUNT(*) INTO v_count FROM evttracker.event_tracker_fact_inday where eastern_date_sk = p_date_sk;
IF (v_count = 0) THEN
	RAISE NOTICE 'WORKING ADCEL NO DATA IN SAME DATE - %',p_date_sk;
	PERFORM fn_email_failure_notification('fn_build_daily_event_dma','WORKING ADCEL NO DATA IN SAME DATE','');
	RETURN v_previous_process_status;
END IF;

/* clearn data */
/* event tracker logs */
TRUNCATE evttracker.event_tracker_fact_inday;
/* ad responses logs */
--TRUNCATE evttracker.ad_response_fact_inday;

RAISE NOTICE 'NOTICE: TRUNCATED DATA';

DROP INDEX IF EXISTS evttracker.idx_event_tracker_fact_inday_01;

RAISE NOTICE 'NOTICE: DROPED INDEX';

/* copy event tracker had trxid */
INSERT INTO evttracker.event_tracker_fact_inday(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
            event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
            adm_advertiser_sk, req_ipaddress, remote_logical_user, remote_auth_user, 
            request_url, status_code, bytes_sent, referrer, req_method, req_protocol, 
            req_path, req_arguments, url_f, url_fd, url_c, url_cd, url_e, 
            url_u, url_p, url_bp, url_d, url_fh, url_ch, rs_01, rs_02, rs_03, 
            rs_04, app_server, app_server_id, data_file_id, gen_event_tracker_log_id, 
            eastern_datetime, url_r, url_x)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
       event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
       adm_advertiser_sk, req_ipaddress, remote_logical_user, remote_auth_user, 
       request_url, status_code, bytes_sent, referrer, req_method, req_protocol, 
       req_path, req_arguments, url_f, url_fd, url_c, url_cd, url_e, 
       url_u, url_p, url_bp, url_d, url_fh, url_ch, rs_01, rs_02, rs_03, 
       rs_04, app_server, app_server_id, data_file_id, gen_event_tracker_log_id, 
       eastern_datetime, url_r, url_x
  FROM evttracker.event_tracker_fact
 WHERE eastern_date_sk = p_date_sk AND url_r > 0;

RAISE NOTICE 'NOTICE: COPIED EVENT DATA';

CREATE INDEX idx_event_tracker_fact_inday_01
  ON evttracker.event_tracker_fact_inday
  USING btree
  (app_server_id,url_r)
TABLESPACE evttracker_tablespace;

RAISE NOTICE 'NOTICE: CREATED INDEX';

/* insert to fact table */
INSERT INTO evttracker.event_tracker_adcel_fact(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
            event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
            adm_advertiser_sk, req_ipaddress, url_f, url_fd, url_c, url_cd, 
            url_e, url_u, url_p, url_bp, url_d, url_fh, url_ch, rs_01, rs_02, 
            rs_03, rs_04, app_server_id, eastern_datetime, url_r, url_x, 
            portal_sk, partner_sk, ad_content_category_sk, ad_network_sk, 
            ad_user_agent_sk, fullfilled_code, fullfilled_code_count, fullfilled_code_y, 
            fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, dc_site_sk, 
            location_id, location_quality, partner_module_sk, location_quality_100, 
            country_id, region_id, metro_id, postal_code_id)
SELECT a.eastern_date_sk, a.eastern_time_sk, a.local_date_sk, a.local_time_sk, 
       a.gmt_date_sk, a.gmt_time_sk, a.user_agent_sk, a.referrer_hostname_sk, 
       a.event_sk, a.adm_flight_sk, a.adm_creative_sk, a.adm_order_sk, a.adm_placement_sk, 
       a.adm_advertiser_sk, a.req_ipaddress, a.url_f, a.url_fd, a.url_c, a.url_cd, a.url_e, 
       a.url_u, a.url_p, a.url_bp, a.url_d, a.url_fh, a.url_ch, a.rs_01, a.rs_02, a.rs_03, 
       a.rs_04, a.app_server_id, a.eastern_datetime, a.url_r, a.url_x,
       b.portal_sk, b.partner_sk, b.ad_content_category_sk, b.ad_network_sk, 
       b.user_agent_sk, b.fullfilled_code, b.fullfilled_code_count, b.fullfilled_code_y, 
       b.fullfilled_code_n, b.fullfilled_code_e, b.fullfilled_code_t, b.dc_site_sk, 
       b.location_id, b.location_quality, b.partner_module_sk, b.location_quality_100,
       COALESCE(c.country_id, -1), COALESCE(c.region_id, -1), COALESCE(c.metro_id, -1), COALESCE(c.postal_code_id, -1)
  FROM evttracker.event_tracker_fact_inday a
INNER JOIN evttracker.ad_response_fact_inday b ON b.app_server_id = a.app_server_id AND b.transaction_id = a.url_r
INNER JOIN verveloc.location c ON c.id = b.location_id
;

RAISE NOTICE 'NOTICE: INSERTED FACT';

/*insert daily_event_dma */
INSERT INTO evttracker.daily_event_dma(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, 
            month_since_2005, flight_id, creative_id, dma_id, dma_name, event_name, 
            event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.day_of_week, b.calendar_year_month, 
       b.month_since_2005, a.url_f, a.url_c, a.metro_id, d.name, c.event_name,
       count(*), p_process_id
FROM evttracker.event_tracker_adcel_fact a
INNER JOIN refer.date_dim b ON b.date_sk = a.eastern_date_sk
INNER JOIN refer.event_dim c ON c.event_sk = a.event_sk
INNER JOIN verveloc.metro d ON d.id = a.metro_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.day_of_week
,b.calendar_year_month
,b.month_since_2005
,a.url_f
,a.url_c
,a.metro_id
,d.name
,c.event_name
;

/*insert daily_event_dma_by_hour */
INSERT INTO evttracker.daily_event_dma_by_hour(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, 
            month_since_2005, hour24_of_day, flight_id, creative_id, dma_id, 
            dma_name, event_name, event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.day_of_week, b.calendar_year_month, 
       b.month_since_2005, e.hour24_of_day, a.url_f, a.url_c, a.metro_id, 
       d.name, c.event_name, count(*), p_process_id
FROM evttracker.event_tracker_adcel_fact a
INNER JOIN refer.date_dim b ON b.date_sk = a.eastern_date_sk
INNER JOIN refer.event_dim c ON c.event_sk = a.event_sk
INNER JOIN verveloc.metro d ON d.id = a.metro_id
INNER JOIN refer.time_dim e ON e.time_sk = a.eastern_time_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.day_of_week
,b.calendar_year_month
,b.month_since_2005
,e.hour24_of_day
,a.url_f
,a.url_c
,a.metro_id
,d.name
,c.event_name
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_dma';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_dma(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_dma(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_event_dma',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_event_dma(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_download(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_download(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_event_download
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily event tracker download count report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_download(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* clearn data */
TRUNCATE evttracker.event_tracker_fact_count;

/* copy data */
INSERT INTO evttracker.event_tracker_fact_count(
            eastern_date_sk, eastern_time_sk, user_agent_sk, referrer_hostname_sk, 
            event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
            adm_advertiser_sk, req_ipaddress, url_f, url_fd, url_c, url_cd, 
            url_e, url_bp, url_d, app_server_id, eastern_datetime, event_name, 
            event_count, adclick_count, appinstall_count, user_agent_name)
SELECT eastern_date_sk, eastern_time_sk, a.user_agent_sk, referrer_hostname_sk, 
       a.event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
       adm_advertiser_sk, req_ipaddress, url_f, url_fd, url_c, url_cd, url_e, 
       url_bp, url_d, app_server_id, eastern_datetime, b.event_name_current, 0,
       case b.event_name_current when 'AdClick' then 1 else 0 end,
       case b.event_name_current when 'AppInstall' then 1 else 0 end,
       c.user_agent_name
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.event_dim b ON b.event_name_current in ('AdClick', 'AppInstall') AND a.event_sk = b.event_sk
INNER JOIN refer.user_agent_dim c ON c.user_agent_sk = a.user_agent_sk
WHERE eastern_date_sk = p_date_sk;

/* update download count */
/* AdClick -> AppInstall: within 30 munites, same user agent and ip address*/
UPDATE evttracker.event_tracker_fact_count a
SET event_count = 1
WHERE a.eastern_date_sk = p_date_sk AND a.event_name = 'AdClick'
AND EXISTS (
	SELECT 1 
	FROM evttracker.event_tracker_fact_count b 
	WHERE b.event_name = 'AppInstall' 
	AND b.eastern_datetime BETWEEN a.eastern_datetime AND a.eastern_datetime + 60*30
	AND substring(lower(b.url_d), 0, 50) = substring(lower(a.user_agent_name), 0, 50)
	AND b.req_ipaddress = a.req_ipaddress
	AND b.url_bp = a.url_bp
	AND NOT EXISTS (
		SELECT 1
		FROM evttracker.event_tracker_fact_count c
		WHERE c.event_name = 'AdClick'
		AND c.eastern_datetime BETWEEN a.eastern_datetime + 1 AND b.eastern_datetime
		AND substring(lower(c.user_agent_name), 0, 50) = substring(lower(a.user_agent_name), 0, 50)
		AND c.req_ipaddress = a.req_ipaddress
		AND c.url_bp = a.url_bp
	)
);

/* insert records */
INSERT INTO evttracker.daily_event_download(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, month_since_2005, 
            flight_id, creative_id, bundle_package, adclick_count, download_count, 
            process_id)
SELECT      a.eastern_date_sk, b.full_date, b.day_of_week, b.calendar_year_month, b.month_since_2005,
            a.url_f, a.url_c, COALESCE(a.url_bp, 'N/A'), sum(a.adclick_count), sum(event_count), p_process_id
FROM        evttracker.event_tracker_fact_count a
INNER JOIN  refer.date_dim b ON a.eastern_date_sk = b.date_sk
WHERE a.event_name = 'AdClick'
GROUP BY    a.eastern_date_sk
           ,b.full_date
           ,b.day_of_week
           ,b.calendar_year_month
           ,b.month_since_2005
           ,a.url_f
           ,a.url_c
           ,a.url_bp
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_download';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_download(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_download(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_event_download',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_event_download(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_stats(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_event_stats
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily event tracker stats report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO evttracker.daily_event_stats(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            flight_id, creative_id, event_name, event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
       a.url_f, a.url_c, c.event_name, count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,a.url_f
,a.url_c
,c.event_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_stats(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_event_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_event_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_stats_adnet(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_stats_adnet(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_event_stats_adnet
||
|| Author: CHINH NGUYEN
||
|| Date: 2012-02-29
||
|| Description: 
||     daily event tracker stats report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
SELECT date_sk FROM refer.date_dim WHERE full_date='2012-02-26';
SELECT * FROM staging.fn_build_daily_event_stats_adnet(2613,0,'ER');

SELECT full_date FROM evttracker.daily_event_stats_adnet GROUP BY full_date;

UPDATE evttracker.daily_event_stats_adnet
SET is_active=true
WHERE process_id=0;
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_stats_adnet(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO evttracker.daily_event_stats_adnet(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            flight_id, creative_id, event_name, adnet_id, adnet_name,report_name, event_count, process_id)
SELECT a.eastern_date_sk
	,b.full_date
	,b.calendar_year_month
	,b.month_since_2005
	,a.url_f
	,a.url_c
	,c.event_name
	,d.ad_network_id
	,d.ad_network_name
	,(case when d.ad_network_name is null then a.url_f else d.ad_network_name end) as report_name
	,count(*)
	,p_process_id
FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
LEFT JOIN refer.ad_network_dim d ON d.ad_network_id::text=a.url_adnet AND d.dt_expire='9999-12-31'
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,a.url_f
,a.url_c
,c.event_name
,d.ad_network_id
,d.ad_network_name
,report_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_stats_adnet';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_stats_adnet(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_stats_adnet(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_event_stats_adnet',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_event_stats_adnet(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_stats_by_hour(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_stats_by_hour(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_event_stats_by_hour
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily event tracker stats by hour report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_stats_by_hour(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO evttracker.daily_event_stats_by_hour(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, hour24_of_day,
            flight_id, creative_id, event_name, event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
       d.hour24_of_day, a.url_f, a.url_c, c.event_name, count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
INNER JOIN refer.time_dim d ON a.eastern_time_sk = d.time_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,d.hour24_of_day
,a.url_f
,a.url_c
,c.event_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_stats_by_hour';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_stats_by_hour(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_stats_by_hour(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_event_stats_by_hour',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_event_stats_by_hour(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_event_x_value(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_event_x_value(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_event_x_value
||
|| Author: Tho HOANG
||
|| Date: 2011-12-26
||
|| Description: 
||     daily event tracker by x value report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_event_x_value(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert to daily_event_x_value */
INSERT INTO evttracker.daily_event_x_value(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, 
            month_since_2005, flight_id, creative_id, x_value, event_name, 
            event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.day_of_week, b.calendar_year_month,
       b.month_since_2005, a.url_f, a.url_c, a.url_x, c.event_name, 
       count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
WHERE a.url_x is not null AND a.url_x <> '' AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.day_of_week
,b.calendar_year_month
,b.month_since_2005
,a.url_f
,a.url_c
,a.url_x
,c.event_name;

/* insert to daily_event_x_value_by_hour */
INSERT INTO evttracker.daily_event_x_value_by_hour(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, 
            month_since_2005, hour24_of_day, flight_id, creative_id, x_value, event_name, 
            event_count, process_id)
SELECT a.eastern_date_sk, b.full_date, b.day_of_week, b.calendar_year_month,
       b.month_since_2005, d.hour24_of_day, a.url_f, a.url_c, a.url_x, rtrim(ltrim(c.event_name)), 
       count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
INNER JOIN refer.time_dim d ON a.eastern_time_sk = d.time_sk
WHERE a.url_x is not null AND a.url_x <> '' AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.day_of_week
,b.calendar_year_month
,b.month_since_2005
,d.hour24_of_day
,a.url_f
,a.url_c
,a.url_x
,c.event_name;

/* insert to daily_event_x_value_report */
INSERT INTO evttracker.daily_event_x_value_report(
            eastern_date_sk, full_date, day_of_week, calendar_year_month, 
            month_since_2005, hour24_of_day, flight_id, creative_id, x_value, 
            adimp_count, expandimp_count, adimp2_count, ctaclick_count, 
            process_id)
select eastern_date_sk
     , full_date
     , day_of_week
     , calendar_year_month
     , month_since_2005
     , hour24_of_day
     , flight_id
     , creative_id
     , x_value
     , sum("AdImp") as AdImp_Count
     , sum("ExpandImp") as ExpandImp_Count
     , sum("adimp") as adimp_Count
     , sum("CTAClick") as CTAClick_Count
     , p_process_id
from (
select eastern_date_sk
     , full_date
     , day_of_week
     , calendar_year_month
     , month_since_2005
     , hour24_of_day
     , flight_id
     , creative_id
     , x_value
     , CASE event_name
            WHEN 'AdImp' THEN event_count
            ELSE 0
       END as "AdImp"
     , CASE event_name
            WHEN 'ExpandImp' THEN event_count
            ELSE 0
       END as "ExpandImp"
     , CASE event_name
            WHEN 'adimp' THEN event_count
            ELSE 0
       END as "adimp"
     , CASE event_name
            WHEN 'CTAClick' THEN event_count
            ELSE 0
       END as "CTAClick"
from evttracker.daily_event_x_value_by_hour
where eastern_date_sk = p_date_sk
  and process_id = p_process_id
) a
group by a.eastern_date_sk
,full_date
,day_of_week
,calendar_year_month
,month_since_2005
,hour24_of_day
,flight_id
,creative_id
,x_value ; 

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_event_x_value';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_event_x_value(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_event_x_value(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_event_x_value',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_event_x_value(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_filled_stats(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_filled_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_filled_stats
||
|| Author: Tho HOANG
||
|| Date: 2012-03-01
||
|| Description: 
||     daily adcel filled statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_filled_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_filled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS FILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_filled_stats(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, filled_count, 
            location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
sum(fullfilled_code_count) as filled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_filled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_filled_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_filled_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_filled_stats(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_filled_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_filled_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_filled_stats_by_content_category(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_filled_stats_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_filled_stats_by_content_category
||
|| Author: Tho HOANG
||
|| Date: 2012-03-01
||
|| Description: 
||     daily adcel filled statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_filled_stats_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_filled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS FILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_filled_stats_by_content_category(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, content_category_id, 
            category_name, filled_count, location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current,
sum(fullfilled_code_count) as filled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_filled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.content_category_dim f ON a.ad_content_category_sk=f.content_category_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_filled_stats_by_content_category';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_filled_stats_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_filled_stats_by_content_category(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_filled_stats_by_content_category',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_filled_stats_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_filled_stats_by_device(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_filled_stats_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_filled_stats_by_device
||
|| Author: Tho HOANG
||
|| Date: 2012-03-01
||
|| Description: 
||     daily adcel filled statistics by device loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_filled_stats_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_filled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS FILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_filled_stats_by_device(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, organic, device_type, 
            device_manufacturer, filled_count, location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer,
sum(fullfilled_code_count) as filled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_filled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.user_agent_dim f ON a.user_agent_sk=f.user_agent_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_filled_stats_by_device';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_filled_stats_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_filled_stats_by_device(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_filled_stats_by_device',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_filled_stats_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_filled_stats_by_dma(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_filled_stats_by_dma(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_filled_stats_by_dma
||
|| Author: Tho HOANG
||
|| Date: 2012-03-01
||
|| Description: 
||     daily adcel filled statistics by dma loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_filled_stats_by_dma(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_filled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS FILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_filled_stats_by_dma(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, metro_id, metro_name,
            country_id, country_alpha2, country_name, 
            filled_count, location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
COALESCE(a.metro_id,-1),
COALESCE(f.name,'N/A') as metro_name,
COALESCE(a.country_id,-1),
COALESCE(g.alpha2,'N/A') as country_alpha2,
COALESCE(g.name,'N/A') as country_name,
sum(fullfilled_code_count) as filled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_filled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
LEFT JOIN verveloc.metro f ON f.id = a.metro_id
LEFT JOIN verveloc.country g ON g.id = a.country_id
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
a.metro_id,
f.name,
a.country_id,
g.alpha2,
g.name
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_filled_stats_by_dma';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_filled_stats_by_dma(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_filled_stats_by_dma(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_filled_stats_by_dma',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_filled_stats_by_dma(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_ga_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_ga_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_ga_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-15
||
|| Description: 
||     daily adsense site performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_ga_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_ga_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, site, ad_requests, paid_impressions, 
            clicks, estimated_earnings, fullfilled_code_count, fullfilled_code_y, 
            fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
	d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
	a.site, sum(a.ad_requests), sum((a.ad_requests*a.coverage/100)::integer) as paid_impressions, sum(a.clicks), sum(a.estimated_earnings), 
	sum(COALESCE(e.fullfilled_code_count,-1)), 
	sum(COALESCE(e.fullfilled_code_y,-1)), 
	sum(COALESCE(e.fullfilled_code_n,-1)), 
	sum(COALESCE(e.fullfilled_code_e,-1)), 
	sum(COALESCE(e.fullfilled_code_t,-1)), p_process_id
  FROM adnetwork.fact_ga_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
LEFT JOIN (
    SELECT eastern_date_sk, partner_id,
        sum(fullfilled_code_count) as fullfilled_code_count, 
	sum(fullfilled_code_y) as fullfilled_code_y, 
	sum(fullfilled_code_n) as fullfilled_code_n, 
	sum(fullfilled_code_e) as fullfilled_code_e, 
	sum(fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats
    WHERE is_active = true AND ad_network_id = 5 AND partner_id > 0 AND eastern_date_sk = p_date_sk
    GROUP BY eastern_date_sk, partner_id
) e ON e.partner_id = c.partner_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY
a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_ga_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_ga_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_ga_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_ga_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_ga_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_it_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_it_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_it_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily iTunes partner/site performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_it_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_it_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            partner_keyword, portal_id, portal_name, portal_keyword, app_name, 
            requests, impressions, clicks, revenue, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
	d.portal_id, d.portal_name_current, d.keyword as portal_keyword, 
	a.app_name, sum(a.requests), sum(a.impressions), 0, sum(a.revenue), 0, 0, 0, 0, 0, p_process_id
  FROM adnetwork.fact_it_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk = p_date_sk
GROUP BY
a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.app_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_it_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_it_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_it_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_it_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_it_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_jt_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_jt_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_jt_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-15
||
|| Description: 
||     daily jumptap performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_jt_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_jt_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, site, total_requests, total_paid_impressions, total_clicks, 
            total_net_revenue, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, total_fullfilled_code_y, fullfilled_code_y_rate, 
            requests, paid_impressions, clicks, net_revenue, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
	COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword,
	a.site, Sum(a.requests), sum(a.paid_impressions), sum(a.clicks), sum(a.net_revenue), 
	COALESCE(sum(d.fullfilled_code_count),0), 
	COALESCE(sum(d.fullfilled_code_y),0), 
	COALESCE(sum(d.fullfilled_code_n),0), 
	COALESCE(sum(d.fullfilled_code_e),0), 
	COALESCE(sum(d.fullfilled_code_t),0), 
	0, 0, 0, 0, 0, 0, p_process_id
  FROM adnetwork.fact_jt_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (11) AND aa.partner_id > 0 AND aa.eastern_date_sk = p_date_sk 
    GROUP BY aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON a.eastern_date_sk = d.eastern_date_sk AND d.partner_id = c.partner_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY
a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site;

/* update total yes adresponses */
UPDATE adnetwork.daily_jt_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.daily_jt_performance 
    WHERE process_id = p_process_id
    GROUP BY eastern_date_sk, partner_id) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.daily_jt_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,paid_impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_paid_impressions)::int
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,net_revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_net_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.daily_jt_performance a
SET requests = total_requests
   ,paid_impressions = total_paid_impressions
   ,clicks = total_clicks
   ,net_revenue = total_net_revenue
WHERE a.process_id = p_process_id AND a.portal_id < 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_jt_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_jt_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_jt_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_jt_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_jt_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_location_stats_by_metro(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_location_stats_by_metro(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_location_stats_by_metro
||
|| Author: Tho HOANG
||
|| Date: 2011-08-27
||
|| Description: 
||     daily location statistic by metro loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_location_stats_by_metro(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_location_stats_by_metro(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            country_id, country_alpha2, metro_id, metro_name, postal_code_id, 
            postal_code, trxids_count, fullfilled_code_count, fullfilled_code_y, 
            fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 
a.eastern_date_sk,
v_full_date,
v_calendar_year_month,
v_month_since_2005,
a.country_id,
COALESCE(b.alpha2,'N/A') as country_alpha2,
a.metro_id,
COALESCE(c.name,'N/A') as metro_name,
a.postal_code_id,
COALESCE(d.name,'N/A') as postal_code,
-1 as trxids_count,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
p_process_id
FROM adstraffic.ad_response_fact_stats_res_location a
INNER JOIN verveloc.country b ON a.country_id = b.id
INNER JOIN verveloc.metro c ON a.metro_id = c.id
INNER JOIN verveloc.postal_code d ON a.postal_code_id = d.id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk,
a.country_id,
b.alpha2,
a.metro_id,
c.name,
a.postal_code_id,
d.name
;

UPDATE adstraffic.daily_location_stats_by_metro a
SET trxids_count = COALESCE ((
        SELECT  sum(trxids_count)
        FROM   adstraffic.ad_response_fact_stats_req_location b
        WHERE  b.eastern_date_sk = a.eastern_date_sk
          AND  b.country_id=a.country_id
          AND  b.metro_id=a.metro_id
          AND  b.postal_code_id=a.postal_code_id
        GROUP BY b.eastern_date_sk,b.country_id,b.metro_id,b.postal_code_id), -1)
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_location_stats_by_metro';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_location_stats_by_metro(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_location_stats_by_metro(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_location_stats_by_metro',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_location_stats_by_metro(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_location_stats_by_region(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_location_stats_by_region(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_location_stats_by_region
||
|| Author: Tho HOANG
||
|| Date: 2011-08-27
||
|| Description: 
||     daily location statistic by region loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_location_stats_by_region(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_location_stats_by_region(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            country_id, country_alpha2, region_id, region_name, postal_code_id, 
            postal_code, trxids_count, fullfilled_code_count, fullfilled_code_y, 
            fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 
a.eastern_date_sk,
v_full_date,
v_calendar_year_month,
v_month_since_2005,
a.country_id,
COALESCE(b.alpha2,'N/A') as country_alpha2,
a.region_id,
COALESCE(c.name,'N/A') as region_name,
a.postal_code_id,
COALESCE(d.name,'N/A') as postal_code,
-1 as trxids_count,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
p_process_id
FROM adstraffic.ad_response_fact_stats_res_location a
INNER JOIN verveloc.country b ON a.country_id = b.id
INNER JOIN verveloc.region c ON a.region_id = c.id
INNER JOIN verveloc.postal_code d ON a.postal_code_id = d.id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk,
a.country_id,
b.alpha2,
a.region_id,
c.name,
a.postal_code_id,
d.name
;

UPDATE adstraffic.daily_location_stats_by_region a
SET trxids_count = COALESCE ((
        SELECT  sum(trxids_count)
        FROM   adstraffic.ad_response_fact_stats_req_location b
        WHERE  b.eastern_date_sk = a.eastern_date_sk
          AND  b.country_id=a.country_id
          AND  b.region_id=a.region_id
          AND  b.postal_code_id=a.postal_code_id
        GROUP BY b.eastern_date_sk,b.country_id,b.region_id,b.postal_code_id), -1)
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_location_stats_by_region';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_location_stats_by_region(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_location_stats_by_region(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_location_stats_by_region',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_location_stats_by_region(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_mm_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_mm_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_mm_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily millenial site performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_mm_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_mm_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, id, "name", requests, ads_served, clicks, 
            net_revenue, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
	d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
	a.id, a.name, Sum(a.requests), sum(a.ads_served), sum(a.clicks), sum(a.net_revenue), 
	sum(COALESCE(e.fullfilled_code_count,0)), 
	sum(COALESCE(e.fullfilled_code_y,0)), 
	sum(COALESCE(e.fullfilled_code_n,0)), 
	sum(COALESCE(e.fullfilled_code_e,0)), 
	sum(COALESCE(e.fullfilled_code_t,0)), p_process_id
  FROM adnetwork.fact_mm_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
LEFT JOIN (
    SELECT eastern_date_sk, partner_id, portal_id,
        sum(fullfilled_code_count) as fullfilled_code_count, 
	sum(fullfilled_code_y) as fullfilled_code_y, 
	sum(fullfilled_code_n) as fullfilled_code_n, 
	sum(fullfilled_code_e) as fullfilled_code_e, 
	sum(fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats
    WHERE is_active = true AND ad_network_id = 4 AND partner_id > 0 AND portal_id > 0 AND eastern_date_sk = p_date_sk
    GROUP BY eastern_date_sk, partner_id, portal_id
) e ON e.partner_id = c.partner_id AND e.portal_id = d.portal_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY
a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.id
,a.name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_mm_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_mm_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_mm_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_mm_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_mm_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_mx_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_mx_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_mx_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily marchex partner/site performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_mx_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_mx_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword,
            site_name, total_ad_requests, paid_impressions, total_clicks, total_cost, clicks, "cost",
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005,
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword, 
	COALESCE(d.portal_id,-200), COALESCE(d.portal_name_current,'N/A (key)'), COALESCE(d.keyword,'N/A') as portal_keyword, 
	a.site_name, 0, 0, sum(a.clicks), sum(a.cost), 0, 0,
	COALESCE(sum(d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE(sum(d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE(sum(d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE(sum(d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE(sum(d.fullfilled_code_t),0) as fullfilled_code_t, 
	0, 0, p_process_id
FROM adnetwork.fact_mx_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (21,28) AND aa.partner_id > 0 AND aa.eastern_date_sk = p_date_sk 
    GROUP BY aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON a.eastern_date_sk = d.eastern_date_sk AND d.partner_id = c.partner_id
WHERE a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site_name;

/* update total yes adresponses */
UPDATE adnetwork.daily_mx_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.daily_mx_performance 
    WHERE process_id = p_process_id
    GROUP BY eastern_date_sk, partner_id) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.daily_mx_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,"cost" = (fullfilled_code_y::float/total_fullfilled_code_y)*total_cost
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.daily_mx_performance a
SET clicks = total_clicks
   ,"cost" = total_cost
WHERE a.process_id = p_process_id AND a.portal_id < 0;


/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_mx_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_mx_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_mx_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_mx_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_mx_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_network_fct_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_network_fct_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_network_fct_performance
||
|| Author: Tho Hoang
||
|| Date: 2012-01-04
||
|| Description: 
||     daily network performance loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_network_fct_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT COUNT(*) INTO v_count FROM adm.daily_agg_adm_data_feed WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'adm.daily_agg_adm_data_feed HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adm.daily_network_fct_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005,
            period, network_id, publisher_id, publication_id, property_id, placement_id, organization_id, 
            advertiser_id, order_id, flight_id, creative_id, impressions, 
            clicks, revenue, process_id)
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
	    a.date_since_1970, g.network_id, e.publisher_id, d.publication_id, c.website_id, b.placement_id, i.organization_id,
	    COALESCE(j.advertiser_id, -100), f.order_id, a.flight_id, a.creative_id, a.impressions, a.clicks, a.revenue, p_process_id
FROM        adm.daily_agg_adm_data_feed a
INNER JOIN  refer.adm_placement_dim b ON b.dt_expire = '9999-12-31' AND b.placement_id = a.placement_id
INNER JOIN  refer.adm_website_dim c ON c.dt_expire = '9999-12-31' AND c.website_id = b.website_id
INNER JOIN  refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND d.publication_id = c.publication_id
INNER JOIN  refer.adm_publisher_dim e ON e.dt_expire = '9999-12-31' AND e.publisher_id = d.publisher_id
INNER JOIN  refer.adm_flight_dim f ON f.dt_expire = '9999-12-31' AND f.flight_id = a.flight_id
INNER JOIN  refer.adm_order_dim g ON g.dt_expire = '9999-12-31' AND g.order_id = f.order_id
INNER JOIN  refer.adm_organization_dim i ON i.dt_expire = '9999-12-31' AND i.organization_id = g.organization_id
LEFT JOIN   refer.adm_advertiser_dim j ON j.dt_expire = '9999-12-31' AND j.advertiser_id = g.advertiser_id
WHERE       a.is_active = true AND a.eastern_date_sk = p_date_sk;

/* ***************************** NEW FACT ***************************** */
/* insert data to report table */
INSERT INTO adm.daily_network_fct_channel(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, network_id, publisher_id, publication_id, property_id, 
            placement_id, organization_id, advertiser_id, order_id, flight_id, 
            creative_id, channel_id, partner_id, portal_id, impressions, clicks, revenue, process_id)
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
	    a.date_since_1970, g.network_id, e.publisher_id, d.publication_id, c.website_id, 
	    b.placement_id, i.organization_id, COALESCE(j.advertiser_id, -100), f.order_id, a.flight_id, 
	    a.creative_id, k.channel_id, c.partner_id, l.portal_id, a.impressions, a.clicks, a.revenue, p_process_id
FROM        adm.daily_agg_adm_data_feed a
INNER JOIN  refer.adm_placement_dim b ON b.dt_expire = '9999-12-31' AND b.placement_id = a.placement_id
INNER JOIN  refer.adm_website_dim c ON c.dt_expire = '9999-12-31' AND c.website_id = b.website_id
INNER JOIN  refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND d.publication_id = c.publication_id
INNER JOIN  refer.adm_publisher_dim e ON e.dt_expire = '9999-12-31' AND e.publisher_id = d.publisher_id
INNER JOIN  refer.adm_flight_dim f ON f.dt_expire = '9999-12-31' AND f.flight_id = a.flight_id
INNER JOIN  refer.adm_order_dim g ON g.dt_expire = '9999-12-31' AND g.order_id = f.order_id
INNER JOIN  refer.adm_organization_dim i ON i.dt_expire = '9999-12-31' AND i.organization_id = g.organization_id
INNER JOIN  refer.dc_site_dim h ON h.dt_expire = '9999-12-31' AND h.dc_site_id = a.placement_id
INNER JOIN  refer.portal_dim l ON l.dt_expire = '9999-12-31' AND l.keyword = h.portal_keyword
INNER JOIN  refer.adm_portal_dim k ON k.dt_expire = '9999-12-31' AND k.portal_id = l.portal_id
LEFT JOIN   refer.adm_advertiser_dim j ON j.dt_expire = '9999-12-31' AND j.advertiser_id = g.advertiser_id
WHERE       a.is_active = true AND a.eastern_date_sk = p_date_sk;

/* update revenue share for mobileweb, portal_id = 4 - Partner Portal */
update adm.daily_network_fct_channel a
set p_rev_share = case 
                      when network_id = 1 then revenue*b.rev_share_mobileweb_local/100 
                      when network_id = 2 then revenue*b.rev_share_mobileweb_national/100
                      when network_id = 3 then revenue*b.rev_share_mobileweb_mediation/100
                  end
   ,v_rev_share = case 
                      when network_id = 1 then revenue*(100-b.rev_share_mobileweb_local)/100 
                      when network_id = 2 then revenue*(100-b.rev_share_mobileweb_national)/100
                      when network_id = 3 then revenue*(100-b.rev_share_mobileweb_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id = 4
;

/* update revenue share for apps, portal_id <> 4 - Partner Portal */
update adm.daily_network_fct_channel a
set p_rev_share = case 
                      when network_id = 1 then revenue*b.rev_share_apps_local/100 
                      when network_id = 2 then revenue*b.rev_share_apps_national/100
                      when network_id = 3 then revenue*b.rev_share_apps_mediation/100
                  end
   ,v_rev_share = case 
                      when network_id = 1 then revenue*(100-b.rev_share_apps_local)/100 
                      when network_id = 2 then revenue*(100-b.rev_share_apps_national)/100
                      when network_id = 3 then revenue*(100-b.rev_share_apps_mediation)/100
                  end
from refer.revenue_share_dim b
where b.dt_expire = '9999-12-31'
  and b.partner_id = a.partner_id
  and a.process_id = p_process_id
  and a.partner_id > 0
  and a.portal_id > 0
  and portal_id <> 4
;

/* Pentaho reporting data */
/* insert data to report table */
INSERT INTO adm.daily_agg_network_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, network_id, network_name, publisher_id, publisher_name, 
            publication_id, publication_name, property_id, property_name, 
            placement_id, placement_name, organization_id, organization_name, 
            advertiser_id, advertiser_name, order_id, order_name, flight_id, 
            creative_id, creative_name, channel_id, channel_name, channel_keyword, 
            partner_id, partner_name, partner_keyword, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, portal_keyword, 
            impressions, clicks, revenue, p_rev_share, v_rev_share, process_id)
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
            a.period, a.network_id, COALESCE(b.name, 'N/A'), a.publisher_id, COALESCE(c.company_name, 'N/A'),
            a.publication_id, COALESCE(d.name_current, 'N/A'), a.property_id, COALESCE(e.name_current, 'N/A'), 
            a.placement_id, COALESCE(f.name_current, 'N/A'), a.organization_id, COALESCE(g.name_current, 'N/A'), 
            a.advertiser_id, COALESCE(h.name_current, 'N/A'), a.order_id, COALESCE(i.name_current, 'N/A'), a.flight_id, 
            a.creative_id, COALESCE(j.name_current, 'N/A'), a.channel_id, COALESCE(m.name_current, 'N/A'), COALESCE(m.keyname_current, 'N/A'),
            a.partner_id, COALESCE(k.name_current, 'N/A'), COALESCE(k.keyword, 'N/A'), COALESCE(k.description_current, 'N/A'),
            COALESCE(k.parent1_id_current, -100), COALESCE(k.parent1_name_current, 'N/A'), a.portal_id, COALESCE(l.portal_name_current, 'N/A'), COALESCE(l.keyword, 'N/A'),
            a.impressions, a.clicks, a.revenue, a.p_rev_share, a.v_rev_share, a.process_id
FROM adm.daily_network_fct_channel a
LEFT JOIN refer.adm_network_dim b ON b.dt_expire = '9999-12-31' AND a.network_id = b.network_id
LEFT JOIN refer.adm_publisher_dim c ON c.dt_expire = '9999-12-31' AND a.publisher_id = c.publisher_id
LEFT JOIN refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND a.publication_id = d.publication_id
LEFT JOIN refer.adm_website_dim e ON e.dt_expire = '9999-12-31' AND a.property_id = e.website_id
LEFT JOIN refer.adm_placement_dim f ON f.dt_expire = '9999-12-31' AND a.placement_id = f.placement_id
LEFT JOIN refer.adm_organization_dim g ON g.dt_expire = '9999-12-31' AND a.organization_id = g.organization_id
LEFT JOIN refer.adm_advertiser_dim h ON h.dt_expire = '9999-12-31' AND a.advertiser_id = h.advertiser_id
LEFT JOIN refer.adm_order_dim i ON i.dt_expire = '9999-12-31' AND a.order_id = i.order_id
LEFT JOIN refer.adm_creative_dim j ON j.dt_expire = '9999-12-31' AND a.creative_id = j.creative_id
LEFT JOIN refer.partner_dim k ON k.dt_expire = '9999-12-31' AND a.partner_id = k.partner_id
LEFT JOIN refer.portal_dim l ON l.dt_expire = '9999-12-31' AND a.portal_id = l.portal_id
LEFT JOIN refer.adm_channel_dim m ON m.dt_expire = '9999-12-31' AND a.channel_id = m.channel_id
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_network_fct_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_network_fct_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_network_fct_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_network_fct_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_network_fct_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_network_fct_request(integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_network_fct_request(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_network_fct_request
||
|| Author: Tho HOANG
||
|| Date: 2012-01-15
||
|| Description: 
||     daily adnetwork performance for network datamart loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_network_fct_request(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.daily_olap_trxids_by_portal WHERE is_active = true AND eastern_date_sk = p_end_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'adstraffic.daily_olap_trxids_by_portal HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT COUNT(*) INTO v_count FROM adm.daily_agg_adm_data_feed WHERE is_active = true AND eastern_date_sk = p_end_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'adm.daily_agg_adm_data_feed HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adm.daily_network_fct_request(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            period, publisher_id, publication_id, property_id, channel_id, 
            partner_id, portal_id, impressions, clicks, revenue, 
            process_id)
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    date_since_1970, publisher_id, publication_id, property_id, channel_id, partner_id, portal_id,
            SUM(impressions) as impressions, SUM(clicks) as clicks, SUM(revenue) as revenue, p_process_id
FROM (
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
            a.full_date - '1970-01-01'::date as date_since_1970, b.publisher_id, b.publication_id, b.website_id as property_id,
            COALESCE(c.channel_id_current, -100) as channel_id, a.partner_id, a.portal_id,
            SUM(paid_impressions) as impressions, SUM(clicks) as clicks, SUM(net_revenue) as revenue
FROM (
/* AdSense DBCLK Channel */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case impressions_delivered when -1 then null else impressions_delivered end),0) as paid_impressions,
            COALESCE(SUM(case clicks_recorded when -1 then null else clicks_recorded end),0) as clicks,
            COALESCE(SUM(case estimated_earnings when -1 then null else estimated_earnings end),0) as net_revenue
FROM        adnetwork.daily_adsense_dbclk_channel
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* City Grid/City Grid Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case estimated_net_earnings when -1 then null else estimated_net_earnings end),0) as net_revenue
FROM        adnetwork.daily_cg_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* iTunes */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case impressions when -1 then null else impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            COALESCE(SUM(case revenue when -1 then null else revenue end),0) as net_revenue
FROM        adnetwork.daily_it_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* JumpTap */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),-1) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_jt_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Millennial Media */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_mm_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Marchex/Marchex Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case "cost" when -1 then null else "cost" end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_mx_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Superpages Blue/Superpages Proxy = replace paid_impressions by fullfilled_code_y */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            0,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_sp_blue_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* Where */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as paid_impressions,
            COALESCE(SUM(case clicked when -1 then null else clicked end),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_wh_performance
WHERE       is_active = true AND requests > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* AT&T Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* AT&T Static Banner Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_sb_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
UNION ALL
/* AT&T No Logo Yellowpages */
SELECT      eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id,
            COALESCE(SUM(fullfilled_code_y),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicked,
            ROUND(COALESCE(SUM(case revenue when -1 then null else revenue end),0)::NUMERIC,3) as net_revenue
FROM        adnetwork.daily_yp_no_performance
WHERE       is_active = true AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005, partner_id, portal_id
) a
INNER JOIN  refer.adm_website_dim b ON b.dt_expire = '9999-12-31' AND b.partner_id = a.partner_id
LEFT JOIN   refer.adm_portal_dim c ON c.dt_expire = '9999-12-31' AND c.portal_id = a.portal_id
GROUP BY    a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
b.publisher_id, b.publication_id, b.website_id, c.channel_id_current, a.partner_id, a.portal_id
UNION ALL
SELECT      a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
	    a.date_since_1970, e.publisher_id, d.publication_id, c.website_id as property_id, 
	    k.channel_id, c.partner_id, l.portal_id,
	    sum(a.impressions) as impressions, sum(a.clicks) as clicks, sum(a.revenue) as revenue
FROM        adm.daily_agg_adm_data_feed a
INNER JOIN  refer.adm_placement_dim b ON b.dt_expire = '9999-12-31' AND b.placement_id = a.placement_id
INNER JOIN  refer.adm_website_dim c ON c.dt_expire = '9999-12-31' AND c.website_id = b.website_id
INNER JOIN  refer.adm_publication_dim d ON d.dt_expire = '9999-12-31' AND d.publication_id = c.publication_id
INNER JOIN  refer.adm_publisher_dim e ON e.dt_expire = '9999-12-31' AND e.publisher_id = d.publisher_id
INNER JOIN  refer.dc_site_dim h ON h.dt_expire = '9999-12-31' AND h.dc_site_id = a.placement_id
INNER JOIN  refer.portal_dim l ON l.dt_expire = '9999-12-31' AND l.keyword = h.portal_keyword
INNER JOIN  refer.adm_portal_dim k ON k.dt_expire = '9999-12-31' AND k.portal_id = l.portal_id
WHERE       a.is_active = true AND a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY    a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005,
	    a.date_since_1970, e.publisher_id, d.publication_id, c.website_id, 
	    k.channel_id, c.partner_id, l.portal_id
) a
GROUP BY    eastern_date_sk, full_date, calendar_year_month, month_since_2005,
	    date_since_1970, publisher_id, publication_id, property_id, channel_id, partner_id, portal_id
;

/* update AdCel's requests (trxids) */
UPDATE adm.daily_network_fct_request a
SET requests = b.trxids_count
FROM (
SELECT a.eastern_date_sk, a.partner_id, a.portal_id, sum(trxids_count) as trxids_count
FROM adstraffic.daily_olap_trxids_by_portal a
WHERE a.is_active = true
AND a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY a.eastern_date_sk, a.partner_id, a.portal_id
) b
WHERE a.partner_id > 0
AND a.portal_id > 0
AND a.process_id = p_process_id
AND a.eastern_date_sk = b.eastern_date_sk
AND a.partner_id = b.partner_id
AND a.portal_id = b.portal_id
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_network_fct_request';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_network_fct_request(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_network_fct_request(%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_network_fct_request',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_network_fct_request(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_olap_filled_by_portal(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_olap_filled_by_portal(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_olap_filled_by_portal
||
|| Author: Tho HOANG
||
|| Date: 2012-02-10
||
|| Description: 
||     daily adcel filled qlty score by dma and portal (OLAP)
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_olap_filled_by_portal(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_filled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS FILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_olap_filled_by_portal(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, metro_id, metro_name, country_id, country_alpha2, 
            country_name, location_quality, filled_count, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.portal_id,
d.portal_name_current,
COALESCE(a.metro_id, -1),
COALESCE(f.name,'N/A') as metro_name,
COALESCE(a.country_id, -1),
COALESCE(e.alpha2,'N/A') as country_alpha2,
COALESCE(e.name,'N/A') as country_name,
a.location_quality,
sum(fullfilled_code_count) as filled_count,
p_process_id
FROM adstraffic.ad_response_fact_stats_filled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk=c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk=d.portal_sk
LEFT JOIN verveloc.country e ON a.country_id = e.id
LEFT JOIN verveloc.metro f ON a.metro_id = f.id
WHERE a.eastern_date_sk = p_date_sk
AND c.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.portal_id,
d.portal_name_current,
a.metro_id,
f.name,
a.country_id,
e.alpha2,
e.name,
a.location_quality
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_olap_filled_by_portal';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_olap_filled_by_portal(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_olap_filled_by_portal(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_olap_filled_by_portal',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_olap_filled_by_portal(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_olap_trxids_by_content_category(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_olap_trxids_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_olap_trxids_by_content_category
||
|| Author: Tho HOANG
||
|| Date: 2012-02-10
||
|| Description: 
||     daily adcel trxids qlty score by dma and content loading (OLAP)
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_olap_trxids_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_trxids WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS TRXIDS HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_olap_trxids_by_content_category(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            content_category_id, category_name, metro_id, metro_name, country_id, 
            country_alpha2, country_name, location_quality, trxids_count, 
            process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.content_category_id,
d.category_name_current,
a.metro_id,
COALESCE(f.name,'N/A') as metro_name,
a.country_id,
COALESCE(e.alpha2,'N/A') as country_alpha2,
COALESCE(e.name,'N/A') as country_name,
a.location_quality,
sum(fullfilled_code_count) as trxids_count,
p_process_id
FROM adstraffic.ad_response_fact_stats_trxids a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk=c.partner_sk
INNER JOIN refer.content_category_dim d ON a.ad_content_category_sk=d.content_category_sk
LEFT JOIN verveloc.country e ON a.country_id = e.id
LEFT JOIN verveloc.metro f ON a.metro_id = f.id
WHERE a.eastern_date_sk = p_date_sk
AND c.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.content_category_id,
d.category_name_current,
a.metro_id,
f.name,
a.country_id,
e.alpha2,
e.name,
a.location_quality
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_olap_trxids_by_content_category';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_olap_trxids_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_olap_trxids_by_content_category(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_olap_trxids_by_content_category',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_olap_trxids_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_olap_trxids_by_device(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_olap_trxids_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_olap_trxids_by_device
||
|| Author: Tho HOANG
||
|| Date: 2012-02-10
||
|| Description: 
||     daily adcel trxids qlty score by dma and device loading (OLAP)
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_olap_trxids_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_trxids WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS TRXIDS HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_olap_trxids_by_device(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            organic, device_type, device_manufacturer, metro_id, metro_name, 
            country_id, country_alpha2, country_name, location_quality, trxids_count, 
            process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.organic,
d.device_type,
d.device_manufacturer,
a.metro_id,
COALESCE(f.name,'N/A') as metro_name,
a.country_id,
COALESCE(e.alpha2,'N/A') as country_alpha2,
COALESCE(e.name,'N/A') as country_name,
a.location_quality,
sum(fullfilled_code_count) as trxids_count,
p_process_id
FROM adstraffic.ad_response_fact_stats_trxids a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk=c.partner_sk
INNER JOIN refer.user_agent_dim d ON a.user_agent_sk=d.user_agent_sk
LEFT JOIN verveloc.country e ON a.country_id = e.id
LEFT JOIN verveloc.metro f ON a.metro_id = f.id
WHERE a.eastern_date_sk = p_date_sk
AND c.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.organic,
d.device_type,
d.device_manufacturer,
a.metro_id,
f.name,
a.country_id,
e.alpha2,
e.name,
a.location_quality
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_olap_trxids_by_device';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_olap_trxids_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_olap_trxids_by_device(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_olap_trxids_by_device',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_olap_trxids_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_olap_trxids_by_portal(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_olap_trxids_by_portal(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_olap_trxids_by_portal
||
|| Author: Tho HOANG
||
|| Date: 2012-02-10
||
|| Description: 
||     daily adcel trxids qlty score by dma and portal loading (OLAP)
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_olap_trxids_by_portal(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_trxids WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS TRXIDS HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_olap_trxids_by_portal(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, metro_id, metro_name, country_id, country_alpha2, 
            country_name, location_quality, trxids_count, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.portal_id,
d.portal_name_current,
a.metro_id,
COALESCE(f.name,'N/A') as metro_name,
a.country_id,
COALESCE(e.alpha2,'N/A') as country_alpha2,
COALESCE(e.name,'N/A') as country_name,
a.location_quality,
sum(fullfilled_code_count) as trxids_count,
p_process_id
FROM adstraffic.ad_response_fact_stats_trxids a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk=c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk=d.portal_sk
LEFT JOIN verveloc.country e ON a.country_id = e.id
LEFT JOIN verveloc.metro f ON a.metro_id = f.id
WHERE a.eastern_date_sk = p_date_sk
AND c.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.portal_id,
d.portal_name_current,
a.metro_id,
f.name,
a.country_id,
e.alpha2,
e.name,
a.location_quality
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_olap_trxids_by_portal';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_olap_trxids_by_portal(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_olap_trxids_by_portal(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_olap_trxids_by_portal',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_olap_trxids_by_portal(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_olap_unfilled_by_portal(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_olap_unfilled_by_portal(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_olap_unfilled_by_portal
||
|| Author: Tho HOANG
||
|| Date: 2012-02-10
||
|| Description: 
||     daily adcel unfilled qlty score by dma and portal (OLAP)
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_olap_unfilled_by_portal(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_unfilled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS UNFILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_olap_unfilled_by_portal(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, metro_id, metro_name, country_id, country_alpha2, 
            country_name, location_quality, unfilled_count, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.portal_id,
d.portal_name_current,
a.metro_id,
COALESCE(f.name,'N/A') as metro_name,
a.country_id,
COALESCE(e.alpha2,'N/A') as country_alpha2,
COALESCE(e.name,'N/A') as country_name,
a.location_quality,
sum(fullfilled_code_count) as unfilled_count,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk=c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk=d.portal_sk
LEFT JOIN verveloc.country e ON a.country_id = e.id
LEFT JOIN verveloc.metro f ON a.metro_id = f.id
WHERE a.eastern_date_sk = p_date_sk
AND c.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.partner_id,
c.name_current,
c.description_current,
c.parent1_id_current,
c.parent1_name_current,
d.portal_id,
d.portal_name_current,
a.metro_id,
f.name,
a.country_id,
e.alpha2,
e.name,
a.location_quality
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_olap_unfilled_by_portal';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_olap_unfilled_by_portal(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_olap_unfilled_by_portal(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_olap_unfilled_by_portal',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_olap_unfilled_by_portal(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_sp_blue_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_sp_blue_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_sp_blue_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily adwhere partner performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_sp_blue_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT count(*) INTO v_count FROM adnetwork.fact_sp_daily_sum WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' SUPERPAGES HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_sp_blue_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, total_revenue, revenue, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
WHERE a.ad_network_id = 26 AND a.is_active = true AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
, a.full_date
, a.calendar_year_month
, a.month_since_2005
, a.partner_id
, a.partner_name
, a.partner_description
, a.parent1_id
, a.parent1_name
, b.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_sp_blue_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id = 26 AND is_active = true
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total revenue */
UPDATE adnetwork.daily_sp_blue_performance a
SET total_revenue = b.ppc_revenue
FROM adnetwork.fact_sp_daily_sum b 
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk AND b.ad_network_id = 26;

/* update total revenue */
UPDATE adnetwork.daily_sp_blue_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_sp_blue_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_sp_blue_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_sp_blue_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_sp_blue_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_sp_blue_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_sp_blue_performance(integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_sp_blue_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_sp_blue_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily superpages blue performance report loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_sp_blue_performance(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_end_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_start_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_sp_blue_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_ppc_revenue, ppc_revenue, verve_revenue_share, revenue, requests, paid_impressions, clicks, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword,
	a.portal_id, a.portal_name, c.keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 
	0, 0, 0, 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
INNER JOIN refer.portal_dim c ON a.portal_id = c.portal_id AND c.dt_expire = '9999-12-31'
WHERE a.ad_network_id IN (26,30) AND a.is_active = true AND a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY a.eastern_date_sk
,a.full_date
,a.calendar_year_month
,a.month_since_2005
,a.partner_id
,a.partner_name
,a.partner_description
,a.parent1_id
,a.parent1_name
,b.keyword
,a.portal_id
,a.portal_name
,c.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_sp_blue_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id IN (26,30) 
      AND is_active = true
      AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total_ppc_revenue, revenue share */
UPDATE adnetwork.daily_sp_blue_performance a
SET total_ppc_revenue = b.ppc_revenue
   ,verve_revenue_share = b.verve_revenue_share
FROM adnetwork.fact_sp_daily_sum b 
WHERE a.process_id = p_process_id 
  AND a.eastern_date_sk = b.eastern_date_sk 
  AND b.ad_network_id IN (26,30);

/* update total revenue */
UPDATE adnetwork.daily_sp_blue_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,ppc_revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_ppc_revenue
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_ppc_revenue*verve_revenue_share
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_sp_blue_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_sp_blue_performance(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_sp_blue_performance(%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_sp_blue_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_sp_blue_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_sp_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_sp_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_sp_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily adwhere partner performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_sp_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT count(*) INTO v_count FROM adnetwork.fact_sp_daily_sum WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' SUPERPAGES HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_sp_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, total_revenue, revenue, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
WHERE a.ad_network_id = 24 AND a.is_active = true AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
, a.full_date
, a.calendar_year_month
, a.month_since_2005
, a.partner_id
, a.partner_name
, a.partner_description
, a.parent1_id
, a.parent1_name
, b.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_sp_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id = 24 AND is_active = true
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total revenue */
UPDATE adnetwork.daily_sp_performance a
SET total_revenue = b.ppc_revenue
FROM adnetwork.fact_sp_daily_sum b 
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk AND b.ad_network_id = 24;

/* update total revenue */
UPDATE adnetwork.daily_sp_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_sp_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_sp_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_sp_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_sp_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_sp_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_sp_performance(integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_sp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_sp_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily adwhere partner performance report loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_sp_performance(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_end_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_start_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_sp_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, total_revenue, revenue, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
WHERE a.ad_network_id = 24 AND a.is_active = true AND a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY a.eastern_date_sk
, a.full_date
, a.calendar_year_month
, a.month_since_2005
, a.partner_id
, a.partner_name
, a.partner_description
, a.parent1_id
, a.parent1_name
, b.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_sp_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id = 24 
      AND is_active = true
      AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total revenue */
UPDATE adnetwork.daily_sp_performance a
SET total_revenue = b.ppc_revenue
FROM adnetwork.fact_sp_daily_sum b 
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk = b.eastern_date_sk
  AND b.ad_network_id = 24;

/* update total revenue */
UPDATE adnetwork.daily_sp_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_sp_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_sp_performance(%,%,%,''%'')',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_sp_performance(%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_sp_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_sp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_unfilled_stats(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_unfilled_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_unfilled_stats
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     daily adcel unfilled statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_unfilled_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_unfilled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS UNFILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_unfilled_stats(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, unfilled_count, 
            location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_unfilled_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_unfilled_stats(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_unfilled_stats(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_unfilled_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_unfilled_stats(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_unfilled_stats_by_content_category(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_unfilled_stats_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_unfilled_stats_by_content_category
||
|| Author: Tho HOANG
||
|| Date: 2012-02-02
||
|| Description: 
||     daily adcel unfilled statistics loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_unfilled_stats_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_unfilled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS UNFILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_unfilled_stats_by_content_category(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, content_category_id, 
            category_name, unfilled_count, location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.content_category_dim f ON a.ad_content_category_sk=f.content_category_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_unfilled_stats_by_content_category';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_unfilled_stats_by_content_category(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_unfilled_stats_by_content_category(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_unfilled_stats_by_content_category',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_unfilled_stats_by_content_category(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_unfilled_stats_by_device(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_unfilled_stats_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_unfilled_stats_by_device
||
|| Author: Tho HOANG
||
|| Date: 2012-02-02
||
|| Description: 
||     daily adcel unfilled statistics by device loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_unfilled_stats_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_unfilled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS UNFILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_unfilled_stats_by_device(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, organic, device_type, 
            device_manufacturer, unfilled_count, location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.user_agent_dim f ON a.user_agent_sk=f.user_agent_sk
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_unfilled_stats_by_device';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_unfilled_stats_by_device(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_unfilled_stats_by_device(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_unfilled_stats_by_device',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_unfilled_stats_by_device(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_unfilled_stats_by_dma(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_unfilled_stats_by_dma(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_unfilled_stats_by_dma
||
|| Author: Tho HOANG
||
|| Date: 2012-02-02
||
|| Description: 
||     daily adcel unfilled statistics by dma loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_unfilled_stats_by_dma(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

SELECT COUNT(*) INTO v_count FROM adstraffic.ad_response_fact_stats_unfilled WHERE eastern_date_sk = p_date_sk;
IF v_count <= 0 THEN
	RAISE NOTICE 'STATS UNFILLED HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adstraffic.daily_unfilled_stats_by_dma(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, metro_id, metro_name,
            country_id, country_alpha2, country_name, 
            unfilled_count, location_quality_100, process_id)
SELECT 
a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
a.metro_id,
COALESCE(f.name,'N/A') as metro_name,
a.country_id,
COALESCE(g.alpha2,'N/A') as country_alpha2,
COALESCE(g.name,'N/A') as country_name,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
LEFT JOIN verveloc.metro f ON f.id = a.metro_id
LEFT JOIN verveloc.country g ON g.id = a.country_id
WHERE a.eastern_date_sk = p_date_sk
AND d.dtdeleted > v_full_date
GROUP BY a.eastern_date_sk,
b.full_date,
b.calendar_year_month,
b.month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
a.metro_id,
f.name,
a.country_id,
g.alpha2,
g.name
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_unfilled_stats_by_dma';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_unfilled_stats_by_dma(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_unfilled_stats_by_dma(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_unfilled_stats_by_dma',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_unfilled_stats_by_dma(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_wh_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_wh_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_wh_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily where performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_wh_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert records */
INSERT INTO adnetwork.daily_wh_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, site_keyword, 
            total_requests, total_filled, total_clicked, total_revenue, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, requests, filled, clicked, revenue, process_id)
SELECT 	a.eastern_date_sk, b.full_date, b.calendar_year_month, b.month_since_2005, 
	c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
	COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword, a.partner_keyword as site_keyword, 
	SUM(a.requests) as requests, SUM(a.filled) as filled, SUM(a.clicked) as clicked, SUM(a.revenue) as revenue, 
	COALESCE(sum(d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE(sum(d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE(sum(d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE(sum(d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE(sum(d.fullfilled_code_t),0) as fullfilled_code_t, 
	0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.fact_wh_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (23,25) AND aa.partner_id > 0 AND aa.eastern_date_sk = p_date_sk 
    GROUP BY aa.eastern_date_sk, aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON a.eastern_date_sk = d.eastern_date_sk AND d.partner_id = c.partner_id
WHERE a.eastern_date_sk = p_date_sk
  AND (a.requests > 0 or a.filled > 0 or a.clicked > 0 or a.revenue > 0)
  AND c.dtdeleted > full_date
GROUP BY
a.eastern_date_sk
,b.full_date
,b.calendar_year_month
,b.month_since_2005
,c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.partner_keyword
;

/* update total yes adresponses */
UPDATE adnetwork.daily_wh_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.daily_wh_performance 
    WHERE process_id = p_process_id
    GROUP BY eastern_date_sk, partner_id) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.daily_wh_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,filled = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_filled)::int
   ,clicked = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicked)::int
   ,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.daily_wh_performance a
SET requests = total_requests
   ,filled = total_filled
   ,clicked = total_clicked
   ,revenue = total_revenue
WHERE a.process_id = p_process_id AND a.portal_id < 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_wh_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_wh_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_wh_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_daily_wh_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_wh_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_yp_no_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_yp_no_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_yp_no_performance
||
|| Author: Tho HOANG
||
|| Date: 2012-03-16
||
|| Description: 
||     daily AT&T No Logo performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_yp_no_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT count(*) INTO v_count FROM adnetwork.fact_yp_daily_sum WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' YELLOWPAGES HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_yp_no_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword as partner_keyword,
	a.portal_id, a.portal_name, c.keyword as portal_keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 
	0, 0, 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
INNER JOIN refer.portal_dim c ON a.portal_id = c.portal_id AND c.dt_expire = '9999-12-31'
WHERE a.ad_network_id IN (33) AND a.is_active = true AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,a.full_date
,a.calendar_year_month
,a.month_since_2005
,a.partner_id
,a.partner_name
,a.partner_description
,a.parent1_id
,a.parent1_name
,b.keyword
,a.portal_id
,a.portal_name
,c.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_yp_no_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id IN (33) AND is_active = true AND eastern_date_sk = p_date_sk
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total requests, impressions, clicks, revenue */
UPDATE adnetwork.daily_yp_no_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM adnetwork.fact_yp_daily_sum b 
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk = b.eastern_date_sk
  AND b.site_name = 'Verve Wireless (static no logo)';

/* update rate, requests, impressions, clicks, revenue */
UPDATE adnetwork.daily_yp_no_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_yp_no_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_yp_no_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_yp_no_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_yp_no_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_yp_no_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_yp_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_yp_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_yp_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-11-14
||
|| Description: 
||     daily at&t (yellowpages) performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_yp_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT count(*) INTO v_count FROM adnetwork.fact_yp_daily_sum WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' YELLOWPAGES HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_yp_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword as partner_keyword,
	a.portal_id, a.portal_name, c.keyword as portal_keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 
	0, 0, 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
INNER JOIN refer.portal_dim c ON a.portal_id = c.portal_id AND c.dt_expire = '9999-12-31'
WHERE a.ad_network_id IN (27) AND a.is_active = true AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,a.full_date
,a.calendar_year_month
,a.month_since_2005
,a.partner_id
,a.partner_name
,a.partner_description
,a.parent1_id
,a.parent1_name
,b.keyword
,a.portal_id
,a.portal_name
,c.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_yp_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id IN (27) AND is_active = true AND eastern_date_sk = p_date_sk
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total requests, impressions, clicks, revenue */
UPDATE adnetwork.daily_yp_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM adnetwork.fact_yp_daily_sum b 
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk = b.eastern_date_sk
  AND b.site_name = 'Verve (iPhone)';

/* update rate, requests, impressions, clicks, revenue */
UPDATE adnetwork.daily_yp_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_yp_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_yp_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_yp_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_yp_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_yp_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_daily_yp_sb_performance(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_daily_yp_sb_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_daily_yp_sb_performance
||
|| Author: Tho HOANG
||
|| Date: 2012-01-18
||
|| Description: 
||     daily AT&T Statis Banner performance report loading
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_daily_yp_sb_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

SELECT count(*) INTO v_count FROM adstraffic.daily_ad_serving_stats WHERE eastern_date_sk = p_date_sk AND is_active = true;
IF v_count = 0 THEN
	RAISE NOTICE ' DAILY ADRESPONSES NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

SELECT count(*) INTO v_count FROM adnetwork.fact_yp_daily_sum WHERE eastern_date_sk = p_date_sk;
IF v_count = 0 THEN
	RAISE NOTICE ' YELLOWPAGES HAVE NO DATA %',timeofday();
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* copy daily adcel */
INSERT INTO adnetwork.daily_yp_sb_performance(
            eastern_date_sk, full_date, calendar_year_month, month_since_2005, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword,
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT 	a.eastern_date_sk, a.full_date, a.calendar_year_month, a.month_since_2005, 
	a.partner_id, a.partner_name, a.partner_description, a.parent1_id, a.parent1_name, b.keyword as partner_keyword,
	a.portal_id, a.portal_name, c.keyword as portal_keyword,
	sum(fullfilled_code_count), sum(a.fullfilled_code_y), 0, 0, 
	0, 0, 0, 0, 0, 0, p_process_id
  FROM adstraffic.daily_ad_serving_stats a
INNER JOIN refer.partner_dim b ON a.partner_id = b.partner_id AND b.dt_expire = '9999-12-31'
INNER JOIN refer.portal_dim c ON a.portal_id = c.portal_id AND c.dt_expire = '9999-12-31'
WHERE a.ad_network_id IN (32) AND a.is_active = true AND a.eastern_date_sk = p_date_sk
GROUP BY a.eastern_date_sk
,a.full_date
,a.calendar_year_month
,a.month_since_2005
,a.partner_id
,a.partner_name
,a.partner_description
,a.parent1_id
,a.parent1_name
,b.keyword
,a.portal_id
,a.portal_name
,c.keyword;

/* update total yes adresponses */
UPDATE adnetwork.daily_yp_sb_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT eastern_date_sk, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adstraffic.daily_ad_serving_stats 
    WHERE ad_network_id IN (32) AND is_active = true AND eastern_date_sk = p_date_sk
    GROUP BY eastern_date_sk) b
WHERE a.process_id = p_process_id AND a.eastern_date_sk = b.eastern_date_sk;

/* update total requests, impressions, clicks, revenue */
UPDATE adnetwork.daily_yp_sb_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM adnetwork.fact_yp_daily_sum b 
WHERE a.process_id = p_process_id
  AND a.eastern_date_sk = b.eastern_date_sk
  AND b.site_name = 'Verve Wireless (Mobile Web) - Lower';

/* update rate, requests, impressions, clicks, revenue */
UPDATE adnetwork.daily_yp_sb_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.fullfilled_code_y > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_daily_yp_sb_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_daily_yp_sb_performance(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_daily_yp_sb_performance(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_daily_yp_sb_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_daily_yp_sb_performance(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_ad_serving_stats(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_ad_serving_stats(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_ad_serving_stats
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_ad_serving_stats(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_ad_serving_stats(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_ad_serving_stats(
            calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            duration, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current
;
/*
UPDATE adstraffic.monthly_ad_serving_stats a
SET total_ad_requests = COALESCE ((
        SELECT SUM(b.fullfilled_code_count) 
        FROM   adstraffic.ad_response_fact_stats_forecast b
        INNER JOIN refer.ad_network_dim c ON c.ad_network_sk = b.ad_network_sk
        INNER JOIN refer.partner_dim d ON d.partner_sk = b.partner_sk
        INNER JOIN refer.portal_dim e ON e.portal_sk = b.portal_sk
        WHERE  b.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
          AND  d.dtdeleted > v_start_full_date
          AND  c.ad_network_id = a.ad_network_id
          AND  d.partner_id = a.partner_id
          AND  e.portal_id = a.portal_id
        GROUP BY c.ad_network_id, d.partner_id, e.portal_id), 0)
WHERE process_id = p_process_id;
*/
/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_ad_serving_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_ad_serving_stats(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_ad_serving_stats(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_ad_serving_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_ad_serving_stats(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_ad_serving_stats_by_content_category(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_ad_serving_stats_by_content_category(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_ad_serving_stats_by_content_category
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_ad_serving_stats_by_content_category(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_ad_serving_stats_by_content_category(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_ad_serving_stats_by_content_category (
            calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, content_category_id, category_name, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            duration, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.content_category_dim f ON a.ad_content_category_sk=f.content_category_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_ad_serving_stats_by_content_category';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_ad_serving_stats_by_content_category(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_ad_serving_stats_by_content_category(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_ad_serving_stats_by_content_category',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_ad_serving_stats_by_content_category(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_ad_serving_stats_by_date(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_build_monthly_ad_serving_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_ad_serving_stats_by_date
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_ad_serving_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_ad_serving_stats_by_date(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_ad_serving_stats_by_date(
            calendar_year_month, month_since_2005, full_date,
            ad_network_id, ad_network_name, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            duration, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
b.full_date,
c.ad_network_id,
c.ad_network_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date,
c.ad_network_id,
c.ad_network_name_current
;

UPDATE adstraffic.monthly_ad_serving_stats_by_date a
SET total_ad_requests = COALESCE ((
        SELECT SUM(b.fullfilled_code_count) 
        FROM   adstraffic.ad_response_fact_stats_forecast b
        INNER JOIN refer.ad_network_dim c ON c.ad_network_sk = b.ad_network_sk
        INNER JOIN refer.date_dim d ON d.date_sk = b.eastern_date_sk
        INNER JOIN refer.partner_dim e ON e.partner_sk = b.partner_sk
        WHERE  d.full_date = a.full_date
          AND  e.dtdeleted > v_start_full_date
          AND  c.ad_network_id = a.ad_network_id
        GROUP BY d.full_date, c.ad_network_id), 0)
WHERE process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_ad_serving_stats_by_date';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_ad_serving_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_ad_serving_stats_by_date(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_ad_serving_stats_by_date',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_ad_serving_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO song;

--
-- Name: fn_build_monthly_ad_serving_stats_by_device(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_ad_serving_stats_by_device(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_ad_serving_stats_by_device
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_ad_serving_stats_by_device(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_ad_serving_stats_by_device(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_ad_serving_stats_by_device(
            calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, partner_id, partner_name, partner_description, 
            parent1_id, parent1_name, portal_id, portal_name, organic, device_type, device_manufacturer, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            duration, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer,
sum(fullfilled_code_count) as fullfilled_code_count,
sum(fullfilled_code_y) as fullfilled_code_y,
sum(fullfilled_code_n) as fullfilled_code_n,
sum(fullfilled_code_e) as fullfilled_code_e,
sum(fullfilled_code_t) as fullfilled_code_t,
sum(duration) as duration,
p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.user_agent_dim f ON a.user_agent_sk=f.user_agent_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_ad_serving_stats_by_device';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_ad_serving_stats_by_device(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_ad_serving_stats_by_device(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_ad_serving_stats_by_device',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_ad_serving_stats_by_device(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_adnetwork_summary(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_adnetwork_summary
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork summary loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_adnetwork_summary(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 29 OR p_process_config_id > 30 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_adnetwork_summary(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=29 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

/* insert records */
INSERT INTO adnetwork.monthly_adnetwork_summary(
            calendar_year_month, month_since_2005, 
            ad_network_id, ad_network_name, requests, paid_impressions, clicks, 
            net_revenue, fullfilled_code_count, fullfilled_code_y, process_id)
/* AdSense DBCLK Channel */
SELECT      calendar_year_month, month_since_2005,
            '-1' as ad_network_id, 'AdSense DBCLK Channel' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions_delivered),0) as paid_impressions,
            COALESCE(SUM(clicks_recorded),0) as clicks,
            COALESCE(SUM(estimated_earnings),0) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_adsense_dbclk_channel
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* City Grid */
SELECT      calendar_year_month, month_since_2005,
            '20,29' as ad_network_id, 'City Grid/City Grid Proxy' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            COALESCE(SUM(estimated_net_earnings),0) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_cg_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* iTunes */
SELECT      calendar_year_month, month_since_2005,
            '-1' as ad_network_id, 'iTunes' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            COALESCE(SUM(revenue),0) as net_revenue,
            0 as fullfilled_code_count,
            0 as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_it_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* JumpTap */
SELECT      calendar_year_month, month_since_2005,
            '11' as ad_network_id, 'JumpTap' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(net_revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_jt_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Millennial Media */
SELECT      calendar_year_month, month_since_2005,
            '4' as ad_network_id, 'Millennial Media' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(ads_served),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(net_revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_mm_performance
WHERE       is_active = true AND requests > 0 AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Marchex */
SELECT      calendar_year_month, month_since_2005,
            '21,28' as ad_network_id, 'Marchex/Marchex Proxy' as ad_network_name,
            COALESCE(SUM(total_ad_requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM("cost"),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_mx_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Superpages Blue */
SELECT      calendar_year_month, month_since_2005,
            '30,26' as ad_network_id, 'Superpages Prpoxy/Blue' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(paid_impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_sp_blue_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* Where */
SELECT      calendar_year_month, month_since_2005,
            '23,25' as ad_network_id, 'Where/Where HTML' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(filled),0) as paid_impressions,
            COALESCE(SUM(clicked),0) as clicked,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_wh_performance
WHERE       is_active = true AND requests > 0 AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* AT&T Yellowpages */
SELECT      calendar_year_month, month_since_2005,
            '27' as ad_network_id, 'AT&T Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_yp_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
UNION
/* AT&T Static Banner Yellowpages */
SELECT      calendar_year_month, month_since_2005,
            '32' as ad_network_id, 'AT&T Static Banner Yellowpages' as ad_network_name,
            COALESCE(SUM(requests),0) as requests,
            COALESCE(SUM(impressions),0) as paid_impressions,
            COALESCE(SUM(clicks),0) as clicks,
            ROUND(COALESCE(SUM(revenue),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(fullfilled_code_count),0) as fullfilled_code_count,
            COALESCE(SUM(fullfilled_code_y),0) as fullfilled_code_y,
            p_process_id
FROM        adnetwork.monthly_yp_sb_performance
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
GROUP BY    calendar_year_month, month_since_2005
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_adnetwork_summary';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_adnetwork_summary(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_adnetwork_summary(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_adnetwork_summary',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_adnetwork_summary(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_adnetwork_summary_by_date(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_adnetwork_summary_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_adnetwork_summary_by_date
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork summary by date loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_adnetwork_summary_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 29 OR p_process_config_id > 30 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_adnetwork_summary_by_date(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=29 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

/* insert records */
INSERT INTO adnetwork.monthly_adnetwork_summary_by_date(
            calendar_year_month, month_since_2005, full_date, requests, paid_impressions, 
            clicks, net_revenue, fullfilled_code_count, fullfilled_code_y, process_id)
SELECT      calendar_year_month, month_since_2005, full_date,
            COALESCE(SUM(case requests when -1 then null else requests end),0) as requests,
            COALESCE(SUM(case paid_impressions when -1 then null else paid_impressions end),0) as paid_impressions,
            COALESCE(SUM(case clicks when -1 then null else clicks end),0) as clicks,
            ROUND(COALESCE(SUM(case net_revenue when -1 then null else net_revenue end),0)::NUMERIC,3) as net_revenue,
            COALESCE(SUM(case fullfilled_code_count when -1 then null else fullfilled_code_count end),0) as fullfilled_code_count,
            COALESCE(SUM(case fullfilled_code_y when -1 then null else fullfilled_code_y end),0) as fullfilled_code_y,
            p_process_id
FROM (
/* AdSense DBCLK Channel */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            impressions_delivered as paid_impressions,
            clicks_recorded as clicks,
            estimated_earnings as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_adsense_dbclk_channel_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* City Grid */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            paid_impressions as paid_impressions,
            clicks as clicks,
            estimated_net_earnings as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_cg_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* iTunes */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            impressions as paid_impressions,
            clicks as clicks,
            revenue as net_revenue,
            0 as fullfilled_code_count,
            0 as fullfilled_code_y
FROM        adnetwork.monthly_it_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* JumpTap */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            paid_impressions as paid_impressions,
            clicks as clicks,
            ROUND(net_revenue::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_jt_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* Millennial Media */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            ads_served as paid_impressions,
            clicks as clicks,
            ROUND(net_revenue::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_mm_performance_by_date
WHERE       is_active = true AND requests > 0 AND month_since_2005 = v_month_since_2005
UNION
/* Marchex */
SELECT      calendar_year_month, month_since_2005, full_date,
            total_ad_requests as requests,
            paid_impressions as paid_impressions,
            clicks as clicks,
            ROUND("cost"::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_mx_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* Superpages Blue */
SELECT      calendar_year_month, month_since_2005, full_date,
            0 as requests,
            0 as paid_impressions,
            0 as clicks,
            ROUND(revenue::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_sp_blue_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* Where */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            filled as paid_impressions,
            clicked as clicked,
            ROUND(revenue::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_wh_performance_by_date
WHERE       is_active = true AND requests > 0 AND month_since_2005 = v_month_since_2005
UNION
/* AT&T Yellowpages */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            impressions as paid_impressions,
            clicks as clicks,
            ROUND(revenue::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_yp_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
UNION
/* AT&T Static Banner Yellowpages */
SELECT      calendar_year_month, month_since_2005, full_date,
            requests as requests,
            impressions as paid_impressions,
            clicks as clicks,
            ROUND(revenue::NUMERIC,3) as net_revenue,
            fullfilled_code_count as fullfilled_code_count,
            fullfilled_code_y as fullfilled_code_y
FROM        adnetwork.monthly_yp_sb_performance_by_date
WHERE       is_active = true AND month_since_2005 = v_month_since_2005
) a
GROUP BY calendar_year_month, month_since_2005, full_date
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_adnetwork_summary_by_date';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_adnetwork_summary_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_adnetwork_summary_by_date(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_adnetwork_summary_by_date',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_adnetwork_summary_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_adsense_dbclk_channel(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_adsense_dbclk_channel(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_adsense_dbclk_channel
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Google AdSense - DBCLK Channel Mapping
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_adsense_dbclk_channel(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_adsense_dbclk_channel(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* =========================================== */
/* ===== adnetwork.adsense_dblck_channel ===== */

/* truncate temporary data */
TRUNCATE adnetwork.adsense_dblck_channel;

/* copy new data to temporary table */
INSERT INTO adnetwork.adsense_dblck_channel(
            eastern_date_sk, ga_channel_sk, dc_site_sk, partner_sk, portal_sk, 
            impressions_delivered, clicks_recorded, channel_page_views, channel_clicks, 
            channel_page_ctr, channel_cpc, channel_page_rpm, channel_estimated_earnings, 
            total_clicks_recorded, estimated_earnings, process_id)
SELECT a.eastern_date_sk, a.ga_channel_sk, a.dc_site_sk, a.partner_sk, 
       a.portal_sk, a.impressions_delivered, a.clicks_recorded, 
       b.page_views, b.clicks, b.page_ctr, b.cpc, b.page_rpm, b.estimated_earnings, 
       0, 0, p_process_id
  FROM adnetwork.fact_ad_channel_site a
INNER JOIN adnetwork.fact_ga_channel b ON a.eastern_date_sk = b.eastern_date_sk AND a.ga_channel_sk = b.ga_channel_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND a.ga_channel_sk > 0;

/* update total_clicks_recorded */
UPDATE adnetwork.adsense_dblck_channel a
SET total_clicks_recorded = b.total_clicks_recorded
FROM (
    SELECT ga_channel_sk, SUM(clicks_recorded) as total_clicks_recorded 
    FROM adnetwork.adsense_dblck_channel 
    WHERE process_id = p_process_id
    GROUP BY ga_channel_sk
) b
WHERE a.ga_channel_sk = b.ga_channel_sk AND a.process_id = p_process_id;

/* update estimated_earnings */
UPDATE adnetwork.adsense_dblck_channel
SET estimated_earnings = (channel_estimated_earnings::float/total_clicks_recorded)*clicks_recorded
WHERE total_clicks_recorded > 0 AND process_id = p_process_id;

/* =================================================== */
/* ===== adnetwork.monthly_adsense_dbclk_channel ===== */

INSERT INTO adnetwork.monthly_adsense_dbclk_channel(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, impressions_delivered, 
            clicks_recorded, estimated_earnings, 
            requests, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT v_calendar_year_month, v_month_since_2005, c.partner_id, c.name_current, 
       c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
       d.portal_id, portal_name_current, d.keyword as portal_keyword,
       sum(impressions_delivered), sum(clicks_recorded), sum(estimated_earnings), 
       0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.adsense_dblck_channel a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c on a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d on a.portal_sk = d.portal_sk
WHERE c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword;

/* =========================================================== */
/* ===== adnetwork.monthly_adsense_dbclk_channel_by_date ===== */

INSERT INTO adnetwork.monthly_adsense_dbclk_channel_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            impressions_delivered, clicks_recorded, estimated_earnings, 
            requests, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT v_calendar_year_month, v_month_since_2005, b.full_date, count(distinct c.partner_id), 
       sum(impressions_delivered), sum(clicks_recorded), sum(estimated_earnings), 
       0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.adsense_dblck_channel a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c on a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d on a.portal_sk = d.portal_sk
WHERE c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_adsense_dbclk_channel';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_adsense_dbclk_channel(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_adsense_dbclk_channel(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_adsense_dbclk_channel',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_adsense_dbclk_channel(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_group_act_all(integer, integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_group_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_group_act_all
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_group_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

IF p_process_config_id=4 THEN
        v_calendar_year_month:='30 day';
        v_month_since_2005:=32767;
ELSE
        SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
        FROM dw.month_dim
        WHERE date_sk_start=p_date_sk_start
        AND date_sk_end=p_date_sk_end;
END IF;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

/* insert records */
/* need to build insert string because we need constants rather than variables
to take advantage of partition constraint exclusion */
v_cmd:='INSERT INTO dw.monthly_agg_group_act_all (
        calendar_year_month,parent1_id,organic,month_since_2005,parent1_name,unique_view_count,unique_visit_count,page_view_count,process_id)
SELECT ''' || v_calendar_year_month || ''',d.parent1_id_current,c.organic,' || v_month_since_2005::text || ',d.parent1_name_current,COUNT(DISTINCT a.uid),COUNT(DISTINCT (COALESCE(a.uid,'''') || COALESCE(a.session,''''))),SUM(a.page_view_count),' || p_process_id::text || '
FROM dw.page_view_fact a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.request_type_sk=1
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
AND a.data_file_id <= ' || p_max_data_file_id::text || '
AND d.dtdeleted > ''' || v_full_date_start::text || '''
GROUP BY d.parent1_id_current,c.organic,d.parent1_name_current
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_group_act_all';

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_group_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_group_act_all(%,%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_group_act_all',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_group_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_group_portal_act_all(integer, integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_group_portal_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_group_portal_act_all
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_group_portal_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

IF p_process_config_id=4 THEN
        v_calendar_year_month:='30 day';
        v_month_since_2005:=32767;
ELSE
        SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
        FROM dw.month_dim
        WHERE date_sk_start=p_date_sk_start
        AND date_sk_end=p_date_sk_end;
END IF;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

/* insert records */
/* need to build insert string because we need constants rather than variables
to take advantage of partition constraint exclusion */
v_cmd:='INSERT INTO dw.monthly_agg_group_portal_act_all (
        calendar_year_month,parent1_id,portal_id,organic,month_since_2005,parent1_name,portal_name,unique_view_count,unique_visit_count,page_view_count,process_id)
SELECT ''' || v_calendar_year_month || ''',d.parent1_id_current,e.portal_id,c.organic,' || v_month_since_2005::text || ',d.parent1_name_current,e.portal_name_current,COUNT(DISTINCT a.uid),COUNT(DISTINCT (COALESCE(a.uid,'''') || COALESCE(a.session,''''))),SUM(a.page_view_count),' || p_process_id::text || '
FROM dw.page_view_fact a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.request_type_sk=1
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
AND a.data_file_id <= ' || p_max_data_file_id::text || '
AND d.dtdeleted > ''' || v_full_date_start::text || '''
GROUP BY d.parent1_id_current,e.portal_id,c.organic,d.parent1_name_current,e.portal_name_current
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_group_portal_act_all';

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_group_portal_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_group_portal_act_all(%,%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_group_portal_act_all',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_group_portal_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_network_act_all(integer, integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_network_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_network_act_all
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_network_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

IF p_process_config_id=4 THEN
        v_calendar_year_month:='30 day';
        v_month_since_2005:=32767;
ELSE
        SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
        FROM dw.month_dim
        WHERE date_sk_start=p_date_sk_start
        AND date_sk_end=p_date_sk_end;
END IF;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

/* insert records */
/* need to build insert string because we need constants rather than variables
to take advantage of partition constraint exclusion */
v_cmd:='INSERT INTO dw.monthly_agg_network_act_all (
        calendar_year_month,organic,month_since_2005,unique_view_count,unique_visit_count,page_view_count,process_id)
SELECT ''' || v_calendar_year_month || ''',c.organic,' || v_month_since_2005::text || ',COUNT(DISTINCT a.uid),COUNT(DISTINCT (COALESCE(a.uid,'''') || COALESCE(a.session,''''))),SUM(a.page_view_count),' || p_process_id::text || '
FROM dw.page_view_fact a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.request_type_sk=1
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
AND a.data_file_id <= ' || p_max_data_file_id::text || '
AND d.dtdeleted > ''' || v_full_date_start::text || '''
GROUP BY c.organic
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_network_act_all';

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_network_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_network_act_all(%,%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_network_act_all',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_network_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_partner_act(integer, integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_partner_act(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_partner_act
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_partner_act(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

IF p_process_config_id=4 THEN
	v_calendar_year_month:='30 day';
        v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM dw.month_dim
	WHERE date_sk_start=p_date_sk_start 
	AND date_sk_end=p_date_sk_end;
END IF;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

-- monthly_agg_partner_act_content_category
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_content_category ( 
	calendar_year_month,partner_id,content_category_id,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,category_name,page_view_count,process_id,portal_id,portal_name)	
SELECT	v_calendar_year_month,d.partner_id,e.content_category_id,v_month_since_2005,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,e.category_name_current,SUM(a.page_view_count),p_process_id,f.portal_id,f.portal_name_current
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.content_category_dim e ON a.content_category_sk=e.content_category_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,e.content_category_id,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,e.category_name_current,f.portal_id,f.portal_name_current
;

-- monthly_agg_partner_act_content_module
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_content_module (
        calendar_year_month,partner_id,partner_module_id,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,display_name,page_view_count,process_id)
SELECT	v_calendar_year_month,d.partner_id,e.partner_module_id,v_month_since_2005,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,e.display_name_current,SUM(a.page_view_count),p_process_id
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.partner_module_dim e ON a.partner_module_sk=e.partner_module_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,e.partner_module_id,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,e.display_name_current
;

--monthly_agg_partner_act_cont_mod_type 
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_cont_mod_type (
      	calendar_year_month,partner_id,feature_module_name,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,page_view_count,process_id,portal_id,portal_name)
SELECT  v_calendar_year_month,d.partner_id,e.feature_module_name_current,v_month_since_2005,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,SUM(a.page_view_count),p_process_id,f.portal_id,f.portal_name_current
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.partner_module_dim e ON a.partner_module_sk=e.partner_module_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,e.feature_module_name_current,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,f.portal_id,f.portal_name_current
;

--monthly_agg_partner_act_date
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_date (
      calendar_year_month,partner_id,full_date,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,page_view_count,process_id,portal_id,portal_name)
SELECT  v_calendar_year_month,d.partner_id,b.full_date,v_month_since_2005,d.name_current,d.description_current,
d.parent1_id_current,d.parent1_name_current,SUM(a.page_view_count),p_process_id,f.portal_id,f.portal_name_current
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,b.full_date,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,f.portal_id,f.portal_name_current
;

--monthly_agg_partner_act_day_of_week
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_day_of_week (
      	calendar_year_month,partner_id,day_of_week,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,page_view_count,process_id,portal_id,portal_name)
SELECT  v_calendar_year_month,d.partner_id,b.day_of_week,v_month_since_2005,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,SUM(a.page_view_count),p_process_id,f.portal_id,f.portal_name_current
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,b.day_of_week,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,f.portal_id,f.portal_name_current
;

--monthly_agg_partner_act_device
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_device (
      	calendar_year_month,partner_id,device_type,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,device_manufacturer,organic,page_view_count,process_id,portal_id,portal_name)
SELECT  v_calendar_year_month,d.partner_id,c.device_type,v_month_since_2005,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,c.device_manufacturer,c.organic,SUM(a.page_view_count),p_process_id,f.portal_id,f.portal_name_current
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
WHERE a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,c.device_type,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,c.device_manufacturer,c.organic,f.portal_id,f.portal_name_current
;

--monthly_agg_partner_act_hour
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_hour (
      	calendar_year_month,partner_id,hour24_of_day,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,page_view_count,process_id,portal_id,portal_name)
SELECT  v_calendar_year_month,d.partner_id,a.hour24_of_day,v_month_since_2005,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,SUM(a.page_view_count),p_process_id,f.portal_id,f.portal_name_current
FROM dw.page_view_fact_agg_04 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,a.hour24_of_day,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,f.portal_id,f.portal_name_current
;

--monthly_agg_partner_act_portal
/* insert records */
INSERT INTO dw.monthly_agg_partner_act_portal (
      	calendar_year_month,partner_id,portal_id,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,portal_name,page_view_count,process_id)
SELECT  v_calendar_year_month,d.partner_id,e.portal_id,v_month_since_2005,d.name_current,d.description_current,
	d.parent1_id_current,d.parent1_name_current,e.portal_name_current,SUM(a.page_view_count),p_process_id
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim e ON a.portal_sk=e.portal_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,e.portal_id,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,e.portal_name_current
;

/* AP module breakdown - Separate from partner/group/network reports*/
/* insert records */
INSERT INTO dw.monthly_agg_ap_module_breakdown (
	calendar_year_month,partner_id,portal_id,month_since_2005,partner_name,portal_name,display_block_name,display_block_id,feature_module_name,partner_module_name,partner_module_description,partner_module_id,partner_module_type,page_view_count,process_id)
SELECT  v_calendar_year_month,
	d.partner_id,
	f.portal_id,
	v_month_since_2005,
        d.name_current as partner_name,
        f.portal_name_current,
        g.display_name_current as display_block_name,
        g.display_block_id,
        e.feature_module_name_current,
        e.display_name_current as partner_module_name,
        e.description_current as partner_module_description,
        e.partner_module_id,
        case when e.is_local = 1 and (e.state is null or e.state = '') then 'MEMBER'
        when e.is_local = 1 and (e.state is not null and e.state <> '') then 'STATE'
        else 'AP' end as partner_module_type,
        SUM(a.page_view_count),
	p_process_id
FROM dw.page_view_fact_agg_03 a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.partner_module_dim e ON a.partner_module_sk=e.partner_module_sk
INNER JOIN dw.portal_dim f ON a.portal_sk=f.portal_sk
INNER JOIN dw.display_block_dim g ON a.display_block_sk=g.display_block_sk
WHERE c.organic = true
AND a.eastern_date_sk BETWEEN p_date_sk_start AND p_date_sk_end
AND d.partner_id=238 -- AP
AND a.max_data_file_id <= p_max_data_file_id
AND d.dtdeleted > v_full_date_start
GROUP BY d.partner_id,
	f.portal_id,
	d.name_current,
        f.portal_name_current,
        g.display_name_current,
        g.display_block_id,
        e.feature_module_name_current,
        e.display_name_current,
        e.description_current,
        e.partner_module_id,
        case when e.is_local = 1 and (e.state is null or e.state = '') then 'MEMBER'
        when e.is_local = 1 and (e.state is not null and e.state <> '') then 'STATE'
        else 'AP' end
;

/* update process concurrent trans table w/ status */
UPDATE process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_partner_act';

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_partner_act(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_partner_act(%,%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,v_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_partner_act',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_partner_act(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_partner_act_all(integer, integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_partner_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_partner_act_all
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_partner_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

IF p_process_config_id=4 THEN
        v_calendar_year_month:='30 day';
        v_month_since_2005:=32767;
ELSE
        SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
        FROM dw.month_dim
        WHERE date_sk_start=p_date_sk_start
        AND date_sk_end=p_date_sk_end;
END IF;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

-- monthly_agg_partner_act_all
/* insert records */
/* need to build insert string because we need constants rather than variables
to take advantage of partition constraint exclusion */
v_cmd:='INSERT INTO dw.monthly_agg_partner_act_all (
        calendar_year_month,partner_id,organic,month_since_2005,partner_name,partner_description,parent1_id,parent1_name,unique_view_count,unique_visit_count,page_view_count,process_id)
SELECT ''' || v_calendar_year_month || ''',d.partner_id,c.organic,' || v_month_since_2005::text || ',d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,COUNT(DISTINCT a.uid),COUNT(DISTINCT (COALESCE(a.uid,'''') || COALESCE(a.session,''''))),SUM(a.page_view_count),' || p_process_id::text || '
FROM dw.page_view_fact a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.request_type_sk=1
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
AND a.data_file_id <= ' || p_max_data_file_id::text || '
AND d.dtdeleted > ''' || v_full_date_start::text || '''
GROUP BY d.partner_id,c.organic,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_partner_act_all';

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_partner_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_partner_act_all(%,%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,v_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_partner_act_all',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_partner_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_portal_act_all(integer, integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_portal_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_portal_act_all
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_portal_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

IF p_process_config_id=4 THEN
        v_calendar_year_month:='30 day';
        v_month_since_2005:=32767;
ELSE
        SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
        FROM dw.month_dim
        WHERE date_sk_start=p_date_sk_start
        AND date_sk_end=p_date_sk_end;
END IF;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

/* insert records */
/* need to build insert string because we need constants rather than variables
to take advantage of partition constraint exclusion */
v_cmd:='INSERT INTO dw.monthly_agg_portal_act_all (
        calendar_year_month,portal_id,organic,month_since_2005,portal_name,unique_view_count,unique_visit_count,page_view_count,process_id)
SELECT ''' || v_calendar_year_month || ''',e.portal_id,c.organic,' || v_month_since_2005::text || ',e.portal_name_current,COUNT(DISTINCT a.uid),COUNT(DISTINCT (COALESCE(a.uid,'''') || COALESCE(a.session,''''))),SUM(a.page_view_count),' || p_process_id::text || '
FROM dw.page_view_fact a
INNER JOIN dw.user_agent_dim c ON a.user_agent_sk=c.user_agent_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.request_type_sk=1
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
AND a.data_file_id <= ' || p_max_data_file_id::text || '
AND d.dtdeleted > ''' || v_full_date_start::text || '''
GROUP BY e.portal_id,c.organic,e.portal_name_current
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process concurrent trans table w/ status */
UPDATE process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_portal_act_all';

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_portal_act_all(%,%,%,%,''%'',%)',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_portal_act_all(%,%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_portal_act_all',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_portal_act_all(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_site(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_site(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_agg_site
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_agg_site(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 20 OR p_process_config_id > 21 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_agg_site(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=20 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO dbclk.monthly_agg_site(
            calendar_year_month, month_since_2005, start_date_sk, end_date_sk, dc_site_id, dart_site_name, 
            partner_keyword, portal_keyword, impressions_delivered, clicks_recorded, process_id)
SELECT 
  v_calendar_year_month,
  v_month_since_2005,
  p_start_date_sk,
  p_end_date_sk,
  b.dc_site_id,
  b.dart_site_name_current,
  b.partner_keyword,
  b.portal_keyword,
  sum(impressions_delivered) as impressions_delivered,
  sum(clicks_recorded) as clicks_recorded,
  p_process_id
FROM dbclk.site_order_forecast_fact a
INNER JOIN refer.dc_site_dim b ON a.dc_site_sk = b.dc_site_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY 
b.dc_site_id,
b.dart_site_name_current,
b.partner_keyword,
b.portal_keyword
;

/* update partner info */
UPDATE dbclk.monthly_agg_site a
SET partner_id = b.partner_id
   ,partner_name = b.name_current
   ,parent1_id = b.parent1_id_current
   ,parent1_name = b.parent1_name_current
   ,partner_postal_code = b.partner_postal_code
FROM refer.partner_dim b
WHERE process_id = p_process_id
  AND b.keyword = a.partner_keyword
  AND b.dt_expire = '9999-12-31'
;

/* update portal info */
UPDATE dbclk.monthly_agg_site a
SET portal_id = b.portal_id
   ,portal_name = b.portal_name_current
FROM refer.portal_dim b
WHERE process_id = p_process_id
  AND b.keyword = a.portal_keyword
  AND b.dt_expire = '9999-12-31'
;

/* update partner location */
UPDATE dbclk.monthly_agg_site a
SET partner_city = b.city
   ,partner_stateabbr = b.state
FROM verveloc.vrvlocation b
WHERE process_id = p_process_id
  AND b.partner_id = a.partner_id
  AND b.type = 99
;

/* update partner dma */
UPDATE dbclk.monthly_agg_site a
SET dmacode = b.dmacode
   ,dmaname = b.dmaname
FROM staging.t_dma_dim b
WHERE process_id = p_process_id
  AND b.zipcode = a.partner_postal_code
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_agg_site';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_agg_site(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_agg_site(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_agg_site',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_agg_site(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_agg_site_traffic(integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_agg_site_traffic(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_monthly_agg_site_traffic
||
|| Transform routine for content category dimension.
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date_start DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_monthly_agg_site_traffic(%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

SELECT DISTINCT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
FROM dw.date_dim
WHERE date_sk BETWEEN p_date_sk_start AND p_date_sk_end;

SELECT full_date INTO v_full_date_start
FROM dw.date_dim
WHERE date_sk=p_date_sk_start;

/* clear out any previous records */
DELETE FROM dw.monthly_agg_site_traffic WHERE calendar_year_month=v_calendar_year_month;

/* insert records */
/* need to build insert string because we need constants rather than variables 
to take advantage of partition constraint exclusion */
v_cmd:='INSERT INTO dw.monthly_agg_site_traffic (
calendar_year_month,portal_id,partner_id,month_since_2005,portal_name,
partner_name,partner_description,parent1_id,parent1_name,unique_views,
visits,page_views)
SELECT ''' || v_calendar_year_month || ''',c.portal_id,d.partner_id,' || v_month_since_2005::text || ',c.portal_name_current,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current,COUNT(DISTINCT a.uid),
COUNT(DISTINCT (COALESCE(a.uid,'''') || COALESCE(a.session,''''))),SUM(a.page_view_count)
FROM dw.page_view_fact a
INNER JOIN dw.portal_dim c ON a.portal_sk=c.portal_sk
INNER JOIN dw.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN dw.user_agent_dim e ON a.user_agent_sk=e.user_agent_sk
WHERE a.request_type_sk=1
AND e.organic = true
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
AND a.data_file_id <= ' || p_max_data_file_id::text || '
AND d.dtdeleted > ''' || v_full_date_start::text || '''
GROUP BY c.portal_id,d.partner_id,c.portal_name_current,d.name_current,d.description_current,d.parent1_id_current,d.parent1_name_current
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* delete records from historical table */
DELETE FROM dw.monthly_agg_site_traffic_historical WHERE calendar_year_month=v_calendar_year_month;

/* insert records into historical table */
INSERT INTO dw.monthly_agg_site_traffic_historical (
	calendar_year_month,
	portal_id,
	month_since_2005,
	portal_name,
	unique_views,
	visits,
	page_views)
SELECT  a.calendar_year_month,
	a.portal_id,
	a.month_since_2005,
	a.portal_name,
	SUM(a.unique_views), -- Useless.  Rolling up unique counts doesn't work, even across portals.
	SUM(a.visits), -- Ditto
	SUM(a.page_views)
FROM dw.monthly_agg_site_traffic a
WHERE a.calendar_year_month=v_calendar_year_month
GROUP BY a.calendar_year_month,
        a.portal_id,
        a.month_since_2005,
        a.portal_name;

/* update data_file table w/ status */
UPDATE process
SET process_status=v_process_status,
        dt_process_completed=clock_timestamp(),
        dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id;

RAISE DEBUG 'ENDING: % fn_build_monthly_agg_site_traffic(%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
	v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_monthly_agg_site_traffic(%,%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_max_data_file_id,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_agg_site_traffic',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_monthly_agg_site_traffic(p_date_sk_start integer, p_date_sk_end integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_cg_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_cg_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_cg_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: City Grid/City Grid Proxy
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_cg_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_cg_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_cg_performance */
INSERT INTO adnetwork.monthly_cg_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, placement, 
            requests, paid_impressions, clicks, total_estimated_net_earnings, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, estimated_net_earnings, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword, a.placement, 
        0, 0, 0, sum(a.estimated_net_earnings),   
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0,p_process_id
FROM adnetwork.fact_cg_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (20,29) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_cg_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk
                  WHERE aaa.eastern_date_sk = aa.eastern_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.placement
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t;

/* update total yes adresponses */
UPDATE adnetwork.monthly_cg_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.monthly_cg_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update clicks, cost */
UPDATE adnetwork.monthly_cg_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,estimated_net_earnings = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_estimated_net_earnings)::int
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.monthly_cg_performance a
SET estimated_net_earnings = total_estimated_net_earnings
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* insert records : adnetwork.monthly_cg_performance_by_date */
INSERT INTO adnetwork.monthly_cg_performance_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            requests, paid_impressions, clicks, estimated_net_earnings, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date,
        count(distinct a.placement), 0, 0, 0, sum(a.estimated_net_earnings), 
        0, 0, 0, 0, 0, 
	p_process_id
  FROM adnetwork.fact_cg_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

UPDATE adnetwork.monthly_cg_performance_by_date a
SET fullfilled_code_count = COALESCE(b.fullfilled_code_count,0)
   ,fullfilled_code_y = COALESCE(b.fullfilled_code_y,0)
   ,fullfilled_code_n = COALESCE(b.fullfilled_code_n,0)
   ,fullfilled_code_e = COALESCE(b.fullfilled_code_e,0)
   ,fullfilled_code_t = COALESCE(b.fullfilled_code_t,0)
FROM (
	SELECT b.full_date, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
	FROM (
		SELECT b.full_date, c.partner_id
		FROM   adnetwork.fact_cg_performance a
		INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
		INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
		WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY b.full_date, c.partner_id
	) a, (
		SELECT full_date, partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
		FROM   adstraffic.daily_ad_serving_stats a
		WHERE  is_active = true AND ad_network_id IN (20,29) AND partner_id > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY full_date, partner_id
	) b
	WHERE a.full_date = b.full_date
	  AND a.partner_id = b.partner_id
	GROUP BY b.full_date
) b
WHERE a.full_date = b.full_date
  AND a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_cg_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_cg_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_cg_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_cg_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_cg_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_event_stats(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_event_stats(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_event_stats
||
|| Author: Tho HOANG
||
|| Date: 2011-12-01
||
|| Description: 
||     weekly/monthly event tracker statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_event_stats(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 26 OR p_process_config_id > 27 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_event_stats(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=26 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

/* insert records */
INSERT INTO evttracker.monthly_event_stats(
            calendar_year_month, month_since_2005, flight_id, creative_id, 
            event_name, event_count, process_id)
SELECT v_calendar_year_month, v_month_since_2005, 
       a.url_f, a.url_c, c.event_name, count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY a.url_f
,a.url_c
,c.event_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_event_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_event_stats(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_event_stats(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_event_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_event_stats(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_event_stats_by_date(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_event_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_event_stats_by_date
||
|| Author: Tho HOANG
||
|| Date: 2011-12-01
||
|| Description: 
||     weekly/monthly event tracker statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_event_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 26 OR p_process_config_id > 27 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_event_stats_by_date(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=26 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

/* insert records */
INSERT INTO evttracker.monthly_event_stats_by_date(
            calendar_year_month, month_since_2005, full_date, day_of_week, flight_id, creative_id, 
            event_name, event_count, process_id)
SELECT v_calendar_year_month, v_month_since_2005, b.full_date, b.day_of_week,
       a.url_f, a.url_c, c.event_name, count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY b.full_date
,b.day_of_week
,a.url_f
,a.url_c
,c.event_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_event_stats_by_date';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_event_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_event_stats_by_date(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_event_stats_by_date',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_event_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_event_stats_by_hour(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_event_stats_by_hour(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_event_stats_by_hour
||
|| Author: Tho HOANG
||
|| Date: 2011-12-01
||
|| Description: 
||     weekly/monthly event tracker statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_event_stats_by_hour(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 26 OR p_process_config_id > 27 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_event_stats_by_hour(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=26 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

/* insert records */
INSERT INTO evttracker.monthly_event_stats_by_hour(
            calendar_year_month, month_since_2005, hour24_of_day, flight_id, creative_id, 
            event_name, event_count, process_id)
SELECT v_calendar_year_month, v_month_since_2005, d.hour24_of_day,
       a.url_f, a.url_c, c.event_name, count(*), p_process_id
  FROM evttracker.event_tracker_fact a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.event_dim c ON a.event_sk = c.event_sk
INNER JOIN refer.time_dim d ON a.eastern_time_sk = d.time_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY d.hour24_of_day
,a.url_f
,a.url_c
,c.event_name;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_event_stats_by_hour';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_event_stats_by_hour(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_event_stats_by_hour(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_event_stats_by_hour',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_event_stats_by_hour(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_forecast(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_forecast(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_forecast
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly ad serving statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_end_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_forecast(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 16 OR p_process_config_id > 17 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_forecast(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=16 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

SELECT full_date 
INTO   v_end_full_date
FROM   refer.date_dim
WHERE  date_sk=p_end_date_sk;

/* insert records */
INSERT INTO adm.monthly_forecast(
            calendar_year_month, month_since_2005, partner_id, partner_description, 
            parent1_id, parent1_name, 
            portal_id, portal_name, partner_module_id, feature_module_name, 
            display_name, device_type, device_type_id, 
            location_id, country_id, region_id, metro_id, content_category_id, category_name, fullfilled_code_y, 
            start_date, end_date, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
d.partner_id,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
c.partner_module_id,
c.feature_module_name_current,
c.display_name_current,
f.device_type,
CASE 
 WHEN device_type ILIKE '%Android%' THEN 1
 WHEN device_type ILIKE '%BlackBerry%' THEN 2
 WHEN device_type ILIKE '%DoCoMo%' THEN 7
 WHEN device_type ILIKE '%iPad%' THEN 8
 WHEN device_type ILIKE '%iPhone%' THEN 3
 WHEN device_type ILIKE '%PalmWebOS%' THEN 4
 WHEN device_type ILIKE '%Series 60%' THEN 5
 WHEN device_type ILIKE '%Windows Mobile%' THEN 6
 WHEN device_type ILIKE '%Droid Tables%' THEN 9
 WHEN device_type ILIKE '%Other Tables%' THEN 10
 WHEN device_type ILIKE '%Basic Phone%' THEN 11
 WHEN device_type ILIKE '%Non-Mobile Device%' THEN -1
 WHEN device_type ILIKE '%Other smartphones%' THEN 12
 WHEN device_type ILIKE '%Un mapped device%' THEN -2
 WHEN device_type = 'Android' THEN 1
 WHEN device_type = 'iPhone/iPod' THEN 3
 WHEN device_type = 'iPhone MNN Client' THEN 3
 WHEN device_type = 'Verve iPhone Client' THEN 3
 WHEN device_type = 'BlackBerry' THEN 2
 WHEN device_type = 'Freerange MNN Client' THEN 2
 WHEN device_type = 'Basic Phone' THEN 11
 WHEN device_type = 'Android MNN Client' THEN 1
 WHEN device_type = 'Smartphone' THEN -1
 WHEN device_type = 'Nokia WRT Widget' THEN 5
 WHEN device_type = 'Windows Desktop' THEN -1
 WHEN device_type = 'Verve Android Client' THEN 1
 WHEN device_type = 'Palm WebOS Widget' THEN 4
 WHEN device_type = 'iPad MNN Client' THEN 8
 WHEN device_type = 'BlackBerry MNN Client' THEN 2
 WHEN device_type = 'Nokia WRT Widget (Pre-Installed)' THEN 5
 WHEN device_type = 'Verve iPad Client' THEN 8
 WHEN device_type = 'iPad' THEN 8
 WHEN device_type = 'Windows Phone 7 MNN Client' THEN 6
 WHEN device_type = 'Unknown Mobile' THEN -1
 WHEN device_type = 'Macintosh Desktop' THEN -1
 WHEN device_type = 'Windows Phone 7' THEN 6
 WHEN device_type = 'WAP Proxy' THEN -1
 WHEN device_type = 'Maemo' THEN 5
 WHEN device_type = 'Verve BlackBerry Client' THEN 2
 WHEN device_type = 'Media Player' THEN -1
 WHEN device_type = 'Bada' THEN 12
 WHEN device_type = 'Windows Mobile MNN Client' THEN 6
 WHEN device_type = 'Other Desktop' THEN -1
 WHEN device_type = 'E-book Reader' THEN -1
 WHEN device_type = 'Linux Desktop' THEN -1
 WHEN device_type = 'MeeGo MNN Client' THEN 5
 WHEN device_type = 'Toolbar' THEN -1
 WHEN device_type = 'Translator' THEN -1
 WHEN device_type = 'iPhoneOS Framework' THEN 3
 WHEN device_type = 'Other Inorganic' THEN -1
 WHEN device_type = 'BSD Desktop' THEN -1
 WHEN device_type = 'Broward ' THEN -2
 ELSE -2
END as device_type_id,
-1 as location_id, --a.location_id,
a.country_id, 
a.region_id, 
a.metro_id,
b.content_category_id,
b.category_name_current,
sum(fullfilled_code_count) as fullfilled_code_count,
v_start_full_date,
v_end_full_date,
p_process_id
FROM adstraffic.ad_response_fact_stats_forecast a
INNER JOIN refer.content_category_dim b ON a.ad_content_category_sk=b.content_category_sk
INNER JOIN refer.partner_module_dim c ON a.partner_module_sk=c.partner_module_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.user_agent_dim f ON a.user_agent_sk=f.user_agent_sk
WHERE f.organic = true
  AND a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND d.dtdeleted > v_start_full_date
GROUP BY 
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
c.partner_module_id,
c.feature_module_name_current,
c.display_name_current,
f.device_type,
--a.location_id,
a.country_id, 
a.region_id, 
a.metro_id,
b.content_category_id,
b.category_name_current
;

RAISE NOTICE 'UPDATE DTACTIVE, DTDELETED (USE MAX DATE)';
/* dtactive and dtdeleted */
UPDATE adm.monthly_forecast a
SET partner_dtactive = (SELECT MAX(dtactive)::date FROM refer.partner_dim b where b.partner_id = a.partner_id GROUP BY b.partner_id)
,partner_dtdeleted = (SELECT MAX(dtdeleted)::date FROM refer.partner_dim b where b.partner_id = a.partner_id GROUP BY b.partner_id)
WHERE process_id = p_process_id;

RAISE NOTICE 'UPDATE MIN DATE, MAX DATE';
/* min_date and max_date */
UPDATE adm.monthly_forecast a
SET 
min_date = CASE 
 WHEN partner_dtactive < start_date THEN start_date
 ELSE partner_dtactive
END
,max_date = CASE 
 WHEN partner_dtdeleted > end_date THEN end_date
 ELSE partner_dtdeleted
END
WHERE process_id = p_process_id;

RAISE NOTICE 'CALCULATE IMPRESSION';
/* impressions */
UPDATE adm.monthly_forecast a
SET impressions = fullfilled_code_y*1.0/ (max_date - min_date + 1),
monthly_impressions = ((fullfilled_code_y*1.0 / (max_date - min_date + 1)) * 30),
num_of_days = max_date - min_date + 1
WHERE process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_forecast';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_forecast(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_forecast(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_forecast',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_forecast(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_ga_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_ga_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_ga_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Google AdSense
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_ga_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_ga_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_ga_performance */
INSERT INTO adnetwork.monthly_ga_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, portal_id, portal_name, portal_keyword,
            site, ad_requests, paid_impressions, clicks, estimated_earnings, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT v_calendar_year_month, v_month_since_2005, 
       partner_id, partner_name, partner_description, parent1_id, parent1_name, 
       partner_keyword, portal_id, portal_name, portal_keyword, site, 
       sum(ad_requests), sum(paid_impressions), sum(clicks), sum(estimated_earnings), 
       COALESCE(sum(case fullfilled_code_count when -1 then null else fullfilled_code_count end), -1), 
       COALESCE(sum(case fullfilled_code_y when -1 then null else fullfilled_code_y end), -1), 
       COALESCE(sum(case fullfilled_code_n when -1 then null else fullfilled_code_n end), -1), 
       COALESCE(sum(case fullfilled_code_e when -1 then null else fullfilled_code_e end), -1), 
       COALESCE(sum(case fullfilled_code_t when -1 then null else fullfilled_code_t end), -1), 
       p_process_id
  FROM adnetwork.daily_ga_performance
WHERE eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY partner_id, partner_name, partner_description, parent1_id, parent1_name, 
       partner_keyword, portal_id, portal_name, portal_keyword, site;
/*
INSERT INTO adnetwork.monthly_ga_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, portal_id, portal_name, portal_keyword,
            site, ad_requests, paid_impressions, clicks, estimated_earnings, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        a.site, sum(a.ad_requests), sum((a.ad_requests*a.coverage/100)::integer) as paid_impressions, sum(a.clicks), sum(a.estimated_earnings), 
        -1, -1, -1, -1, -1, p_process_id
  FROM adnetwork.fact_ga_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site;

UPDATE adnetwork.monthly_ga_performance a
SET fullfilled_code_count = COALESCE(b.fullfilled_code_count,-1)
   ,fullfilled_code_y = COALESCE(b.fullfilled_code_y,-1)
   ,fullfilled_code_n = COALESCE(b.fullfilled_code_n,-1)
   ,fullfilled_code_e = COALESCE(b.fullfilled_code_e,-1)
   ,fullfilled_code_t = COALESCE(b.fullfilled_code_t,-1)
FROM (
	SELECT b.partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
	FROM (
		SELECT b.full_date, c.partner_id
		FROM   adnetwork.fact_ga_performance a
		INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
		INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
		WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY b.full_date, c.partner_id
	) a, (
		SELECT full_date, partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
		FROM   adstraffic.daily_ad_serving_stats a
		WHERE  is_active = true AND ad_network_id = 5 AND partner_id > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY full_date, partner_id
	) b
	WHERE a.full_date = b.full_date
	  AND a.partner_id = b.partner_id
	GROUP BY b.partner_id
) b
WHERE a.partner_id = b.partner_id
  AND a.process_id = p_process_id;
*/
/* insert records : adnetwork.monthly_ga_performance_by_date */
INSERT INTO adnetwork.monthly_ga_performance_by_date(
            calendar_year_month, month_since_2005, full_date, ad_requests, 
            paid_impressions, clicks, estimated_earnings, site_counts, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id)
SELECT v_calendar_year_month, v_month_since_2005, full_date, 
       sum(ad_requests), sum(paid_impressions), sum(clicks), sum(estimated_earnings), count(distinct site),
       COALESCE(sum(case fullfilled_code_count when -1 then null else fullfilled_code_count end), -1), 
       COALESCE(sum(case fullfilled_code_y when -1 then null else fullfilled_code_y end), -1), 
       COALESCE(sum(case fullfilled_code_n when -1 then null else fullfilled_code_n end), -1), 
       COALESCE(sum(case fullfilled_code_e when -1 then null else fullfilled_code_e end), -1), 
       COALESCE(sum(case fullfilled_code_t when -1 then null else fullfilled_code_t end), -1), 
       p_process_id
  FROM adnetwork.daily_ga_performance
WHERE eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY full_date;
/*
INSERT INTO adnetwork.monthly_ga_performance_by_date(
            calendar_year_month, month_since_2005, full_date, ad_requests, 
            paid_impressions, clicks, estimated_earnings, site_counts, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date,
        sum(a.ad_requests), sum((a.ad_requests*a.coverage/100)::integer) as paid_impressions, sum(a.clicks), sum(a.estimated_earnings), count(distinct site),
        -1, -1, -1, -1, -1, p_process_id
  FROM adnetwork.fact_ga_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

UPDATE adnetwork.monthly_ga_performance_by_date a
SET fullfilled_code_count = COALESCE(b.fullfilled_code_count,-1)
   ,fullfilled_code_y = COALESCE(b.fullfilled_code_y,-1)
   ,fullfilled_code_n = COALESCE(b.fullfilled_code_n,-1)
   ,fullfilled_code_e = COALESCE(b.fullfilled_code_e,-1)
   ,fullfilled_code_t = COALESCE(b.fullfilled_code_t,-1)
FROM (
	SELECT b.full_date, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
	FROM (
		SELECT b.full_date, c.partner_id
		FROM   adnetwork.fact_ga_performance a
		INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
		INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
		WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY b.full_date, c.partner_id
	) a, (
		SELECT full_date, partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
		FROM   adstraffic.daily_ad_serving_stats a
		WHERE  is_active = true AND ad_network_id = 5 AND partner_id > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY full_date, partner_id
	) b
	WHERE a.full_date = b.full_date
	  AND a.partner_id = b.partner_id
	GROUP BY b.full_date
) b
WHERE a.full_date = b.full_date
  AND a.process_id = p_process_id;
*/

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_ga_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_ga_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_ga_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_ga_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_ga_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_it_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_it_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_it_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: iTunes
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_it_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_it_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_it_performance */
INSERT INTO adnetwork.monthly_it_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, app_name, requests, impressions, 
            clicks, revenue, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        a.app_name, sum(requests), sum(impressions), 0, sum(a.revenue), 
	p_process_id
  FROM adnetwork.fact_it_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.app_name;

/* insert records : adnetwork.monthly_it_performance_by_date */
INSERT INTO adnetwork.monthly_it_performance_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            requests, impressions, clicks, revenue, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date,
        count(distinct a.app_name), sum(requests), sum(impressions), 0, sum(a.revenue), p_process_id
  FROM adnetwork.fact_it_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_it_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_it_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_it_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_it_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_it_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_jt_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_jt_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_jt_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: JumpTap
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_jt_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_jt_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_jt_performance */
INSERT INTO adnetwork.monthly_jt_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, site, 
            total_requests, total_paid_impressions, total_clicks, total_net_revenue, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t,
            total_fullfilled_code_y, fullfilled_code_y_rate, requests, paid_impressions, clicks, net_revenue, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword,
        a.site, sum(a.requests), sum(a.paid_impressions), sum(a.clicks), sum(a.net_revenue),  
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.fact_jt_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (11) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_jt_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk
                  WHERE aaa.eastern_date_sk = aa.eastern_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND (a.requests > 0 or a.paid_impressions > 0 or a.clicks > 0 or a.net_revenue > 0)
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t;

/* update total yes adresponses */
UPDATE adnetwork.monthly_jt_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.monthly_jt_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.monthly_jt_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,paid_impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_paid_impressions)::int
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,net_revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_net_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.monthly_jt_performance a
SET requests = total_requests
   ,paid_impressions = total_paid_impressions
   ,clicks = total_clicks
   ,net_revenue = total_net_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;


/* insert records : adnetwork.monthly_jt_performance_by_date */
INSERT INTO adnetwork.monthly_jt_performance_by_date(
            calendar_year_month, month_since_2005, full_date, requests, paid_impressions, 
            clicks, net_revenue, site_counts, fullfilled_code_count, fullfilled_code_y, 
            fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date,
        sum(a.requests), sum(a.paid_impressions), sum(a.clicks), sum(a.net_revenue), count(distinct site),
        0, 0, 0, 0, 0, p_process_id
  FROM adnetwork.fact_jt_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

UPDATE adnetwork.monthly_jt_performance_by_date a
SET fullfilled_code_count = COALESCE(b.fullfilled_code_count,0)
   ,fullfilled_code_y = COALESCE(b.fullfilled_code_y,0)
   ,fullfilled_code_n = COALESCE(b.fullfilled_code_n,0)
   ,fullfilled_code_e = COALESCE(b.fullfilled_code_e,0)
   ,fullfilled_code_t = COALESCE(b.fullfilled_code_t,0)
FROM (
	SELECT b.full_date, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
	FROM (
		SELECT b.full_date, c.partner_id
		FROM   adnetwork.fact_jt_performance a
		INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
		INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
		WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY b.full_date, c.partner_id
	) a, (
		SELECT full_date, partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
		FROM   adstraffic.daily_ad_serving_stats a
		WHERE  is_active = true AND ad_network_id = 11 AND partner_id > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY full_date, partner_id
	) b
	WHERE a.full_date = b.full_date
	  AND a.partner_id = b.partner_id
	GROUP BY b.full_date
) b
WHERE a.full_date = b.full_date
  AND a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_jt_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_jt_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_jt_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_jt_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_jt_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_mm_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_mm_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_mm_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Millennial Media
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_mm_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_mm_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_mm_performance */
INSERT INTO adnetwork.monthly_mm_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, portal_id, portal_name, portal_keyword,
            id, "name", requests, ads_served, clicks, net_revenue, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id)
SELECT v_calendar_year_month, v_month_since_2005, 
       partner_id, partner_name, partner_description, parent1_id, parent1_name, 
       partner_keyword, portal_id, portal_name, portal_keyword, id, "name", 
       sum(requests), sum(ads_served), sum(clicks), sum(net_revenue),
       COALESCE(sum(case fullfilled_code_count when -1 then null else fullfilled_code_count end), 0), 
       COALESCE(sum(case fullfilled_code_y when -1 then null else fullfilled_code_y end), 0), 
       COALESCE(sum(case fullfilled_code_n when -1 then null else fullfilled_code_n end), 0), 
       COALESCE(sum(case fullfilled_code_e when -1 then null else fullfilled_code_e end), 0), 
       COALESCE(sum(case fullfilled_code_t when -1 then null else fullfilled_code_t end), 0), 
       p_process_id
  FROM adnetwork.daily_mm_performance
WHERE eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY partner_id, partner_name, partner_description, parent1_id, parent1_name, 
       partner_keyword, portal_id, portal_name, portal_keyword, id, "name";

/* insert records : adnetwork.monthly_mm_performance_by_date */
INSERT INTO adnetwork.monthly_mm_performance_by_date(
            calendar_year_month, month_since_2005, full_date, requests, ads_served, 
            clicks, net_revenue, site_counts, fullfilled_code_count, fullfilled_code_y, 
            fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, process_id)
SELECT v_calendar_year_month, v_month_since_2005, full_date, 
       sum(requests), sum(ads_served), sum(clicks), sum(net_revenue), count(distinct "name"),
       COALESCE(sum(case fullfilled_code_count when -1 then null else fullfilled_code_count end), 0), 
       COALESCE(sum(case fullfilled_code_y when -1 then null else fullfilled_code_y end), 0), 
       COALESCE(sum(case fullfilled_code_n when -1 then null else fullfilled_code_n end), 0), 
       COALESCE(sum(case fullfilled_code_e when -1 then null else fullfilled_code_e end), 0), 
       COALESCE(sum(case fullfilled_code_t when -1 then null else fullfilled_code_t end), 0), 
       p_process_id
  FROM adnetwork.daily_mm_performance
WHERE eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
GROUP BY full_date;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_mm_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_mm_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_mm_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_mm_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_mm_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_mx_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_mx_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_mx_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: Marchex/Marchex Proxy
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_mx_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_mx_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_mx_performance */
INSERT INTO adnetwork.monthly_mx_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, site_name, 
            total_ad_requests, paid_impressions, total_clicks, total_cost, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            total_fullfilled_code_y, fullfilled_code_y_rate, clicks, "cost", process_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword, a.site_name, 
        0, 0, sum(a.clicks), sum(a.cost),   
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0, 0, p_process_id
FROM adnetwork.fact_mx_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (21,28) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_mx_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk
                  WHERE aaa.eastern_date_sk = aa.eastern_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND (a.clicks > 0 or a.cost > 0)
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.site_name
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t;

/* update total yes adresponses */
UPDATE adnetwork.monthly_mx_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.monthly_mx_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update clicks, cost */
UPDATE adnetwork.monthly_mx_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
   ,"cost" = (fullfilled_code_y::float/total_fullfilled_code_y)*total_cost
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.monthly_mx_performance a
SET clicks = total_clicks
   ,"cost" = total_cost
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* insert records : adnetwork.monthly_mx_performance_by_date */
INSERT INTO adnetwork.monthly_mx_performance_by_date(
            calendar_year_month, month_since_2005, full_date,
            total_ad_requests, paid_impressions, clicks, "cost", site_counts, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            process_id)
SELECT  v_calendar_year_month, v_month_since_2005,b.full_date,
	0, 0,
	sum(a.clicks), sum(a.cost), count(distinct site_name),
	0, 0, 0, 0, 0, p_process_id
FROM adnetwork.fact_mx_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

UPDATE adnetwork.monthly_mx_performance_by_date a
SET fullfilled_code_count = COALESCE(b.fullfilled_code_count,0)
   ,fullfilled_code_y = COALESCE(b.fullfilled_code_y,0)
   ,fullfilled_code_n = COALESCE(b.fullfilled_code_n,0)
   ,fullfilled_code_e = COALESCE(b.fullfilled_code_e,0)
   ,fullfilled_code_t = COALESCE(b.fullfilled_code_t,0)
FROM (
	SELECT b.full_date, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
	FROM (
		SELECT b.full_date, c.partner_id
		FROM   adnetwork.fact_mx_performance a
		INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
		INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
		WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY b.full_date, c.partner_id
	) a, (
		SELECT full_date, partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
		FROM   adstraffic.daily_ad_serving_stats a
		WHERE  is_active = true AND ad_network_id IN (21,28) AND partner_id > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY full_date, partner_id
	) b
	WHERE a.full_date = b.full_date
	  AND a.partner_id = b.partner_id
	GROUP BY b.full_date
) b
WHERE a.full_date = b.full_date
  AND a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_mx_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_mx_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_mx_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_mx_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_mx_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_sp_blue_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_sp_blue_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_sp_blue_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Superpages Blue
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_sp_blue_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_sp_blue_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.monthly_sp_blue_performance ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_sp_blue_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            verve_revenue_share, total_ppc_revenue, ppc_revenue, revenue, requests, paid_impressions, clicks, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0.45, 0, 0, 0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk=b.partner_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id IN (26,30) AND a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.portal_dim d ON d.portal_sk = a.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY b.partner_id
,b.name_current
,b.description_current
,b.parent1_id_current
,b.parent1_name_current
,b.keyword
,d.portal_id
,d.portal_name_current
,d.keyword;

/* update total yes adresponses */
UPDATE adnetwork.monthly_sp_blue_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_sp_blue_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.monthly_sp_blue_performance a
SET total_ppc_revenue = b.ppc_revenue
FROM (
       SELECT sum(aa.ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_sp_daily_sum aa
       WHERE  ad_network_id IN (26,30)
         AND  eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id IN (26,30) AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_sp_blue_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,ppc_revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_ppc_revenue
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_ppc_revenue*verve_revenue_share
WHERE a.process_id = p_process_id;

/* ==================================================== */
/* ===== adnetwork.monthly_sp_blue_performance_by_date ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_sp_blue_performance_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            verve_revenue_share, total_ppc_revenue, ppc_revenue, revenue, requests, paid_impressions, clicks, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date, count(distinct d.partner_id),
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0.45, 0, 0, 0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id IN (26,30) AND a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date;

/* update total yes adresponses */
UPDATE adnetwork.monthly_sp_blue_performance_by_date a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_sp_blue_performance_by_date 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_sp_blue_performance_by_date a
SET ppc_revenue = b.ppc_revenue
FROM (
       SELECT bb.full_date, sum(aa.ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_sp_daily_sum aa
       INNER JOIN refer.date_dim bb ON aa.eastern_date_sk = bb.date_sk
       WHERE  aa.ad_network_id IN (26,30)
         AND  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
       GROUP BY bb.full_date
) b 
WHERE a.full_date = b.full_date AND a.process_id = p_process_id;


/* update total_revenue */
UPDATE adnetwork.monthly_sp_blue_performance_by_date a
SET total_ppc_revenue = b.ppc_revenue
FROM (
       SELECT sum(aa.ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_sp_daily_sum aa
       WHERE  aa.ad_network_id IN (26,30)
         AND  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id IN (26,30) AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update fullfilled_code_y_rate */
UPDATE adnetwork.monthly_sp_blue_performance_by_date a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,revenue = ppc_revenue*verve_revenue_share
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_sp_blue_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_sp_blue_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_sp_blue_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_sp_blue_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_sp_blue_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_sp_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_sp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_sp_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Superpages
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_sp_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_sp_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.monthly_sp_performance ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_sp_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, 
            fullfilled_code_y_rate, total_revenue, revenue, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y,
        0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk=b.partner_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 24 AND a.ad_network_sk=c.ad_network_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY 
b.partner_id,
b.name_current,
b.description_current,
b.parent1_id_current,
b.parent1_name_current,
b.keyword;

/* update total yes adresponses */
UPDATE adnetwork.monthly_sp_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_sp_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.monthly_sp_performance a
SET total_revenue = b.ppc_revenue
FROM (
       SELECT sum(ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_sp_daily_sum aa
       WHERE  ad_network_id = 24
         AND  eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 24 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_sp_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id;

/* ==================================================== */
/* ===== adnetwork.monthly_sp_performance_by_date ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_sp_performance_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, 
            fullfilled_code_y_rate, total_revenue, revenue, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date, count(distinct d.partner_id),
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y,
        0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 24 AND a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date;

/* update total yes adresponses */
UPDATE adnetwork.monthly_sp_performance_by_date a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_sp_performance_by_date 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_sp_performance_by_date a
SET revenue = b.ppc_revenue
FROM (
       SELECT bb.full_date, sum(aa.ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_sp_daily_sum aa
       INNER JOIN refer.date_dim bb ON aa.eastern_date_sk = bb.date_sk
       WHERE  aa.ad_network_id = 24
         AND  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
       GROUP BY bb.full_date
) b 
WHERE a.full_date = b.full_date AND a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.monthly_sp_performance_by_date a
SET total_revenue = b.ppc_revenue
FROM (
       SELECT sum(aa.ppc_revenue) as ppc_revenue
       FROM   adnetwork.fact_sp_daily_sum aa
       WHERE  aa.ad_network_id = 24
         AND  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 24 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update fullfilled_code_y_rate */
UPDATE adnetwork.monthly_sp_performance_by_date a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_sp_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_sp_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_sp_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_build_monthly_sp_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_sp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_unfilled_stats(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_unfilled_stats(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_unfilled_stats
||
|| Author: Tho HOANG
||
|| Date: 2012-02-03
||
|| Description: 
||     weekly/monthly unfilled statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_unfilled_stats(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_unfilled_stats(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_unfilled_stats(
            calendar_year_month, month_since_2005, ad_network_id, ad_network_name, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, unfilled_count, location_quality_100, 
            process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_unfilled_stats';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_unfilled_stats(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_unfilled_stats(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_unfilled_stats',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_unfilled_stats(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_unfilled_stats_by_content_category(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_unfilled_stats_by_content_category(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_unfilled_stats_by_content_category
||
|| Author: Tho HOANG
||
|| Date: 2012-02-03
||
|| Description: 
||     weekly/monthly unfilled statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_unfilled_stats_by_content_category(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_unfilled_stats_by_content_category(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_unfilled_stats_by_content_category(
            calendar_year_month, month_since_2005, ad_network_id, ad_network_name, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, content_category_id, category_name, unfilled_count, 
            location_quality_100, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.content_category_dim f ON a.ad_content_category_sk=f.content_category_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.content_category_id,
f.category_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_unfilled_stats_by_content_category';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_unfilled_stats_by_content_category(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_unfilled_stats_by_content_category(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_unfilled_stats_by_content_category',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_unfilled_stats_by_content_category(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_unfilled_stats_by_date(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_build_monthly_unfilled_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_unfilled_stats_by_date
||
|| Author: Tho HOANG
||
|| Date: 2012-02-03
||
|| Description: 
||     weekly/monthly unfilled statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_unfilled_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_unfilled_stats_by_date(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_unfilled_stats_by_date(
            calendar_year_month, month_since_2005, full_date, ad_network_id, 
            ad_network_name, unfilled_count, location_quality_100, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
b.full_date,
c.ad_network_id,
c.ad_network_name_current,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date,
c.ad_network_id,
c.ad_network_name_current
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_unfilled_stats_by_date';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_unfilled_stats_by_date(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_unfilled_stats_by_date(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_unfilled_stats_by_date',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_unfilled_stats_by_date(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO song;

--
-- Name: fn_build_monthly_unfilled_stats_by_device(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_unfilled_stats_by_device(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_unfilled_stats_by_device
||
|| Author: Tho HOANG
||
|| Date: 2012-02-03
||
|| Description: 
||     weekly/monthly unfilled statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_unfilled_stats_by_device(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_unfilled_stats_by_device(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_unfilled_stats_by_device(
            calendar_year_month, month_since_2005, ad_network_id, ad_network_name, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, organic, device_type, device_manufacturer, 
            unfilled_count, location_quality_100, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
INNER JOIN refer.user_agent_dim f ON a.user_agent_sk=f.user_agent_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
f.organic,
f.device_type,
f.device_manufacturer
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_unfilled_stats_by_device';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_unfilled_stats_by_device(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_unfilled_stats_by_device(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_unfilled_stats_by_device',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_unfilled_stats_by_device(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_unfilled_stats_by_dma(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_unfilled_stats_by_dma(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_unfilled_stats_by_dma
||
|| Author: Tho HOANG
||
|| Date: 2012-02-03
||
|| Description: 
||     weekly/monthly unfilled statistics loading
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_unfilled_stats_by_dma(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 11 OR p_process_config_id > 12 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_unfilled_stats_by_dma(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=11 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records */
INSERT INTO adstraffic.monthly_unfilled_stats_by_dma(
            calendar_year_month, month_since_2005, ad_network_id, ad_network_name, 
            partner_id, partner_name, partner_description, parent1_id, parent1_name, 
            portal_id, portal_name, metro_id, metro_name, country_id, country_alpha2, 
            country_name, unfilled_count, location_quality_100, process_id)
SELECT 
v_calendar_year_month,
v_month_since_2005,
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
a.metro_id,
COALESCE(f.name,'N/A') as metro_name,
a.country_id,
COALESCE(g.alpha2,'N/A') as country_alpha2,
COALESCE(g.name,'N/A') as country_name,
sum(fullfilled_code_count) as unfilled_count,
sum(location_quality_100) as location_quality_100,
p_process_id
FROM adstraffic.ad_response_fact_stats_unfilled a
INNER JOIN refer.ad_network_dim c ON a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
INNER JOIN refer.portal_dim e ON a.portal_sk=e.portal_sk
LEFT JOIN verveloc.metro f ON f.id = a.metro_id
LEFT JOIN verveloc.country g ON g.id = a.country_id
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
c.ad_network_id,
c.ad_network_name_current,
d.partner_id,
d.name_current,
d.description_current,
d.parent1_id_current,
d.parent1_name_current,
e.portal_id,
e.portal_name_current,
a.metro_id,
f.name,
a.country_id,
g.alpha2,
g.name
;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_unfilled_stats_by_dma';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_unfilled_stats_by_dma(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_unfilled_stats_by_dma(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_unfilled_stats_by_dma',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_unfilled_stats_by_dma(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_wh_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_wh_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_wh_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01/2012-02-07
||
|| Description: 
||     weekly/monthly adnetwork loading: WHERE/WHERE HTML
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_wh_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_wh_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* insert records : adnetwork.monthly_wh_performance */
INSERT INTO adnetwork.monthly_wh_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword, 
            portal_id, portal_name, portal_keyword, site_keyword,
            total_requests, total_filled, total_clicked, total_revenue, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, total_fullfilled_code_y, fullfilled_code_y_rate,
            requests, filled, clicked, revenue, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, 
        c.partner_id, c.name_current, c.description_current, c.parent1_id_current, c.parent1_name_current, c.keyword as partner_keyword,
        COALESCE(d.portal_id, -200), COALESCE(d.portal_name_current, 'N/A (key)'), COALESCE(d.keyword, 'N/A') as portal_keyword,
        a.partner_keyword as site_keyword, 
        sum(a.requests), sum(a.filled), sum(a.clicked), sum(a.revenue),
	COALESCE((d.fullfilled_code_count),0) as fullfilled_code_count, 
	COALESCE((d.fullfilled_code_y),0) as fullfilled_code_y, 
	COALESCE((d.fullfilled_code_n),0) as fullfilled_code_n, 
	COALESCE((d.fullfilled_code_e),0) as fullfilled_code_e, 
	COALESCE((d.fullfilled_code_t),0) as fullfilled_code_t, 
        0, 0, 0, 0, 0, 0, p_process_id
FROM adnetwork.fact_wh_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
LEFT JOIN (
    SELECT aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword,
           sum(aa.fullfilled_code_count) as fullfilled_code_count, 
	   sum(aa.fullfilled_code_y) as fullfilled_code_y, 
	   sum(aa.fullfilled_code_n) as fullfilled_code_n, 
	   sum(aa.fullfilled_code_e) as fullfilled_code_e, 
	   sum(aa.fullfilled_code_t) as fullfilled_code_t
    FROM adstraffic.daily_ad_serving_stats aa
    INNER JOIN refer.portal_dim bb ON bb.dt_expire = '9999-12-31' and bb.portal_id = aa.portal_id
    WHERE aa.is_active = true AND aa.ad_network_id IN (23,25) AND aa.partner_id > 0 AND aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
      AND EXISTS (SELECT 1 
                  FROM adnetwork.fact_wh_performance aaa 
                  INNER JOIN refer.partner_dim bbb ON aaa.partner_sk = bbb.partner_sk
                  WHERE aaa.eastern_date_sk = aa.eastern_date_sk
                    AND bbb.partner_id = aa.partner_id)
    GROUP BY aa.partner_id, aa.portal_id, bb.portal_name_current, bb.keyword
) d ON d.partner_id = c.partner_id
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND (a.requests > 0 or a.filled > 0 or a.clicked > 0 or a.revenue > 0)
  AND c.dtdeleted > v_start_full_date
GROUP BY c.partner_id
,c.name_current
,c.description_current
,c.parent1_id_current
,c.parent1_name_current
,c.keyword
,d.portal_id
,d.portal_name_current
,d.keyword
,a.partner_keyword
,d.fullfilled_code_count
,d.fullfilled_code_y
,d.fullfilled_code_n
,d.fullfilled_code_e
,d.fullfilled_code_t;

/* update total yes adresponses */
UPDATE adnetwork.monthly_wh_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
    SELECT partner_id, sum(fullfilled_code_y) as total_fullfilled_code_y 
    FROM adnetwork.monthly_wh_performance 
    WHERE process_id = p_process_id
    GROUP BY partner_id) b
WHERE a.process_id = p_process_id AND a.partner_id = b.partner_id;

/* update requests, filled, clicked, revenue */
UPDATE adnetwork.monthly_wh_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
   ,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
   ,filled = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_filled)::int
   ,clicked = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicked)::int
   ,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y > 0;

/* unmapped partner/portal, replace requests, filled, clicked, revenue by total */
UPDATE adnetwork.monthly_wh_performance a
SET requests = total_requests
   ,filled = total_filled
   ,clicked = total_clicked
   ,revenue = total_revenue
WHERE a.process_id = p_process_id AND a.total_fullfilled_code_y = 0 and portal_id < 0;

/* insert records : adnetwork.monthly_wh_performance_by_date */
INSERT INTO adnetwork.monthly_wh_performance_by_date(
            calendar_year_month, month_since_2005, full_date, 
            requests, filled, clicked, revenue, site_counts, 
            fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, 
            fullfilled_code_e, fullfilled_code_t, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date,
        sum(a.requests), sum(a.filled), sum(a.clicked), sum(a.revenue), count(distinct partner_keyword), 
        0, 0, 0, 0, 0, p_process_id
  FROM adnetwork.fact_wh_performance a
INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
  AND (a.requests > 0 or a.filled > 0 or a.clicked > 0 or a.revenue > 0)
AND c.dtdeleted > v_start_full_date
GROUP BY b.full_date;

UPDATE adnetwork.monthly_wh_performance_by_date a
SET fullfilled_code_count = COALESCE(b.fullfilled_code_count,0)
   ,fullfilled_code_y = COALESCE(b.fullfilled_code_y,0)
   ,fullfilled_code_n = COALESCE(b.fullfilled_code_n,0)
   ,fullfilled_code_e = COALESCE(b.fullfilled_code_e,0)
   ,fullfilled_code_t = COALESCE(b.fullfilled_code_t,0)
FROM (
	SELECT b.full_date, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
	FROM (
		SELECT b.full_date, c.partner_id
		FROM   adnetwork.fact_wh_performance a
		INNER JOIN refer.date_dim b ON a.eastern_date_sk = b.date_sk
		INNER JOIN refer.partner_dim c ON a.partner_sk = c.partner_sk
		WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY b.full_date, c.partner_id
	) a, (
		SELECT full_date, partner_id, sum(fullfilled_code_count) as fullfilled_code_count, 
			sum(fullfilled_code_y) as fullfilled_code_y, 
			sum(fullfilled_code_n) as fullfilled_code_n, 
			sum(fullfilled_code_e) as fullfilled_code_e, 
			sum(fullfilled_code_t) as fullfilled_code_t
		FROM   adstraffic.daily_ad_serving_stats a
		WHERE  is_active = true AND ad_network_id IN (23,25) AND partner_id > 0 AND eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
		GROUP BY full_date, partner_id
	) b
	WHERE a.full_date = b.full_date
	  AND a.partner_id = b.partner_id
	GROUP BY b.full_date
) b
WHERE a.full_date = b.full_date
  AND a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_wh_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_wh_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_wh_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_wh_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_wh_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_yp_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_yp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_yp_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: Yellowpages
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_yp_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_yp_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.monthly_yp_performance ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_yp_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_requests, requests, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk = b.partner_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 27 AND a.ad_network_sk = c.ad_network_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY b.partner_id
,b.name_current
,b.description_current
,b.parent1_id_current
,b.parent1_name_current
,b.keyword
,d.portal_id
,d.portal_name_current
,d.keyword;

/* update total_fullfilled_code_y */
UPDATE adnetwork.monthly_yp_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_yp_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total requests, impressions, clicks, revenue */
UPDATE adnetwork.monthly_yp_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM (
       SELECT sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_yp_daily_sum aa
       WHERE  eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  site_name = 'Verve (iPhone)'
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 27 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_yp_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id;

/* ==================================================== */
/* ===== adnetwork.monthly_yp_performance_by_date ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_yp_performance_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, 
            fullfilled_code_y_rate, total_revenue, revenue, total_requests, requests, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date, count(distinct d.partner_id),
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 27 AND a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date;

/* update total_fullfilled_code_y */
UPDATE adnetwork.monthly_yp_performance_by_date a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_yp_performance_by_date 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update requests, impressions, clicks, revenue */
UPDATE adnetwork.monthly_yp_performance_by_date a
SET requests = b.requests
   ,impressions = b.impressions
   ,clicks = b.clicks
   ,revenue = b.est_earnings
FROM (
       SELECT bb.full_date, sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_yp_daily_sum aa
       INNER JOIN refer.date_dim bb ON aa.eastern_date_sk = bb.date_sk
       WHERE  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  aa.site_name = 'Verve (iPhone)'
       GROUP BY bb.full_date
) b 
WHERE a.full_date = b.full_date AND a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.monthly_yp_performance_by_date a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM (
       SELECT sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_yp_daily_sum aa
       WHERE  eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  aa.site_name = 'Verve (iPhone)'
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 27 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_yp_performance_by_date a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_yp_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_yp_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_yp_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_yp_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_yp_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_monthly_yp_sb_performance(integer, integer, integer, character varying, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_monthly_yp_sb_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_monthly_yp_sb_performance
||
|| Author: Tho HOANG
||
|| Date: 2011-04-01
||
|| Description: 
||     weekly/monthly adnetwork loading: AT&T Static Banner - Yellowpages
||
|| Parameters: 
||     - IN  p_start_date_sk        -- integer
||        start date
||     - IN  p_end_date_sk          -- integer
||        end date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character varying
||        current process status
||     - IN  p_process_config_id   -- integer
||        process config id
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

 v_process_status 		control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status 	control.process.process_status%TYPE;
 v_calendar_year_month 		VARCHAR(32);
 v_start_full_date 		DATE;
 v_month_since_2005 		SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_monthly_yp_sb_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

IF p_process_config_id < 23 OR p_process_config_id > 24 THEN
	RAISE DEBUG 'ENDING: % fn_build_monthly_yp_sb_performance(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN p_process_status;
END IF;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get month info */
IF p_process_config_id=23 THEN
	v_calendar_year_month:='30 day';
	v_month_since_2005:=32767;
ELSE
	SELECT calendar_year_month,month_since_2005 INTO v_calendar_year_month,v_month_since_2005
	FROM   refer.month_dim
	WHERE  date_sk_start=p_start_date_sk
	  AND  date_sk_end=p_end_date_sk
	LIMIT 1;
END IF;

SELECT full_date 
INTO   v_start_full_date
FROM   refer.date_dim
WHERE  date_sk=p_start_date_sk;

/* ============================================ */
/* ===== adnetwork.monthly_yp_sb_performance ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_yp_sb_performance(
            calendar_year_month, month_since_2005, partner_id, partner_name, 
            partner_description, parent1_id, parent1_name, partner_keyword,
            portal_id, portal_name, portal_keyword, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, fullfilled_code_y_rate, 
            total_revenue, revenue, total_requests, requests, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.partner_id, b.name_current,
        b.description_current, b.parent1_id_current, b.parent1_name_current, b.keyword as partner_keyword,
        d.portal_id, d.portal_name_current, d.keyword as portal_keyword,
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.partner_dim b ON a.partner_sk = b.partner_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 32 AND a.ad_network_sk = c.ad_network_sk
INNER JOIN refer.portal_dim d ON a.portal_sk = d.portal_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND b.dtdeleted > v_start_full_date
GROUP BY b.partner_id
,b.name_current
,b.description_current
,b.parent1_id_current
,b.parent1_name_current
,b.keyword
,d.portal_id
,d.portal_name_current
,d.keyword;

/* update total yes adresponses */
UPDATE adnetwork.monthly_yp_sb_performance a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_yp_sb_performance 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.monthly_yp_sb_performance a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM (
       SELECT sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_yp_daily_sum aa
       WHERE  eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  site_name = 'Verve Wireless (Mobile Web) - Lower'
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 32 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_yp_sb_performance a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
,requests = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_requests)::int
,impressions = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_impressions)::int
,clicks = ((fullfilled_code_y::float/total_fullfilled_code_y)*total_clicks)::int
,revenue = (fullfilled_code_y::float/total_fullfilled_code_y)*total_revenue
WHERE a.process_id = p_process_id;

/* ==================================================== */
/* ===== adnetwork.monthly_yp_sb_performance_by_date ===== */

/* insert adcel responses data */
INSERT INTO adnetwork.monthly_yp_sb_performance_by_date(
            calendar_year_month, month_since_2005, full_date, site_counts, 
            fullfilled_code_count, fullfilled_code_y, total_fullfilled_code_y, 
            fullfilled_code_y_rate, total_revenue, revenue, total_requests, requests, total_impressions, impressions, total_clicks, clicks, process_id)
SELECT  v_calendar_year_month, v_month_since_2005, b.full_date, count(distinct d.partner_id),
        sum(fullfilled_code_count) as fullfilled_code_count, sum(fullfilled_code_y) as fullfilled_code_y,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, p_process_id
FROM adstraffic.ad_response_fact_stats_01 a
INNER JOIN refer.date_dim b ON a.eastern_date_sk=b.date_sk
INNER JOIN refer.ad_network_dim c ON c.ad_network_id = 32 AND a.ad_network_sk=c.ad_network_sk
INNER JOIN refer.partner_dim d ON a.partner_sk=d.partner_sk
WHERE a.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
AND d.dtdeleted > v_start_full_date
GROUP BY 
b.full_date;

/* update total yes adresponses */
UPDATE adnetwork.monthly_yp_sb_performance_by_date a
SET total_fullfilled_code_y = b.total_fullfilled_code_y
FROM (
       SELECT sum(fullfilled_code_y) as total_fullfilled_code_y 
       FROM adnetwork.monthly_yp_sb_performance_by_date 
       WHERE process_id = p_process_id 
) b
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_yp_sb_performance_by_date a
SET requests = b.requests
   ,impressions = b.impressions
   ,clicks = b.clicks
   ,revenue = b.est_earnings
FROM (
       SELECT bb.full_date, sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_yp_daily_sum aa
       INNER JOIN refer.date_dim bb ON aa.eastern_date_sk = bb.date_sk
       WHERE  aa.eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  aa.site_name = 'Verve Wireless (Mobile Web) - Lower'
       GROUP BY bb.full_date
) b 
WHERE a.full_date = b.full_date AND a.process_id = p_process_id;

/* update total revenue */
UPDATE adnetwork.monthly_yp_sb_performance_by_date a
SET total_requests = b.requests
   ,total_impressions = b.impressions
   ,total_clicks = b.clicks
   ,total_revenue = b.est_earnings
FROM (
       SELECT sum(aa.requests) as requests, sum(aa.impressions) as impressions, sum(aa.clicks) as clicks, sum(aa.est_earnings) as est_earnings
       FROM   adnetwork.fact_yp_daily_sum aa
       WHERE  eastern_date_sk BETWEEN p_start_date_sk AND p_end_date_sk
         AND  aa.site_name = 'Verve Wireless (Mobile Web) - Lower'
         AND  EXISTS (SELECT 1 
                      FROM adstraffic.ad_response_fact_stats_01 aaa
                      INNER JOIN refer.ad_network_dim bbb ON bbb.ad_network_id = 32 AND aaa.ad_network_sk=bbb.ad_network_sk
                      WHERE aaa.eastern_date_sk = aa.eastern_date_sk )
) b 
WHERE a.process_id = p_process_id;

/* update revenue */
UPDATE adnetwork.monthly_yp_sb_performance_by_date a
SET fullfilled_code_y_rate = fullfilled_code_y::float/total_fullfilled_code_y
WHERE a.process_id = p_process_id;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_monthly_yp_sb_performance';

RAISE DEBUG 'ENDING: % staging.fn_build_monthly_yp_sb_performance(%,%,%,''%'',%)',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_monthly_yp_sb_performance(%,%,%,''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date_sk,p_end_date_sk,p_process_id,p_process_status,p_process_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_monthly_yp_sb_performance',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_monthly_yp_sb_performance(p_start_date_sk integer, p_end_date_sk integer, p_process_id integer, p_process_status character varying, p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_build_page_view_fact_agg_03(integer, integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_page_view_fact_agg_03(p_date_sk_start integer, p_date_sk_end integer, p_min_data_file_id integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_page_view_fact_agg_03
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_cmd TEXT:='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_page_view_fact_agg_03(%,%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status;

v_previous_process_status:=v_process_status;
v_process_status:='03';

/* insert records into page_view_fact_agg_03*/
v_cmd:='
INSERT INTO dw.page_view_fact_agg_03 (
        eastern_date_sk,
        partner_sk,
        portal_host_sk,
        content_category_sk,
        partner_module_sk,
        user_agent_sk,
        portal_sk,
	display_block_sk,
        page_view_count,
        collapsed,
        fact_count,
	max_data_file_id,
	process_id
)
SELECT  a.eastern_date_sk,
        a.partner_sk,
        a.portal_host_sk,
        a.content_category_sk,
        a.partner_module_sk,
        a.user_agent_sk,
        a.portal_sk,
	a.display_block_sk,
        SUM(a.page_view_count),
        false,
        COUNT(*),
' || p_max_data_file_id::text || ',
' || p_process_id::text || '
FROM dw.page_view_fact a
WHERE a.request_type_sk=1
AND a.data_file_id BETWEEN ' || p_min_data_file_id::text || ' AND ' || p_max_data_file_id::text || '
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
GROUP BY a.eastern_date_sk,
        a.partner_sk,
        a.portal_host_sk,
        a.content_category_sk,
        a.partner_module_sk,
        a.user_agent_sk,
        a.portal_sk,
	a.display_block_sk
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process table w/ status */
UPDATE process
SET process_status=v_process_status,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id;

RAISE DEBUG 'ENDING: % fn_build_page_view_fact_agg_03(%,%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_page_view_fact_agg_03(%,%,%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_page_view_fact_agg_03',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_page_view_fact_agg_03(p_date_sk_start integer, p_date_sk_end integer, p_min_data_file_id integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_page_view_fact_agg_04(integer, integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_page_view_fact_agg_04(p_date_sk_start integer, p_date_sk_end integer, p_min_data_file_id integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_build_page_view_fact_agg_04
||
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE:=p_process_status;
 v_previous_process_status process.process_status%TYPE;
 v_cmd TEXT:='';

BEGIN

RAISE DEBUG 'STARTING: % fn_build_page_view_fact_agg_04(%,%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status;

v_previous_process_status:=v_process_status;
v_process_status:='SU';

/* insert records into page_view_fact_agg_04*/
v_cmd:='
INSERT INTO dw.page_view_fact_agg_04 (
        eastern_date_sk,
        hour24_of_day,
        partner_sk,
        user_agent_sk,
        page_view_count,
        collapsed,
        fact_count,
	max_data_file_id,
	process_id,
	portal_sk
)
SELECT  a.eastern_date_sk,
        b.hour24_of_day,
        a.partner_sk,
        a.user_agent_sk,
        SUM(a.page_view_count),
        false,
        COUNT(*),
' || p_max_data_file_id::text || ',
' || p_process_id::text || ',
	a.portal_sk
FROM dw.page_view_fact a
INNER JOIN dw.time_dim b ON a.eastern_time_sk=b.time_sk
WHERE a.request_type_sk=1
AND a.data_file_id BETWEEN ' || p_min_data_file_id::text || ' AND ' || p_max_data_file_id::text || '
AND a.eastern_date_sk BETWEEN ' ||  p_date_sk_start::text || ' AND ' || p_date_sk_end::text || '
GROUP BY a.eastern_date_sk,
        b.hour24_of_day,
        a.partner_sk,
        a.user_agent_sk,
	a.portal_sk
;';

RAISE DEBUG 'v_cmd=%',v_cmd;
EXECUTE v_cmd;

/* update process table w/ status */
UPDATE process
SET process_status=v_process_status,
	dt_process_completed=clock_timestamp(),
	dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id;

RAISE DEBUG 'ENDING: % fn_build_page_view_fact_agg_04(%,%,%,%,%,''%'')',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % fn_build_page_view_fact_agg_04(%,%,%,%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk_start,p_date_sk_end,p_min_data_file_id,p_max_data_file_id,p_process_id,v_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_page_view_fact_agg_04',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$_$;


ALTER FUNCTION staging.fn_build_page_view_fact_agg_04(p_date_sk_start integer, p_date_sk_end integer, p_min_data_file_id integer, p_max_data_file_id integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_resolve_ad_response_fact_user_agent(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_resolve_ad_response_fact_user_agent(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_resolve_ad_response_fact_user_agent
||
|| Author: Tho HOANG
||
|| Date: 2012-12-22
||
|| Description: 
||     resolve missing user agent after daily ad response logs loaded
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_resolve_ad_response_fact_user_agent(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* ================= MASTER FACT ================= */

--RAISE NOTICE 'MASTER FACT LOADING...';

/* insert missing user agents */
/*INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_user_agent a
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;*/

/* transform user_agent_sk */
/*UPDATE	adstraffic.ad_response_fact_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;
*/
/* insert back to fact table */
/*INSERT INTO adstraffic.ad_response_fact_temp(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_user_agent
WHERE 	user_agent_sk > 0;
*/

/* delete resolved user agent */
--DELETE FROM adstraffic.ad_response_fact_user_agent WHERE user_agent_sk > 0;

/* ================= APP3 FACT ================= */

RAISE NOTICE 'APP3 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app3_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app3_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app3 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app3_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app3_user_agent WHERE user_agent_sk > 0;

/* ================= APP4 FACT ================= */

RAISE NOTICE 'APP4 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app4_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app4_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app4 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app4_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app4_user_agent WHERE user_agent_sk > 0;

/* ================= APP6 FACT ================= */

RAISE NOTICE 'APP6 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app6_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app6_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app6 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app6_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app6_user_agent WHERE user_agent_sk > 0;

/* ================= APP8 FACT ================= */

RAISE NOTICE 'APP8 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app8_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app8_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app8 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app8_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app8_user_agent WHERE user_agent_sk > 0;

/* ================= APP9 FACT ================= */

RAISE NOTICE 'APP9 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app9_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app9_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app9 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app9_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app9_user_agent WHERE user_agent_sk > 0;

/* ================= APP12 FACT ================= */

RAISE NOTICE 'APP12 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app12_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app12_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app12 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app12_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app12_user_agent WHERE user_agent_sk > 0;

/* ================= APP13 FACT ================= */

RAISE NOTICE 'APP13 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app13_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app13_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app13 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app13_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app13_user_agent WHERE user_agent_sk > 0;

/* ================= APP14 FACT ================= */

RAISE NOTICE 'APP14 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app14_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app14_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app14 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app14_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app14_user_agent WHERE user_agent_sk > 0;

/* ================= APP015 FACT ================= */

RAISE NOTICE 'APP015 FACT LOADING...';

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM adstraffic.ad_response_fact_app015_user_agent a  
WHERE NOT EXISTS (
		SELECT 1 FROM refer.user_agent_dim b WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	adstraffic.ad_response_fact_app015_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO adstraffic.ad_response_fact_app015 (
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
            ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
            ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
            fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
            placement_id, gen_ad_response_app_id, app_server, data_file_id, 
            app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
            partner_module_sk, location_quality_100)
SELECT 	eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
	gmt_date_sk, gmt_time_sk, portal_sk, partner_sk, ad_content_category_sk, 
	ad_network_sk, user_agent_sk, remote_ip, session_id, request_guid, 
	ad_response_url, status_code, duration, fullfilled_code, fullfilled_code_count, 
	fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, 
	placement_id, gen_ad_response_app_id, app_server, data_file_id, 
	app_server_id, transaction_id, dc_site_sk, location_id, location_quality, 
	partner_module_sk, location_quality_100
FROM 	adstraffic.ad_response_fact_app015_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM adstraffic.ad_response_fact_app015_user_agent WHERE user_agent_sk > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_resolve_ad_response_fact_user_agent';

RAISE DEBUG 'ENDING: % staging.fn_build_resolve_ad_response_fact_user_agent(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_resolve_ad_response_fact_user_agent(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_build_resolve_ad_response_fact_user_agent',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_resolve_ad_response_fact_user_agent(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_build_resolve_event_tracker_fact_user_agent(integer, integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_build_resolve_event_tracker_fact_user_agent(p_date_sk integer, p_process_id integer, p_process_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_build_resolve_event_tracker_fact_user_agent
||
|| Author: Tho HOANG
||
|| Date: 2012-12-22
||
|| Description: 
||     resolve missing user agent after daily ad response logs loaded
||
|| Parameters: 
||     - IN  p_date_sk              -- integer
||        date
||     - IN  p_process_id           -- integer
||        current process id
||     - IN  p_process_status       -- character
||        current process status
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE:=p_process_status;
 v_previous_process_status control.process.process_status%TYPE;
 v_calendar_year_month VARCHAR(32);
 v_full_date DATE;
 v_month_since_2005 SMALLINT;
 v_cmd TEXT='';
 v_count integer:=0;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_build_resolve_event_tracker_fact_user_agent(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

v_previous_process_status:=p_process_status;
v_process_status:='SU';

/* get date info */
SELECT calendar_year_month,month_since_2005,full_date INTO v_calendar_year_month,v_month_since_2005,v_full_date
FROM refer.date_dim
WHERE date_sk=p_date_sk;

/* insert missing user agents */
INSERT INTO refer.user_agent_dim(
		user_agent_name, device_manufacturer, device_type, organic, auto_generated, suppress, data_file_id)
SELECT DISTINCT a.user_agent, 'Unallocated', 'Unallocated', FALSE, TRUE, FALSE, 0
FROM evttracker.event_tracker_fact_user_agent a
WHERE NOT EXISTS (
		SELECT 1
		FROM refer.user_agent_dim b
		WHERE a.user_agent=b.user_agent_name
	)
AND a.user_agent IS NOT NULL
;

/* transform user_agent_sk */
UPDATE	evttracker.event_tracker_fact_user_agent a
SET 	user_agent_sk=COALESCE(b.user_agent_sk,-2)
FROM 	refer.user_agent_dim b
WHERE 	a.user_agent=b.user_agent_name
;

/* insert back to fact table */
INSERT INTO evttracker.event_tracker_fact(
            eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
            gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
            event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
            adm_advertiser_sk, req_ipaddress, remote_logical_user, remote_auth_user, 
            request_url, status_code, bytes_sent, referrer, req_method, req_protocol, 
            req_path, req_arguments, url_f, url_fd, url_c, url_cd, url_e, 
            url_u, url_p, url_bp, url_d, url_fh, url_ch, rs_01, rs_02, rs_03, 
            rs_04, app_server, app_server_id, data_file_id, gen_event_tracker_log_id, 
            eastern_datetime, url_r, url_x, url_adnet)
SELECT eastern_date_sk, eastern_time_sk, local_date_sk, local_time_sk, 
       gmt_date_sk, gmt_time_sk, user_agent_sk, referrer_hostname_sk, 
       event_sk, adm_flight_sk, adm_creative_sk, adm_order_sk, adm_placement_sk, 
       adm_advertiser_sk, req_ipaddress, remote_logical_user, remote_auth_user, 
       request_url, status_code, bytes_sent, referrer, req_method, req_protocol, 
       req_path, req_arguments, url_f, url_fd, url_c, url_cd, url_e, 
       url_u, url_p, url_bp, url_d, url_fh, url_ch, rs_01, rs_02, rs_03, 
       rs_04, app_server, app_server_id, data_file_id, gen_event_tracker_log_id, 
       eastern_datetime, url_r, url_x, url_adnet
FROM evttracker.event_tracker_fact_user_agent
WHERE 	user_agent_sk > 0;

/* delete resolved user agent */
DELETE FROM evttracker.event_tracker_fact_user_agent WHERE user_agent_sk > 0;

/* update process concurrent trans table w/ status */
UPDATE control.process_concurrent_trans
SET is_complete=true,dt_lastchange=clock_timestamp()
WHERE process_id=p_process_id
AND concurrent_trans_name='fn_build_resolve_event_tracker_fact_user_agent';

RAISE DEBUG 'ENDING: % staging.fn_build_resolve_event_tracker_fact_user_agent(%,%,''%'')',timeofday(),p_date_sk,p_process_id,p_process_status;

RETURN v_process_status;

EXCEPTION
 WHEN others THEN
        v_process_status:=v_previous_process_status;
        RAISE NOTICE 'FAILED: % staging.fn_build_resolve_event_tracker_fact_user_agent(%,%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_date_sk,p_process_id,p_process_status,SQLSTATE,SQLERRM;
--        PERFORM fn_email_failure_notification('fn_build_resolve_event_tracker_fact_user_agent',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_build_resolve_event_tracker_fact_user_agent(p_date_sk integer, p_process_id integer, p_process_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_check_previous_successful_file_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_check_previous_successful_file_load() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

IF EXISTS (
	SELECT 1 FROM data_file
	WHERE LOWER(file_name)=LOWER(NEW.file_name)
	AND file_status='SU') THEN

		RAISE EXCEPTION 'File has already been loaded!';
END IF;

RETURN NULL;

END;
$$;


ALTER FUNCTION staging.fn_check_previous_successful_file_load() OWNER TO warehouse_dbo;

--
-- Name: fn_cmd_shell(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_cmd_shell(text) RETURNS void
    LANGUAGE plperlu IMMUTABLE
    AS $_$

#
# fn_cmd_shell(text)
#
# Passes command string to the shell.
#
# $Id: fn_cmd_shell.sql 54 2008-07-12 03:30:18Z abyfield $
#

    use strict;
    use warnings;

    my $cmd = shift(@_);
    system($cmd) && die "Oh, oh.  Problem with this call to the shell [$!]: $cmd";
    
$_$;


ALTER FUNCTION staging.fn_cmd_shell(text) OWNER TO warehouse_dbo;

--
-- Name: fn_content_category_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_content_category_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_content_category_dim_load
||
|| Load routine for content category dimension.
||
|| $Id: fn_content_category_dim_load.sql 4479 2009-03-05 04:38:12Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='content_category_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_content_category_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.content_category_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_content_category a 
WHERE a.content_category_id=b.content_category_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
	AND (
	a.category_name<>b.category_name 
	)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.content_category_dim (content_category_id,category_name,
auto_generated,suppress,data_file_id,
dt_effective,dt_expire,category_name_current)
SELECT a.content_category_id,a.category_name,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31','N/A'
FROM staging.stg_content_category a
INNER JOIN refer.content_category_dim b ON a.content_category_id=b.content_category_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.content_category_dim (content_category_id,category_name,
auto_generated,suppress,data_file_id,
dt_effective,dt_expire,category_name_current)
SELECT a.content_category_id,a.category_name,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31','N/A'
FROM staging.stg_content_category a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
	FROM refer.content_category_dim b 
	WHERE a.content_category_id=b.content_category_id
	AND a.data_file_id=p_data_file_id
	AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.content_category_dim b
SET     category_name_current=a.category_name
FROM staging.stg_content_category a
WHERE a.content_category_id=b.content_category_id
AND a.data_file_id=p_data_file_id
AND (   b.category_name_current<>a.category_name ) 
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_content_category_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_content_category_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_content_category_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_content_category_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_content_category_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_content_category_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_content_category_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for content category dimension.
||
|| $Id: fn_content_category_dim_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;

BEGIN

RAISE DEBUG 'STARTING: % fn_content_category_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_content_category_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_content_category_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_content_category_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_content_category_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_content_category_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_content_category_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_content_category_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_content_category_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_content_category_dim_transform
||
|| Transform routine for content category dimension.
||
|| $Id: fn_content_category_dim_transform.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % fn_content_category_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_content_category
SET category_name=COALESCE(category_name,'N/A')
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_content_category_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_content_category_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        -- PERFORM fn_email_failure_notification('fn_content_category_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_content_category_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_create_partition_for_ad_response_fact(date, date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_create_partition_for_ad_response_fact(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_generate_page_view_partition_source
||
|| Generates the DDL to create partitions for the dw.ad_response_fact table.  At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_generate_page_view_partition_source.sql 96 2008-09-15 05:19:20Z abyfield $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM refer.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM refer.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE gen_ad_response_fact_partition (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM refer.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

RETURN query SELECT '--partition table: ' || year_week_monday || ' from ' || min_date::TEXT || ' to ' || max_date::TEXT ||

'
CREATE TABLE adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (
        CHECK (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
) INHERITS (adstraffic.ad_response_fact) TABLESPACE adstraffic_tablespace;
ALTER TABLE adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' OWNER TO warehouse_dbo;

' ||
'
--indexes for table: adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' || SUBSTRING (year_week_monday FROM 7 FOR 2) || 
'
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_eastern_date_sk_eastern_time_sk ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (eastern_date_sk,eastern_time_sk) TABLESPACE adstraffic_tablespace;
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_sk ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_sk) TABLESPACE adstraffic_tablespace;
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_partner_sk ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (partner_sk) TABLESPACE adstraffic_tablespace;
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_ad_content_category_sk ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (ad_content_category_sk) TABLESPACE adstraffic_tablespace;
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_ad_network_sk ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (ad_network_sk) TABLESPACE adstraffic_tablespace;
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_user_agent_sk ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (user_agent_sk) TABLESPACE adstraffic_tablespace;
CREATE INDEX idx_ad_response_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_data_file_id ON adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (data_file_id) TABLESPACE adstraffic_tablespace;

' ||
'-- rule for table: ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE OR REPLACE RULE ad_response_fact_insert_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' AS
ON INSERT TO adstraffic.ad_response_fact WHERE
        (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
DO INSTEAD
        INSERT INTO adstraffic.ad_response_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' VALUES (NEW.*);
'
FROM gen_ad_response_fact_partition;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_create_partition_for_ad_response_fact(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_create_partition_for_ad_response_fact(p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_create_partition_for_event_tracker_fact(date, date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_create_partition_for_event_tracker_fact(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_create_partition_for_event_tracker_fact
||
|| Generates the DDL to create partitions for the evttracker.event_tracker_fact table.
|| At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_create_partition_for_event_tracker_fact.sql 96 2011-11-03 05:19:20Z thohoang $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM refer.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM refer.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE gen_event_tracker_fact_partition (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM refer.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

RETURN query SELECT '--partition table: ' || year_week_monday || ' from ' || min_date::TEXT || ' to ' || max_date::TEXT ||

'
CREATE TABLE evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (
        CHECK (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
) INHERITS (evttracker.event_tracker_fact) TABLESPACE evttracker_tablespace;
ALTER TABLE evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' OWNER TO warehouse_dbo;

' ||
'
--indexes for table: evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' || SUBSTRING (year_week_monday FROM 7 FOR 2) || 
'
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_eastern_date_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (eastern_date_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_eastern_time_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (eastern_time_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_user_agent_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (user_agent_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_referrer_hostname_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (referrer_hostname_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_event_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (event_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_adm_flight_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (adm_flight_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_adm_creative_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (adm_creative_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_adm_order_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (adm_order_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_adm_placement_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (adm_placement_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_adm_advertiser_sk ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (adm_advertiser_sk) TABLESPACE evttracker_tablespace;
CREATE INDEX idx_event_tracker_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_data_file_id ON evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (data_file_id) TABLESPACE evttracker_tablespace;

' ||
'-- rule for table: event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE OR REPLACE RULE event_tracker_fact_insert_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' AS
ON INSERT TO evttracker.event_tracker_fact WHERE
        (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
DO INSTEAD
        INSERT INTO evttracker.event_tracker_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' VALUES (NEW.*);
'
FROM gen_event_tracker_fact_partition;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_create_partition_for_event_tracker_fact(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_create_partition_for_event_tracker_fact(p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_create_partition_for_network_revenue(date, date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_create_partition_for_network_revenue(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_generate_page_view_partition_source
||
|| Generates the DDL to create partitions for the dw.ad_response_fact table.  At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_generate_page_view_partition_source.sql 96 2008-09-15 05:19:20Z abyfield $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM refer.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM refer.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE gen_network_revenue_partition (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM refer.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

RETURN query SELECT '--partition table: ' || year_week_monday || ' from ' || min_date::TEXT || ' to ' || max_date::TEXT ||

'
CREATE TABLE adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (
        CHECK (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
) INHERITS (adm.daily_agg_network_revenue) TABLESPACE adm_tablespace;
ALTER TABLE adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' OWNER TO warehouse_dbo;

' ||
'
--indexes for table: adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' || SUBSTRING (year_week_monday FROM 7 FOR 2) || 
'
CREATE INDEX idx_daily_agg_network_revenue_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_01 ON adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (full_date, publisher_id, property_id, is_active) TABLESPACE adm_tablespace;
CREATE INDEX idx_daily_agg_network_revenue_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_02 ON adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (full_date, publisher_id, portal_id, partner_id, is_active) TABLESPACE adm_tablespace;
CREATE INDEX idx_daily_agg_network_revenue_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_03 ON adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (full_date, publisher_id, channel_id, partner_id, is_active) TABLESPACE adm_tablespace;
CREATE INDEX idx_daily_agg_network_revenue_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_04 ON adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (publisher_name, publisher_id, is_active) TABLESPACE adm_tablespace;

' ||
'-- rule for table: daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE OR REPLACE RULE daily_agg_network_revenue_insert_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' AS
ON INSERT TO adm.daily_agg_network_revenue WHERE
        (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
DO INSTEAD
        INSERT INTO adm.daily_agg_network_revenue_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' VALUES (NEW.*);
'
FROM gen_network_revenue_partition;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_create_partition_for_network_revenue(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_create_partition_for_network_revenue(p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_fact_load(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_fact_load(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_fact_load
||
|| Load routine for page view fact and session fact tables.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_daily_fact_load.sql 4422 2009-02-01 11:49:14Z abyfield $
|| $Id: fn_daily_fact_load.sql 2011-03-10 SonTN | Modify and Comment the following lines
|| stg_wap_site_access_log : TRUNCATE TABLE stg_session;	TRUNCATE TABLE stg_session_agg_values;	TRUNCATE TABLE stg_wap_site_access_log;
||
*/

DECLARE
 v_file_status staging.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status staging.data_file.file_status%TYPE;
 v_min_eastern_date DATE;
 v_max_eastern_date DATE;
 v_min_eastern_date_sk INTEGER;
 v_max_eastern_date_sk INTEGER;
 v_row_count INTEGER:=0;
 v_cmd TEXT;
 v_session_padding INTEGER;
 v_max_session_duration INTEGER;
 cmd1                TEXT;
 cmd2                TEXT;
 cmd3                TEXT;
 cmd4                TEXT;
 cmd5                TEXT;
 cmd6                TEXT;
BEGIN

RAISE DEBUG 'STARTING: % fn_daily_fact_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get min/max eastern date keys for 
constraint exclusion in partitioned table
(in case we want to do future processing on this file) */
cmd1 := '
SELECT min(eastern_date),max(eastern_date) INTO v_min_eastern_date,v_max_eastern_date
FROM ' || p_staging_table_name::text || '
WHERE eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
;'; -- earliest/latest date_dim keys; anything earlier or later gets dropped

EXECUTE cmd1;

SELECT date_sk INTO v_min_eastern_date_sk
FROM dw.date_dim
WHERE full_date=v_min_eastern_date;

SELECT date_sk INTO v_max_eastern_date_sk
FROM dw.date_dim
WHERE full_date=v_max_eastern_date;

/* get session_padding value from system_parameter */
SELECT value::INTEGER INTO v_session_padding
FROM system_parameter
WHERE parameter='session_padding';

IF NOT FOUND THEN
RAISE EXCEPTION 'v_session_padding doesn''t exist in system_parameter!';
END IF;

/* get max_session_duration value from system_parameter */
SELECT value::INTEGER INTO v_max_session_duration
FROM system_parameter
WHERE parameter='max_session_duration';

IF NOT FOUND THEN
RAISE EXCEPTION 'v_max_session_duration doesn''t exist in system_parameter!';
END IF;

/******************/
/* DIMENSION LOAD */
/*****************/
/* insert missing user agents */

cmd2 :='
INSERT INTO dw.user_agent_dim (user_agent_name,device_manufacturer,
device_type,organic,auto_generated,suppress,data_file_id)
SELECT distinct a.user_agent,''Unallocated'',
''Unallocated'',FALSE,TRUE,FALSE,p_data_file_id
FROM ' || p_staging_table_name::text || ' a
WHERE NOT EXISTS (
SELECT 1
FROM dw.user_agent_dim b
WHERE a.user_agent=b.user_agent_name)
AND a.user_agent IS NOT NULL';

EXECUTE cmd2;

/* insert missing referrer_hostnames */
cmd3 :='
INSERT INTO dw.referrer_hostname_dim (hostname,domain,referrer_type,
auto_generated,suppress,data_file_id)
SELECT distinct a.referrer_hostname,a.domain,''Unknown'',
TRUE,FALSE,p_data_file_id
FROM ' || p_staging_table_name::text || ' a
WHERE NOT EXISTS (
SELECT 1
FROM dw.referrer_hostname_dim b
WHERE a.referrer_hostname=b.hostname)
AND a.referrer_hostname IS NOT NULL';

EXECUTE cmd3;

/* insert missing network_types */
cmd4 :='
INSERT INTO dw.network_type_dim (network_type,
auto_generated,suppress,data_file_id)
SELECT distinct network_type,
TRUE,FALSE,p_data_file_id
FROM ' || p_staging_table_name::text || ' a
WHERE NOT EXISTS (
        SELECT 1
        FROM dw.network_type_dim b
        WHERE a.network_type=b.network_type)
AND a.network_type IS NOT NULL';

EXECUTE cmd4;

/* insert missing page_templates */
cmd5 :='
INSERT INTO dw.page_template_dim (page_template,
auto_generated,suppress,data_file_id)
SELECT distinct page_template,
TRUE,FALSE,p_data_file_id
FROM ' || p_staging_table_name::text || ' a
WHERE NOT EXISTS (
        SELECT 1
        FROM dw.page_template_dim b
        WHERE a.page_template=b.page_template)
AND a.page_template IS NOT NULL';

EXECUTE cmd5;

/*************/
/* FACT LOAD */
/*************/
/* load page_view_fact */

cmd6 :='
INSERT INTO dw.page_view_fact (
eastern_date_sk,
eastern_time_sk,
local_date_sk,
local_time_sk,
gmt_date_sk,
gmt_time_sk,
portal_host_sk,
partner_sk,
partner_module_sk,
user_agent_sk,
portal_sk,
content_category_sk,
display_block_sk,
referrer_hostname_sk,
request_type_sk,
stg_wap_site_access_log_id,
server,
source_ip,
client,
username,
dtrequested,
request,
method,
path,
arguments,
protocol,
status,
referrer,
uid,
session,
data_file_id,
bytes,
page_view_count,
network_type_sk,
page_template_sk)
SELECT b.date_sk, -- ET
c.time_sk, -- ET
d.date_sk, -- PT
e.time_sk, -- PT
f.date_sk, -- GMT 
g.time_sk, -- GMT 
-- assign -2 if no key exists in dimension
COALESCE(h.portal_host_sk,-2),
COALESCE(i.partner_sk,-2),
COALESCE(j.partner_module_sk,-2),
COALESCE(k.user_agent_sk,-2),
COALESCE(l.portal_sk,-2),
COALESCE(m.content_category_sk,-2),
COALESCE(n.display_block_sk,-2),
COALESCE(o.referrer_hostname_sk,-2),
COALESCE(p.request_type_sk,-2),
a.stg_wap_site_access_log_id,
a.server,
a.source_ip,
a.client,
a.username,
a.dtrequested,
a.request,
a.method,
a.path,
a.arguments,
a.protocol,
a.status,
a.referrer,
a.uid,
a.session,
p_data_file_id,
COALESCE(a.bytes,0),
1,
COALESCE(q.network_type_sk,-2),
        COALESCE(r.page_template_sk,-2)
FROM ' || p_staging_table_name::text || ' a
INNER JOIN dw.date_dim b 
 ON a.eastern_date=b.full_date
INNER JOIN dw.time_dim c
 ON a.eastern_time=c.full_time
INNER JOIN dw.date_dim d 
 ON a.local_date=d.full_date
INNER JOIN dw.time_dim e
 ON a.local_time=e.full_time
INNER JOIN dw.date_dim f 
 ON a.gmt_date=f.full_date
INNER JOIN dw.time_dim g
 ON a.gmt_time=g.full_time
LEFT OUTER JOIN dw.portal_host_dim h ON LOWER(a.host)=LOWER(h.hostname)
LEFT OUTER JOIN dw.partner_dim i ON a.partner_id=i.partner_id
LEFT OUTER JOIN dw.partner_module_dim j ON a.partner_module_id=j.partner_module_id
LEFT OUTER JOIN dw.user_agent_dim k ON a.user_agent=k.user_agent_name
LEFT OUTER JOIN dw.portal_dim l ON a.portal_id=l.portal_id
LEFT OUTER JOIN dw.content_category_dim m ON a.content_category_id=m.content_category_id
LEFT OUTER JOIN dw.display_block_dim n ON a.display_block_id=n.display_block_id
LEFT OUTER JOIN dw.referrer_hostname_dim o ON a.referrer_hostname=o.hostname
LEFT OUTER JOIN dw.request_type_dim p ON a.request_type_id=p.request_type_id
LEFT OUTER JOIN dw.network_type_dim q ON a.network_type=q.network_type
LEFT OUTER JOIN dw.page_template_dim r ON a.page_template=r.page_template
WHERE
-- scd type 2
a.dtrequested_pacific BETWEEN COALESCE(h.dt_effective,''2007-10-28'') AND COALESCE(h.dt_expire,''9999-12-31'') -- portal_host_dim
AND a.dtrequested_pacific BETWEEN COALESCE(i.dt_effective,''2007-10-28'')  AND COALESCE(i.dt_expire,''9999-12-31'') -- partner_dim_
AND a.dtrequested_pacific BETWEEN COALESCE(j.dt_effective,''2007-10-28'')  AND COALESCE(j.dt_expire,''9999-12-31'') -- partner_module_dim
AND a.dtrequested_pacific BETWEEN COALESCE(l.dt_effective,''2007-10-28'')  AND COALESCE(l.dt_expire,''9999-12-31'') -- portal_dim
AND a.dtrequested_pacific BETWEEN COALESCE(m.dt_effective,''2007-10-28'')  AND COALESCE(m.dt_expire,''9999-12-31'') -- content_category_dim
AND a.dtrequested_pacific BETWEEN COALESCE(n.dt_effective,''2007-10-28'')  AND COALESCE(n.dt_expire,''9999-12-31'') -- display_block_dim
';

EXECUTE cmd6;

/* get rowcount 
GET DIAGNOSTICS won't work here 'cause
we're inserting into a partitioned table */
v_cmd := 'SELECT COUNT(*) FROM dw.page_view_fact a
WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
AND a.data_file_id=' || p_data_file_id;

RAISE DEBUG 'v_cmd=%',v_cmd;

IF v_cmd IS NOT NULL THEN
EXECUTE v_cmd INTO STRICT v_row_count;
END IF;

/* load session_fact */
/* if session_start_datetime in staging is earlier than in fact, 
we must update the session info w/ the new record */
UPDATE dw.session_fact r
SET session_start_date_sk=b.date_sk, -- ET
session_start_time_sk=c.time_sk, -- ET
-- assign -2 if no key exists in dimension
portal_host_sk=COALESCE(h.portal_host_sk,-2),
partner_sk=COALESCE(i.partner_sk,-2),
user_agent_sk=COALESCE(k.user_agent_sk,-2),
portal_sk=COALESCE(l.portal_sk,-2),
initial_referrer_hostname_sk=CASE WHEN a.referrer_hostname='N/A' THEN r.initial_referrer_hostname_sk ELSE COALESCE(o.referrer_hostname_sk,-2) END,
network_type_sk=COALESCE(q.network_type_sk,-2),
session_start_datetime=a.session_start_datetime,
source_ip=a.source_ip,
client=a.client,
username=a.username,
request=a.request,
method=a.method,
path=a.path,
arguments=a.arguments,
protocol=a.protocol,
status=a.status,
referrer=a.referrer,
start_data_file_id=p_data_file_id -- start_data_file_id
FROM stg_session a
INNER JOIN dw.date_dim b 
 ON a.session_start_date=b.full_date
INNER JOIN dw.time_dim c
 ON a.session_start_time=c.full_time
LEFT OUTER JOIN dw.portal_host_dim h ON LOWER(a.host)=LOWER(h.hostname)
LEFT OUTER JOIN dw.partner_dim i ON a.partner_id=i.partner_id
LEFT OUTER JOIN dw.user_agent_dim k ON a.user_agent=k.user_agent_name
LEFT OUTER JOIN dw.portal_dim l ON a.portal_id=l.portal_id
LEFT OUTER JOIN dw.referrer_hostname_dim o ON a.referrer_hostname=o.hostname
LEFT OUTER JOIN dw.network_type_dim q ON a.network_type=q.network_type
WHERE
r.uid=a.uid
AND r.session=a.session
/* if session_fact and stg_session have referrers, and stg_session start date is earlier, update that record */
AND ((r.initial_referrer_hostname_sk<>-1 AND a.referrer_hostname<>'N/A' AND r.session_start_datetime>a.session_start_datetime) OR
/* if session_fact has no referrer and stg_session has a referrer, update that record */
      (r.initial_referrer_hostname_sk=-1 AND a.referrer_hostname<>'N/A') OR
/* if session_fact and stg_session have no referrers, and stg_session start date is earlier, update that record */
      (r.initial_referrer_hostname_sk=-1 AND a.referrer_hostname='N/A' AND r.session_start_datetime>a.session_start_datetime))
-- scd type 2
AND a.session_start_datetime_pacific BETWEEN COALESCE(h.dt_effective,'2007-10-28') AND COALESCE(h.dt_expire,'9999-12-31') -- portal_host_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(i.dt_effective,'2007-10-28')  AND COALESCE(i.dt_expire,'9999-12-31') -- partner_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(l.dt_effective,'2007-10-28')  AND COALESCE(l.dt_expire,'9999-12-31') -- portal_dim
;

/* if session_end_datetime in staging is later than in fact, 
we must update session_end_datetime and end_data_file_id */
UPDATE dw.session_fact r
SET session_end_datetime=a.session_end_datetime,
end_data_file_id=p_data_file_id -- start_data_file_id
FROM stg_session a
WHERE
r.uid=a.uid
AND r.session=a.session
AND r.session_end_datetime<a.session_end_datetime
;

/* recalculate metrics */
UPDATE dw.session_fact r
SET page_view_count=r.page_view_count+a.page_view_count,
session_duration=CASE WHEN (EXTRACT(EPOCH FROM r.session_end_datetime) - EXTRACT(EPOCH FROM r.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration 
ELSE EXTRACT(EPOCH FROM r.session_end_datetime) - EXTRACT(EPOCH FROM r.session_start_datetime) END, -- session_duration
total_duration=CASE WHEN (EXTRACT(EPOCH FROM r.session_end_datetime) -
EXTRACT(EPOCH FROM r.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration
ELSE EXTRACT(EPOCH FROM r.session_end_datetime) - EXTRACT(EPOCH FROM r.session_start_datetime) END + r.session_padding,
bounce_count=CASE WHEN (r.page_view_count+a.page_view_count)=1 THEN 1 ELSE 0 END
FROM stg_session a
WHERE
r.uid=a.uid
AND r.session=a.session
;

/* now, insert new records */
INSERT INTO dw.session_fact (
session_start_date_sk,
session_start_time_sk,
portal_host_sk,
partner_sk,
user_agent_sk,
portal_sk,
initial_referrer_hostname_sk,
network_type_sk,
uid,
session,
session_start_datetime,
session_end_datetime,
source_ip,
client,
username,
request,
method,
path,
arguments,
protocol,
status,
referrer,
start_data_file_id,
end_data_file_id,
page_view_count,
visit_count,
new_visit_count,
session_duration,
session_padding,
total_duration,
bounce_count
)
SELECT b.date_sk, -- ET
c.time_sk, -- ET
-- assign -2 if no key exists in dimension
COALESCE(h.portal_host_sk,-2),
COALESCE(i.partner_sk,-2),
COALESCE(k.user_agent_sk,-2),
COALESCE(l.portal_sk,-2),
COALESCE(o.referrer_hostname_sk,-2),
COALESCE(q.network_type_sk,-2),
a.uid,
a.session,
a.session_start_datetime,
a.session_end_datetime,
a.source_ip,
a.client,
a.username,
a.request,
a.method,
a.path,
a.arguments,
a.protocol,
a.status,
a.referrer,
p_data_file_id, -- start_data_file_id
p_data_file_id, -- end_data_file_id
a.page_view_count,
1,
a.new_visit_count,
CASE WHEN (EXTRACT(EPOCH FROM a.session_end_datetime) - EXTRACT(EPOCH FROM a.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration
ELSE EXTRACT(EPOCH FROM a.session_end_datetime) - EXTRACT(EPOCH FROM a.session_start_datetime) END, -- session_duration
v_session_padding,
CASE WHEN (EXTRACT(EPOCH FROM a.session_end_datetime) -
EXTRACT(EPOCH FROM a.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration
ELSE EXTRACT(EPOCH FROM a.session_end_datetime) - EXTRACT(EPOCH FROM a.session_start_datetime) END + v_session_padding, -- total_duration
CASE WHEN a.page_view_count=1 THEN 1 ELSE 0 END -- bounce_count
FROM stg_session a
INNER JOIN dw.date_dim b 
 ON a.session_start_date=b.full_date
INNER JOIN dw.time_dim c
 ON a.session_start_time=c.full_time
LEFT OUTER JOIN dw.portal_host_dim h ON LOWER(a.host)=LOWER(h.hostname)
LEFT OUTER JOIN dw.partner_dim i ON a.partner_id=i.partner_id
LEFT OUTER JOIN dw.user_agent_dim k ON a.user_agent=k.user_agent_name
LEFT OUTER JOIN dw.portal_dim l ON a.portal_id=l.portal_id
LEFT OUTER JOIN dw.referrer_hostname_dim o ON a.referrer_hostname=o.hostname
LEFT OUTER JOIN dw.network_type_dim q ON a.network_type=q.network_type
WHERE NOT EXISTS (
SELECT 1 FROM dw.session_fact r WHERE r.uid=a.uid AND r.session=a.session)
-- scd type 2
AND a.session_start_datetime_pacific BETWEEN COALESCE(h.dt_effective,'2007-10-28') AND COALESCE(h.dt_expire,'9999-12-31') -- portal_host_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(i.dt_effective,'2007-10-28')  AND COALESCE(i.dt_expire,'9999-12-31') -- partner_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(l.dt_effective,'2007-10-28')  AND COALESCE(l.dt_expire,'9999-12-31') -- portal_dim
;

/* on successful load, truncate staging tables */
/* Comments all truncate scripts : SonTN/2011-03-10 */

/*
TRUNCATE TABLE stg_session;
TRUNCATE TABLE stg_session_agg_values;
TRUNCATE TABLE stg_wap_site_access_log;
*/

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_fact_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_daily_fact_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_daily_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_daily_fact_load(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_ad_channel_site_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_ad_channel_site_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_ad_channel_site_transform
||
|| Transform routine for site campaign fact table.
||
|| $Id: fn_daily_load_ad_channel_site_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_ad_channel_site_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 ad_name=COALESCE(ad_name,''N/A''),
 site_id=COALESCE(site_id,''-100''),
 site_name=COALESCE(site_name,''N/A''),
 impressions_delivered=COALESCE(impressions_delivered,''0''),
 clicks_recorded=COALESCE(clicks_recorded,''0''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ga_channel_sk=COALESCE(b.ga_channel_sk,-2)
 FROM refer.ga_channel_dim b
 WHERE a.ad_name = b.channel_mapping
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- ga_channel_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_site_sk=COALESCE(b.dc_site_sk,-2)
  ,partner_keyword=COALESCE(b.partner_keyword,''N/A'')
  ,portal_keyword=COALESCE(b.portal_keyword,''N/A'')
 FROM refer.dc_site_dim b
 WHERE cast(a.site_id as integer)=b.dc_site_id
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- dc_site_sk, partner, portal';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_keyword=b.keyword
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE a.portal_keyword=b.keyword
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_ad_channel_site_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_ad_channel_site_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_ad_channel_site_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_ad_request_transform(integer, character varying, text, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_ad_request_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_ad_request_transform
||
|| Transform routine for page view fact table.
||
|| $Id: fn_daily_load_ad_response_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_ad_request_transform(%,''%'',''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_app_server,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_ad_request_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_ad_request_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_ad_request_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_ad_response_transform(integer, character varying, text, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_ad_response_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_app_server text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_ad_response_transform
||
|| Transform routine for page view fact table.
||
|| $Id: fn_daily_load_ad_response_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_ad_response_transform(%,''%'',''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_app_server,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 user_agent=COALESCE(LOWER(user_agent),''N/A''),
 site_keyword=COALESCE(LOWER(site_keyword),''N/A''),
 eastern_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(response_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles'', 
 fullfilled_code=COALESCE(LOWER(fullfilled_code),''N/A'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   local_date=COALESCE((cast(a.response_date as timestamp with time zone) AT TIME ZONE b.time_zone_id)::date,''2005-01-01''),
   local_time=COALESCE((cast(a.response_date as timestamp with time zone) AT TIME ZONE b.time_zone_id)::time,''00:00:00'')
 FROM refer.partner_dim b
 WHERE cast(a.partner_id as integer)=b.partner_id
   AND cast(a.response_date as timestamp with time zone) BETWEEN b.dt_effective AND b.dt_expire
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE cast(a.partner_id as integer)=b.partner_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE cast(a.portal_id as integer)=b.portal_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- portal_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ad_content_category_sk=COALESCE(b.content_category_sk,-2)
 FROM refer.content_category_dim b
 WHERE cast(a.ad_content_category_id as integer)=b.content_category_id
   AND cast(a.response_date as timestamp with time zone) BETWEEN b.dt_effective AND b.dt_expire
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- ad_content_category_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ad_network_sk=COALESCE(b.ad_network_sk,-2)
 FROM refer.ad_network_dim b
 WHERE cast(a.ad_network_id as integer)=b.ad_network_id
   AND cast(a.response_date as timestamp with time zone) BETWEEN b.dt_effective AND b.dt_expire
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- ad_network_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T7 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_time_sk=COALESCE(b.time_sk,-2)
 FROM refer.time_dim b
 WHERE a.eastern_time=b.full_time
;';

EXECUTE cmd;
--RAISE NOTICE 'T8 ENDED -- eastern_time_sk';

/* Add by thohoang on 2011-06-09 */
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_site_sk=COALESCE(b.dc_site_sk,-2)
 FROM refer.dc_site_dim b
 WHERE a.site_keyword = b.site_keyword
   AND cast(a.response_date as timestamp with time zone) BETWEEN b.dt_effective AND b.dt_expire
;';

EXECUTE cmd;
--RAISE NOTICE 'T9 ENDED -- dc_site_sk';

/* Add by thohoang on 2011-07-19 */

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_module_sk=COALESCE(b.partner_module_sk,-2)
 FROM refer.partner_module_dim b
 WHERE cast(a.partner_module_id as integer)=b.partner_module_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T10 ENDED -- partner_module_sk';

/* Add by thohoang on 2011-12-21 */

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   user_agent_sk=COALESCE(b.user_agent_sk,-2)
 FROM refer.user_agent_dim b
 WHERE a.user_agent=b.user_agent_name
;';

EXECUTE cmd;
--RAISE NOTICE 'T11 ENDED -- user_agent_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_ad_response_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_ad_response_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_ad_response_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_adsense_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_adsense_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_adsense_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_adsense_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_adsense_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site=COALESCE(site,''N/A''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET partner_sk = b.partner_sk
 FROM (
   SELECT aa.current_google_adsense_site, bb.partner_sk 
   FROM adnetwork.mapping_ga aa
   INNER JOIN refer.partner_dim bb ON bb.partner_id = aa.partner_id AND bb.dt_expire = ''9999-12-31''
 ) b
 WHERE a.site = b.current_google_adsense_site
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- partner_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_adsense_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_adsense_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_adsense_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_citygrid_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_citygrid_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_citygrid_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_citygrid_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_citygrid_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 placement=COALESCE(placement,''N/A''), 
 billable_leads=COALESCE(billable_leads,''0''), 
 estimated_net_earnings=COALESCE(estimated_net_earnings,''0''), 
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.placement=b.keyword
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_citygrid_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_citygrid_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_citygrid_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_event_tracker_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_event_tracker_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_event_tracker_transform
||
|| Transform routine for page view fact table.
||
|| $Id: fn_daily_load_event_tracker_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_event_tracker_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 url_f=COALESCE(LOWER(url_f),''-100''),
 url_c=COALESCE(LOWER(url_c),''-100''),
 rs_01=COALESCE(LOWER(rs_01),''N/A''),
 rs_02=COALESCE(LOWER(rs_02),''N/A''),
 rs_03=COALESCE(LOWER(rs_03),''-100''),
 rs_04=COALESCE(LOWER(rs_04),''-100''),
 url_r=COALESCE(LOWER(url_r),''-100''),
 user_agent=COALESCE(LOWER(user_agent),''N/A''),
 referrer_hostname=COALESCE(LOWER(referrer_hostname),''N/A''),
 eastern_date=(cast(request_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(request_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(request_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(request_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 request_date_pacific=cast(request_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_time_sk=COALESCE(b.time_sk,-2)
 FROM refer.time_dim b
 WHERE a.eastern_time=b.full_time
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_time_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   gmt_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.gmt_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- gmt_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   gmt_time_sk=COALESCE(b.time_sk,-2)
 FROM refer.time_dim b
 WHERE a.gmt_time=b.full_time
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- gmt_time_sk';

/* transform flight (default -100)
url_fd           | url_f
------------------------
trane            | -1000
bkDynSpan        | -1001
bkDynEng         | -1002
bkEngiOS         | -1003
bkSpaniOS        | -1004
bkEngNoniOS      | -1005
bkSpanNoniOS     | -1006
*/

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   url_f=CASE
             WHEN url_fd = ''trane''        THEN ''-1000''
             WHEN url_fd = ''bkDynSpan''    THEN ''-1001''
             WHEN url_fd = ''bkDynEng''     THEN ''-1002''
             WHEN url_fd = ''bkEngiOS''     THEN ''-1003''
             WHEN url_fd = ''bkSpaniOS''    THEN ''-1004''
             WHEN url_fd = ''bkEngNoniOS''  THEN ''-1005''
             WHEN url_fd = ''bkSpanNoniOS'' THEN ''-1006''
         END
 WHERE url_fd IN (''trane'',''bkDynSpan'',''bkDynEng'',''bkEngiOS'',''bkSpaniOS'',''bkEngNoniOS'',''bkSpanNoniOS'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- url_fd=trane';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   adm_flight_sk=COALESCE(b.flight_sk,-2)
 FROM refer.adm_flight_dim b
 WHERE a.url_f is not null
   AND a.url_fd is not null
   AND cast(a.url_f as integer)=b.flight_id
   AND a.url_fd = b.digest_current
   AND a.request_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T7 ENDED -- adm_flight_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   adm_creative_sk=COALESCE(b.creative_sk,-2)
 FROM refer.adm_creative_dim b
 WHERE a.url_c is not null
   AND a.url_cd is not null
   AND cast(a.url_c as integer)=b.creative_id
   AND a.url_cd = b.digest_current
   AND a.request_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T8 ENDED -- adm_creative_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_event_tracker_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_event_tracker_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_event_tracker_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_ga_channel_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_ga_channel_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_ga_channel_transform
||
|| Transform routine for site campaign fact table.
||
|| $Id: fn_daily_load_ga_channel_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_ga_channel_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 custom_channel=COALESCE(custom_channel,''N/A''),
 product=COALESCE(product,''N/A''),
 page_views=COALESCE(page_views,''0''),
 clicks=COALESCE(clicks,''0''),
 page_ctr=COALESCE(page_ctr,''0''),
 cpc=COALESCE(cpc,''0''),
 page_rpm=COALESCE(page_rpm,''0''),
 estimated_earnings=COALESCE(estimated_earnings,''0''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

/* insert missing google adsense channel */
cmd := '
INSERT INTO refer.ga_channel_dim(channel_name, auto_generated, suppress, data_file_id, 
				 dt_effective, dt_expire, channel_mapping)
SELECT distinct a.custom_channel, TRUE, FALSE, a.data_file_id,
       a.report_date::date,''9999-12-31''::date,a.custom_channel
FROM staging.' || p_staging_table_name::text || ' a
WHERE NOT EXISTS (
				   SELECT 1
				   FROM refer.ga_channel_dim b
				   WHERE a.custom_channel=b.channel_name
				  )
AND a.custom_channel IS NOT NULL
AND a.data_file_id = ' || p_data_file_id || '
;';

--RAISE NOTICE 'DEBUG: cmd=%',cmd;
EXECUTE cmd;
/* ended : insert missing ga_channel */

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ga_channel_sk=COALESCE(b.ga_channel_sk,-2)
 FROM refer.ga_channel_dim b
 WHERE a.custom_channel =b.channel_name
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- ga_channel_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_ga_channel_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_ga_channel_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_ga_channel_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_itunes_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_itunes_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_itunes_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_itunes_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_itunes_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 app_name=COALESCE(app_name,''N/A''), 
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

/* ============== fix partner_id ============== */
/* app_name 'com.vervewireless.ipad.kalb' - 'kalb' - 3534 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3534'' WHERE app_name = ''com.vervewireless.ipad.kalb'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.ipad.knoe' - 'knoe' - 3549 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3549'' WHERE app_name = ''com.vervewireless.ipad.knoe'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.ipad.standardex' - 'standardex' - 3818 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3818'' WHERE app_name = ''com.vervewireless.ipad.standardex'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.ipad.valleynews' - 'valleynews' - 3533 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3533'' WHERE app_name = ''com.vervewireless.ipad.valleynews'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.kalb' - 'kalb' - 3534 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3534'' WHERE app_name = ''com.vervewireless.kalb'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.sportsday' - 'sportsday' - 2966 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''2966'' WHERE app_name = ''com.vervewireless.sportsday'';';
EXECUTE cmd;
/* ============================================ */

/* ============== fix portal_id =============== */
-- if the app_name contains 'ipad' then the portal will be assigned as 'ipad' everything else will be iphone.
-- 36;"iPad News Client" - 23;"iPhone News Client" */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET portal_id = CASE WHEN lower(app_name) ILIKE ''%ipad%'' THEN 36 ELSE 23 END;';
EXECUTE cmd;
/* ============================================ */

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_id::integer=b.partner_id
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE a.portal_id=b.portal_id
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- portal_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_itunes_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_daily_load_itunes_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_daily_load_itunes_performance_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_itunes_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_jt_pub_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_jt_pub_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_jt_pub_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_jt_pub_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_jt_pub_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site=COALESCE(site,''N/A''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

/* ============================================ */
/* fix site name 'site 15666','AP' to 'ap' */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET site=''ap'' WHERE site = ''site 15666'' OR site = ''AP'';';
EXECUTE cmd;
/* fix site name '247Sports' to 'nxg247Sports' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxg247Sports'' WHERE site = ''247Sports'';';
EXECUTE cmd;
/* fix site name '8Tracks' to 'nxg8Tracks' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxg8Tracks'' WHERE site = ''8Tracks'';';
EXECUTE cmd;
/* fix site name 'Activecom' to 'active' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''active'' WHERE site = ''Activecom'';';
EXECUTE cmd;
/* fix site name 'Bebo' to 'nxgBebo' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxgBebo'' WHERE site = ''Bebo'';';
EXECUTE cmd;
/* fix site name 'Chicago Sun Times' to 'suntimes' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''suntimes'' WHERE site = ''Chicago Sun Times'';';
EXECUTE cmd;
/* fix site name 'dailyplanetstg' to 'dailyplanet' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''dailyplanet'' WHERE site = ''dailyplanetstg'';';
EXECUTE cmd;
/* fix site name 'eventful' to 'Eventful' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''Eventful'' WHERE site = ''eventful'';';
EXECUTE cmd;
/* fix site name 'Great Schools' to 'greatschools' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''greatschools'' WHERE site = ''Great Schools'';';
EXECUTE cmd;
/* fix site name 'Hi5' to 'nxgHi5' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxgHi5'' WHERE site = ''Hi5'';';
EXECUTE cmd;
/* fix site name 'KOMO' to 'komo' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''komo'' WHERE site = ''KOMO'';';
EXECUTE cmd;
/* fix site name 'SCRealEstate' to 'screalestate' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''screalestate'' WHERE site = ''SCRealEstate'';';
EXECUTE cmd;
/* fix site name 'Star Tribune' to 'startribune' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''startribune'' WHERE site = ''Star Tribune'';';
EXECUTE cmd;
/* fix site name 'WashingtonTimes' to 'WashTimes' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''WashTimes'' WHERE site = ''WashingtonTimes'';';
EXECUTE cmd;
/* ============================================ */
--RAISE NOTICE 'fix site name';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.site=b.keyword
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_jt_pub_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_daily_load_jt_pub_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_daily_load_jt_pub_performance_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_jt_pub_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_jumptap_daily_sum_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_jumptap_daily_sum_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_jumptap_daily_sum_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_jumptap_daily_sum_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_jumptap_daily_sum_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 requests=COALESCE(requests,''0''),
 paid_impressions=COALESCE(paid_impressions,''0''),
 clicks=COALESCE(clicks,''0''),
 net_revenue=COALESCE(net_revenue,''0''),
 fill_rate=COALESCE(fill_rate,''0''),
 click_thru_rate=COALESCE(click_thru_rate,''0''),
 net_cost_per_click=COALESCE(net_cost_per_click,''0''),
 net_ecpm=COALESCE(net_ecpm,''0''),
 net_revenue_per_thousand=COALESCE(net_revenue_per_thousand,''0''),
 
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_jumptap_daily_sum_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_jumptap_daily_sum_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_jumptap_daily_sum_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_main(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_main(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_main
||
|| Coordinates TRANSFORM and LOAD steps for page view fact table.
||
|| $Id: fn_daily_load_main.sql 88 2008-08-27 00:35:24Z abyfield $
|| $Id: fn_daily_load_main.sql 88 2011-03-10 00:35:24Z SonTN $
||
*/

DECLARE 
 v_file_status staging.data_file.file_status%TYPE:=p_file_status;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_daily_load_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status, p_staging_table_name;

/* let's process EITHER a transform OR a load, then exit */
/* transform 1 */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM fn_daily_load_transform1(p_data_file_id,p_file_status, p_staging_table_name);
/* transform 2 */
ELSIF v_file_status = 'T1' THEN
  SELECT * INTO v_file_status FROM fn_daily_load_transform2(p_data_file_id,p_file_status, p_staging_table_name);
/* transform 3 */
ELSIF v_file_status = 'T2' THEN
  SELECT * INTO v_file_status FROM fn_daily_load_transform3(p_data_file_id,p_file_status, p_staging_table_name);
/* transform 4 */
ELSIF v_file_status = 'T3' THEN
  SELECT * INTO v_file_status FROM fn_daily_load_transform4(p_data_file_id,p_file_status, p_staging_table_name);
/* transform 5 */
ELSIF v_file_status = 'T4' THEN
  SELECT * INTO v_file_status FROM fn_daily_load_transform5(p_data_file_id,p_file_status, p_staging_table_name);
/* load page view fact */
ELSIF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM fn_daily_fact_load.sql(p_data_file_id,p_file_status, p_staging_table_name);
END IF;

RAISE DEBUG 'ENDING: % fn_page_view_fact_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_daily_load_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_page_view_fact_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_main(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_marchex_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_marchex_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_marchex_performance_transform
||
|| Transform routine for marchex performance fact table.
||
|| $Id: fn_daily_load_marchex_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_marchex_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 name=COALESCE(name,''N/A''),
 site_name=COALESCE(site_name,''N/A''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.site_name=b.keyword
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_marchex_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_marchex_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_marchex_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_millenial_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_millenial_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_millenial_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_millenial_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_millenial_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 name=COALESCE(name,''N/A''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET partner_sk = b.partner_sk
    ,portal_sk = b.portal_sk
 FROM (
   SELECT aa.current_millennial_media_name, bb.partner_sk, cc.portal_sk
   FROM adnetwork.mapping_mm aa
   INNER JOIN refer.partner_dim bb ON bb.partner_id = aa.partner_id AND bb.dt_expire = ''9999-12-31''
   INNER JOIN refer.portal_dim cc ON cc.portal_id = aa.portal_id AND cc.dt_expire = ''9999-12-31''
 ) b
 WHERE a.name = b.current_millennial_media_name
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- partner_sk,portal_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET partner_keyword = (string_to_array("name", ''_''))[1]
    ,portal_keyword = (string_to_array("name", ''_''))[2]
 WHERE a.partner_sk < 0 and a.portal_sk < 0
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- partner_keyword,portal_keyword';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_keyword=b.keyword
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE a.portal_keyword=b.keyword
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- portal_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_millenial_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_millenial_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_millenial_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_site_campaign_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_site_campaign_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_site_campaign_transform
||
|| Transform routine for site campaign fact table.
||
|| $Id: fn_daily_load_site_campaign_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_site_campaign_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site_name=COALESCE(LOWER(site_name),''N/A''),
 order_name=COALESCE(LOWER(order_name),''N/A''),
 eastern_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(response_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_site_sk=COALESCE(b.dc_site_sk,-2)
  ,partner_keyword=COALESCE(b.partner_keyword_current,''N/A'')
 FROM refer.dc_site_dim b
 WHERE cast(a.site_id as integer)=b.dc_site_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- dc_site_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_order_sk=COALESCE(b.dc_order_sk,-2)
 FROM refer.dc_order_dim b
 WHERE cast(a.order_id as integer)=b.dc_order_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- dc_order_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   creative_sk=COALESCE(b.creative_sk,-2)
 FROM refer.adm_creative_dim b
 WHERE cast(a.creative_id as integer)=b.remote_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- creative_sk';


cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   website_sk=COALESCE(b.website_sk,-2)
  ,publisher_id=COALESCE(b.publisher_id,-100)
 FROM refer.adm_website_dim b
 WHERE a.partner_keyword=b.keyname
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- website_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   publisher_sk=COALESCE(b.publisher_sk,-2)
 FROM refer.adm_publisher_dim b
 WHERE a.publisher_id=b.publisher_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T7 ENDED -- publisher_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_site_campaign_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_site_campaign_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_site_campaign_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_site_device_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_site_device_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_site_device_transform
||
|| Transform routine for site campaign fact table.
||
|| $Id: fn_daily_load_site_device_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_site_device_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site_name=COALESCE(LOWER(site_name),''N/A''),
 mobile_platform=COALESCE(LOWER(mobile_platform),''N/A''),
 eastern_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(response_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_site_sk=COALESCE(b.dc_site_sk,-2)
  ,partner_keyword=COALESCE(b.partner_keyword_current,''N/A'')
 FROM refer.dc_site_dim b
 WHERE cast(a.site_id as integer)=b.dc_site_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- dc_site_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   website_sk=COALESCE(b.website_sk,-2)
  ,publisher_id=COALESCE(b.publisher_id,-100)
 FROM refer.adm_website_dim b
 WHERE a.partner_keyword=b.keyname
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- website_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   publisher_sk=COALESCE(b.publisher_sk,-2)
 FROM refer.adm_publisher_dim b
 WHERE a.publisher_id=b.publisher_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- publisher_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_site_device_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_site_device_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_site_device_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_site_order_forecast_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_site_order_forecast_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_site_order_forecast_transform
||
|| Transform routine for site campaign fact table.
||
|| $Id: fn_daily_load_site_order_forecast_transform.sql 127 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_site_order_forecast_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site_name=COALESCE(LOWER(site_name),''N/A''),
 order_name=COALESCE(LOWER(order_name),''N/A''),
 eastern_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(response_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(response_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_site_sk=COALESCE(b.dc_site_sk,-2)
  ,partner_keyword=COALESCE(b.partner_keyword_current,''N/A'')
 FROM refer.dc_site_dim b
 WHERE cast(a.site_id as integer)=b.dc_site_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- dc_site_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_order_sk=COALESCE(b.dc_order_sk,-2)
 FROM refer.dc_order_dim b
 WHERE cast(a.order_id as integer)=b.dc_order_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- dc_order_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   creative_sk=COALESCE(b.creative_sk,-2)
 FROM refer.adm_creative_dim b
 WHERE cast(a.creative_id as integer)=b.remote_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- creative_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   website_sk=COALESCE(b.website_sk,-2)
  ,publisher_id=COALESCE(b.publisher_id,-100)
 FROM refer.adm_website_dim b
 WHERE a.partner_keyword=b.keyname
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- website_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   publisher_sk=COALESCE(b.publisher_sk,-2)
 FROM refer.adm_publisher_dim b
 WHERE a.publisher_id=b.publisher_id
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T7 ENDED -- publisher_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_site_order_forecast_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_site_order_forecast_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_site_order_forecast_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_superpages_daily_sum_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_superpages_daily_sum_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_superpages_daily_sum_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_superpages_daily_sum_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_superpages_daily_sum_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 ppc_revenue=COALESCE(ppc_revenue,''0''),
 src=COALESCE(src,''N/A''),
 searches=COALESCE(searches,''0''),
 ppc_billable_clicks=COALESCE(ppc_billable_clicks,''0''),

 affiliate_name=COALESCE(affiliate_name,''N/A''),
 coverage=COALESCE(coverage,''0''),
 rpc=COALESCE(rpc,''0''),
 
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ad_network_id=CASE
             WHEN affiliate_name = ''Verve Wireless''        THEN 24
             WHEN affiliate_name = ''verve wireless 2''    THEN 26
         END
 WHERE affiliate_name IN (''Verve Wireless'',''verve wireless 2'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- ad_network_id';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ad_network_sk=COALESCE(b.ad_network_sk,-2)
 FROM refer.ad_network_dim b
 WHERE a.ad_network_id=b.ad_network_id
   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- ad_network_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_superpages_daily_sum_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_superpages_daily_sum_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_superpages_daily_sum_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_transform1(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_transform1(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_transform1
||
|| Transform routine for page view fact table.
||
|| $Id: fn_daily_load_transform1.sql 127 2009-02-01 11:49:14Z abyfield $
||
*/

DECLARE
 v_file_status          staging.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status staging.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_transform1(%,''%'',''%'')',timeofday(),p_data_file_id,p_file_status,p_staging_table_name;

v_previous_file_status:=v_file_status;
v_file_status:='T1';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
SELECT data_file_config_id INTO v_data_file_config_id
FROM data_file
WHERE data_file_id=p_data_file_id;

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET request_type_id=CASE 
 WHEN v_data_file_config_id=10 THEN 11
 WHEN path ILIKE ''/adcel/%'' THEN 11 
 WHEN status BETWEEN 500 AND 599 THEN 15 
 WHEN status BETWEEN 400 AND 499 THEN 14 
 WHEN status BETWEEN 300 AND 399 THEN 13 
 WHEN status NOT BETWEEN 200 AND 299 THEN 1 
 WHEN (''http://'' || host || path) = referrer THEN 13 
 WHEN path ILIKE ''%favicon.ico%'' THEN 2 
 WHEN path ILIKE ''%robots.txt%'' THEN 5 
 WHEN path ILIKE ''/styles/%'' THEN 6 
 WHEN path ILIKE ''/images/%'' THEN 7 
 WHEN path ILIKE ''/img/%'' THEN 8 
 WHEN path ILIKE ''/script/%'' THEN 9 
 WHEN path ILIKE ''/media/%'' THEN 10
 WHEN path ILIKE ''/hbt/%'' THEN 12 
 WHEN EXISTS (SELECT 1 FROM dw.referrer_hostname_dim a 
              WHERE LOWER((fn_parse_url(referrer)).host) = a.hostname AND a.suppress = ''t'') THEN 17 
 ELSE 0  
 END, 
 host=rtrim(host,''.''), 
 referrer_hostname=COALESCE(LOWER((fn_parse_url(referrer)).host),''N/A''), 
 session=CASE session 
 WHEN ''-'' THEN NULL
 ELSE session 
 END, 
 eastern_date=(dtrequested AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(dtrequested AT TIME ZONE ''America/New_York'')::time, 
 gmt_date=(dtrequested AT TIME ZONE ''UTC'')::date, 
 gmt_time=(dtrequested AT TIME ZONE ''UTC'')::time, 
 dtrequested_pacific=dtrequested AT TIME ZONE ''America/Los_Angeles'', 
 user_agent=COALESCE(LOWER(user_agent),''N/A''), 
 display_block_id=COALESCE(display_block_id,-100), 
 partner_module_id=COALESCE(partner_module_id,-100), 
 network_type=COALESCE(LOWER(network_type),''N/A''), 
 page_template=COALESCE(LOWER(page_template),''N/A''), 
 domain=COALESCE(LOWER((fn_parse_url(referrer)).domain),''direct/none'') ; ';

EXECUTE cmd;

/* assign request exceptions - content-api video download */
IF v_data_file_config_id=8 THEN -- content-api

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a 
 SET    request_type_id=16 
 FROM   dw.partner_module_dim c 
 WHERE  a.partner_module_id=c.partner_module_id 
   AND  c.feature_module_name=''videoGalleryModule''
   AND  a.request_type_id=0 
   AND  a.dtrequested_pacific BETWEEN c.dt_effective AND c.dt_expire; ';
EXECUTE cmd;

END IF;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_transform1(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_transform1(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_transform1(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_transform2(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_transform2(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_transform2
||
|| Transform routine for page view fact table.
||
|| $Id: fn_daily_load_transform2.sql 88 2010-03-10 00:35:24Z SonTN $
||
*/

DECLARE
 v_file_status          staging.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status staging.data_file.file_status%TYPE;
 cmd                    text;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_daily_load_transform2(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

v_previous_file_status:=v_file_status;
v_file_status:='T2';

/* Now, let's set the partner ids */
cmd := '
UPDATE ' || p_staging_table_name::text || ' a
SET 	partner_id=b.partner_id,
	local_date=COALESCE((a.dtrequested AT TIME ZONE b.time_zone_id)::date,''2005-01-01''),
	local_time=COALESCE((a.dtrequested AT TIME ZONE b.time_zone_id)::time,''00:00:00'')
FROM dw.partner_dim b
WHERE LOWER(a.partner_keyword)=LOWER(b.keyword)
AND a.dtrequested_pacific BETWEEN b.dt_effective AND b.dt_expire;
';

EXECUTE cmd;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RETURN v_file_status;

RAISE DEBUG 'ENDING: % fn_daily_load_transform2(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_daily_load_transform2(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform2',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_transform2(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_transform3(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_transform3(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_transform3
||
|| Transform routine for page view fact table.
||
|| $Id: fn_page_view_fact_transform3.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status          staging.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status staging.data_file.file_status%TYPE;
 cmd                    text;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_daily_load_transform3(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

v_previous_file_status:=v_file_status;
v_file_status:='T3';

/* use portal_host_dim it to set portal_ids */
cmd := '
UPDATE ' || p_staging_table_name::text || ' a
SET portal_id=COALESCE(b.portal_id,a.portal_id)
FROM dw.portal_host_dim b
WHERE LOWER(a.host)=LOWER(b.hostname) 
AND a.dtrequested_pacific BETWEEN b.dt_effective AND b.dt_expire;
';

EXECUTE cmd;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_transform3(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_daily_load_transform3(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_page_view_fact_transform3',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_transform3(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_transform4(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_transform4(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_transform4
||
|| Transform routine for page view fact table.
||
|| $Id: fn_daily_load_transform4.sql 124 2011-03-10 23:22:15Z SonTN $
||
*/

DECLARE
 v_file_status staging.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status staging.data_file.file_status%TYPE;
 cmd	                TEXT;
BEGIN

RAISE DEBUG 'STARTING: % fn_daily_load_transform4(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

v_previous_file_status:=v_file_status;
v_file_status:='T4';

/* Populate content_category from display block. */
cmd := '
UPDATE ' || p_staging_table_name::text || ' a
SET	content_category_id=COALESCE(b.content_category_id,a.content_category_id)
FROM dw.display_block_dim b 
WHERE a.display_block_id = b.display_block_id 
AND a.dtrequested_pacific BETWEEN b.dt_effective AND b.dt_expire;';

/* Execute populate content_category from display block script */

EXECUTE cmd;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_transform4(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_daily_load_transform4(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_daily_load_transform4',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_transform4(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_transform5(integer, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_transform5(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_transform5
||
|| Transform routine for session fact table.
||
|| This handles the following steps:
||	1) get uid and session (key); get min date/max date/page views
||	2) load earliest records in stg_session
||	3) update end date with max date
||      4) flag new visits
||
|| $Id: fn_daily_load_transform5.sql 124 201-03-10 23:22:15Z SonTN $
||
*/

DECLARE
 v_file_status staging.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status staging.data_file.file_status%TYPE;
 v_rc_temp INTEGER:=0;
 v_rc_insert INTEGER:=0;
 v_rc_update INTEGER:=0;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_daily_load_transform5(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* get key, max date/min date/page views */
/* XXX Disabled temporarily.
INSERT INTO stg_session_agg_values (uid,session,min_datetime,max_datetime,page_view_count)
SELECT uid,session,min(dtrequested),max(dtrequested),count(*)
FROM stg_wap_site_access_log
WHERE request_type_id=0
AND uid IS NOT NULL
AND session IS NOT NULL
AND dtrequested IS NOT NULL
GROUP BY uid,session;
XXX Disabled temporarily. */

/* load earliest records into stg_session */
/* if referrer_host exists for uid+session+min_datetime, insert earliest record associated
with it */
/* XXX Disabled temporarily.
INSERT INTO stg_session (session_start_date,session_start_time,host,partner_id,user_agent,
portal_id,referrer_hostname,network_type,uid,session,
session_start_datetime,source_ip,client,username,request,
method,path,arguments,protocol,status,
referrer,page_view_count,session_start_datetime_pacific)
SELECT a.eastern_date,a.eastern_time,a.host,a.partner_id,a.user_agent,
a.portal_id,a.referrer_hostname,a.network_type,a.uid,a.session,
a.dtrequested,a.source_ip,a.client,a.username,a.request,
a.method,a.path,a.arguments,a.protocol,a.status,
a.referrer,b.page_view_count,a.dtrequested_pacific
FROM stg_wap_site_access_log a
INNER JOIN (
	SELECT 	b1.uid,
		b1.session,
		b1.min_datetime,
		b1.page_view_count, -- carry along to outer query
		min(a1.stg_wap_site_access_log_id) as stg_wap_site_access_log_id
	FROM stg_wap_site_access_log a1
	INNER JOIN stg_session_agg_values b1 ON a1.uid=b1.uid and a1.session=b1.session and a1.dtrequested=b1.min_datetime
	WHERE a1.referrer_hostname<>'N/A'
	GROUP BY b1.uid,b1.session,b1.min_datetime,b1.page_view_count) b ON a.stg_wap_site_access_log_id=b.stg_wap_site_access_log_id
;
XXX Disabled temporarily. */

/* get rowcount */
/* XXX Disabled temporarily.
GET DIAGNOSTICS v_rc_temp = ROW_COUNT;
v_rc_insert=v_rc_temp+v_rc_insert;
XXX Disabled temporarily. */

/* now, get the earliest record associated with each uid+session+min_datetime without a referrer_host */
/* XXX Disabled temporarily.
INSERT INTO stg_session (session_start_date,session_start_time,host,partner_id,user_agent,
portal_id,referrer_hostname,network_type,uid,session,
session_start_datetime,source_ip,client,username,request,
method,path,arguments,protocol,status,
referrer,page_view_count,session_start_datetime_pacific)
SELECT a.eastern_date,a.eastern_time,a.host,a.partner_id,a.user_agent,
a.portal_id,a.referrer_hostname,a.network_type,a.uid,a.session,
a.dtrequested,a.source_ip,a.client,a.username,a.request,
a.method,a.path,a.arguments,a.protocol,a.status,
a.referrer,b.page_view_count,a.dtrequested_pacific
FROM stg_wap_site_access_log a
INNER JOIN (
        SELECT  b1.uid,
                b1.session,
                b1.min_datetime,
                b1.page_view_count, -- carry along to outer query
                min(a1.stg_wap_site_access_log_id) as stg_wap_site_access_log_id
        FROM stg_wap_site_access_log a1
        INNER JOIN stg_session_agg_values b1 ON a1.uid=b1.uid and a1.session=b1.session and a1.dtrequested=b1.min_datetime
	WHERE NOT EXISTS (
		SELECT 1
		FROM stg_session a2
		WHERE a2.uid=b1.uid and a2.session=b1.session)
        GROUP BY b1.uid,b1.session,b1.min_datetime,b1.page_view_count) b ON a.stg_wap_site_access_log_id=b.stg_wap_site_access_log_id
;
XXX Disabled temporarily. */

/* get rowcount */
/* XXX Disabled temporarily.
GET DIAGNOSTICS v_rc_temp = ROW_COUNT;
v_rc_insert=v_rc_temp+v_rc_insert;
XXX Disabled temporarily. */

/* update end date */
/* Grabbing a single record doesn't matter here, since all we want is the date */
/* XXX Disabled temporarily.
UPDATE stg_session a
SET session_end_datetime=b.dtrequested
FROM stg_wap_site_access_log b
INNER JOIN stg_session_agg_values c ON b.uid=c.uid and b.session=c.session and b.dtrequested=c.max_datetime
WHERE a.uid=b.uid
AND a.session=b.session;
XXX Disabled temporarily. */

/* get rowcount */
/* XXX Disabled temporarily. GET DIAGNOSTICS v_rc_update = ROW_COUNT; */

/* check to ensure all records have matched */
/* XXX Disabled temporarily.
IF v_rc_insert <> v_rc_update THEN
RAISE EXCEPTION 'Rowcount of update does not match rowcount of insert for data_file_id=%!  Insert:  %; Update:  %',p_data_file_id,v_rc_insert,v_rc_update;
END IF;
XXX Disabled temporarily. */

/* flag new visits */
/* XXX Disabled temporarily.
UPDATE stg_session a
SET new_visit_count=1
WHERE NOT EXISTS (
	SELECT 1
	FROM dw.session_fact b
	WHERE a.uid=b.uid)
;
XXX Disabled temporarily. */

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_transform5(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_daily_load_transform5(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_daily_load_transform5',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_transform5(p_data_file_id integer, p_file_status character varying, p_staging_table_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_where_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_where_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_where_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_where_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_where_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 placement=COALESCE(placement,''N/A''),
 partner_keyword=COALESCE(partner_keyword,''N/A''),
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 response_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_keyword=b.keyword
   AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_where_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_where_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_where_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_daily_load_yellowpages_daily_sum_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_daily_load_yellowpages_daily_sum_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_daily_load_yellowpages_daily_sum_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_daily_load_yellowpages_daily_sum_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_daily_load_yellowpages_daily_sum_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site_name=COALESCE(site_name,''N/A''),
 requests=COALESCE(requests,''0''),
 impressions=COALESCE(impressions,''0''),
 fill_rate=COALESCE(fill_rate,''0''),
 clicks=COALESCE(clicks,''0''),
 ctr=COALESCE(ctr,''0''),
 ecpm=COALESCE(ecpm,''0''),
 est_earnings=COALESCE(est_earnings,''0''),
 
 eastern_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::date, 
 eastern_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''America/New_York'')::time,
 gmt_date=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::date, 
 gmt_time=(cast(report_date as timestamp with time zone) AT TIME ZONE ''UTC'')::time, 
 report_date_pacific=cast(report_date as timestamp with time zone) AT TIME ZONE ''America/Los_Angeles''
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_date_sk=COALESCE(b.date_sk,-2)
 FROM refer.date_dim b
 WHERE a.eastern_date=b.full_date
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_daily_load_yellowpages_daily_sum_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_daily_load_yellowpages_daily_sum_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_daily_load_yellowpages_daily_sum_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_ad_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_ad_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_ad_dim_load
||
|| Load routine for dc ad dimension.
||
|| $Id: fn_dc_ad_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='dc_ad_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_dc_ad_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.dc_ad_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_dc_ad a 
WHERE a.dc_ad_id=b.dc_ad_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.ad_name<>b.ad_name OR
a.start_date::timestamp with time zone<>b.start_date OR
a.end_date::timestamp with time zone<>b.end_date
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.dc_ad_dim(
            dc_ad_id, ad_name, start_date, end_date, auto_generated, suppress, 
            data_file_id, dt_effective, dt_expire, order_name_current, advertiser_name_current)
SELECT a.dc_ad_id,a.ad_name, a.start_date::timestamp with time zone, a.end_date::timestamp with time zone, FALSE, FALSE,
       a.data_file_id,dt_expire_old + interval '1 second', '9999-12-31', 'N/A'
FROM staging.stg_dc_ad a
INNER JOIN refer.dc_ad_dim b ON a.dc_ad_id=b.dc_ad_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.dc_ad_dim(
            dc_ad_id, ad_name, start_date, end_date, auto_generated, suppress, 
            data_file_id, dt_effective, dt_expire, order_name_current, advertiser_name_current)
SELECT a.dc_ad_id,a.order_name, a.start_date::timestamp with time zone, a.end_date::timestamp with time zone, FALSE, FALSE,
       a.data_file_id,dt_expire_old + interval '1 second', '9999-12-31', 'N/A'
FROM staging.stg_dc_ad a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.dc_ad_dim b 
WHERE a.dc_ad_id=b.dc_ad_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.dc_ad_dim b
SET     ad_name_current=a.ad_name
FROM staging.stg_dc_ad a
WHERE a.dc_ad_id=b.dc_ad_id
AND a.data_file_id=p_data_file_id
AND (   b.ad_name_current<>a.ad_name )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dc_ad_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dc_ad_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_dc_ad_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_ad_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_ad_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_ad_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for dc ad dimension.
||
|| $Id: fn_dc_ad_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_dc_ad_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_dc_ad_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_dc_ad_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_dc_ad_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_dc_ad_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_dc_ad_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_ad_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_ad_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_ad_dim_transform
||
|| Transform routine for dc ad dimension.
||
|| $Id: fn_dc_ad_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_dc_ad_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_dc_ad
SET
 dc_ad_id=COALESCE(dc_ad_id,-100),
 ad_name=COALESCE(rtrim(ltrim(ad_name)),'N/A')
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_dc_ad
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dc_ad_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dc_ad_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_dc_ad_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_order_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_order_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_order_dim_load
||
|| Load routine for dc site dimension.
||
|| $Id: fn_dc_order_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='dc_order_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_dc_order_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.dc_order_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_dc_order a 
WHERE a.dc_order_id=b.dc_order_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.order_name<>b.order_name OR
a.start_date::timestamp with time zone<>b.start_date OR
a.end_date::timestamp with time zone<>b.end_date OR
a.advertiser_id<>b.advertiser_id OR
a.advertiser_name<>b.advertiser_name OR
a.contract_approved<>b.contract_approved
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.dc_order_dim(
            dc_order_id, order_name, start_date, end_date, advertiser_id, 
            advertiser_name, contract_approved, auto_generated, suppress, 
            data_file_id, dt_effective, dt_expire, order_name_current, advertiser_name_current)
SELECT a.dc_order_id,a.order_name, a.start_date::timestamp with time zone, a.end_date::timestamp with time zone, a.advertiser_id, 
       a.advertiser_name, a.contract_approved, FALSE, FALSE,
       a.data_file_id,dt_expire_old + interval '1 second', '9999-12-31', 'N/A','N/A'
FROM staging.stg_dc_order a
INNER JOIN refer.dc_order_dim b ON a.dc_order_id=b.dc_order_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.dc_order_dim(
            dc_order_id, order_name, start_date, end_date, advertiser_id, 
            advertiser_name, contract_approved, auto_generated, suppress, 
            data_file_id, dt_effective, dt_expire, order_name_current, advertiser_name_current)
SELECT a.dc_order_id,a.order_name, a.start_date::timestamp with time zone, a.end_date::timestamp with time zone, a.advertiser_id, 
       a.advertiser_name, a.contract_approved, FALSE, FALSE,
       a.data_file_id,dt_expire_old + interval '1 second', '9999-12-31', 'N/A','N/A'
FROM staging.stg_dc_order a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.dc_order_dim b 
WHERE a.dc_order_id=b.dc_order_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.dc_order_dim b
SET     order_name_current=a.order_name,
        advertiser_name_current=a.advertiser_name
FROM staging.stg_dc_order a
WHERE a.dc_order_id=b.dc_order_id
AND a.data_file_id=p_data_file_id
AND (   b.order_name_current<>a.order_name OR
        b.advertiser_name_current<>a.advertiser_name )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dc_order_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dc_order_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_dc_order_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_order_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_order_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_order_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for dc site dimension.
||
|| $Id: fn_dc_order_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_dc_order_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_dc_order_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_dc_order_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_dc_order_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_dc_order_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_dc_order_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_order_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_order_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_order_dim_transform
||
|| Transform routine for site dimension.
||
|| $Id: fn_dc_order_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_dc_order_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_dc_order
SET
 dc_order_id=COALESCE(dc_order_id,-100),
 order_name=COALESCE(rtrim(ltrim(order_name)),'N/A'),
 advertiser_id=COALESCE(advertiser_id,-100),
 advertiser_name=COALESCE(rtrim(ltrim(advertiser_name)),'N/A'),
 contract_approved=COALESCE(contract_approved,false)
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_dc_order
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dc_order_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dc_order_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_dc_order_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_site_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_site_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_site_dim_load
||
|| Load routine for dc site dimension.
||
|| $Id: fn_dc_site_dim_load.sql 5343 2009-07-23 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='dc_site_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_dc_site_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
	RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.dc_site_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_dc_site a 
WHERE a.dc_site_id=b.dc_site_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.dart_site_name<>b.dart_site_name OR
a.site_keyword<>b.site_keyword OR
a.status<>b.status OR
a.portal_keyword<>b.portal_keyword OR
a.partner_keyword<>b.partner_keyword
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.dc_site_dim(
            dc_site_id, dart_site_name, site_keyword, status, portal_keyword, partner_keyword, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, dart_site_name_current, 
            site_keyword_current, portal_keyword_current, partner_keyword_current)
SELECT a.dc_site_id,a.dart_site_name, a.site_keyword, a.status, a.portal_keyword, a.partner_keyword, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A', 'N/A', 'N/A'
FROM staging.stg_dc_site a
INNER JOIN refer.dc_site_dim b ON a.dc_site_id=b.dc_site_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.dc_site_dim(
            dc_site_id, dart_site_name, site_keyword, status, portal_keyword, partner_keyword, auto_generated, 
            suppress, data_file_id, dt_effective, dt_expire, dart_site_name_current, 
            site_keyword_current, portal_keyword_current, partner_keyword_current)
SELECT a.dc_site_id,a.dart_site_name, a.site_keyword, a.status, a.portal_keyword, a.partner_keyword, FALSE,
       FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31', 'N/A',
       'N/A', 'N/A', 'N/A'
FROM staging.stg_dc_site a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.dc_site_dim b 
WHERE a.dc_site_id=b.dc_site_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.dc_site_dim b
SET     dart_site_name_current=a.dart_site_name,
        site_keyword_current=a.site_keyword,
        portal_keyword_current=a.portal_keyword,
        partner_keyword_current=a.partner_keyword
FROM staging.stg_dc_site a
WHERE a.dc_site_id=b.dc_site_id
AND a.data_file_id=p_data_file_id
AND (   b.dart_site_name_current<>a.dart_site_name OR
        b.site_keyword_current<>a.site_keyword OR
        b.portal_keyword_current<>a.portal_keyword OR
        b.partner_keyword_current<>a.partner_keyword )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dc_site_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dc_site_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_dc_site_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_site_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_site_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_site_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for dc site dimension.
||
|| $Id: fn_dc_site_dim_main.sql 88 2008-08-27 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_dc_site_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_dc_site_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_dc_site_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_dc_site_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_dc_site_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_dc_site_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dc_site_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dc_site_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dc_site_dim_transform
||
|| Transform routine for site dimension.
||
|| $Id: fn_dc_site_dim_transform.sql 4383 2011-06-03 00:35:24Z tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_dc_site_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_dc_site
SET
 dc_site_id=COALESCE(dc_site_id,-100),
 dart_site_name=COALESCE(rtrim(ltrim(dart_site_name)),'N/A'),
 site_keyword=COALESCE(rtrim(ltrim(site_keyword)),'N/A'),
 status=COALESCE(status,false),
 portal_keyword=COALESCE(rtrim(ltrim(portal_keyword)),'N/A'),
 partner_keyword=COALESCE(rtrim(ltrim(partner_keyword)),'N/A')
WHERE data_file_id=p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_dc_site
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dc_site_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dc_site_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_ad_network_dim_transform-',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_dc_site_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_delete_event_esc_char(date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_delete_event_esc_char(p_full_date date) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: staging.fn_delete_event_esc_char
||
|| Author: Tho HOANG
||
|| Date: 2012-09-26
||
|| Description: 
||     delete rows which has esc char in event tracker 
||
|| Parameters: 
||     - IN  p_full_date              -- date
||        report date
||
|| Return: -- character varying
||     - Success case: 'SU'
||     - Failure case: 'PS'
||         -- Error handling: send notification email
||
*/

DECLARE

BEGIN

RAISE NOTICE 'STARTING: % staging.fn_delete_event_esc_char(''%'')',timeofday(),p_full_date;

RAISE NOTICE 'STARTING: % x15',timeofday();
delete from evttracker.daily_event_stats where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_stats_adnet where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_by_distance where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_dma where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_dma_by_hour where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_maps where full_date = p_full_date and id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap where full_date = p_full_date and id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap_min where full_date = p_full_date and id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_store_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_x_value where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_x_value_by_hour where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_x_value_report where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';
delete from evttracker.daily_event_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x15%') ESCAPE '&';

RAISE NOTICE 'STARTING: % x13',timeofday();
delete from evttracker.daily_event_stats where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_stats_adnet where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_by_distance where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_dma where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_dma_by_hour where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_maps where full_date = p_full_date and id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap where full_date = p_full_date and id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap_min where full_date = p_full_date and id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_store_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_x_value where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_x_value_by_hour where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_x_value_report where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';
delete from evttracker.daily_event_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x13%') ESCAPE '&';

RAISE NOTICE 'STARTING: % x16',timeofday();
delete from evttracker.daily_event_stats where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_stats_adnet where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_by_distance where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_dma where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_dma_by_hour where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_maps where full_date = p_full_date and id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap where full_date = p_full_date and id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap_min where full_date = p_full_date and id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_store_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_x_value where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_x_value_by_hour where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_x_value_report where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';
delete from evttracker.daily_event_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x16%') ESCAPE '&';

RAISE NOTICE 'STARTING: % x10',timeofday();
delete from evttracker.daily_event_stats where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_stats_adnet where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_by_distance where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_dma where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_dma where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_dma_by_hour where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_maps where full_date = p_full_date and id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap where full_date = p_full_date and id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_maps_olap_min where full_date = p_full_date and id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_store_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_x_value where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_x_value_by_hour where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_x_value_report where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';
delete from evttracker.daily_event_location_by_distance where full_date = p_full_date and flight_id like (E'%&\x10%') ESCAPE '&';

RAISE NOTICE 'END: % staging.fn_delete_event_esc_char(''%'')',timeofday(),p_full_date;

RETURN 'SU';

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % staging.fn_delete_event_esc_char(''%'')',timeofday(),p_full_date;
        PERFORM fn_email_failure_notification('fn_delete_event_esc_char',SQLSTATE,SQLERRM);

RETURN v_process_status;

END;
$$;


ALTER FUNCTION staging.fn_delete_event_esc_char(p_full_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_dfp_dim_lineitem_creatives_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dfp_dim_lineitem_creatives_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dfp_dim_line_items_load
||
|| Load routine for dfp line_item dimension - refer.dfp_dim_line_items
||
|| $ thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='dfp_dim_lineitem_creatives';

BEGIN

RAISE DEBUG 'STARTING: % fn_dfp_dim_lineitem_creatives_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM   control.data_current_up_to_date
WHERE  table_name = v_table_name;

IF NOT FOUND THEN
        RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
        RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.dfp_dim_lineitem_creatives b
SET    dt_expire = dt_expire_old
FROM   staging.stg_dfp_dim_lineitem_creatives a 
WHERE  a.line_item_id = b.line_item_id
  AND  a.creative_id = b.creative_id
  AND  a.data_file_id = p_data_file_id
  AND (( a.dml_command in ('I','U')
  AND (a.sizes <> b.sizes 
    OR a.status <> b.status 
    OR a.stats <> b.stats
    OR a.startdatetime::timestamp without time zone<>COALESCE(b.startdatetime,'9999-12-31')
    OR a.enddatetime::timestamp without time zone<>COALESCE(b.enddatetime,'9999-12-31')
    OR a.lastmodifieddatetime::timestamp without time zone <> b.lastmodifieddatetime 
 )) OR a.dml_command = 'D')
  AND  b.dt_expire = '9999-12-31'
;
/*a.start_date::timestamp without time zone*/
/* add new records to replace the ones we just expired */
INSERT INTO refer.dfp_dim_lineitem_creatives(
            line_item_id,creative_id,creativeset_id,manualcreativerotationweight,sequentialcreativerotationindex,startdatetime,enddatetime,
			destinationurl,sizes,status,stats,lastmodifieddatetime,data_file_id,dt_effective,dt_expire)
SELECT a.line_item_id,a.creative_id,a.creativeset_id,a.manualcreativerotationweight,a.sequentialcreativerotationindex,a.startdatetime::timestamp without time zone,a.enddatetime::timestamp without time zone,
			a.destinationurl,a.sizes,a.status,a.stats,a.lastmodifieddatetime::timestamp without time zone,a.data_file_id,
       dt_expire_old + interval '1 second', '9999-12-31'
FROM   staging.stg_dfp_dim_lineitem_creatives a
INNER JOIN refer.dfp_dim_lineitem_creatives b ON a.line_item_id = b.line_item_id AND a.creative_id=b.creative_id
WHERE  a.data_file_id = p_data_file_id
  AND  a.dml_command in ('I','U')
  AND  b.dt_expire = dt_expire_old
;

/* add brand new records */
INSERT INTO refer.dfp_dim_lineitem_creatives(
            line_item_id,creative_id,creativeset_id,manualcreativerotationweight,sequentialcreativerotationindex,startdatetime,enddatetime,
			destinationurl,sizes,status,stats,lastmodifieddatetime,data_file_id,dt_effective,dt_expire)
SELECT a.line_item_id,a.creative_id,a.creativeset_id,a.manualcreativerotationweight,a.sequentialcreativerotationindex,a.startdatetime::timestamp without time zone,a.enddatetime::timestamp without time zone,
			a.destinationurl,a.sizes,a.status,a.stats,a.lastmodifieddatetime::timestamp without time zone,a.data_file_id,
       dt_expire_old + interval '1 second', '9999-12-31'
FROM   staging.stg_dfp_dim_lineitem_creatives a
WHERE  a.data_file_id = p_data_file_id
  AND  a.dml_command in ('I','U')
  AND NOT EXISTS (SELECT 1
                  FROM   refer.dfp_dim_lineitem_creatives b 
                  WHERE  a.line_item_id = b.line_item_id
				    AND	 a.creative_id=b.creative_id
                    AND  a.data_file_id = p_data_file_id
                    AND  a.dml_command in ('I','U')
                  )
;
 


/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dfp_dim_lineitem_creatives_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
        WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dfp_dim_lineitem_creatives_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_dfp_dim_lineitem_creatives_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_dfp_dim_lineitem_creatives_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dfp_dim_lineitem_creatives_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dfp_dim_lineitem_creatives_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dfp_dim_line_items_creatives_main
||
|| Coordinates TRANSFORM and LOAD steps for dfp lineitem dimension - refer.dfp_dim_line_items
||
|| $ thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_dfp_dim_lineitem_creatives_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
        SELECT * INTO v_file_status FROM staging.fn_dfp_dim_lineitem_creatives_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
        SELECT * INTO v_file_status FROM staging.fn_dfp_dim_lineitem_creatives_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_dfp_dim_lineitem_creatives_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_dfp_dim_lineitem_creatives_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_dfp_dim_lineitem_creatives_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_dfp_dim_lineitem_creatives_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dfp_dim_lineitem_creatives_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dfp_dim_lineitem_creatives_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dfp_dim_line_items_transform
||
|| Transform routine for dfp line_item dimension - refer.dfp_dim_line_items
||
|| $ tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_dfp_dim_lineitem_creatives_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_dfp_dim_lineitem_creatives
SET
        line_item_id         = COALESCE(line_item_id,-100)
	   ,creative_id         = COALESCE(creative_id,-100)
	   ,creativeset_id         = COALESCE(creativeset_id,-100)
	   ,manualcreativerotationweight          = COALESCE(rtrim(ltrim(manualcreativerotationweight)),'N/A')
	   ,sequentialcreativerotationindex          = COALESCE(rtrim(ltrim(sequentialcreativerotationindex)),'N/A')
	   ,destinationurl          = COALESCE(rtrim(ltrim(destinationurl)),'N/A')
	   ,sizes          = COALESCE(rtrim(ltrim(sizes)),'N/A')
	   ,status          = COALESCE(rtrim(ltrim(status)),'N/A')
	   ,stats          = COALESCE(rtrim(ltrim(stats)),'N/A')
	   ,startdatetime = COALESCE(startdatetime,'9999-12-31')
	   ,enddatetime = COALESCE(enddatetime,'9999-12-31')
WHERE  data_file_id = p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_dfp_dim_lineitem_creatives
WHERE  data_file_id = p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET    file_status = v_file_status, dt_process_transformed = clock_timestamp(), staging_load_count = v_row_count
WHERE  data_file_id = p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dfp_dim_lineitem_creatives_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
        WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dfp_dim_lineitem_creatives_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_dfp_dim_lineitem_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_dfp_dim_lineitem_creatives_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_dfp_dim_lineitem_targets_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dfp_dim_lineitem_targets_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

/*
||
|| fn_dfp_dim_line_items_load
||
|| Load routine for dfp line_item dimension - refer.dfp_dim_line_items
||
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='dfp_dim_lineitem_targets';

BEGIN

RAISE DEBUG 'STARTING: % fn_dfp_dim_lineitem_targets_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM   control.data_current_up_to_date
WHERE  table_name = v_table_name;

IF NOT FOUND THEN
        RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
        RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.dfp_dim_lineitem_targets b
SET    dt_expire = dt_expire_old
FROM   staging.stg_dfp_dim_lineitem_targets a 
WHERE  a.lineitem_id = b.lineitem_id
  AND  a.data_file_id = p_data_file_id
  AND (( a.dml_command in ('I','U')
  AND (a.customcriteria_key_id <> b.customcriteria_key_id 
    OR a.customcriteria_valueids <> b.customcriteria_valueids 
    OR a.customcriteria_displayname <> b.customcriteria_displayname
 )) OR a.dml_command = 'D')
  AND  b.dt_expire = '9999-12-31'
;
/*a.start_date::timestamp without time zone*/
/* add new records to replace the ones we just expired */
INSERT INTO refer.dfp_dim_lineitem_targets(
            lineitem_id,customcriteria_key_id,customcriteria_valueids,customcriteria_displayname,data_file_id,dt_effective,dt_expire)
SELECT a.lineitem_id,a.customcriteria_key_id,a.customcriteria_valueids,a.customcriteria_displayname,a.data_file_id,
       dt_expire_old + interval '1 second', '9999-12-31'
FROM   staging.stg_dfp_dim_lineitem_targets a
INNER JOIN refer.dfp_dim_lineitem_targets b ON a.lineitem_id = b.lineitem_id
WHERE  a.data_file_id = p_data_file_id
  AND  a.dml_command in ('I','U')
  AND  b.dt_expire = dt_expire_old
;

/* add brand new records */
INSERT INTO refer.dfp_dim_lineitem_targets(
            lineitem_id,customcriteria_key_id,customcriteria_valueids,customcriteria_displayname,data_file_id,dt_effective,dt_expire)
SELECT a.lineitem_id,a.customcriteria_key_id,a.customcriteria_valueids,a.customcriteria_displayname,a.data_file_id,
       dt_expire_old + interval '1 second', '9999-12-31'
FROM   staging.stg_dfp_dim_lineitem_targets a
WHERE  a.data_file_id = p_data_file_id
  AND  a.dml_command in ('I','U')
  AND NOT EXISTS (SELECT 1
                  FROM   refer.dfp_dim_lineitem_targets b 
                  WHERE  a.lineitem_id = b.lineitem_id				    
                    AND  a.data_file_id = p_data_file_id
                    AND  a.dml_command in ('I','U')
                  )
;
 


/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dfp_dim_lineitem_targets_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
        WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dfp_dim_lineitem_targets_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_dfp_dim_lineitem_targets_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$$;


ALTER FUNCTION staging.fn_dfp_dim_lineitem_targets_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dfp_dim_lineitem_targets_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dfp_dim_lineitem_targets_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dfp_dim_line_items_creatives_main
||
|| Coordinates TRANSFORM and LOAD steps for dfp lineitem dimension - refer.dfp_dim_line_items
||
|| $ thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_dfp_dim_lineitem_targets_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
        SELECT * INTO v_file_status FROM staging.fn_dfp_dim_lineitem_targets_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
        SELECT * INTO v_file_status FROM staging.fn_dfp_dim_lineitem_targets_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_dfp_dim_lineitem_targets_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_dfp_dim_lineitem_targets_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_dfp_dim_lineitem_targets_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_dfp_dim_lineitem_targets_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_dfp_dim_lineitem_targets_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_dfp_dim_lineitem_targets_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_dfp_dim_line_items_transform
||
|| Transform routine for dfp line_item dimension - refer.dfp_dim_line_items
||
|| $ tho.hoang $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count INTEGER:=0;

BEGIN

RAISE DEBUG 'STARTING: % fn_dfp_dim_lineitem_targets_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_dfp_dim_lineitem_targets
SET
        lineitem_id         = COALESCE(lineitem_id,-100)
	   ,customcriteria_key_id          = COALESCE(rtrim(ltrim(customcriteria_key_id)),'N/A')
	   ,customcriteria_valueids          = COALESCE(rtrim(ltrim(customcriteria_valueids)),'N/A')
	   ,customcriteria_displayname          = COALESCE(rtrim(ltrim(customcriteria_displayname)),'N/A')
WHERE  data_file_id = p_data_file_id;

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_dfp_dim_lineitem_targets
WHERE  data_file_id = p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET    file_status = v_file_status, dt_process_transformed = clock_timestamp(), staging_load_count = v_row_count
WHERE  data_file_id = p_data_file_id;

RAISE DEBUG 'ENDING: % fn_dfp_dim_lineitem_targets_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
        WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_dfp_dim_lineitem_targets_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_dfp_dim_lineitem_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_dfp_dim_lineitem_targets_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_display_block_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_display_block_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_display_block_dim_load
||
|| Load routine for display block dimension.
||
|| $Id: fn_display_block_dim_load.sql 4479 2009-03-05 04:38:12Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='display_block_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_display_block_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.display_block_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_display_block a 
WHERE a.display_block_id=b.display_block_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
	AND (
	a.partner_id<>b.partner_id OR
	a.display_order<>b.display_order OR
	a.parent_block_id<>b.parent_block_id OR
	a.display_name<>b.display_name OR
	a.content_category_id<>b.content_category_id OR
	a.display_block_type<>b.display_block_type OR
	a.description<>b.description OR
	a.partner_module_id<>b.partner_module_id OR
	a.dt_deleted<>b.dt_deleted OR
	a.dt_created<>b.dt_created OR
	a.status<>b.status
	)) OR dml_command='D')	
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.display_block_dim (display_block_id,partner_id,
display_order,parent_block_id,display_name,content_category_id,
display_block_type,description,
partner_module_id,dt_deleted,dt_created,status,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
display_name_current,description_current)
SELECT a.display_block_id,a.partner_id,
a.display_order,a.parent_block_id,a.display_name,a.content_category_id,
a.display_block_type,a.description,
a.partner_module_id,a.dt_deleted,a.dt_created,a.status,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
'N/A','N/A'
FROM staging.stg_display_block a
INNER JOIN refer.display_block_dim b ON a.display_block_id=b.display_block_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.display_block_dim (display_block_id,partner_id,
display_order,parent_block_id,display_name,content_category_id,
display_block_type,description,
partner_module_id,dt_deleted,dt_created,status,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
display_name_current,description_current)
SELECT a.display_block_id,a.partner_id,
a.display_order,a.parent_block_id,a.display_name,a.content_category_id,
a.display_block_type,a.description,
a.partner_module_id,a.dt_deleted,a.dt_created,a.status,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
'N/A','N/A'
FROM staging.stg_display_block a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
	FROM refer.display_block_dim b 
	WHERE a.display_block_id=b.display_block_id 
	AND a.data_file_id=p_data_file_id
	AND a.dml_command in ('I','U'));

/* now set current values */
UPDATE refer.display_block_dim b
SET     display_name_current=a.display_name,
        description_current=a.description
FROM staging.stg_display_block a
WHERE a.display_block_id=b.display_block_id
AND a.data_file_id=p_data_file_id
AND (   b.display_name_current<>a.display_name OR
        b.description_current<>a.description ) 
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;
 
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_display_block_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_display_block_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_display_block_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_display_block_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_display_block_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_display_block_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_display_block_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for display block dimension.
||
|| $Id: fn_display_block_dim_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/


DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_display_block_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_display_block_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_display_block_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_display_block_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_display_block_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_display_block_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_display_block_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_display_block_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_display_block_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_display_block_dim_transform
||
|| Transform routine for display block dimension.
||
|| $Id: fn_display_block_dim_transform.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_display_block_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_display_block
SET 	partner_id=COALESCE(partner_id,-100),
	display_order=COALESCE(display_order,-100),
	parent_block_id=COALESCE(parent_block_id,-100),
        display_name=COALESCE(display_name,'N/A'),
        content_category_id=COALESCE(content_category_id,-100),
        display_block_type=COALESCE(display_block_type,'N/A'),
        description=COALESCE(description,'N/A'),
        partner_module_id=COALESCE(partner_module_id,-100),
        dt_deleted=COALESCE(dt_deleted,'9999-12-31'),
        dt_created=COALESCE(dt_created,'2005-01-01'),
        status=COALESCE(status,'N/A')
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_display_block_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_display_block_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_display_block_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_display_block_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_double_click_fact_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_double_click_fact_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_double_click_fact_load
||
|| Load routine for site campaign fact and site device fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_double_click_fact_load.sql 4422 2009-02-01 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_double_click_fact_load()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'dc_site_dim'
,'dc_order_dim'
,'adm_website_dim'
,'adm_creative_dim'
,'adm_publisher_dim'
,'adm_placement_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (24,25,38,47,48)
AND a.file_status = 'LR' -- need load into fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_double_click_fact_data()'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

IF v_rec.data_file_config_id = 24 THEN
	/* dbclk.site_campaign_fact */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load dbclk.site_campaign_fact */
	v_cmd := '
	INSERT INTO dbclk.site_campaign_fact(
		eastern_date_sk,
		eastern_time_sk,
		local_date_sk,
		local_time_sk, 
		gmt_date_sk, 
		gmt_time_sk, 
		dc_site_sk, 
		dc_order_sk, 
		site_id, 
		site_name,
		order_id, 
		order_name, 
		ad_id, 
		creative_id, 
		impressions_delivered,
		clicks_recorded, 
		gen_site_campaign_id, 
		data_file_id,
		creative_sk,
		website_sk,
		publisher_sk,
		partner_keyword,
		placement_sk
	)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.dc_site_sk,-2),
		COALESCE(a.dc_order_sk,-2),
		CAST(a.site_id AS integer) as site_id,
		a.site_name,
		CAST(a.order_id AS integer) as order_id,
		a.order_name,
		CAST(a.ad_id AS integer) as ad_id,
		CAST(a.creative_id AS integer) as creative_id,
		CAST(a.impressions_delivered AS integer) as impressions_delivered,
		CAST(a.clicks_recorded AS integer) as clicks_recorded,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id,
		COALESCE(a.creative_sk,-2),
		COALESCE(a.website_sk,-2),
		COALESCE(a.publisher_sk,-2),
		COALESCE(a.partner_keyword,''''),
		COALESCE(a.placement_sk,-2)
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM dbclk.site_campaign_fact a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_double_click_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 24 THEN
ELSIF v_rec.data_file_config_id = 25 THEN
	/* dbclk.site_device_fact */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load dbclk.site_campaign_fact */
	v_cmd := '
	INSERT INTO dbclk.site_device_fact(
		eastern_date_sk,
		eastern_time_sk,
		local_date_sk,
		local_time_sk, 
		gmt_date_sk, 
		gmt_time_sk, 
		dc_site_sk, 
		site_id, 
		site_name,
		mobile_platform, 
		impressions_delivered,
		clicks_recorded, 
		gen_site_device_id, 
		data_file_id,
		partner_keyword,
		website_sk,
		publisher_sk
	)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.dc_site_sk,-2),
		CAST(a.site_id AS integer) as site_id,
		a.site_name,
		a.mobile_platform,
		CAST(a.impressions_delivered AS integer) as impressions_delivered,
		CAST(a.clicks_recorded AS integer) as clicks_recorded,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id,
		COALESCE(a.partner_keyword,''''),
		COALESCE(a.website_sk,-2),
		COALESCE(a.publisher_sk,-2)
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM dbclk.site_device_fact a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;


	RAISE DEBUG 'ENDING: % fn_double_click_fact_load()',timeofday();
	-- END IF v_rec.data_file_config_id = 25 THEN

ELSIF v_rec.data_file_config_id = 38 THEN
	/* dbclk.site_order_forecast_fact */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load dbclk.site_campaign_fact */
	v_cmd := '
	INSERT INTO dbclk.site_order_forecast_fact(
		eastern_date_sk,
		eastern_time_sk,
		local_date_sk,
		local_time_sk,
		gmt_date_sk,
		gmt_time_sk,
		dc_site_sk,
		dc_order_sk,
		site_id,
		site_name,
		order_id, 
		order_name, 
		order_start_date, 
		order_end_date, 
		order_cpm_booked, 
		order_status, 
		creative_id, 
		ad_id,
		ad_name,
		ad_cost_type,
		ad_weight,
		ad_type,
		impressions_delivered, 
		clicks_recorded, 
		creative_sk, 
		website_sk, 
		publisher_sk, 
		partner_keyword, 
		placement_sk, 
		gen_site_order_forecast_id, 
		data_file_id
	)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.dc_site_sk,-2),
		COALESCE(a.dc_order_sk,-2),
		CAST(a.site_id AS integer) as site_id,
		a.site_name,
		CAST(a.order_id AS integer) as order_id,
		a.order_name,
		a.order_start_date::date,
		a.order_end_date::date,
		CAST(a.order_cpm_booked AS integer) as order_cpm_booked,
		a.order_status,
		CAST(a.creative_id AS integer) as creative_id,
		CAST(a.ad_id AS integer) as ad_id,
		a.ad_name,
		UPPER(a.ad_cost_type),
		CAST(a.ad_weight AS integer) as ad_weight,
		UPPER(a.ad_type),
		CAST(a.impressions_delivered AS integer) as impressions_delivered,
		CAST(a.clicks_recorded AS integer) as clicks_recorded,
		COALESCE(a.creative_sk,-2),
		COALESCE(a.website_sk,-2),
		COALESCE(a.publisher_sk,-2),
		COALESCE(a.partner_keyword,''''),
		COALESCE(a.placement_sk,-2),
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM dbclk.site_order_forecast_fact a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;


	RAISE DEBUG 'ENDING: % fn_double_click_fact_load()',timeofday();
	-- END IF v_rec.data_file_config_id = 38 THEN

ELSIF v_rec.data_file_config_id = 47 THEN
	/* adnetwork.fact_ga_channel */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_ga_channel */
	v_cmd := '
	INSERT INTO adnetwork.fact_ga_channel(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            ga_channel_sk, 
            product, 
            page_views, 
            clicks, 
            page_ctr, 
            cpc, 
            page_rpm, 
            estimated_earnings, 
            gen_ga_channel_id, 
            data_file_id
        )
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.ga_channel_sk,-2),
		a.product,
		CAST(a.page_views AS integer) as page_views,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.page_ctr AS float) as page_ctr,
		CAST(a.cpc AS float) as cpc,
		CAST(a.page_rpm AS float) as page_rpm,
		CAST(a.estimated_earnings AS float) asestimated_earnings,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_ga_channel a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;


	RAISE DEBUG 'ENDING: % fn_double_click_fact_load()',timeofday();
	-- END IF v_rec.data_file_config_id = 47 THEN

ELSIF v_rec.data_file_config_id = 48 THEN
	/* adnetwork.fact_ad_channel_site */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_ad_channel_site */
	v_cmd := '
	INSERT INTO adnetwork.fact_ad_channel_site(
            eastern_date_sk, 
            eastern_time_sk, 
            local_date_sk, 
            local_time_sk, 
            gmt_date_sk, 
            gmt_time_sk, 
            ga_channel_sk, 
            dc_site_sk, 
            partner_sk, 
            portal_sk, 
            ad_name, 
            site_id, 
            site_name, 
            impressions_delivered, 
            clicks_recorded, 
            gen_ad_channel_site_id, 
            data_file_id)
	SELECT 
		COALESCE(a.eastern_date_sk,-2),
		COALESCE(a.eastern_time_sk,-2),
		COALESCE(a.local_date_sk,-2),
		COALESCE(a.local_time_sk,-2),
		COALESCE(a.gmt_date_sk,-2),
		COALESCE(a.gmt_time_sk,-2),
		COALESCE(a.ga_channel_sk,-2),
		COALESCE(a.dc_site_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		a.ad_name,
		CAST(a.site_id AS integer) as site_id,
		a.site_name,
		CAST(a.impressions_delivered AS integer) as impressions_delivered,
		CAST(a.clicks_recorded AS integer) as clicks_recorded,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_ad_channel_site a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;


	RAISE DEBUG 'ENDING: % fn_double_click_fact_load()',timeofday();
	-- END IF v_rec.data_file_config_id = 48 THEN
END IF;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_double_click_fact_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_double_click_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_double_click_fact_load() OWNER TO warehouse_dbo;

--
-- Name: fn_email_failure_notification(text, character varying, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_email_failure_notification(p_function_name text, p_sqlstate character varying, p_sqlerrm text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_email_failure_notification
||
|| Write failure notifications to staging.email_notification.
|| Called when error is caught by calling stored procedure.
||
|| $Id$
||
*/

DECLARE 
 v_sender TEXT;
 v_recipient TEXT;
 v_subject TEXT;
 v_message TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_email_failure_notification(%,%,%)',timeofday(),p_function_name,p_sqlstate,p_sqlerrm;

/* if error is on the whitelist, don't write to email table */
PERFORM * FROM control.failure_notification_whitelist WHERE sqlstate=p_sqlstate;

IF FOUND THEN
 RETURN;
END IF;

/* get send and recipient from system_parameter */
SELECT value INTO v_sender
FROM control.system_parameter
WHERE parameter='email_sender';

SELECT value INTO v_recipient
FROM control.system_parameter
WHERE parameter='email_failure_recipient';

/* build subject and message */
v_subject:='[DW2 FAILED][' || timeofday()::date || '] '  || p_function_name;
v_message:='DW2 Test load adcel ! TIMESTAMP=' || timeofday() || '; SQL STATE=' || p_sqlstate || '; SQL ERROR MESSAGE=' || p_sqlerrm;
 
/* insert into email_notification */
INSERT INTO control.email_notification_log (sender,recipient,subject,message,status)
VALUES (v_sender,v_recipient,v_subject,v_message,0); 

RAISE DEBUG 'ENDING: % fn_email_failure_notification(%,%,%)',timeofday(),p_function_name,p_sqlstate,p_sqlerrm;

END;
$_$;


ALTER FUNCTION staging.fn_email_failure_notification(p_function_name text, p_sqlstate character varying, p_sqlerrm text) OWNER TO warehouse_dbo;

--
-- Name: fn_event_tracker_fact_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_event_tracker_fact_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_event_tracker_fact_load
||
|| Load routine for event tracker fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_event_tracker_fact_load.sql 4422 2011-11-03 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_event_tracker_fact_load()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'adm_flight_dim',
 'adm_creative_dim',
 'adm_order_dim',
 'adm_placement_dim',
 'adm_advertiser_dim'
);

IF v_dim_table_check < 5 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 lower(a.server_name) as server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (45) -- event tracker logs
AND a.file_status = 'LR' -- need load into event_tracker_fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_event_tracker_fact_data()'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

IF v_rec.data_file_config_id = 45 THEN
	/* event tracker data: load data to fact table */

	RAISE NOTICE 'v_rec.server_name=%',v_rec.server_name;

	/* insert missing event */
	v_cmd := '
	INSERT INTO refer.event_dim (event_name,auto_generated,suppress,data_file_id,event_name_current)
	SELECT distinct a.url_e as event_name,TRUE,FALSE,a.data_file_id,a.url_e as event_name_current
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (
				SELECT 1
				FROM refer.event_dim b
				WHERE a.url_e=b.event_name
		         )
	AND a.url_e IS NOT NULL
	AND a.data_file_id = ' || v_rec.data_file_id || '
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;

	/* transform event_sk */
	v_cmd := '
	 UPDATE ' || v_rec.data_file_target_table::text || ' a
	 SET 	
	   event_sk=COALESCE(b.event_sk,-2)
	 FROM refer.event_dim b
	 WHERE a.url_e=b.event_name
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;

	/* insert missing user agents */
	v_cmd := '
	INSERT INTO refer.user_agent_dim (user_agent_name,device_manufacturer,
	device_type,organic,auto_generated,suppress,data_file_id)
	SELECT distinct a.user_agent,''Unallocated'',
	''Unallocated'',FALSE,TRUE,FALSE,a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (
					   SELECT 1
					   FROM refer.user_agent_dim b
					   WHERE a.user_agent=b.user_agent_name
					  )
	AND a.user_agent IS NOT NULL
	AND a.data_file_id = ' || v_rec.data_file_id || '
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	--EXECUTE v_cmd;

	/* transform user_agent_sk */
	v_cmd := '
	 UPDATE ' || v_rec.data_file_target_table::text || ' a
	 SET 	
	   user_agent_sk=COALESCE(b.user_agent_sk,-2)
	 FROM refer.user_agent_dim b
	 WHERE a.user_agent=b.user_agent_name
	;';

	--RAISE NOTICE 'DEBUG: v_cmd=%',v_cmd;
	EXECUTE v_cmd;
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	v_cmd := '
	SELECT min(eastern_date), max(eastern_date)
	FROM staging.' || v_rec.data_file_target_table || '
	WHERE data_file_id = ' || v_rec.data_file_id::text || '
	  AND eastern_date BETWEEN ''2005-01-01'' AND ''2015-12-31''
	;';

	EXECUTE v_cmd INTO STRICT v_min_eastern_date,v_max_eastern_date;

	SELECT date_sk INTO v_min_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_min_eastern_date;

	SELECT date_sk INTO v_max_eastern_date_sk
	FROM refer.date_dim
	WHERE full_date=v_max_eastern_date;
	
	RAISE NOTICE 'FACT LOADING...';

	v_app_server_id:=-1;
	IF v_rec.server_name = 'app3-adcel' THEN
	 v_app_server_id:=3;
	ELSIF v_rec.server_name = 'app4-adcel' THEN
	 v_app_server_id:=4;
	ELSIF v_rec.server_name = 'app6-adcel' THEN
	 v_app_server_id:=6;
	ELSIF v_rec.server_name = 'app8-adcel' THEN
	 v_app_server_id:=8;
	ELSIF v_rec.server_name = 'app9-adcel' THEN
	 v_app_server_id:=9;
	ELSIF v_rec.server_name = 'app12-adcel' THEN
	 v_app_server_id:=12;
	ELSIF v_rec.server_name = 'app13-adcel' THEN
	 v_app_server_id:=13;
	ELSIF v_rec.server_name = 'app14-adcel' THEN
	 v_app_server_id:=14;
	ELSIF v_rec.server_name = 'app015-adcel' THEN
	 v_app_server_id:=15;
	END IF;

	RAISE NOTICE 'DEBUG: v_app_server_id=%',v_app_server_id;
	
	/* load evttracker.event_tracker_fact */
	v_cmd := '
	INSERT INTO evttracker.event_tracker_fact (
		eastern_date_sk, 
		eastern_time_sk, 
		local_date_sk, 
		local_time_sk, 
		gmt_date_sk, 
		gmt_time_sk, 
		user_agent_sk, 
		referrer_hostname_sk, 
		event_sk, 
		adm_flight_sk, 
		adm_creative_sk, 
		adm_order_sk, 
		adm_placement_sk, 
		adm_advertiser_sk, 
		req_ipaddress, 
		remote_logical_user, 
		remote_auth_user, 
		request_url, 
		status_code, 
		bytes_sent, 
		referrer, 
		req_method, 
		req_protocol, 
		req_path, 
		req_arguments, 
		url_f, 
		url_fd, 
		url_c, 
		url_cd, 
		url_e, 
		url_u, 
		url_p, 
		url_bp, 
		url_d, 
		url_fh, 
		url_ch, 
		rs_01, 
		rs_02, 
		rs_03, 
		rs_04, 
		app_server, 
		app_server_id, 
		data_file_id, 
		gen_event_tracker_log_id,
		eastern_datetime,
		url_r,
		url_x,
		url_adnet
	)
	SELECT 
		COALESCE(eastern_date_sk,-2),
		COALESCE(eastern_time_sk,-2),
		COALESCE(local_date_sk,-2),
		COALESCE(local_time_sk,-2),
		COALESCE(gmt_date_sk,-2),
		COALESCE(gmt_time_sk,-2),
		COALESCE(user_agent_sk,-2),
		COALESCE(referrer_hostname_sk,-2),
		COALESCE(event_sk,-2),
		COALESCE(adm_flight_sk,-2),
		COALESCE(adm_creative_sk,-2),
		COALESCE(adm_order_sk,-2),
		COALESCE(adm_placement_sk,-2),
		COALESCE(adm_advertiser_sk,-2),
		CAST(a.req_ipaddress as inet),
		a.remote_logical_user,
		a.remote_auth_user,
		a.request_url,
		CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END AS status_code,
		CAST(a.bytes_sent AS smallint) AS bytes_sent,
		a.referrer,
		a.req_method,
		a.req_protocol,
		a.req_path,
		a.req_arguments,
		a.url_f,
		a.url_fd,
		a.url_c,
		a.url_cd,
		a.url_e,
		a.url_u,
		a.url_p,
		a.url_bp,
		a.url_d,
		a.url_fh,
		a.url_ch,
		a.rs_01,
		a.rs_02,
		CAST(a.rs_03 AS integer) AS rs_03,
		CAST(a.rs_04 AS integer) AS rs_04,
		a.app_server,
		' || v_app_server_id || '::smallint,
		a.data_file_id,
		a.' || v_rec.data_file_target_table || '_id,
		COALESCE(eastern_date_sk,-2)*100000 + COALESCE(eastern_time_sk,-2),
		CAST(a.url_r AS bigint) AS url_r,
		a.url_x,
		a.url_adnet
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE a.user_agent_sk > 0
	;';

	--RAISE NOTICE 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* load evttracker.event_tracker_fact -- missing user agent */
	v_cmd := '
	INSERT INTO evttracker.event_tracker_fact_user_agent (
		eastern_date_sk, 
		eastern_time_sk, 
		local_date_sk, 
		local_time_sk, 
		gmt_date_sk, 
		gmt_time_sk, 
		user_agent_sk, 
		referrer_hostname_sk, 
		event_sk, 
		adm_flight_sk, 
		adm_creative_sk, 
		adm_order_sk, 
		adm_placement_sk, 
		adm_advertiser_sk, 
		req_ipaddress, 
		remote_logical_user, 
		remote_auth_user, 
		request_url, 
		status_code, 
		bytes_sent, 
		referrer, 
		req_method, 
		req_protocol, 
		req_path, 
		req_arguments, 
		url_f, 
		url_fd, 
		url_c, 
		url_cd, 
		url_e, 
		url_u, 
		url_p, 
		url_bp, 
		url_d, 
		url_fh, 
		url_ch, 
		rs_01, 
		rs_02, 
		rs_03, 
		rs_04, 
		app_server, 
		app_server_id, 
		data_file_id, 
		gen_event_tracker_log_id,
		eastern_datetime,
		url_r,
		url_x,
		url_adnet,
		user_agent
	)
	SELECT 
		COALESCE(eastern_date_sk,-2),
		COALESCE(eastern_time_sk,-2),
		COALESCE(local_date_sk,-2),
		COALESCE(local_time_sk,-2),
		COALESCE(gmt_date_sk,-2),
		COALESCE(gmt_time_sk,-2),
		COALESCE(user_agent_sk,-2),
		COALESCE(referrer_hostname_sk,-2),
		COALESCE(event_sk,-2),
		COALESCE(adm_flight_sk,-2),
		COALESCE(adm_creative_sk,-2),
		COALESCE(adm_order_sk,-2),
		COALESCE(adm_placement_sk,-2),
		COALESCE(adm_advertiser_sk,-2),
		CAST(a.req_ipaddress as inet),
		a.remote_logical_user,
		a.remote_auth_user,
		a.request_url,
		CASE a.status_code WHEN ''""'' THEN -100 WHEN ''4G'' THEN -100 ELSE CAST(a.status_code AS smallint) END AS status_code,
		CAST(a.bytes_sent AS smallint) AS bytes_sent,
		a.referrer,
		a.req_method,
		a.req_protocol,
		a.req_path,
		a.req_arguments,
		a.url_f,
		a.url_fd,
		a.url_c,
		a.url_cd,
		a.url_e,
		a.url_u,
		a.url_p,
		a.url_bp,
		a.url_d,
		a.url_fh,
		a.url_ch,
		a.rs_01,
		a.rs_02,
		CAST(a.rs_03 AS integer) AS rs_03,
		CAST(a.rs_04 AS integer) AS rs_04,
		a.app_server,
		' || v_app_server_id || '::smallint,
		a.data_file_id,
		a.' || v_rec.data_file_target_table || '_id,
		COALESCE(eastern_date_sk,-2)*100000 + COALESCE(eastern_time_sk,-2),
		CAST(a.url_r AS bigint) AS url_r,
		a.url_x,
		a.url_adnet,
		a.user_agent
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE a.user_agent_sk is null OR a.user_agent_sk < 0
	;';

	--RAISE NOTICE 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM evttracker.event_tracker_fact a
	WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
	AND a.data_file_id=' || v_rec.data_file_id || ';';

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_event_tracker_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id >= 16 AND v_rec.data_file_config_id <= 20 THEN

END IF;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_event_tracker_fact_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_event_tracker_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_event_tracker_fact_load() OWNER TO warehouse_dbo;

--
-- Name: fn_extract_adcel_file(integer, character varying, character varying, character varying, character varying, character, boolean, boolean, character varying, character varying, character varying, text, text, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_extract_adcel_file(p_data_file_id integer, p_file_name character varying, p_server_name character varying, p_file_status character varying, p_data_file_target_table character varying, p_data_file_type character, p_unzip boolean, p_transform_on_import boolean, p_import_dir character varying, p_success_dir character varying, p_error_dir character varying, p_data_file_column_list text, p_data_file_load_options text, p_transform_script_name character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_extract_file
||
|| Imports files into the warehouse.
||
|| The settings for each file type are defined in staging.data_file_configuration.
||
|| $Id: fn_extract_file.sql 115 2008-12-03 19:46:24Z abyfield $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_failed_file_status control.data_file.file_status%TYPE;
 v_bin_dir TEXT:= '/home/file_xfer/bin/';
 v_row_count INTEGER;

 cmd TEXT:='';
 original_file TEXT;
 new_file TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_extract_adcel_file(%,%,%,%,%,%,%,%,%,%,%,%,%,%)',timeofday(),
        p_data_file_id,p_file_name,p_server_name,v_file_status,p_data_file_target_table,p_data_file_type,p_unzip,p_transform_on_import,
        p_import_dir,p_success_dir,p_error_dir,p_data_file_column_list,p_data_file_load_options,p_transform_script_name;

/* these errors generally aren't resolved without
manual intervention, so rather than send previous status on failure,
set to failure status so that file is skipped when job re-runs */
v_failed_file_status:='EF';
v_file_status:='TR';

IF p_unzip=TRUE THEN
/* unzip file */
cmd := 'gunzip -c ' || p_import_dir || p_file_name || ' | ';
END IF;

IF p_transform_on_import=TRUE THEN
/* call transform script */
cmd := cmd || v_bin_dir || './' || p_transform_script_name || ' ' || p_server_name;
	IF p_unzip=TRUE THEN
	/* if zipped, read from standard in (from previous step) */	
	cmd := cmd || ' - | ';
	ELSE 
	/* if not, read from file */
	cmd := cmd || ' ' || p_import_dir || p_file_name || ' | ';
	END IF;
END IF;


IF p_unzip=TRUE OR p_transform_on_import=TRUE THEN
/* if we had to unzip and/or transform, pipe results to psql, and execute the command via plperlu */
cmd := cmd || 'psql -c "COPY staging.' || p_data_file_target_table || ' (' || p_data_file_column_list ||
	') FROM stdin';
	
	IF p_data_file_load_options IS NOT NULL THEN
	cmd := cmd || ' WITH ' || p_data_file_load_options;
	END IF;

cmd := 'SELECT * FROM staging.fn_cmd_shell(''' || cmd || '" -d warehouse'')';

ELSE 
/* if we didn't have to do any file processing on the file system,
let's just call COPY directly */
cmd := 'COPY staging.' || p_data_file_target_table || ' (' || p_data_file_column_list ||
	') FROM ''' || p_import_dir || p_file_name || '''';
	
	IF p_data_file_load_options IS NOT NULL THEN
		cmd := cmd || ' WITH ' || p_data_file_load_options;
	END IF;

END IF;

/* run command */
--RAISE NOTICE 'cmd=%',cmd;
EXECUTE cmd;

/* assign file id for future processing.
This is only done with dimensions, since we keep that data around in the staging tables
for auditing purposes (they're small enough to not make a big difference for subsequent
laods).  Fact tables, however, are truncated after they are loaded, so assigning a file id
to the staging table would be unnecessary overhead (and expensive, considering the size of 
the fact files). */
cmd := 'UPDATE ' || p_data_file_target_table || ' SET data_file_id=' || p_data_file_id || ' WHERE data_file_id IS NULL';
RAISE DEBUG 'cmd=%',cmd;
EXECUTE cmd;

/* get rowcount for fact file. 
We can't use GET DIAGNOSTICS because of how
we're calling the COPY command (system call via perl). 
If we ever store several data files in a staging table, we'd have to
add additional logic to the count(*) query to only look
at the current load */
IF p_data_file_type='F' THEN
cmd := 'SELECT COUNT(*) FROM staging.'|| p_data_file_target_table || ' WHERE data_file_id = ' || p_data_file_id::text;
EXECUTE cmd INTO STRICT v_row_count;
END IF;

/* mark file loaded */
UPDATE control.data_file SET file_status=v_file_status, dt_file_extracted=clock_timestamp(),
staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

/* move file to done directory */
original_file := p_import_dir || p_file_name;
new_file := p_success_dir || p_file_name;
  
PERFORM fn_move_file(original_file,new_file);

RAISE DEBUG 'ENDING: % fn_extract_adcel_file(%,%,%,%,%,%,%,%,%,%,%,%,%,%)',timeofday(),
        p_data_file_id,p_file_name,p_server_name,v_file_status,p_data_file_target_table,p_data_file_type,p_unzip,p_transform_on_import,                                                                               p_import_dir,p_success_dir,p_error_dir,p_data_file_column_list,p_data_file_load_options,p_transform_script_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_failed_file_status;

	/* mark file as failed */
	UPDATE control.data_file SET file_status=v_file_status, dt_file_extracted=clock_timestamp()
	WHERE data_file_id=p_data_file_id;

	/* move file to error directory */
	original_file := p_import_dir || p_file_name;
	new_file := p_error_dir || p_file_name;

	PERFORM fn_move_file(original_file,new_file);

	RAISE NOTICE 'FAILED: % fn_extract_adcel_file(%,%,%,%,%,%,%,%,%,%,%,%,%,%); SQLSTATE=% SQLERRM=%',timeofday(),
	p_data_file_id,p_file_name,p_server_name,v_file_status,p_data_file_target_table,p_data_file_type,p_unzip,p_transform_on_import,
	p_import_dir,p_success_dir,p_error_dir,p_data_file_column_list,p_data_file_load_options,p_transform_script_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_extract_adcel_file',SQLSTATE,SQLERRM);

	RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_extract_adcel_file(p_data_file_id integer, p_file_name character varying, p_server_name character varying, p_file_status character varying, p_data_file_target_table character varying, p_data_file_type character, p_unzip boolean, p_transform_on_import boolean, p_import_dir character varying, p_success_dir character varying, p_error_dir character varying, p_data_file_column_list text, p_data_file_load_options text, p_transform_script_name character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_extract_file(integer, character varying, character varying, character varying, character varying, character, boolean, boolean, character varying, character varying, character varying, text, text, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_extract_file(p_data_file_id integer, p_file_name character varying, p_server_name character varying, p_file_status character varying, p_data_file_target_table character varying, p_data_file_type character, p_unzip boolean, p_transform_on_import boolean, p_import_dir character varying, p_success_dir character varying, p_error_dir character varying, p_data_file_column_list text, p_data_file_load_options text, p_transform_script_name character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_extract_file
||
|| Imports files into the warehouse.
||
|| The settings for each file type are defined in staging.data_file_configuration.
||
|| $Id: fn_extract_file.sql 115 2008-12-03 19:46:24Z abyfield $
||
*/

DECLARE

 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_failed_file_status control.data_file.file_status%TYPE;
 v_bin_dir TEXT:= '/home/file_xfer/bin/';
 v_row_count INTEGER;

 cmd TEXT:='';
 original_file TEXT;
 new_file TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_extract_file(%,%,%,%,%,%,%,%,%,%,%,%,%,%)',timeofday(),
        p_data_file_id,p_file_name,p_server_name,v_file_status,p_data_file_target_table,p_data_file_type,p_unzip,p_transform_on_import,
        p_import_dir,p_success_dir,p_error_dir,p_data_file_column_list,p_data_file_load_options,p_transform_script_name;

/* these errors generally aren't resolved without
manual intervention, so rather than send previous status on failure,
set to failure status so that file is skipped when job re-runs */
v_failed_file_status:='EF';
v_file_status:='TR';

IF p_unzip=TRUE THEN
/* unzip file */
cmd := 'gunzip -c ' || p_import_dir || p_file_name || ' | ';
END IF;

IF p_transform_on_import=TRUE THEN
/* call transform script */
cmd := cmd || v_bin_dir || './' || p_transform_script_name || ' ' || p_server_name;
	IF p_unzip=TRUE THEN
	/* if zipped, read from standard in (from previous step) */	
	cmd := cmd || ' - | ';
	ELSE 
	/* if not, read from file */
	cmd := cmd || ' ' || p_import_dir || p_file_name || ' | ';
	END IF;
END IF;


IF p_unzip=TRUE OR p_transform_on_import=TRUE THEN
/* if we had to unzip and/or transform, pipe results to psql, and execute the command via plperlu */
cmd := cmd || 'psql -c "COPY staging.' || p_data_file_target_table || ' (' || p_data_file_column_list ||
	') FROM stdin';
	
	IF p_data_file_load_options IS NOT NULL THEN
	cmd := cmd || ' WITH ' || p_data_file_load_options;
	END IF;

cmd := 'SELECT * FROM staging.fn_cmd_shell(''' || cmd || '" -d warehouse'')';

ELSE 
/* if we didn't have to do any file processing on the file system,
let's just call COPY directly */
cmd := 'COPY staging.' || p_data_file_target_table || ' (' || p_data_file_column_list ||
	') FROM ''' || p_import_dir || p_file_name || '''';
	
	IF p_data_file_load_options IS NOT NULL THEN
		cmd := cmd || ' WITH ' || p_data_file_load_options;
	END IF;

END IF;

/* run command */
RAISE NOTICE 'cmd=%',cmd;
RAISE DEBUG 'cmd=%',cmd;
EXECUTE cmd;

/* assign file id for future processing.
This is only done with dimensions, since we keep that data around in the staging tables
for auditing purposes (they're small enough to not make a big difference for subsequent
laods).  Fact tables, however, are truncated after they are loaded, so assigning a file id
to the staging table would be unnecessary overhead (and expensive, considering the size of 
the fact files). */
IF p_data_file_type='D' THEN
cmd := 'UPDATE ' || p_data_file_target_table || ' SET data_file_id=' || p_data_file_id || ' WHERE data_file_id IS NULL';
RAISE DEBUG 'cmd=%',cmd;
EXECUTE cmd;
END IF;

/* get rowcount for fact file. 
We can't use GET DIAGNOSTICS because of how
we're calling the COPY command (system call via perl). 
If we ever store several data files in a staging table, we'd have to
add additional logic to the count(*) query to only look
at the current load */
IF p_data_file_type='F' THEN
cmd := 'SELECT COUNT(*) FROM staging.'|| p_data_file_target_table;
EXECUTE cmd INTO STRICT v_row_count;
END IF;

/* mark file loaded */
UPDATE control.data_file SET file_status=v_file_status, dt_file_extracted=clock_timestamp(),
staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

/* move file to done directory */
original_file := p_import_dir || p_file_name;
new_file := p_success_dir || p_file_name;
  
PERFORM fn_move_file(original_file,new_file);

RAISE DEBUG 'ENDING: % fn_extract_file(%,%,%,%,%,%,%,%,%,%,%,%,%,%)',timeofday(),
        p_data_file_id,p_file_name,p_server_name,v_file_status,p_data_file_target_table,p_data_file_type,p_unzip,p_transform_on_import,                                                                               p_import_dir,p_success_dir,p_error_dir,p_data_file_column_list,p_data_file_load_options,p_transform_script_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_failed_file_status;

	/* mark file as failed */
	UPDATE control.data_file SET file_status=v_file_status, dt_file_extracted=clock_timestamp()
	WHERE data_file_id=p_data_file_id;

	/* move file to error directory */
	original_file := p_import_dir || p_file_name;
	new_file := p_error_dir || p_file_name;

	PERFORM fn_move_file(original_file,new_file);

	RAISE NOTICE 'FAILED: % fn_extract_file(%,%,%,%,%,%,%,%,%,%,%,%,%,%); SQLSTATE=% SQLERRM=%',timeofday(),
	p_data_file_id,p_file_name,p_server_name,v_file_status,p_data_file_target_table,p_data_file_type,p_unzip,p_transform_on_import,
	p_import_dir,p_success_dir,p_error_dir,p_data_file_column_list,p_data_file_load_options,p_transform_script_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_extract_file',SQLSTATE,SQLERRM);

	RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_extract_file(p_data_file_id integer, p_file_name character varying, p_server_name character varying, p_file_status character varying, p_data_file_target_table character varying, p_data_file_type character, p_unzip boolean, p_transform_on_import boolean, p_import_dir character varying, p_success_dir character varying, p_error_dir character varying, p_data_file_column_list text, p_data_file_load_options text, p_transform_script_name character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_generate_page_view_partition_source(date, date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_generate_page_view_partition_source(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_generate_page_view_partition_source
||
|| Generates the DDL to create partitions for the dw.page_view_fact table.  At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_generate_page_view_partition_source.sql 96 2008-09-15 05:19:20Z abyfield $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE tmp_partition_info (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM dw.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

/* select results */
	/* create partition table */
RETURN query SELECT '--partition table: ' || year_week_monday || ' from ' || min_date::TEXT || ' to ' || max_date::TEXT || '
CREATE TABLE page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (
        CHECK (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
) INHERITS (page_view_fact) TABLESPACE warehouse_data1;
ALTER TABLE page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' OWNER TO warehouse_dbo;

' ||
	/* create indexes */
'--indexes for table: page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_eastern_date_sk_eastern_time_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (eastern_date_sk,eastern_time_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_host_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_host_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_partner_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (partner_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_partner_module_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (partner_module_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_user_agent_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (user_agent_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_content_category_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (content_category_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_display_block_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (display_block_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_referrer_hostname_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (referrer_hostname_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_request_type_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (request_type_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_data_file_id ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (data_file_id) TABLESPACE warehouse_data1;

' ||
	/* create partition rule */
'-- rule for table: page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE RULE page_view_fact_insert_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' AS
ON INSERT TO page_view_fact WHERE
        (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
DO INSTEAD
        INSERT INTO page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' VALUES (NEW.*);
'
FROM tmp_partition_info;

/*
-- partition table: 2008-W15 from blah to blah
CREATE TABLE page_view_fact_y2008_w15 (
        CHECK (eastern_sk BETWEEN 1193 AND 1199)
) INHERITS (page_view_fact);
ALTER TABLE page_view_fact_y2008_w15 OWNER TO warehouse_dbo;

--page_view_fact_y2008_w15
CREATE INDEX idx_page_view_fact_y2008_w15_eastern_date_sk_eastern_time_sk ON page_view_fact_y2008_w15 (eastern_date_sk,eastern_time_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_local_date_sk_local_time_sk ON page_view_fact_y2008_w15 (local_date_sk,local_time_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_gmt_date_sk_gmt_time_sk ON page_view_fact_y2008_w15 (gmt_date_sk,gmt_time_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_portal_host_sk ON page_view_fact_y2008_w15 (portal_host_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_partner_sk ON page_view_fact_y2008_w15 (partner_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_partner_module_sk ON page_view_fact_y2008_w15 (partner_module_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_user_agent_sk ON page_view_fact_y2008_w15 (user_agent_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_portal_sk ON page_view_fact_y2008_w15 (portal_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_content_category_sk ON page_view_fact_y2008_w15 (content_category_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_display_block_sk ON page_view_fact_y2008_w15 (display_block_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_referrer_hostname_sk ON page_view_fact_y2008_w15 (referrer_hostname_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_request_type_sk ON page_view_fact_y2008_w15 (request_type_sk);

-- rule for table: page_view_fact_y2008_w15
CREATE RULE page_view_fact_insert_y2008_w15 AS
ON INSERT TO page_view_fact WHERE
        (eastern_date_sk BETWEEN 1193 AND 1199)
DO INSTEAD
        INSERT INTO page_view_fact_y2008_w15 VALUES (NEW.*);
*/
EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_generate_page_view_partition_source(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_generate_page_view_partition_source(p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_generate_page_view_partition_source2(date, date); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_generate_page_view_partition_source2(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_generate_page_view_partition_source
||
|| Generates the DDL to create partitions for the dw.page_view_fact table.  At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_generate_page_view_partition_source.sql 96 2008-09-15 05:19:20Z abyfield $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE tmp_partition_info (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM dw.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

/* select results */
	/* create partition table */
RETURN query SELECT '--partition table: ' || year_week_monday || ' from ' || min_date::TEXT || ' to ' || max_date::TEXT ||

'
CREATE TABLE page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (
        CHECK (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
) INHERITS (page_view_fact) TABLESPACE warehouse_data1;
ALTER TABLE page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' OWNER TO warehouse_dbo;

' ||
	/* create indexes */
'
--indexes for table: page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' || SUBSTRING (year_week_monday FROM 7 FOR 2) || 
'
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_eastern_date_sk_eastern_time_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (eastern_date_sk,eastern_time_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_host_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_host_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_partner_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (partner_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_partner_module_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (partner_module_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_user_agent_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (user_agent_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_content_category_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (content_category_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_display_block_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (display_block_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_referrer_hostname_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (referrer_hostname_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_request_type_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (request_type_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_data_file_id ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (data_file_id) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_network_type_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (network_type_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_page_view_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_page_template_sk ON page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (page_template_sk) TABLESPACE warehouse_data1;

' ||
	/* create partition rule */
'-- rule for table: page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE OR REPLACE RULE page_view_fact_insert_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' AS
ON INSERT TO page_view_fact WHERE
        (eastern_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
DO INSTEAD
        INSERT INTO page_view_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' VALUES (NEW.*);
'
FROM tmp_partition_info;

/*
-- partition table: 2008-W15 from blah to blah
CREATE TABLE page_view_fact_y2008_w15 (
        CHECK (eastern_sk BETWEEN 1193 AND 1199)
) INHERITS (page_view_fact);
ALTER TABLE page_view_fact_y2008_w15 OWNER TO warehouse_dbo;

--page_view_fact_y2008_w15
CREATE INDEX idx_page_view_fact_y2008_w15_eastern_date_sk_eastern_time_sk ON page_view_fact_y2008_w15 (eastern_date_sk,eastern_time_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_local_date_sk_local_time_sk ON page_view_fact_y2008_w15 (local_date_sk,local_time_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_gmt_date_sk_gmt_time_sk ON page_view_fact_y2008_w15 (gmt_date_sk,gmt_time_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_portal_host_sk ON page_view_fact_y2008_w15 (portal_host_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_partner_sk ON page_view_fact_y2008_w15 (partner_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_partner_module_sk ON page_view_fact_y2008_w15 (partner_module_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_user_agent_sk ON page_view_fact_y2008_w15 (user_agent_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_portal_sk ON page_view_fact_y2008_w15 (portal_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_content_category_sk ON page_view_fact_y2008_w15 (content_category_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_display_block_sk ON page_view_fact_y2008_w15 (display_block_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_referrer_hostname_sk ON page_view_fact_y2008_w15 (referrer_hostname_sk);
CREATE INDEX idx_page_view_fact_y2008_w15_request_type_sk ON page_view_fact_y2008_w15 (request_type_sk);

-- rule for table: page_view_fact_y2008_w15
CREATE RULE page_view_fact_insert_y2008_w15 AS
ON INSERT TO page_view_fact WHERE
        (eastern_date_sk BETWEEN 1193 AND 1199)
DO INSTEAD
        INSERT INTO page_view_fact_y2008_w15 VALUES (NEW.*);
*/
EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_generate_page_view_partition_source2(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_generate_page_view_partition_source2(p_start_date date, p_end_date date) OWNER TO warehouse_dbo;

--
-- Name: fn_generate_session_partition_source(date, date); Type: FUNCTION; Schema: staging; Owner: postgres
--

CREATE FUNCTION fn_generate_session_partition_source(p_start_date date, p_end_date date) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_generate_session_partition_source
||
|| Generates the DDL to create partitions for the dw.session_fact table.  At some point in the future, I'll add a routine that will run this code automatically to eliminate manual intervention.
||
|| $Id: fn_generate_session_partition_source.sql 96 2008-09-15 05:19:20Z abyfield $
||
*/

DECLARE 
 v_start_date_week_monday_start DATE;
 v_end_date_week_monday_start DATE;

BEGIN

/* get monday start for start_date */
SELECT week_monday_start INTO v_start_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_start_date;

/* get monday start for end_date */
SELECT week_monday_start INTO v_end_date_week_monday_start
FROM dw.date_dim
WHERE full_date=p_end_date;

/* end date is not inclusive, so get date before end date for BETWEEN */
v_end_date_week_monday_start:=v_end_date_week_monday_start - interval '1 day';

/* temp table */
CREATE TEMPORARY TABLE tmp_partition_info (
year_week_monday, min_date_sk, max_date_sk, min_date, max_date)
ON COMMIT DROP
AS 
SELECT year_week_monday,min(date_sk),max(date_sk),min(full_date),max(full_date)
FROM dw.date_dim
WHERE full_date BETWEEN v_start_date_week_monday_start AND v_end_date_week_monday_start
GROUP BY year_week_monday
ORDER BY year_week_monday;

/* select results */
	/* create partition table */
RETURN query SELECT '--partition table: ' || year_week_monday || ' from ' || min_date::TEXT || ' to ' || max_date::TEXT ||

'
CREATE TABLE session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (
        CHECK (session_start_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
) INHERITS (session_fact) TABLESPACE warehouse_data1;
ALTER TABLE session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' OWNER TO warehouse_dbo;

' ||
	/* create indexes */
'
--indexes for table: session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' || SUBSTRING (year_week_monday FROM 7 FOR 2) || 
'
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_session_start_datetime_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (session_start_date_sk,session_start_time_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_host_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_host_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_partner_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (partner_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_user_agent_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (user_agent_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_portal_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (portal_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || 'initial_referrer_hostname_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (initial_referrer_hostname_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_network_type_sk ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (network_type_sk) TABLESPACE warehouse_data1;
CREATE INDEX idx_session_fact_y'|| SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '_uid_session ON session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' (uid,session) TABLESPACE warehouse_data1;

' ||
	/* create partition rule */
'-- rule for table: session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || '
CREATE OR REPLACE RULE session_fact_insert_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' AS
ON INSERT TO session_fact WHERE
        (session_start_date_sk BETWEEN ' || min_date_sk::TEXT || ' AND ' || max_date_sk::TEXT || ')
DO INSTEAD
        INSERT INTO session_fact_y' || SUBSTRING (year_week_monday FROM 1 FOR 4) || '_w' ||
SUBSTRING (year_week_monday FROM 7 FOR 2) || ' VALUES (NEW.*);
'
FROM tmp_partition_info;

/*
-- partition table: 2008-W15 from blah to blah
CREATE TABLE session_fact_y2008_w15 (
        CHECK (eastern_sk BETWEEN 1193 AND 1199)
) INHERITS (session_fact);
ALTER TABLE session_fact_y2008_w15 OWNER TO warehouse_dbo;

--session_fact_y2008_w15
CREATE INDEX idx_session_fact_y2008_w15_session_start_date_sk_eastern_time_sk ON session_fact_y2008_w15 (session_start_date_sk,eastern_time_sk);
CREATE INDEX idx_session_fact_y2008_w15_local_date_sk_local_time_sk ON session_fact_y2008_w15 (local_date_sk,local_time_sk);
CREATE INDEX idx_session_fact_y2008_w15_gmt_date_sk_gmt_time_sk ON session_fact_y2008_w15 (gmt_date_sk,gmt_time_sk);
CREATE INDEX idx_session_fact_y2008_w15_portal_host_sk ON session_fact_y2008_w15 (portal_host_sk);
CREATE INDEX idx_session_fact_y2008_w15_partner_sk ON session_fact_y2008_w15 (partner_sk);
CREATE INDEX idx_session_fact_y2008_w15_partner_module_sk ON session_fact_y2008_w15 (partner_module_sk);
CREATE INDEX idx_session_fact_y2008_w15_user_agent_sk ON session_fact_y2008_w15 (user_agent_sk);
CREATE INDEX idx_session_fact_y2008_w15_portal_sk ON session_fact_y2008_w15 (portal_sk);
CREATE INDEX idx_session_fact_y2008_w15_content_category_sk ON session_fact_y2008_w15 (content_category_sk);
CREATE INDEX idx_session_fact_y2008_w15_display_block_sk ON session_fact_y2008_w15 (display_block_sk);
CREATE INDEX idx_session_fact_y2008_w15_referrer_hostname_sk ON session_fact_y2008_w15 (referrer_hostname_sk);
CREATE INDEX idx_session_fact_y2008_w15_request_type_sk ON session_fact_y2008_w15 (request_type_sk);

-- rule for table: session_fact_y2008_w15
CREATE RULE session_fact_insert_y2008_w15 AS
ON INSERT TO session_fact WHERE
        (session_start_date_sk BETWEEN 1193 AND 1199)
DO INSTEAD
        INSERT INTO session_fact_y2008_w15 VALUES (NEW.*);
*/
EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_generate_session_partition_source(''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_start_date,p_end_date,SQLSTATE,SQLERRM;

END;
$_$;


ALTER FUNCTION staging.fn_generate_session_partition_source(p_start_date date, p_end_date date) OWNER TO postgres;

--
-- Name: fn_manage_ad_response_process_tasks(integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_manage_ad_response_process_tasks(p_process_config_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
/*
||
|| Function Name: fn_manage_ad_response_process_tasks(integer)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||
|| Parameters: 
||     - IN  p_process_config_id        -- integer, LOV (10..50)
||        process config id
||
|| Return: -- integer
||     - Success case: 1
||     - Failure case: 0
||         -- Error handling: send notification email
||     - Invalid input parameter case: -1
||
*/

DECLARE

v_yesterday_date_sk 	INTEGER;
v_last_run_date_sk 	INTEGER;
v_min_data_file_id	INTEGER;
v_max_data_file_id	INTEGER;
v_current_process_id	INTEGER;
v_last_process_id	INTEGER;
v_min_date_sk		INTEGER;
v_max_date_sk		INTEGER;
v_data_file_id		INTEGER;
v_full_date 		VARCHAR(32);
v_rec			RECORD;
v_resolve_adcel_sk 	INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_manage_ad_response_process_tasks(%)',timeofday(),p_process_config_id;

IF p_process_config_id < 10 OR p_process_config_id > 60 THEN
	RAISE DEBUG 'ENDING: % fn_manage_ad_response_process_tasks(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN -1;
END IF;

IF p_process_config_id = 10 THEN
	-- process_config_id = 10: daily adresponses reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk = v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%ad_response%';

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_ad_serving_stats',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_ad_serving_stats_by_device',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_ad_serving_stats_by_content_category',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_adcel_stats',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO RESOLVE MISSING USER AGENT FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;
	END IF;
-- END IF p_process_config_id = 10

ELSIF p_process_config_id = 11 THEN
	-- process_config_id = 11: weekly adresponses reports (30 days rolling)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=13; -- daily report 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 29;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_device',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_content_category',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_content_category',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_device',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_dma',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 11 THEN

ELSIF p_process_config_id = 12 THEN
	-- process_config_id = 11: monthly adresponses reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=13; -- daily report 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT	a1.calendar_year_month,
					a1.month_since_2005,
					b1.max_data_file_id,
					min(a1.date_sk) AS min_date_sk,
					max(a1.date_sk) AS max_date_sk
			INTO v_rec
			FROM refer.date_dim a1
			INNER JOIN (
							SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
							FROM refer.date_dim a,
								(
									SELECT	min(min_partition_key) AS min_date_sk, 
											max(max_partition_key) AS max_date_sk, 
											max(max_data_file_id) AS max_data_file_id
									FROM control.process
									WHERE process_status='SU'
									AND process_config_id=13
									AND process_id > v_last_process_id
									AND process_id <= v_current_process_id
								) b
							WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk
						) b1 ON a1.calendar_year_month=b1.calendar_year_month
			WHERE b1.month_since_2005 = (
											SELECT month_since_2005 
											FROM refer.date_dim 
											WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date
										) 
			GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
			
			RAISE NOTICE 'NOTICE: v_rec.min_date_sk=%, v_rec.max_date_sk=% ',v_rec.min_date_sk,v_rec.max_date_sk;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_rec.min_date_sk,v_rec.max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_device',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_content_category',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_content_category',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_device',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_unfilled_stats_by_dma',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 12 THEN

ELSIF p_process_config_id = 13 THEN
	-- process_config_id = 13: daily cumulative ad response
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk = v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%ad_response%';

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01',false,clock_timestamp()),
				--(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_02',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_forecast',false,clock_timestamp()),
				--(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_dbclk',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO RESOLVE MISSING USER AGENT FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;

	END IF;
-- END IF p_process_config_id = 13

ELSIF p_process_config_id = 14 THEN
	-- process_config_id = 14: daily doubleclick/adm reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=15; -- daily adm data feed
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	(file_name LIKE '%Site_Campaign%' OR file_name LIKE '%Site_Device%' OR file_name LIKE '%Site_Order_Forecast%');

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_campaign',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_site_campaign_day',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_site_day',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_publishers_day',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_site_order',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_revenue_by_order',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_order_placement_creative_flight',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_publisher_website_partner',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_order_atc',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_network_fct_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 14

ELSIF p_process_config_id = 15 THEN
	-- process_config_id = 15: daily adm data feed
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	(file_name LIKE '%Site_Campaign%' OR file_name LIKE '%Site_Device%');

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_adm_data_feed',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END IF p_process_config_id = 15

ELSIF p_process_config_id = 16 THEN
	-- process_config_id = 16: weekly forecast reports (30 days rolling)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=13; -- daily report 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 29;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_forecast',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 16 THEN

ELSIF p_process_config_id = 17 THEN
	-- process_config_id = 17: monthly forecast reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=13; -- daily report 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT	a1.calendar_year_month,
					a1.month_since_2005,
					b1.max_data_file_id,
					min(a1.date_sk) AS min_date_sk,
					max(a1.date_sk) AS max_date_sk
			INTO v_rec
			FROM refer.date_dim a1
			INNER JOIN (
							SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
							FROM refer.date_dim a,
								(
									SELECT	min(min_partition_key) AS min_date_sk, 
											max(max_partition_key) AS max_date_sk, 
											max(max_data_file_id) AS max_data_file_id
									FROM control.process
									WHERE process_status='SU'
									AND process_config_id=13
									AND process_id > v_last_process_id
									AND process_id <= v_current_process_id
								) b
							WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk
						) b1 ON a1.calendar_year_month=b1.calendar_year_month
			WHERE b1.month_since_2005 = (
											SELECT month_since_2005 
											FROM refer.date_dim 
											WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date
										) 
			GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
			
			RAISE NOTICE 'NOTICE: v_rec.min_date_sk=%, v_rec.max_date_sk=% ',v_rec.min_date_sk,v_rec.max_date_sk;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_rec.min_date_sk,v_rec.max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_forecast',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 17 THEN

ELSIF p_process_config_id = 19 THEN
	-- process_config_id = 19: transfer adm data feed to datamart
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=15; -- daily adm data feed
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT min_partition_key INTO v_yesterday_date_sk
			FROM   control.process
			WHERE  process_id=v_current_process_id;
			
			SELECT full_date::date INTO v_full_date
			FROM   refer.date_dim
			WHERE  date_sk=v_yesterday_date_sk;

			-- insert data file
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 36, 'ER', clock_timestamp());

			SELECT COALESCE(max(data_file_id),0) INTO v_data_file_id
			FROM   control.data_file
			WHERE  data_file_config_id = 36;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_data_file_id,v_data_file_id,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 19

ELSIF p_process_config_id = 18 THEN
	-- process_config_id = 18: transfer weekly forecast (30 days rolling) to datamart
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=16; -- daily adm data feed
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT min_partition_key,max_partition_key INTO v_min_date_sk,v_max_date_sk
			FROM   control.process
			WHERE  process_id=v_current_process_id;
			
			SELECT full_date::date INTO v_full_date
			FROM   refer.date_dim
			WHERE  date_sk=v_max_date_sk;

			-- insert data file
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('Monthly_Forecast_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 37, 'ER', clock_timestamp());

			SELECT COALESCE(max(data_file_id),0) INTO v_data_file_id
			FROM   control.data_file
			WHERE  data_file_config_id = 37;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,v_data_file_id,v_data_file_id,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 18

ELSIF p_process_config_id = 20 THEN
	-- process_config_id = 20: weekly doubleclick's site inventory (30 days rolling)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=15; -- daily adm data feed 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 29;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_agg_site',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 20 THEN

ELSIF p_process_config_id = 21 THEN
	-- process_config_id = 21: monthly doubleclick's site inventory
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=15; -- daily adm data feed 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT	a1.calendar_year_month,
					a1.month_since_2005,
					b1.max_data_file_id,
					min(a1.date_sk) AS min_date_sk,
					max(a1.date_sk) AS max_date_sk
			INTO v_rec
			FROM refer.date_dim a1
			INNER JOIN (
							SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
							FROM refer.date_dim a,
								(
									SELECT	min(min_partition_key) AS min_date_sk, 
											max(max_partition_key) AS max_date_sk, 
											max(max_data_file_id) AS max_data_file_id
									FROM control.process
									WHERE process_status='SU'
									AND process_config_id=13
									AND process_id > v_last_process_id
									AND process_id <= v_current_process_id
								) b
							WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk
						) b1 ON a1.calendar_year_month=b1.calendar_year_month
			WHERE b1.month_since_2005 = (
											SELECT month_since_2005 
											FROM refer.date_dim 
											WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date
										) 
			GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
			
			RAISE NOTICE 'NOTICE: v_rec.min_date_sk=%, v_rec.max_date_sk=% ',v_rec.min_date_sk,v_rec.max_date_sk;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_rec.min_date_sk,v_rec.max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_agg_site',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 21 THEN

ELSIF p_process_config_id = 22 THEN
	-- process_config_id = 22: daily 3rd network performance reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (39, 40, 41, 43, 44, 47, 48, 49, 50, 52, 53);

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_jt_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_ga_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_mm_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_mx_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_wh_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_sp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_sp_blue_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_yp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_it_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_cg_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_adsense_dbclk_channel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_yp_sb_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_yp_no_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 22

ELSIF p_process_config_id = 23 THEN
	-- process_config_id = 23: weekly adnetwork reports (30 days rolling)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=22; -- daily adnetwork reports 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 29;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_jt_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ga_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_mm_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_mx_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_wh_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_sp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_sp_blue_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_yp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_it_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_cg_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_adsense_dbclk_channel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_yp_sb_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 23 THEN

ELSIF p_process_config_id = 24 THEN
	-- process_config_id = 24: monthly adnetwork reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=22; -- daily adnetwork reports
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT	a1.calendar_year_month,
					a1.month_since_2005,
					b1.max_data_file_id,
					min(a1.date_sk) AS min_date_sk,
					max(a1.date_sk) AS max_date_sk
			INTO v_rec
			FROM refer.date_dim a1
			INNER JOIN (
							SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
							FROM refer.date_dim a,
								(
									SELECT	min(min_partition_key) AS min_date_sk, 
											max(max_partition_key) AS max_date_sk, 
											max(max_data_file_id) AS max_data_file_id
									FROM control.process
									WHERE process_status='SU'
									AND process_config_id=22
									AND process_id > v_last_process_id
									AND process_id <= v_current_process_id
								) b
							WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk
						) b1 ON a1.calendar_year_month=b1.calendar_year_month
			WHERE b1.month_since_2005 = (
											SELECT month_since_2005 
											FROM refer.date_dim 
											WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date
										) 
			GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
			
			RAISE NOTICE 'NOTICE: v_rec.min_date_sk=%, v_rec.max_date_sk=% ',v_rec.min_date_sk,v_rec.max_date_sk;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_rec.min_date_sk,v_rec.max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_jt_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ga_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_mm_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_mx_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_wh_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_sp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_sp_blue_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_yp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_it_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_cg_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_adsense_dbclk_channel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_yp_sb_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 24 THEN

ELSIF p_process_config_id = 25 THEN
	-- process_config_id = 25: daily event tracker reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=46; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk = v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	data_file_config_id IN (45);

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_stats',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_stats_by_hour',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_download',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_dma',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_x_value',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_distance',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_event_stats_adnet',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO RESOLVE MISSING USER AGENT FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 25

ELSIF p_process_config_id = 26 THEN
	-- process_config_id = 26: weekly event tracker reports (30 days rolling)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=25; -- daily event tracker reports 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 29;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_event_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_event_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_event_stats_by_hour',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 26 THEN

ELSIF p_process_config_id = 27 THEN
	-- process_config_id = 27: monthly event tracker reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=25; -- daily event tracker reports
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT	a1.calendar_year_month,
					a1.month_since_2005,
					b1.max_data_file_id,
					min(a1.date_sk) AS min_date_sk,
					max(a1.date_sk) AS max_date_sk
			INTO v_rec
			FROM refer.date_dim a1
			INNER JOIN (
							SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
							FROM refer.date_dim a,
								(
									SELECT	min(min_partition_key) AS min_date_sk, 
											max(max_partition_key) AS max_date_sk, 
											max(max_data_file_id) AS max_data_file_id
									FROM control.process
									WHERE process_status='SU'
									AND process_config_id=25
									AND process_id > v_last_process_id
									AND process_id <= v_current_process_id
								) b
							WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk
						) b1 ON a1.calendar_year_month=b1.calendar_year_month
			WHERE b1.month_since_2005 = (
											SELECT month_since_2005 
											FROM refer.date_dim 
											WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date
										) 
			GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
			
			RAISE NOTICE 'NOTICE: v_rec.min_date_sk=%, v_rec.max_date_sk=% ',v_rec.min_date_sk,v_rec.max_date_sk;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_rec.min_date_sk,v_rec.max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_event_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_event_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_event_stats_by_hour',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 27 THEN

ELSIF p_process_config_id = 28 THEN
	-- process_config_id = 28: daily 3rd party network performance summary report (adnetwork summpary)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id IN (22,35,36,37,38,39,40,41,42,43); -- daily adnetwork reports 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 6;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_adnetwork_summary',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_adnetwork_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 28 THEN

ELSIF p_process_config_id = 29 THEN
	-- process_config_id = 29: weekly adnetwork summary reports (30 days rolling)
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest 30 days rolling adnetwork reports
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=23; -- 30 days rolling adnetwork reports 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get latest 30 days rolling adnetwork reports configuration
			SELECT min_partition_key, max_partition_key
			INTO   v_min_date_sk, v_max_date_sk
			FROM   control.process
			WHERE  process_id = v_current_process_id;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_adnetwork_summary',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_adnetwork_summary_by_date',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 29 THEN

ELSIF p_process_config_id = 30 THEN
	-- process_config_id = 30: monthly adnetwork summary reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest monthly adnetwork reports
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=24; -- monthly adnetwork reports
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get latest monthly adnetwork reports configuration
			SELECT min_partition_key, max_partition_key
			INTO   v_min_date_sk, v_max_date_sk
			FROM   control.process
			WHERE  process_id = v_current_process_id;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_adnetwork_summary',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_adnetwork_summary_by_date',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 30 THEN

ELSIF p_process_config_id = 31 THEN
	-- process_config_id = 31: resolve missing user agent for adcel
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	file_name LIKE '%ad_response%';

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_resolve_ad_response_fact_user_agent',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 31

ELSIF p_process_config_id = 32 THEN
	-- process_config_id = 32: copy daily ad responses to working table
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk <= v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk <= v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	file_name LIKE '%ad_response%';

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app3-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app4-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app6-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app8-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app9-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app12-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app13-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app14-adcel',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_copy_app015-adcel',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 32

ELSIF p_process_config_id = 33 THEN
	-- process_config_id = 33: transfer adm dims to datamart
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=15; -- daily adm data feed
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT min_partition_key INTO v_yesterday_date_sk
			FROM   control.process
			WHERE  process_id=v_current_process_id;
			
			SELECT full_date::date INTO v_full_date
			FROM   refer.date_dim
			WHERE  date_sk=v_yesterday_date_sk;

			-- insert data file
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Advertiser_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 56, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Property_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 57, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Flight_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 58, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Order_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 59, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Organization_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 60, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Publisher_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 61, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Publication_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 64, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Channel_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 77, 'ER', clock_timestamp());
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Portal_Data_Feed_' || v_full_date || '.csv', 'DW3', v_full_date::timestamp without time zone, 79, 'ER', clock_timestamp());

			SELECT COALESCE(min(data_file_id),0), COALESCE(max(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM   control.data_file
			WHERE  data_file_config_id in (56,57,58,59,60,61,64,77,79)
			  AND  file_timestamp::date = v_full_date::timestamp without time zone;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 33

ELSIF p_process_config_id = 34 THEN
	-- process_config_id = 33: transfer network fct performance to datamart
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=28; -- daily adnetwork summary
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT max_partition_key INTO v_yesterday_date_sk
			FROM   control.process
			WHERE  process_id=v_current_process_id;
			
			SELECT full_date::date INTO v_full_date
			FROM   refer.date_dim
			WHERE  date_sk=v_yesterday_date_sk;

			-- insert data file -- Network FACTs
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Fact_Performance_Data_Feed_' || v_full_date || '_' || to_char(clock_timestamp(), 'HH24_MI_SS') || '.csv', 'DW3', v_full_date::timestamp without time zone, 62, 'ER', clock_timestamp());
			--INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			--VALUES ('ADM_Fact_Request_Data_Feed_' || v_full_date || '_' || to_char(clock_timestamp(), 'HH24_MI_SS') || '.csv', 'DW3', v_full_date::timestamp without time zone, 80, 'ER', clock_timestamp());


			SELECT COALESCE(min(data_file_id),0), COALESCE(max(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM   control.data_file
			WHERE  data_file_config_id in (62)
			  AND  file_timestamp::date = v_full_date::timestamp without time zone;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 34

ELSIF p_process_config_id = 35 THEN
	-- process_config_id = 35: daily jumptap performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (39); -- JumpTap

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_jt_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 35

ELSIF p_process_config_id = 36 THEN
	-- process_config_id = 36: daily where performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (44); -- WHERE

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_wh_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 36

ELSIF p_process_config_id = 37 THEN
	-- process_config_id = 37: daily marchex performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (43); -- marchex

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_mx_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 37

ELSIF p_process_config_id = 38 THEN
	-- process_config_id = 38: daily yellowpages performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (50); -- yellowpages

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_yp_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_yp_sb_performance',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_yp_no_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 38

ELSIF p_process_config_id = 39 THEN
	-- process_config_id = 39: daily superpages performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (49); -- superpages

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_sp_blue_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 39

ELSIF p_process_config_id = 40 THEN
	-- process_config_id = 40: daily millennial media performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (41); -- millennial media

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_mm_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 40

ELSIF p_process_config_id = 41 THEN
	-- process_config_id = 41: daily city gird performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (53); -- city grid

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_cg_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 41

ELSIF p_process_config_id = 42 THEN
	-- process_config_id = 42: daily itunes performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (52); -- itunes

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_it_performance',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 42

ELSIF p_process_config_id = 43 THEN
	-- process_config_id = 43: daily adsense dbclk channel performance report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (47,48); -- daily adsense dbclk channel

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk - 6,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_adsense_dbclk_channel',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 43

ELSIF p_process_config_id = 44 THEN
	-- process_config_id = 44: daily unfilled reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk >= v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%ad_response%';

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_unfilled_stats',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_unfilled_stats_by_content_category',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_unfilled_stats_by_device',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_unfilled_stats_by_dma',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_olap_unfilled_by_portal',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO COPY INDAY FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;
	END IF;
-- END IF p_process_config_id = 44

ELSIF p_process_config_id = 46 THEN
	-- process_config_id = 46: resolve missing user agent for event tracker
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	data_file_config_id IN (45);

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_resolve_event_tracker_fact_user_agent',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END ELSIF p_process_config_id = 46

ELSIF p_process_config_id = 47 THEN
	-- process_config_id = 47: daily network fct performance requests
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id IN (22,35,36,37,38,39,40,41,42,43); -- daily adnetwork reports 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
			
			v_max_date_sk := v_yesterday_date_sk;
			v_min_date_sk := v_yesterday_date_sk - 6;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_min_date_sk,v_max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_network_fct_request',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 47 THEN

ELSIF p_process_config_id = 48 THEN
	-- process_config_id = 48: replace network fct performance on datamart
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=34; -- transfer network fct performance to datamart
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT max_partition_key INTO v_yesterday_date_sk
			FROM   control.process
			WHERE  process_id=v_current_process_id;
			
			SELECT full_date::date INTO v_full_date
			FROM   refer.date_dim
			WHERE  date_sk=v_yesterday_date_sk;
			
			SELECT COALESCE(min(data_file_id),0), COALESCE(max(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM   control.data_file
			WHERE  data_file_config_id in (62)
			  AND  file_timestamp::date = v_full_date::timestamp without time zone;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 48

ELSIF p_process_config_id = 49 THEN
	-- process_config_id = 49: transfer network fct performance to datamart
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get latest adm data feed process
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=47; -- daily network fct performance requests
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		-- if new records exist, let's add a record to the queue
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';

			-- get run date
			SELECT max_partition_key INTO v_yesterday_date_sk
			FROM   control.process
			WHERE  process_id=v_current_process_id;
			
			SELECT full_date::date INTO v_full_date
			FROM   refer.date_dim
			WHERE  date_sk=v_yesterday_date_sk;

			-- insert data file -- Network FACTs
			INSERT INTO control.data_file(file_name, server_name, file_timestamp, data_file_config_id, file_status, dt_file_queued)
			VALUES ('ADM_Fact_Request_Data_Feed_' || v_full_date || '_' || to_char(clock_timestamp(), 'HH24_MI_SS') || '.csv', 'DW3', v_full_date::timestamp without time zone, 80, 'ER', clock_timestamp());

			SELECT COALESCE(min(data_file_id),0), COALESCE(max(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM   control.data_file
			WHERE  data_file_config_id in (80)
			  AND  file_timestamp::date = v_full_date::timestamp without time zone;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;

	END IF;
-- END IF p_process_config_id = 49

ELSIF p_process_config_id = 50 THEN
	-- process_config_id = 50: daily cumulative ad response per app server
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk >= v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = % v_yesterday_date_sk = %', v_resolve_adcel_sk, v_yesterday_date_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%ad_response%';

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app3-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app4-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app6-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app8-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app9-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app12-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app13-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app14-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01_app015-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app3-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app4-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app6-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app8-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app9-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app12-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app13-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app14-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_request_app015-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app3-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app4-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app6-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app8-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app9-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app12-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app13-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app14-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_unfilled_app015-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app3-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app4-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app6-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app8-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app9-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app12-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app13-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app14-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_filled_app015-adcel',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_agg_inday_stats_01',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_agg_inday_stats_forecast',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_agg_inday_stats_unfilled',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_agg_inday_stats_filled',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_agg_inday_stats_trxids',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO RESOLVE MISSING USER AGENT FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;

	END IF;
-- END IF p_process_config_id = 50

ELSIF p_process_config_id = 51 THEN
	-- process_config_id = 51: daily filled reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk >= v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%ad_response%';

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_filled_stats',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_filled_stats_by_content_category',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_filled_stats_by_device',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_filled_stats_by_dma',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_olap_filled_by_portal',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO COPY INDAY FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;
	END IF;
-- END IF p_process_config_id = 51

ELSIF p_process_config_id = 52 THEN
	-- process_config_id = 52: daily requests reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get last run resolved user agent
		SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		FROM control.process_checkpoint
		WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		IF v_resolve_adcel_sk >= v_yesterday_date_sk THEN
			RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
			SELECT last_key INTO v_last_run_date_sk
			FROM control.process_checkpoint
			WHERE process_config_id=p_process_config_id;
			IF NOT FOUND THEN
				v_last_run_date_sk=0;
				INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
				VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
			END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%ad_response%';

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_olap_trxids_by_content_category',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_olap_trxids_by_device',false,clock_timestamp()),
				(currval('control.process_process_id_seq'::regclass),'fn_build_daily_olap_trxids_by_portal',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO COPY INDAY FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;
	END IF;
-- END IF p_process_config_id = 52
END IF;

RAISE DEBUG 'ENDING: % fn_manage_ad_response_process_tasks(%)',timeofday(),p_process_config_id;

RETURN 1;

EXCEPTION
WHEN others THEN
    RAISE NOTICE 'FAILED: % fn_manage_ad_response_process_tasks(%); SQLSTATE=% SQLERRM=%',timeofday(),p_process_config_id,SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_manage_ad_response_process_tasks',SQLSTATE,SQLERRM);
RETURN 0;
END;
$$;


ALTER FUNCTION staging.fn_manage_ad_response_process_tasks(p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_manage_double_click_process_tasks(integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_manage_double_click_process_tasks(p_process_config_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
/*
||
|| Function Name: fn_manage_double_click_process_tasks(integer)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||
|| Parameters: 
||     - IN  p_process_config_id        -- integer, LOV (21...30)
||        process config id
||
|| Return: -- integer
||     - Success case: 1
||     - Failure case: 0
||         -- Error handling: send notification email
||     - Invalid input parameter case: -1
||
*/

DECLARE

v_yesterday_date_sk 	INTEGER;
v_last_run_date_sk 		INTEGER;
v_min_data_file_id		INTEGER;
v_max_data_file_id		INTEGER;
v_current_process_id	INTEGER;
v_last_process_id		INTEGER;
v_min_date_sk			INTEGER;
v_max_date_sk			INTEGER;
v_rec					RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_manage_double_click_process_tasks(%)',timeofday(),p_process_config_id;

IF p_process_config_id < 20 OR p_process_config_id > 30 THEN
	RAISE DEBUG 'ENDING: % fn_manage_double_click_process_tasks(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN -1;
END IF;

IF p_process_config_id = 21 THEN
	-- process_config_id = 21: build working data
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '42 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date BETWEEN (CURRENT_TIMESTAMP - interval '43 day')::date AND (CURRENT_TIMESTAMP - interval '42 day')::date
			AND 	(file_name LIKE '%Site_Campaign%' OR file_name LIKE '%Site_Device%');

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_site_campaign_fact_working',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_site_device_fact_working',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END IF p_process_config_id = 21

ELSIF p_process_config_id = 22 THEN
	-- process_config_id = 22: daily report
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=21; -- daily report 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
			FROM 	refer.date_dim
			WHERE 	full_date=(CURRENT_TIMESTAMP - interval '42 day')::date;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_site_order',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_site_day',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_site_campaign_day',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_publishers_day',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_publisher_device',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_daily_agg_campaign',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 22 THEN

ELSIF p_process_config_id = 12 THEN
	-- process_config_id = 11: monthly ad_response reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN

		-- get latest cumulative ad response
		SELECT COALESCE(max(process_id),0) INTO v_current_process_id
		FROM   control.process
		WHERE  process_status='SU'
		  AND  process_config_id=13; -- daily report 
		
		-- get check point
		SELECT last_key INTO v_last_process_id
		FROM   control.process_checkpoint
		WHERE  process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_process_id=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_process_id,clock_timestamp());
		END IF;
		
		IF v_current_process_id > v_last_process_id THEN
			RAISE NOTICE 'NOTICE: v_current_process_id > v_last_process_id';
			
			-- get run date
			SELECT	a1.calendar_year_month,
					a1.month_since_2005,
					b1.max_data_file_id,
					min(a1.date_sk) AS min_date_sk,
					max(a1.date_sk) AS max_date_sk
			INTO v_rec
			FROM refer.date_dim a1
			INNER JOIN (
							SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
							FROM refer.date_dim a,
								(
									SELECT	min(min_partition_key) AS min_date_sk, 
											max(max_partition_key) AS max_date_sk, 
											max(max_data_file_id) AS max_data_file_id
									FROM control.process
									WHERE process_status='SU'
									AND process_config_id=13
									AND process_id > v_last_process_id
									AND process_id <= v_current_process_id
								) b
							WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk
						) b1 ON a1.calendar_year_month=b1.calendar_year_month
			WHERE b1.month_since_2005 = (
											SELECT month_since_2005 
											FROM refer.date_dim 
											WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date
										) 
			GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
			
			RAISE NOTICE 'NOTICE: v_rec.min_date_sk=%, v_rec.max_date_sk=% ',v_rec.min_date_sk,v_rec.max_date_sk;

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_rec.min_date_sk,v_rec.max_date_sk,0,0,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_date',false,clock_timestamp()),
			(currval('control.process_process_id_seq'::regclass),'fn_build_monthly_ad_serving_stats_by_device',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
			
		ELSE
			RAISE NOTICE 'NOTICE: v_current_process_id=%  v_last_process_id=%',v_current_process_id,v_last_process_id;
		END IF;
	END IF;
-- END ELSIF p_process_config_id = 12 THEN

ELSIF p_process_config_id = 23 THEN
	-- process_config_id = 13: daily cumulative ad response
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;
		
		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;

		-- if new records exist, let's add a record to the queue
		IF v_yesterday_date_sk > v_last_run_date_sk THEN
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
			
			SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			FROM 	control.data_file
			WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			AND 	file_name LIKE '%ad_response%';

			INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
			VALUES (p_process_config_id,'PS',v_yesterday_date_sk,v_yesterday_date_sk,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

			INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
			VALUES (currval('control.process_process_id_seq'::regclass),'fn_build_ad_response_fact_stats_01',false,clock_timestamp());

			UPDATE control.process_checkpoint
			SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
			WHERE process_config_id=p_process_config_id;
		ELSE
			RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
		END IF;

	END IF;
-- END IF p_process_config_id = 23

END IF;

RAISE DEBUG 'ENDING: % fn_manage_double_click_process_tasks(%)',timeofday(),p_process_config_id;

RETURN 1;

EXCEPTION
WHEN others THEN
    RAISE NOTICE 'FAILED: % fn_manage_double_click_process_tasks(%); SQLSTATE=% SQLERRM=%',timeofday(),p_process_config_id,SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_manage_double_click_process_tasks',SQLSTATE,SQLERRM);
RETURN 0;
END;
$$;


ALTER FUNCTION staging.fn_manage_double_click_process_tasks(p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_manage_monthly_process_tasks_test_pt(integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_manage_monthly_process_tasks_test_pt(p_process_config_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
/*
||
|| Function Name: fn_manage_monthly_process_tasks_test_pt(integer)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||
|| Parameters: 
||     - IN  p_process_config_id        -- integer, LOV (10..50)
||        process config id
||
|| Return: -- integer
||     - Success case: 1
||     - Failure case: 0
||         -- Error handling: send notification email
||     - Invalid input parameter case: -1
||
*/

DECLARE

v_yesterday_date_sk 	INTEGER;
v_last_run_date_sk 	INTEGER;
v_min_data_file_id	INTEGER;
v_max_data_file_id	INTEGER;
v_current_process_id	INTEGER;
v_last_process_id	INTEGER;
v_min_date_sk		INTEGER;
v_max_date_sk		INTEGER;
v_data_file_id		INTEGER;
v_full_date 		VARCHAR(32);
v_rec			RECORD;
v_resolve_adcel_sk 	INTEGER;
v_min_partition_key 	INTEGER;
v_max_partition_key 	INTEGER;


BEGIN

RAISE DEBUG 'STARTING: % fn_manage_monthly_process_tasks_test_pt(%)',timeofday(),p_process_config_id;

IF p_process_config_id < 10 OR p_process_config_id > 50 THEN
	RAISE DEBUG 'ENDING: % fn_manage_monthly_process_tasks_test_pt(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
	RETURN -1;
END IF;


IF p_process_config_id = 45 THEN
	-- process_config_id = 45: daily adresponses reports
	-- Let's only queue if we've finished the last job
	IF NOT EXISTS (SELECT 1 FROM control.process WHERE process_config_id=p_process_config_id AND process_status<>'SU' LIMIT 1) THEN
		
		-- get run date
		SELECT COALESCE(date_sk,0) INTO v_yesterday_date_sk
		FROM 	refer.date_dim
		WHERE 	full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		-- get check point
		SELECT last_key INTO v_last_run_date_sk
		FROM control.process_checkpoint
		WHERE process_config_id=p_process_config_id;
		IF NOT FOUND THEN
			v_last_run_date_sk=0;
			INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
			VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		END IF;
		-- get last run resolved user agent
		--SELECT COALESCE(last_key, 0) INTO v_resolve_adcel_sk
		--FROM control.process_checkpoint
		--WHERE process_config_id=31; -- important process

		-- if we resolved missing user agent, process maybe start
		--IF v_resolve_adcel_sk = v_yesterday_date_sk THEN
		--	RAISE NOTICE 'NOTICE: v_resolve_adcel_sk = v_yesterday_date_sk = %', v_resolve_adcel_sk;
		
			-- get check point
		--	SELECT last_key INTO v_last_run_date_sk
		--	FROM control.process_checkpoint
		--	WHERE process_config_id=p_process_config_id;
		--	IF NOT FOUND THEN
		--		v_last_run_date_sk=0;
		--		INSERT INTO control.process_checkpoint (process_config_id,last_key,dt_lastchange)
		--		VALUES (p_process_config_id,v_last_run_date_sk,clock_timestamp());
		--	END IF;

			-- if new records exist, let's add a record to the queue
			IF v_yesterday_date_sk > v_last_run_date_sk THEN
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk > v_last_run_date_sk';
				
				SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
				FROM 	control.data_file
				WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
				AND 	file_name LIKE '%monthly_doubleclick%' or file_name LIKE '%monthly_adsense%';
				
				select a.date_sk_start, a.date_sk_end into v_min_partition_key, v_max_partition_key
				from refer.month_dim a
				where calendar_year_month in ( 
				select calendar_year_month from refer.date_dim where full_date in (
				select file_timestamp::date from control.data_file where data_file_id = v_max_data_file_id));
				
			--SELECT COALESCE(MIN(data_file_id),0), COALESCE(MAX(data_file_id),0) INTO v_min_data_file_id, v_max_data_file_id
			--FROM 	control.data_file
			--WHERE 	file_timestamp::date=(CURRENT_TIMESTAMP - interval '1 day')::date
			--AND 	data_file_config_id IN (39, 40, 41, 43, 44, 47, 48, 49, 50, 52, 53);

				INSERT INTO control.process (process_config_id,process_status,min_partition_key,max_partition_key,min_data_file_id,max_data_file_id,dt_process_queued)
				VALUES (p_process_config_id,'PS',v_min_partition_key,v_max_partition_key,v_min_data_file_id,v_max_data_file_id,clock_timestamp());

				INSERT INTO control.process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
				VALUES (currval('control.process_process_id_seq'::regclass),'fn_ba_monthly_adsense_dbclk_channel',false,clock_timestamp());

				UPDATE control.process_checkpoint
				SET last_key=v_yesterday_date_sk,dt_lastchange=clock_timestamp()
				WHERE process_config_id=p_process_config_id;
			ELSE
				RAISE NOTICE 'NOTICE: v_yesterday_date_sk=%  v_last_run_date_sk=%',v_yesterday_date_sk,v_last_run_date_sk;
			END IF;
		ELSE
			RAISE NOTICE 'NOTICE: NEED TO RESOLVE MISSING USER AGENT FIRST!';
			RAISE NOTICE 'NOTICE: LAST RESOLVED = %, DAILY = %',v_resolve_adcel_sk,v_yesterday_date_sk;
		END IF;

-- END IF p_process_config_id = 45
END IF;


RAISE DEBUG 'ENDING: % fn_manage_monthly_process_tasks_test_pt(%)',timeofday(),p_process_config_id;

RETURN 1;

EXCEPTION
WHEN others THEN
    RAISE NOTICE 'FAILED: % fn_manage_monthly_process_tasks_test_pt(%); SQLSTATE=% SQLERRM=%',timeofday(),p_process_config_id,SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_manage_monthly_process_tasks_test_pt',SQLSTATE,SQLERRM);
RETURN 0;
END;
$$;


ALTER FUNCTION staging.fn_manage_monthly_process_tasks_test_pt(p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_manage_process_tasks(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_manage_process_tasks() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_manage_process_tasks()
||
|| This job adds tasks to the process queue, and
|| in the case of jobs that can have concurrent
|| processes, will signal that a process is complete.
||
|| $Id$
||
*/

DECLARE
 v_current_data_file_id INTEGER;
 v_last_data_file_id INTEGER;
 v_current_process_id INTEGER;
 v_last_process_id INTEGER;
 v_max_eastern_date_sk INTEGER;

 v_yesterday_date_sk INTEGER;

 rec2 RECORD;
 rec3 RECORD;
 rec4 RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_manage_process_tasks()',timeofday();

/* process_config_id=1; cumulative page view aggregates */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=1 AND process_status<>'SU' LIMIT 1) THEN

	-- get checkpoints
	SELECT max(data_file_id) INTO v_current_data_file_id
	FROM data_file
	WHERE file_status='SU'
	AND data_file_config_id IN (1,8,9); -- 1=tomcat, 8=content api, 9=amazon
	
	v_current_data_file_id=COALESCE(v_current_data_file_id,0);

	SELECT last_key INTO v_last_data_file_id
	FROM process_checkpoint
	WHERE process_config_id=1;
	
	IF NOT FOUND THEN
	
	v_last_data_file_id=0;

	INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
	VALUES (1,v_last_data_file_id,clock_timestamp());

	END IF;
	
	-- if new records exist, let's add a record to the queue
	IF v_current_data_file_id > v_last_data_file_id THEN

		INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,
		min_data_file_id,max_data_file_id,dt_process_queued)
		SELECT 1,'PS',min(min_eastern_date_sk),max(max_eastern_date_sk), -- these date keys can't be NULL
		v_last_data_file_id+1,v_current_data_file_id,clock_timestamp()
		FROM data_file
		WHERE file_status='SU'
		AND data_file_config_id IN (1,8,9)
		AND data_file_id > v_last_data_file_id
		AND data_file_id <= v_current_data_file_id;

		UPDATE process_checkpoint
		SET last_key=v_current_data_file_id,dt_lastchange=clock_timestamp()
		WHERE process_config_id=1;

	END IF;

END IF;

/* process_config_id=4; 30 day rolling reports */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=4 AND process_status<>'SU' LIMIT 1) THEN

        /* re-initialize variables */
        v_current_process_id:=NULL;
        v_last_process_id:=NULL;
        v_max_eastern_date_sk:=NULL;

	-- get checkpoints
	SELECT COALESCE(max(process_id),0) INTO v_current_process_id
	FROM process
	WHERE process_status='SU'
	AND process_config_id=1; -- cumulative page view fact agg 

	v_current_process_id=COALESCE(v_current_process_id,0);
	
	SELECT last_key INTO v_last_process_id
	FROM process_checkpoint
	WHERE process_config_id=4;

	IF NOT FOUND THEN
	
	v_last_process_id=0;

	INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
	VALUES (4,v_last_process_id,clock_timestamp());

	END IF;
	
	-- Let's check to see of we have any new data since the last run
	IF v_current_process_id > v_last_process_id THEN
	
		SELECT date_sk INTO v_yesterday_date_sk
		FROM dw.date_dim
		WHERE full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

		SELECT v_yesterday_date_sk-29 AS min_date_sk, v_yesterday_date_sk AS max_date_sk, max(max_data_file_id) AS max_data_file_id INTO rec4
		FROM process
		WHERE process_status='SU'
		AND process_config_id=1
		AND process_id > v_last_process_id
		AND process_id <= v_current_process_id;

		INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
		VALUES (4,'PS',rec4.min_date_sk,rec4.max_date_sk,rec4.max_data_file_id,clock_timestamp());

		INSERT INTO process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
		VALUES (currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_portal_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_network_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_portal_act_all',false,clock_timestamp());	

        	UPDATE process_checkpoint
        	SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
        	WHERE process_config_id=4;

	END IF;

END IF;

/* process_config_id=2; monthly partner reports */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=2 AND process_status<>'SU' LIMIT 1) THEN

-- We're only going to run this from the 1st to the 11th for the previous month,
-- so let's see where we are today.
IF EXTRACT(DAY FROM CURRENT_TIMESTAMP) BETWEEN 1 AND 11 THEN
	
        /* re-initialize variables */
        v_current_process_id:=NULL;
        v_last_process_id:=NULL;
        v_max_eastern_date_sk:=NULL;

	-- get checkpoints
	SELECT COALESCE(max(process_id),0) INTO v_current_process_id
	FROM process
	WHERE process_status='SU'
	AND process_config_id=1; -- 1=cumulative page view fact agg

	v_current_process_id=COALESCE(v_current_process_id,0);
	
	SELECT last_key INTO v_last_process_id
	FROM process_checkpoint
	WHERE process_config_id=2;

	IF NOT FOUND THEN
	
	v_last_process_id=0;

	INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
	VALUES (2,v_last_process_id,clock_timestamp());

	END IF;
	
	-- Let's check to see of we have any new data since the last run
	IF v_current_process_id > v_last_process_id THEN
	
		-- Now, queue up last month's data (only if data has been received for last month since the
		-- last successful run).  Also, save max data file id, so that we can repeat this
		-- run in the future.  Regarding checkpoints, there's a chance that we could receive data
		-- within the first 11 days of a month (while this job calculates the previous month).  If no
		-- records are loaded for the rest of the month, no report will be generated when we roll over
		-- to the next month.  That's unlikely, and I'll live with the risk, for now.  Alternatively,
		-- we could run the job, regardless of checkpoints.  I might do that at some point.
		SELECT 	a1.calendar_year_month,
			a1.month_since_2005,
			b1.max_data_file_id,
			min(a1.date_sk) AS min_date_sk,
			max(a1.date_sk) AS max_date_sk INTO rec2
		FROM dw.date_dim a1
		INNER JOIN (
			SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
			FROM dw.date_dim a,
			(
				SELECT min(min_partition_key) AS min_date_sk, max(max_partition_key) AS max_date_sk, max(max_data_file_id) AS max_data_file_id
				FROM process
				WHERE process_status='SU'
				AND process_config_id=1
				AND process_id > v_last_process_id
				AND process_id <= v_current_process_id) b
			WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk) b1 ON a1.calendar_year_month=b1.calendar_year_month
		WHERE b1.month_since_2005 = (
					SELECT month_since_2005 
					FROM dw.date_dim 
					WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date) 
					--WHERE full_date=CURRENT_TIMESTAMP::date) 
		GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;
		
		-- Any data from previous month?  If so, queue monthly report request
		IF FOUND THEN

		INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
		VALUES (2,'PS',rec2.min_date_sk,rec2.max_date_sk,rec2.max_data_file_id,clock_timestamp());

		INSERT INTO process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
		VALUES (currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_portal_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_network_act_all',false,clock_timestamp()),	
		(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_portal_act_all',false,clock_timestamp());	

		END IF;

        	UPDATE process_checkpoint
        	SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
        	WHERE process_config_id=2;

	END IF;

END IF;
END IF;

/* process_config_id=3; monthly site traffic */
-- Let's only queue if we've finished the last job

IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=3 AND process_status<>'SU' LIMIT 1) THEN

-- We're only going to run this from the 1st to the 11th for the previous month,
-- so let's see where we are today.
IF EXTRACT(DAY FROM CURRENT_TIMESTAMP) BETWEEN 1 AND 11 THEN
	
	/* re-initialize variables */
	v_current_process_id:=NULL;
	v_last_process_id:=NULL;
	v_max_eastern_date_sk:=NULL;

	-- get checkpoints
	SELECT COALESCE(max(process_id),0) INTO v_current_process_id
	FROM process
	WHERE process_status='SU'
	AND process_config_id=1; -- 1=cumulative page view fact agg

	v_current_process_id=COALESCE(v_current_process_id,0);
	
	SELECT last_key INTO v_last_process_id
	FROM process_checkpoint
	WHERE process_config_id=3;

	IF NOT FOUND THEN
	
	v_last_process_id=0;

	INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
	VALUES (3,v_last_process_id,clock_timestamp());

	END IF;
	
	IF v_current_process_id > v_last_process_id THEN
	
		SELECT 	a1.calendar_year_month,
			a1.month_since_2005,
			b1.max_data_file_id,
			min(a1.date_sk) AS min_date_sk,
			max(a1.date_sk) AS max_date_sk INTO rec3
		FROM dw.date_dim a1
		INNER JOIN (
			SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
			FROM dw.date_dim a,
			(
				SELECT min(min_partition_key) AS min_date_sk, max(max_partition_key) AS max_date_sk, max(max_data_file_id) AS max_data_file_id
				FROM process
				WHERE process_status='SU'
				AND process_config_id=1
				AND process_id > v_last_process_id
				AND process_id <= v_current_process_id) b
			WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk) b1 ON a1.calendar_year_month=b1.calendar_year_month
		WHERE b1.month_since_2005 = (
					SELECT month_since_2005 
					FROM dw.date_dim 
					WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date) 
					--WHERE full_date=CURRENT_TIMESTAMP::date) 
		GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;

		-- Any data from previous month?  If so, queue monthly report request
		IF FOUND THEN

		INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
		VALUES (3,'PS',rec3.min_date_sk,rec3.max_date_sk,rec3.max_data_file_id,clock_timestamp());

		END IF;

        	UPDATE process_checkpoint
        	SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
        	WHERE process_config_id=3;

	END IF;

END IF;
END IF;

RAISE DEBUG 'ENDING: % fn_manage_process_tasks()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_manage_process_tasks(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_manage_process_tasks',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_manage_process_tasks() OWNER TO warehouse_dbo;

--
-- Name: fn_manage_process_tasks_with_parameter(integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_manage_process_tasks_with_parameter(p_process_config_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
/*
||
|| Function Name: fn_manage_process_tasks_with_parameter(integer)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||
|| Parameters: 
||     - IN  p_process_config_id        -- integer, LOV (1,2,3,4)
||        process config id
||
|| Return: -- integer
||     - Success case: 1
||     - Failure case: 0
||         -- Error handling: send notification email
||     - Invalid input parameter case: -1
||
*/

DECLARE
v_current_data_file_id INTEGER;
v_last_data_file_id INTEGER;
v_current_process_id INTEGER;
v_last_process_id INTEGER;
v_max_eastern_date_sk INTEGER;
v_yesterday_date_sk INTEGER;

rec2 RECORD;
rec3 RECORD;
rec4 RECORD;
BEGIN

RAISE DEBUG 'STARTING: % fn_manage_process_tasks_with_parameter(%)',timeofday(),p_process_config_id;

IF p_process_config_id <= 0 OR p_process_config_id > 4 THEN
RAISE DEBUG 'ENDING: % fn_manage_process_tasks_with_parameter(%) - Input paramenter is invalid',timeofday(),p_process_config_id;
RETURN -1;
END IF;

IF p_process_config_id = 1 THEN
/* process_config_id=1; cumulative page view aggregates */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=1 AND process_status<>'SU' LIMIT 1) THEN
-- get checkpoints
SELECT max(data_file_id) INTO v_current_data_file_id 
FROM data_file
WHERE file_status='SU'
AND data_file_config_id IN (1,8,9); -- 1=tomcat, 8=content api, 9=amazon

v_current_data_file_id=COALESCE(v_current_data_file_id,0);

SELECT last_key INTO v_last_data_file_id
FROM process_checkpoint
WHERE process_config_id=1;

IF NOT FOUND THEN

v_last_data_file_id=0;

INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
VALUES (1,v_last_data_file_id,clock_timestamp());

END IF;

-- if new records exist, let's add a record to the queue
IF v_current_data_file_id > v_last_data_file_id THEN

INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,
min_data_file_id,max_data_file_id,dt_process_queued)
SELECT 1,'PS',COALESCE(min(min_eastern_date_sk),-1),COALESCE(max(max_eastern_date_sk),-1), -- these date keys can't be NULL
v_last_data_file_id+1,v_current_data_file_id,clock_timestamp()
FROM data_file
WHERE file_status='SU'
AND data_file_config_id IN (1,8,9)
AND data_file_id > v_last_data_file_id
AND data_file_id <= v_current_data_file_id;

UPDATE process_checkpoint
SET last_key=v_current_data_file_id,dt_lastchange=clock_timestamp()
WHERE process_config_id=1;

END IF;
END IF;

ELSIF p_process_config_id = 4 THEN
/* process_config_id=4; 30 day rolling reports */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=4 AND process_status<>'SU' LIMIT 1) THEN

-- get checkpoints
SELECT COALESCE(max(process_id),0) INTO v_current_process_id
FROM process
WHERE process_status='SU'
AND process_config_id=1; -- cumulative page view fact agg 

SELECT last_key INTO v_last_process_id
FROM process_checkpoint
WHERE process_config_id=4;

IF NOT FOUND THEN

v_last_process_id=0;

INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
VALUES (4,v_last_process_id,clock_timestamp());

END IF;

-- Let's check to see of we have any new data since the last run
IF v_current_process_id > v_last_process_id THEN
RAISE NOTICE 'NOTICE: v_current_data_file_id > v_last_data_file_id';
SELECT date_sk INTO v_yesterday_date_sk
FROM dw.date_dim
WHERE full_date=(CURRENT_TIMESTAMP - interval '1 day')::date;

SELECT v_yesterday_date_sk-29 AS min_date_sk, v_yesterday_date_sk AS max_date_sk, max(max_data_file_id) AS max_data_file_id INTO rec4
FROM process
WHERE process_status='SU'
AND process_config_id=1
AND process_id > v_last_process_id
AND process_id <= v_current_process_id;

INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
VALUES (4,'PS',rec4.min_date_sk,rec4.max_date_sk,rec4.max_data_file_id,clock_timestamp());

INSERT INTO process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
VALUES (currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_portal_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_network_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_portal_act_all',false,clock_timestamp());

UPDATE process_checkpoint
SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
WHERE process_config_id=4;
ELSE
RAISE NOTICE 'NOTICE: v_current_data_file_id=%  v_last_data_file_id=%',v_current_process_id, v_last_process_id;
END IF;

END IF;

ELSIF p_process_config_id = 2 THEN
/* process_config_id=2; monthly partner reports */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=2 AND process_status<>'SU' LIMIT 1) THEN

-- We're only going to run this from the 1st to the 11th for the previous month,
-- so let's see where we are today.
-- IF EXTRACT(DAY FROM CURRENT_TIMESTAMP) BETWEEN 1 AND 11 THEN

-- get checkpoints
SELECT COALESCE(max(process_id),0) INTO v_current_process_id
FROM process
WHERE process_status='SU'
AND process_config_id=1; -- 1=cumulative page view fact agg

SELECT last_key INTO v_last_process_id
FROM process_checkpoint
WHERE process_config_id=2;

IF NOT FOUND THEN

v_last_process_id=0;

INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
VALUES (2,v_last_process_id,clock_timestamp());

END IF;

-- Let's check to see of we have any new data since the last run
IF v_current_process_id > v_last_process_id THEN

-- Now, queue up last month's data (only if data has been received for last month since the
-- last successful run).  Also, save max data file id, so that we can repeat this
-- run in the future.  Regarding checkpoints, there's a chance that we could receive data
-- within the first 11 days of a month (while this job calculates the previous month).  If no
-- records are loaded for the rest of the month, no report will be generated when we roll over
-- to the next month.  That's unlikely, and I'll live with the risk, for now.  Alternatively,
-- we could run the job, regardless of checkpoints.  I might do that at some point.
SELECT a1.calendar_year_month,
a1.month_since_2005,
b1.max_data_file_id,
min(a1.date_sk) AS min_date_sk,
max(a1.date_sk) AS max_date_sk INTO rec2
FROM dw.date_dim a1
INNER JOIN (
SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
FROM dw.date_dim a,
(
SELECT min(min_partition_key) AS min_date_sk, max(max_partition_key) AS max_date_sk, max(max_data_file_id) AS max_data_file_id
FROM process
WHERE process_status='SU'
AND process_config_id=1
AND process_id > v_last_process_id
AND process_id <= v_current_process_id) b
WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk) b1 ON a1.calendar_year_month=b1.calendar_year_month
WHERE b1.month_since_2005 = (
SELECT month_since_2005 
FROM dw.date_dim 
WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date) 
GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;

-- Any data from previous month?  If so, queue monthly report request
IF FOUND THEN

INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
VALUES (2,'PS',rec2.min_date_sk,rec2.max_date_sk,rec2.max_data_file_id,clock_timestamp());

INSERT INTO process_concurrent_trans (process_id,concurrent_trans_name,is_complete,dt_lastchange)
VALUES (currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_partner_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_group_portal_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_network_act_all',false,clock_timestamp()),
(currval('process_process_id_seq'::regclass),'fn_build_monthly_agg_portal_act_all',false,clock_timestamp());

END IF;

UPDATE process_checkpoint
SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
WHERE process_config_id=2;

END IF;

-- END IF;
END IF;

ELSIF p_process_config_id = 3 THEN
/* process_config_id=3; monthly site traffic */
-- Let's only queue if we've finished the last job
IF NOT EXISTS (SELECT 1 FROM process WHERE process_config_id=3 AND process_status<>'SU' LIMIT 1) THEN

-- We're only going to run this from the 1st to the 11th for the previous month,
-- so let's see where we are today.
-- IF EXTRACT(DAY FROM CURRENT_TIMESTAMP) BETWEEN 1 AND 11 THEN

-- get checkpoints
SELECT COALESCE(max(process_id),0) INTO v_current_process_id
FROM process
WHERE process_status='SU'
AND process_config_id=1; -- 1=cumulative page view fact agg

SELECT last_key INTO v_last_process_id
FROM process_checkpoint
WHERE process_config_id=3;

IF NOT FOUND THEN

v_last_process_id=0;

INSERT INTO process_checkpoint (process_config_id,last_key,dt_lastchange)
VALUES (3,v_last_process_id,clock_timestamp());

END IF;

IF v_current_process_id > v_last_process_id THEN

SELECT a1.calendar_year_month,
a1.month_since_2005,
b1.max_data_file_id,
min(a1.date_sk) AS min_date_sk,
max(a1.date_sk) AS max_date_sk INTO rec3
FROM dw.date_dim a1
INNER JOIN (
SELECT DISTINCT a.calendar_year_month,a.month_since_2005,b.max_data_file_id
FROM dw.date_dim a,
(
SELECT min(min_partition_key) AS min_date_sk, max(max_partition_key) AS max_date_sk, max(max_data_file_id) AS max_data_file_id
FROM process
WHERE process_status='SU'
AND process_config_id=1
AND process_id > v_last_process_id
AND process_id <= v_current_process_id) b
WHERE a.date_sk BETWEEN b.min_date_sk AND b.max_date_sk) b1 ON a1.calendar_year_month=b1.calendar_year_month
WHERE b1.month_since_2005 = (
SELECT month_since_2005 
FROM dw.date_dim 
WHERE full_date=(CURRENT_TIMESTAMP - interval '1 month')::date)
GROUP BY a1.calendar_year_month,a1.month_since_2005,b1.max_data_file_id;

-- Any data from previous month?  If so, queue monthly report request
IF FOUND THEN

INSERT INTO process (process_config_id,process_status,min_partition_key,max_partition_key,max_data_file_id,dt_process_queued)
VALUES (3,'PS',rec3.min_date_sk,rec3.max_date_sk,rec3.max_data_file_id,clock_timestamp());

END IF;

UPDATE process_checkpoint
SET last_key=v_current_process_id,dt_lastchange=clock_timestamp()
WHERE process_config_id=3;

END IF;

-- END IF;
END IF;

END IF;

RAISE DEBUG 'ENDING: % fn_manage_process_tasks_with_parameter(%)',timeofday(),p_process_config_id;

RETURN 1;

EXCEPTION
WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_manage_process_tasks_with_parameter(%); SQLSTATE=% SQLERRM=%',timeofday(),p_process_config_id,SQLSTATE,SQLERRM;
PERFORM fn_email_failure_notification('fn_manage_process_tasks_with_parameter',SQLSTATE,SQLERRM);
RETURN 0;
END;
$$;


ALTER FUNCTION staging.fn_manage_process_tasks_with_parameter(p_process_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_3rd_party_performance_fact_load(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_3rd_party_performance_fact_load() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_3rd_party_performance_fact_load
||
|| Load routine for 3rd party performance fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_monthly_3rd_party_performance_fact_load.sql 4422 2012-02-09 11:49:14Z son.tran $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_monthly_3rd_party_performance_fact_load()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (65,66,67,68,69,70,72,73,74,75)
AND a.file_status = 'LR' -- need load into fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_adnetwork_monthly_performance_fact_data()'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

IF v_rec.data_file_config_id = 65 THEN
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_ga_channel */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_ga_channel(
        month_sk,
		eastern_start_date_sk,
		eastern_end_date_sk,
		ga_channel_sk, 
		eastern_start_full_date,
		eastern_end_full_date,
		custom_channel, 
		product,
		page_views,
		clicks,
		page_ctr,
		cpc,
		page_rpm,
		estimated_earnings,		
		calendar_year_month,
		gen_monthly_ga_channel_id,
		data_file_id
		)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		COALESCE(a.ga_channel_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.custom_channel, 
		a.product, 
		CAST(a.page_views AS integer) as page_views,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.page_ctr AS double precision) as page_ctr,
		CAST(a.cpc AS double precision) as cpc,
		CAST(a.page_rpm AS double precision) as page_rpm,
		CAST(a.estimated_earnings AS double precision) as estimated_earnings,
		a.calendar_year_month,
		a.gen_monthly_ga_channel_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_ga_channel b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_ga_channel a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_monthly_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 66 THEN
ELSIF v_rec.data_file_config_id = 66 THEN
	/* Google AdSense - adnetwork.fact_ga_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_ga_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_ad_channel_site(
		month_sk,
		eastern_start_date_sk,
		eastern_end_date_sk,
		ga_channel_sk, 
		dc_site_sk,
		partner_sk,
		portal_sk,
		eastern_start_full_date,
		eastern_end_full_date, 
		site_id,
		site_name,
		order_id,
		order_name,
		order_start_date,
		order_end_date,
		order_cpm_booked,
		order_status,
		date_ad,
		creative_id,
		ad_id, 
		ad_name,
		ad_cost_type,
		ad_weight,
		ad_type,
		impressions_delivered,
		clicks_recorded,
		calendar_year_month,
		partner_keyword,
		portal_keyword, 
		gen_monthly_ad_channel_site_id,
		data_file_id
	)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		COALESCE(a.ga_channel_sk,-2),
		COALESCE(a.dc_site_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.site_id,
		a.site_name,
		CAST(a.order_id AS integer) as order_id,
		a.order_name,
		CAST(a.order_start_date AS date) as order_start_date,
		CAST(a.order_end_date AS date) as order_end_date,
		CAST(a.order_cpm_booked AS integer) as order_cpm_booked,
		a.order_status,
		CAST(a.date_ad AS date) as date_ad,
		a.creative_id,
		a.ad_id,
		a.ad_name,
		a.ad_cost_type,
		CAST(a.ad_weight AS integer) as ad_weight,
		a.ad_type,
		CAST(a.impressions_delivered AS integer) as impressions_delivered,
		CAST(a.clicks_recorded AS integer) as clicks_recorded,
		a.calendar_year_month,
		a.partner_keyword,
		a.portal_keyword,
		a.gen_monthly_ad_channel_site_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_ad_channel_site b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_ad_channel_site a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_monthly_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 66 THEN
	
	ELSIF v_rec.data_file_config_id = 67 THEN
	/* itunes - adnetwork.fact_monthly_itunes_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_itunes_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_itunes_performance(
		month_sk,
		eastern_start_date_sk,
		eastern_end_date_sk,
		partner_sk,
	    portal_sk,
		eastern_start_full_date, 
        eastern_end_full_date,
	    app_name,
		revenue,
	    ecpm,
		requests,
	    impressions, 
        fill_rate,
	    ctr,
	    gen_monthly_itunes_performance_id, 
        data_file_id

	)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.app_name,
		CAST(a.revenue AS float) as revenue,
		CAST(a.ecpm AS float) as ecpm,
		CAST(requests AS float) as requests,
		CAST(impressions AS float) as impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.ctr AS float) as ctr,
		a.gen_monthly_itunes_performance_id,
		a.data_file_id

	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_itunes_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_itunes_performance a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_monthly_3rd_party_performance_fact_load()',timeofday();
	
	-- END IF v_rec.data_file_config_id = 67 THEN
	
	ELSIF v_rec.data_file_config_id =68 THEN
	/* JumpTap Daily Sum - adnetwork.fact_monthly_jumptap_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* insert new -- adnetwork.fact_monthly_jumptap_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_jumptap_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, site, spot, primary_category, 
       size, placement, requests, paid_impressions, fill_rate, clicks, 
       click_thru_rate, net_revenue, net_cost_per_click, net_ecpm, net_revenue_per_thousand, 
       calendar_year_month, gen_monthly_jumptap_performance_id, data_file_id
        )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2), 
		COALESCE(a.eastern_end_date_sk,-2), 
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.partner_sk,
		-2,
		COALESCE(a.site,''N/A''),
		COALESCE(a.spot,''N/A''),
		a.primary_category,
		0,
		COALESCE(a.placement,''N/A''),
		CAST(a.requests AS integer) as requests,
		CAST(a.paid_impressions AS integer) as paid_impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.click_thru_rate AS float) as click_thru_rate,
		CAST(a.net_revenue AS float) as net_revenue,		
		CAST(a.net_cost_per_click AS float) as net_cost_per_click,
		CAST(a.net_ecpm AS float) as net_ecpm,
		CAST(a.net_revenue_per_thousand AS float) as net_revenue_per_thousand,
		a.calendar_year_month,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_jumptap_performance b 
	WHERE b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_jumptap_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 68 THEN
	ELSIF v_rec.data_file_config_id = 69 THEN
	/* Google AdSense - adnetwork.fact_monthly_mx_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_mx_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_mx_performance(
	   month_sk,
	   eastern_start_date_sk,
	   eastern_end_date_sk,
	   partner_sk, 
       portal_sk,
	   eastern_start_full_date,
	   eastern_end_full_date,
	   id, 
       "name",
	   site_name,
	   avgcpc,
	   clicks,
	   converion_rate,
	   conversions, 
       "cost",
	   cost_per_conversion,
	   queries,
	   gen_monthly_marchex_performance_id, 
       data_file_id

	)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		CAST(a.id AS integer) as id,
		a.name,
		a.site_name,
		CAST(a.avgcpc AS float) as avgcpc,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.converion_rate AS float) as converion_rate,
		CAST(a.conversions AS integer) as conversions,
		CAST(a.cost AS float) as cost,
		CAST(a.cost_per_conversion AS float) as cost_per_conversion,
		CAST(a.queries AS integer) as queries,
		a.gen_monthly_marchex_performance_id,
		a.data_file_id

	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_mx_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_mx_performance a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_monthly_3rd_party_performance_fact_load()',timeofday();
	
	-- END IF v_rec.data_file_config_id = 69 THEN
	ELSIF v_rec.data_file_config_id = 70 THEN
	/* SuperPages - adnetwork.fact_monthly_sp_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* insert new -- adnetwork.fact_monthly_sp_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_sp_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, ppc_revenue, src, searches, ppc_billable_clicks, 
       affiliate_name, coverage, rpc, gen_monthly_sp_performance_id, 
       data_file_id, ad_network_id, ad_network_sk, verve_revenue_share, 
       revenue
        )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2), 
		COALESCE(a.eastern_end_date_sk,-2), 
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		CAST(a.ppc_revenue AS float) as ppc_revenue,
		a.src,
		CAST(a.searches AS integer) as searches,
		CAST(a.ppc_billable_clicks AS integer) as ppc_billable_clicks,
		a.affiliate_name, 
		CAST(a.coverage AS float) as coverage,
		CAST(a.rpc AS float) as rpc,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id,
		a.ad_network_id,
		a.ad_network_sk,
		0.45 as verve_revenue_share,
		CAST(a.ppc_revenue AS float)*0.45 as revenue
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_sp_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk AND b.ad_network_id = a.ad_network_id
	)
	;';
--CAST(a.ppc_revenue AS float)*0.45 as revenue
	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* update old -- adnetwork.fact_monthly_sp_performance */
	--v_cmd := '
	--UPDATE adnetwork.fact_monthly_sp_performance a
	--SET ppc_revenue = CAST(b.ppc_revenue AS float)
	--  ,src = b.src
	--   ,searches = CAST(b.searches AS integer)
	--   ,ppc_billable_clicks = CAST(b.ppc_billable_clicks AS integer)
	--   ,affiliate_name = b.affiliate_name
	--   ,coverage = CAST(b.coverage AS float)
	--   ,rpc = CAST(b.rpc AS float)
	--  ,ad_network_sk = b.ad_network_sk
	--   ,verve_revenue_share = 0.45
	--   ,revenue = 0.45*CAST(b.ppc_revenue AS float)
	--FROM staging.' || v_rec.data_file_target_table || ' b
	--WHERE b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk AND a.ad_network_id = b.ad_network_id
	--;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	--EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_sp_performance a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();

	-- END IF v_rec.data_file_config_id = 70 THEN
	
ELSIF v_rec.data_file_config_id = 72 THEN
	/* Where - adnetwork.fact_monthly_wh_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped	

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_wh_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_wh_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, pubid, placement, 
       gmtoffset, startdatehour, enddatehour, requests, filled, clicked, 
       revenue, fillpercent, ctr, ecpm, partner_keyword, placement_1, 
       placement_2, gen_where_performance_id, data_file_id
        )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		COALESCE(a.partner_sk,-2),
		-2,
		a.pubid, 
		a.placement, 
		CAST(a.gmtoffset AS integer) as gmtoffset,
		a.startdatehour, 
		a.enddatehour, 
		CAST(a.requests AS integer) as requests,
		CAST(a.filled AS integer) as filled,
		CAST(a.clicked AS integer) as clicked,
		CAST(a.revenue AS float) as revenue,
		CAST(a.fillpercent AS float) as fillpercent,
		CAST(a.ctr AS float) as ctr,
		CAST(a.ecpm AS float) as ecpm,
		a.partner_keyword, 
		a.placement_1, 
		a.placement_2,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_wh_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_wh_performance a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();
	-- END IF v_rec.data_file_config_id = 72 THEN
	ELSIF v_rec.data_file_config_id = 73 THEN
	/* City Grid performance - adnetwork.fact_monthly_cg_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_cg_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_cg_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, placement, 
       billable_connections, revenue, cpc, gen_citygrid_performance_id, 
       data_file_id
	   )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),		
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		COALESCE(a.partner_sk,-2),
		-2,
		a.placement,
		CAST(a.billable_connections AS integer) as billable_connections,
		CAST(a.revenue AS float) as revenue,
		CAST(a.cpc AS float) as cpc,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_cg_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_cg_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();
	-- END IF v_rec.data_file_config_id = 73 THEN
	ELSIF v_rec.data_file_config_id = 74 THEN
	/* Yellowpages - adnetwork.fact_monthly_yp_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_yp_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_yp_performance(
        month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, site_name, requests, impressions, fill_rate, 
       clicks, ctr, ecpm, est_earnings, gen_yellowpages_daily_sum_id, 
       data_file_id
        )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.site_name,
		CAST(a.requests AS integer) as requests,
		CAST(a.impressions AS integer) as impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.ctr AS float) as ctr,
		CAST(a.ecpm AS float) as ecpm,
		CAST(a.est_earnings AS float) as est_earnings,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_yp_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_yp_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();
	
	ELSIF v_rec.data_file_config_id = 75 THEN
	/* Millennial Media - adnetwork.fact_monthly_mm_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_mm_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_mm_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, id, "name", requests, 
       ads_served, fill_rate, clicks, click_thru_rate, net_revenue, 
       net_ecpm, gen_adnetwork_performance_id, data_file_id
	)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		CAST(a.id AS integer) as id,
		a.name, 
		CAST(a.requests AS integer) as requests,
		CAST(a.ads_served AS integer) as ads_served,
		CAST(a.fill_rate_percentage AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.click_thru_rate_percentage AS float) as click_thru_rate,
		CAST(a.net_revenue AS float) as net_revenue,
		CAST(a.net_ecpm AS float) as net_ecpm,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_mm_performance b 
	                  WHERE  b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk 
	)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_mm_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load()',timeofday();
END IF;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_monthly_3rd_party_performance_fact_load(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_monthly_3rd_party_performance_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_monthly_3rd_party_performance_fact_load() OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_3rd_party_performance_fact_load_pt(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_3rd_party_performance_fact_load_pt() RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_3rd_party_performance_fact_load_pt
||
|| Load routine for 3rd party performance fact.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_monthly_3rd_party_performance_fact_load_pt.sql 4422 2012-02-09 11:49:14Z son.tran $
||
*/

DECLARE
 v_file_status            control.data_file.file_status%TYPE;
 v_previous_file_status   control.data_file.file_status%TYPE;
 v_min_eastern_date       DATE;
 v_max_eastern_date       DATE;
 v_min_eastern_date_sk    INTEGER;
 v_max_eastern_date_sk    INTEGER;
 v_row_count              INTEGER:=0;
 v_cmd                    TEXT;
 v_rec                    RECORD;
 v_current_up_to          TIMESTAMP;
 v_dim_table_check        SMALLINT;
 v_app_server_id          SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_monthly_3rd_party_performance_fact_load_pt()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 a.data_file_config_id,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO v_rec 
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id IN (68)
AND a.file_status = 'LR' -- need load into fact
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_adnetwork_monthly_performance_fact_data()'
ORDER BY b.process_precedence, a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN 'No data';
END IF;

IF v_rec.data_file_config_id = 65 THEN
	/* JumpTap - adnetwork.fact_jt_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_ga_channel */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_ga_channel(
        month_sk,
		eastern_start_date_sk,
		eastern_end_date_sk,
		ga_channel_sk, 
		eastern_start_full_date,
		eastern_end_full_date,
		custom_channel, 
		product,
		page_views,
		clicks,
		page_ctr,
		cpc,
		page_rpm,
		estimated_earnings,		
		calendar_year_month,
		gen_monthly_ga_channel_id,
		data_file_id
		)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		COALESCE(a.ga_channel_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.custom_channel, 
		a.product, 
		CAST(a.page_views AS integer) as page_views,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.page_ctr AS double precision) as page_ctr,
		CAST(a.cpc AS double precision) as cpc,
		CAST(a.page_rpm AS double precision) as page_rpm,
		CAST(a.estimated_earnings AS double precision) as estimated_earnings,
		a.calendar_year_month,
		a.gen_monthly_ga_channel_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_ga_channel a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_monthly_3rd_party_performance_fact_load_pt()',timeofday();

	-- END IF v_rec.data_file_config_id = 66 THEN
ELSIF v_rec.data_file_config_id = 66 THEN
	/* Google AdSense - adnetwork.fact_ga_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_ga_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_ad_channel_site(
		month_sk,
		eastern_start_date_sk,
		eastern_end_date_sk,
		ga_channel_sk, 
		dc_site_sk,
		partner_sk,
		portal_sk,
		eastern_start_full_date,
		eastern_end_full_date, 
		site_id,
		site_name,
		order_id,
		order_name,
		order_start_date,
		order_end_date,
		order_cpm_booked,
		order_status,
		date_ad,
		creative_id,
		ad_id, 
		ad_name,
		ad_cost_type,
		ad_weight,
		ad_type,
		impressions_delivered,
		clicks_recorded,
		calendar_year_month,
		partner_keyword,
		portal_keyword, 
		gen_monthly_ad_channel_site_id,
		data_file_id
	)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		COALESCE(a.ga_channel_sk,-2),
		COALESCE(a.dc_site_sk,-2),
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.site_id,
		a.site_name,
		CAST(a.order_id AS integer) as order_id,
		a.order_name,
		CAST(a.order_start_date AS date) as order_start_date,
		CAST(a.order_end_date AS date) as order_end_date,
		CAST(a.order_cpm_booked AS integer) as order_cpm_booked,
		a.order_status,
		CAST(a.date_ad AS date) as date_ad,
		a.creative_id,
		a.ad_id,
		a.ad_name,
		a.ad_cost_type,
		CAST(a.ad_weight AS integer) as ad_weight,
		a.ad_type,
		CAST(a.impressions_delivered AS integer) as impressions_delivered,
		CAST(a.clicks_recorded AS integer) as clicks_recorded,
		a.calendar_year_month,
		a.partner_keyword,
		a.portal_keyword,
		a.gen_monthly_ad_channel_site_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_ga_performance a
	WHERE a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_monthly_3rd_party_performance_fact_load_pt()',timeofday();
	
ELSIF v_rec.data_file_config_id =68 THEN
	/* JumpTap Daily Sum - adnetwork.fact_monthly_jumptap_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* insert new -- adnetwork.fact_monthly_jumptap_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_jumptap_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, site, spot, primary_category, 
       size, placement, requests, paid_impressions, fill_rate, clicks, 
       click_thru_rate, net_revenue, net_cost_per_click, net_ecpm, net_revenue_per_thousand, 
       calendar_year_month, gen_monthly_jumptap_performance_id, data_file_id
        )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2), 
		COALESCE(a.eastern_end_date_sk,-2), 
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.partner_sk,
		-2,
		COALESCE(a.site,''N/A''),
		COALESCE(a.spot,''N/A''),
		a.primary_category,
		CAST(a.size AS integer) as size,
		COALESCE(a.placement,''N/A''),
		CAST(a.requests AS integer) as requests,
		CAST(a.paid_impressions AS integer) as paid_impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.click_thru_rate AS float) as click_thru_rate,
		CAST(a.net_revenue AS float) as net_revenue,		
		CAST(a.net_cost_per_click AS float) as net_cost_per_click,
		CAST(a.net_ecpm AS float) as net_ecpm,
		CAST(a.net_revenue_per_thousand AS float) as net_revenue_per_thousand,
		a.calendar_year_month,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	WHERE NOT EXISTS (SELECT 1 FROM adnetwork.fact_monthly_jumptap_performance b 
	WHERE b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk)
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* update old -- adnetwork.fact_monthly_jumptap_performance */
	v_cmd := '
	UPDATE adnetwork.fact_monthly_jumptap_performance a
	SET requests = CAST(b.requests AS integer)
	   ,paid_impressions = CAST(b.paid_impressions AS integer)
	   ,clicks = CAST(b.clicks AS integer)
	   ,net_revenue = CAST(b.net_revenue AS float)
	   ,fill_rate = CAST(b.fill_rate AS float)
	   ,click_thru_rate = CAST(b.click_thru_rate AS float)
	   ,net_cost_per_click = CAST(b.net_cost_per_click AS float)
	   ,net_ecpm = CAST(b.net_ecpm AS float)
	   ,net_revenue_per_thousand = CAST(b.net_revenue_per_thousand AS float)
	   ,data_file_id = b.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' b
	WHERE b.eastern_start_date_sk = a.eastern_start_date_sk and b.eastern_end_date_sk = a.eastern_end_date_sk
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_jumptap_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load_pt()',timeofday();
	
ELSIF v_rec.data_file_config_id = 73 THEN
	/* City Grid performance - adnetwork.fact_monthly_cg_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_cg_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_cg_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, date_recorded, 
       billable_connections, revenue, cpc, gen_citygrid_performance_id, 
       data_file_id
	   )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),		
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		COALESCE(a.partner_sk,-2),
		-2,
		CAST(a.date_recorded AS date) as date_recorded,
		CAST(a.billable_connections AS integer) as billable_connections,
		CAST(a.revenue AS double) as revenue,
		CAST(a.cpc AS float) as cpc,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_cg_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load_pt()',timeofday();
ELSIF v_rec.data_file_config_id = 74 THEN
	/* Yellowpages - adnetwork.fact_monthly_yp_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_yp_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_yp_performance(
        month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, site_name, requests, impressions, fill_rate, 
       clicks, ctr, ecpm, est_earnings, gen_yellowpages_daily_sum_id, 
       data_file_id
        )
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		a.site_name,
		CAST(a.requests AS integer) as requests,
		CAST(a.impressions AS integer) as impressions,
		CAST(a.fill_rate AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.ctr AS float) as ctr,
		CAST(a.ecpm AS float) as ecpm,
		CAST(a.est_earnings AS float) as est_earnings,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_yp_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load_pt()',timeofday();
ELSIF v_rec.data_file_config_id = 75 THEN
	/* Millennial Media - adnetwork.fact_monthly_mm_performance */
	
	v_previous_file_status:=v_rec.file_status;
	v_file_status:='SU';

	/* get min/max eastern date keys for constraint exclusion in partitioned table
	(in case we want to do future processing on this file) */
	-- earliest/latest date_dim keys; anything earlier or later gets dropped
	

	RAISE NOTICE 'v_rec.file_name=%',v_rec.file_name;
	RAISE NOTICE 'FACT LOADING...';

	/* load adnetwork.fact_monthly_mm_performance */
	v_cmd := '
	INSERT INTO adnetwork.fact_monthly_mm_performance(
            month_sk, eastern_start_date_sk, eastern_end_date_sk, eastern_start_full_date, 
       eastern_end_full_date, partner_sk, portal_sk, id, "name", requests, 
       ads_served, fill_rate, clicks, click_thru_rate, net_revenue, 
       net_ecpm, gen_adnetwork_performance_id, data_file_id
	)
	SELECT 
		COALESCE(a.month_sk,-2),
		COALESCE(a.eastern_start_date_sk,-2),
		COALESCE(a.eastern_end_date_sk,-2),
		a.eastern_start_full_date,
		a.eastern_end_full_date,
		COALESCE(a.partner_sk,-2),
		COALESCE(a.portal_sk,-2),
		CAST(a.id AS integer) as id,
		a.name, 
		CAST(a.requests AS integer) as requests,
		CAST(a.ads_served AS integer) as ads_served,
		CAST(a.fill_rate_percentage AS float) as fill_rate,
		CAST(a.clicks AS integer) as clicks,
		CAST(a.click_thru_rate_percentage AS float) as click_thru_rate,
		CAST(a.net_revenue AS float) as net_revenue,
		CAST(a.net_ecpm AS float) as net_ecpm,
		a.' || v_rec.data_file_target_table || '_id,
		a.data_file_id
	FROM staging.' || v_rec.data_file_target_table || ' a
	;';

	--RAISE DEBUG 'v_cmd=%',v_cmd;

	EXECUTE v_cmd;

	/* get rowcount GET DIAGNOSTICS won't work here 'cause
	we're inserting into a partitioned table */
	v_cmd := 'SELECT COUNT(*) FROM adnetwork.fact_monthly_mm_performance a
	WHERE  a.data_file_id=' || v_rec.data_file_id;

	EXECUTE v_cmd INTO STRICT v_row_count;

	/* on successful load, truncate staging tables */
	v_cmd := 'TRUNCATE TABLE ' || v_rec.data_file_target_table || ';';
	EXECUTE v_cmd;

	/* update data_file table w/ status */
	UPDATE control.data_file
	SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
	min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
	WHERE data_file_id=v_rec.data_file_id;

	RAISE DEBUG 'ENDING: % fn_3rd_party_performance_fact_load_pt()',timeofday();
END IF;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
        v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_monthly_3rd_party_performance_fact_load_pt(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_monthly_3rd_party_performance_fact_load_pt',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_monthly_3rd_party_performance_fact_load_pt() OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_citygrid_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_citygrid_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_citygrid_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_citygrid_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_citygrid_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 placement=COALESCE(placement,''N/A''),
 billable_connections=COALESCE(billable_connections,''0''),
 revenue=COALESCE(revenue,''0''),
 cpc=COALESCE(cpc,''0'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
  partner_sk=COALESCE(b.partner_sk,-2)
  FROM refer.partner_dim b
  WHERE a.placement=b.keyword and b.dt_expire =''9999-12-31''

;';
--AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;

--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';


/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_citygrid_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_citygrid_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_citygrid_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_dbclk_channel_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_dbclk_channel_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_dbclk_channel_performance_transform
||
|| Transform routine for google adsense channel monthly performance fact table.
||
|| $Id: fn_monthly_load_dbclk_channel_performance_transform.sql 127 2012-02-08 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_dbclk_channel_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site_id=COALESCE(site_id,''-100''),
 site_name=COALESCE(site_name,''N/A''),
 order_id=COALESCE(order_id,''-100''),
 order_name=COALESCE(order_name,''N/A''),
 order_cpm_booked=COALESCE(order_cpm_booked,''0''),
 order_status=COALESCE(order_status,''N/A''),
 creative_id=COALESCE(creative_id,''-100''),
 ad_id=COALESCE(ad_id,''-100''),
 ad_name=COALESCE(ad_name,''N/A''),
 ad_cost_type=COALESCE(ad_cost_type,''0''),
 ad_type=COALESCE(ad_type,''N/A''),
 ad_weight=COALESCE(ad_weight,''0''),
 impressions_delivered=COALESCE(impressions_delivered,''0''),
 clicks_recorded=COALESCE(clicks_recorded,''0'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- month_sk,eastern_start_date_sk,eastern_end_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_end_full_date';


cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   dc_site_sk=COALESCE(b.dc_site_sk,-2)
  ,partner_keyword=COALESCE(b.partner_keyword,''N/A'')
  ,portal_keyword=COALESCE(b.portal_keyword,''N/A'')
 FROM refer.dc_site_dim b
 WHERE cast(a.site_id as integer)=b.dc_site_id
   AND (a.eastern_start_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
        OR a.eastern_end_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31''))
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- dc_site_sk, partner, portal';


cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_keyword=b.keyword
   AND (a.eastern_start_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
        OR a.eastern_end_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31''))
;';

EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- partner_sk';


cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE a.portal_keyword=b.keyword
   AND (a.eastern_start_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
        OR a.eastern_end_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31''))
;';

EXECUTE cmd;
--RAISE NOTICE 'T7 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ga_channel_sk=COALESCE(b.ga_channel_sk,-2)
 FROM refer.ga_channel_dim b
 WHERE a.ad_name =b.channel_mapping
   AND (a.eastern_start_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
        OR a.eastern_end_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31''))
;';

EXECUTE cmd;
--RAISE NOTICE 'T8 ENDED -- ga_channel_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_dbclk_channel_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_dbclk_channel_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_monthly_load_dbclk_channel_performance_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_dbclk_channel_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_ga_channel_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_ga_channel_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_ga_channel_performance_transform
||
|| Transform routine for google adsense channel monthly performance fact table.
||
|| $Id: fn_monthly_load_ga_channel_performance_transform.sql 127 2012-02-08 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_ga_channel_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 custom_channel=COALESCE(custom_channel,''N/A''),
 product=COALESCE(product,''N/A''),
 page_views=COALESCE(page_views,''0''),
 clicks=COALESCE(clicks,''0''),
 page_ctr=COALESCE(page_ctr,''0''),
 cpc=COALESCE(cpc,''0''),
 page_rpm=COALESCE(page_rpm,''0''),
 estimated_earnings=COALESCE(estimated_earnings,''0'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- month_sk,eastern_start_date_sk,eastern_end_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_end_full_date';

/* insert missing google adsense channel */
cmd := '
INSERT INTO refer.ga_channel_dim(channel_name, auto_generated, suppress, data_file_id, 
				 dt_effective, dt_expire, channel_mapping)
SELECT distinct a.custom_channel, TRUE, FALSE, a.data_file_id,
       a.dt_lastchanged::date,''9999-12-31''::date,a.custom_channel
FROM staging.' || p_staging_table_name::text || ' a
WHERE NOT EXISTS (
				   SELECT 1
				   FROM refer.ga_channel_dim b
				   WHERE a.custom_channel=b.channel_name
				  )
AND a.custom_channel IS NOT NULL
AND a.data_file_id = ' || p_data_file_id || '
;';

--RAISE NOTICE 'DEBUG: cmd=%',cmd;
EXECUTE cmd;
/* ended : insert missing ga_channel */

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ga_channel_sk=COALESCE(b.ga_channel_sk,-2)
 FROM refer.ga_channel_dim b
 WHERE a.custom_channel =b.channel_name
   AND (a.eastern_start_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
        OR a.eastern_end_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31''))
;';

EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- ga_channel_sk';

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_ga_channel_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_ga_channel_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_monthly_load_ga_channel_performance_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_ga_channel_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_itunes_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_itunes_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_itunes_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_itunes_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_itunes_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 app_name=COALESCE(app_name,''N/A''),
 revenue=COALESCE(revenue,''0''),
 ecpm=COALESCE(ecpm,''0''),
 requests=COALESCE(requests,''0''),
 impressions=COALESCE(impressions,''0''),
 fill_rate=COALESCE(fill_rate,''0''),
 ctr=COALESCE(ctr,''0'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

/* ============== fix partner_id ============== */
/* app_name 'com.vervewireless.ipad.kalb' - 'kalb' - 3534 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3534'' WHERE app_name = ''com.vervewireless.ipad.kalb'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.ipad.knoe' - 'knoe' - 3549 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3549'' WHERE app_name = ''com.vervewireless.ipad.knoe'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.ipad.standardex' - 'standardex' - 3818 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3818'' WHERE app_name = ''com.vervewireless.ipad.standardex'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.ipad.valleynews' - 'valleynews' - 3533 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3533'' WHERE app_name = ''com.vervewireless.ipad.valleynews'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.kalb' - 'kalb' - 3534 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''3534'' WHERE app_name = ''com.vervewireless.kalb'';';
EXECUTE cmd;
/* app_name 'com.vervewireless.sportsday' - 'sportsday' - 2966 */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET partner_id=''2966'' WHERE app_name = ''com.vervewireless.sportsday'';';
EXECUTE cmd;
/* ============================================ */

/* ============== fix portal_id =============== */
-- if the app_name contains 'ipad' then the portal will be assigned as 'ipad' everything else will be iphone.
-- 36;"iPad News Client" - 23;"iPhone News Client" */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET portal_id = CASE WHEN lower(app_name) ILIKE ''%ipad%'' THEN 36 ELSE 23 END;';
EXECUTE cmd;
/* ============================================ */

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_id::integer=b.partner_id
;';
--   AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE a.portal_id=b.portal_id
 ;';
--  AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- portal_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_itunes_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_monthly_load_itunes_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_monthly_load_itunes_performance_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_itunes_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_jumptap_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_jumptap_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_jumptap_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_jumptap_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_jumptap_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site=COALESCE(site,''N/A''),
 requests=COALESCE(requests,''0''),
 paid_impressions=COALESCE(paid_impressions,''0''),
 clicks=COALESCE(clicks,''0''),
 net_revenue=COALESCE(net_revenue,''0''),
 fill_rate=COALESCE(fill_rate,''0''),
 click_thru_rate=COALESCE(click_thru_rate,''0''),
 net_cost_per_click=COALESCE(net_cost_per_click,''0''),
 net_ecpm=COALESCE(net_ecpm,''0''),
 net_revenue_per_thousand=COALESCE(net_revenue_per_thousand,''0'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

/* ============================================ */
/* fix site name 'site 15666','AP' to 'ap' */
cmd := ' UPDATE ' || p_staging_table_name::text || ' SET site=''ap'' WHERE site = ''site 15666'' OR site = ''AP'';';
EXECUTE cmd;
/* fix site name '247Sports' to 'nxg247Sports' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxg247Sports'' WHERE site = ''247Sports'';';
EXECUTE cmd;
/* fix site name '8Tracks' to 'nxg8Tracks' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxg8Tracks'' WHERE site = ''8Tracks'';';
EXECUTE cmd;
/* fix site name 'Activecom' to 'active' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''active'' WHERE site = ''Activecom'';';
EXECUTE cmd;
/* fix site name 'Bebo' to 'nxgBebo' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxgBebo'' WHERE site = ''Bebo'';';
EXECUTE cmd;
/* fix site name 'Chicago Sun Times' to 'suntimes' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''suntimes'' WHERE site = ''Chicago Sun Times'';';
EXECUTE cmd;
/* fix site name 'dailyplanetstg' to 'dailyplanet' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''dailyplanet'' WHERE site = ''dailyplanetstg'';';
EXECUTE cmd;
/* fix site name 'eventful' to 'Eventful' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''Eventful'' WHERE site = ''eventful'';';
EXECUTE cmd;
/* fix site name 'Great Schools' to 'greatschools' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''greatschools'' WHERE site = ''Great Schools'';';
EXECUTE cmd;
/* fix site name 'Hi5' to 'nxgHi5' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''nxgHi5'' WHERE site = ''Hi5'';';
EXECUTE cmd;
/* fix site name 'KOMO' to 'komo' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''komo'' WHERE site = ''KOMO'';';
EXECUTE cmd;
/* fix site name 'SCRealEstate' to 'screalestate' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''screalestate'' WHERE site = ''SCRealEstate'';';
EXECUTE cmd;
/* fix site name 'Star Tribune' to 'startribune' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''startribune'' WHERE site = ''Star Tribune'';';
EXECUTE cmd;
/* fix site name 'WashingtonTimes' to 'WashTimes' */
cmd := '  UPDATE ' || p_staging_table_name::text || ' SET site=''WashTimes'' WHERE site = ''WashingtonTimes'';';
EXECUTE cmd;
/* ============================================ */
--RAISE NOTICE 'fix site name';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.site=b.keyword and b.dt_expire=''9999-12-31''
;';

EXECUTE cmd;
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- month_sk,eastern_start_date_sk,eastern_end_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- eastern_end_full_date';


/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_jumptap_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_monthly_load_jumptap_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_monthly_load_jumptap_performance_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_jumptap_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_marchex_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_marchex_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_marchex_performance_transform
||
|| Transform routine for marchex performance fact table.
||
|| $Id: fn_monthly_load_marchex_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_marchex_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 name=COALESCE(name,''N/A''),
 site_name=COALESCE(site_name,''N/A'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.site_name=b.keyword  
;';
-- AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- partner_sk';

--cmd := '
 --UPDATE ' || p_staging_table_name::text || ' a
 --SET 	
  -- eastern_date_sk=COALESCE(b.date_sk,-2)
 --FROM refer.date_dim b
 --WHERE a.eastern_date=b.full_date
--;';

--EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_date_sk';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;

--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_marchex_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_marchex_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_marchex_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_millennial_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_millennial_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_millennial_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_millennial_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_millennial_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 name=COALESCE(name,''N/A'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- eastern_date_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET partner_sk = b.partner_sk
    ,portal_sk = b.portal_sk
 FROM (
   SELECT aa.current_millennial_media_name, bb.partner_sk, cc.portal_sk
   FROM adnetwork.mapping_mm aa
   INNER JOIN refer.partner_dim bb ON bb.partner_id = aa.partner_id AND bb.dt_expire = ''9999-12-31''
   INNER JOIN refer.portal_dim cc ON cc.portal_id = aa.portal_id AND cc.dt_expire = ''9999-12-31''
 ) b
 WHERE a.name = b.current_millennial_media_name
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- partner_sk,portal_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET partner_keyword = (string_to_array("name", ''_''))[1]
    ,portal_keyword = (string_to_array("name", ''_''))[2]
 WHERE a.partner_sk < 0 and a.portal_sk < 0
;';

EXECUTE cmd;
--RAISE NOTICE 'T4 ENDED -- partner_keyword,portal_keyword';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_keyword=b.keyword  
;';
--AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T5 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   portal_sk=COALESCE(b.portal_sk,-2)
 FROM refer.portal_dim b
 WHERE a.portal_keyword=b.keyword   
;';
--AND a.response_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T6 ENDED -- portal_sk';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;

--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_millennial_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_millennial_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_millennial_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_superpages_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_superpages_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_superpages_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_superpages_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_superpages_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 ppc_revenue=COALESCE(ppc_revenue,''0''),
 src=COALESCE(src,''N/A''),
 searches=COALESCE(searches,''0''),
 ppc_billable_clicks=COALESCE(ppc_billable_clicks,''0''),

 affiliate_name=COALESCE(affiliate_name,''N/A''),
 coverage=COALESCE(coverage,''0''),
 rpc=COALESCE(rpc,''0'')
 ;';
 
EXECUTE cmd;
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ad_network_id=CASE
             WHEN affiliate_name = ''Verve Wireless''        THEN 24
             WHEN affiliate_name = ''verve wireless 2''    THEN 26
         END
 WHERE affiliate_name IN (''Verve Wireless'',''verve wireless 2'')
;';

EXECUTE cmd;
--RAISE NOTICE 'T2 ENDED -- ad_network_id';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   ad_network_sk=COALESCE(b.ad_network_sk,-2)
 FROM refer.ad_network_dim b
 WHERE a.ad_network_id=b.ad_network_id
;';
--AND a.report_date_pacific BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- ad_network_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;

--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_superpages_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_superpages_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_superpages_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_where_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_where_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_where_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_where_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_where_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */

cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 placement=COALESCE(placement,''N/A''),
 partner_keyword=COALESCE(partner_keyword,''N/A'')
 ;';
 
EXECUTE cmd;

--RAISE NOTICE 'T2 ENDED -- partner_sk';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
--RAISE NOTICE 'T1 ENDED -- date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   partner_sk=COALESCE(b.partner_sk,-2)
 FROM refer.partner_dim b
 WHERE a.partner_keyword=b.keyword
  AND (a.eastern_start_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31'')
        OR a.eastern_end_full_date BETWEEN COALESCE(b.dt_effective,''2007-10-28'') AND COALESCE(b.dt_expire,''9999-12-31''))
;';

EXECUTE cmd;
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_where_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_where_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_where_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_monthly_load_yellowpages_performance_transform(integer, character varying, text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_monthly_load_yellowpages_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_monthly_load_yellowpages_performance_transform
||
|| Transform routine for jumptap publisher performance fact table.
||
|| $Id: fn_monthly_load_yellowpages_performance_transform.sql 127 2011-09-29 11:49:14Z thohoang $
||
*/

DECLARE
 v_file_status          control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_data_file_config_id  INTEGER;
 cmd	                TEXT;
 
BEGIN

/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_monthly_load_yellowpages_performance_transform(%,''%'',''%'',%)',timeofday(),p_data_file_id,p_file_status,p_staging_table_name,p_file_config_id;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
cmd := ' 
 UPDATE ' || p_staging_table_name::text || ' 
 SET 
 site_name=COALESCE(site_name,''N/A''),
 requests=COALESCE(requests,''0''),
 impressions=COALESCE(impressions,''0''),
 fill_rate=COALESCE(fill_rate,''0''),
 clicks=COALESCE(clicks,''0''),
 ctr=COALESCE(ctr,''0''),
 ecpm=COALESCE(ecpm,''0''),
 est_earnings=COALESCE(est_earnings,''0'')
 ;';
 
EXECUTE cmd;
-- update month_sk
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   month_sk=COALESCE(b.month_sk,-2),
   eastern_start_date_sk=COALESCE(b.date_sk_start,0),
   eastern_end_date_sk=COALESCE(b.date_sk_end,0)
 FROM refer.month_dim b
 WHERE a.calendar_year_month=b.calendar_year_month
;';

EXECUTE cmd;

--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';
cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_start_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_start_date_sk=b.date_sk
;';

EXECUTE cmd;
--RAISE NOTICE 'T3 ENDED -- eastern_start_full_date';

cmd := '
 UPDATE ' || p_staging_table_name::text || ' a
 SET 	
   eastern_end_full_date=full_date
 FROM refer.date_dim b
 WHERE a.eastern_end_date_sk=b.date_sk
;';

EXECUTE cmd;
/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_monthly_load_yellowpages_performance_transform(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_staging_table_name;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_monthly_load_yellowpages_performance_transform(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_staging_table_name,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_daily_load_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_monthly_load_yellowpages_performance_transform(p_data_file_id integer, p_file_status character varying, p_staging_table_name text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_move_file(text, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_move_file(text, text) RETURNS void
    LANGUAGE plperlu IMMUTABLE
    AS $_$

#
# fn_move_file
#
# This moves a file from one place to another.
#
# $Id: fn_move_file.sql 55 2008-07-12 04:09:43Z abyfield $
#

use File::Copy;

my ($oldlocation,$newlocation) = @_;
move($oldlocation,$newlocation) || die "Move file $oldlocation to $newlocation failed: $!";

$_$;


ALTER FUNCTION staging.fn_move_file(text, text) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_load(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_load(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_load
||
|| Load routine for page view fact and session fact tables.
||
|| Note that this routine is responsible for populating the user_agent_dim 
|| and referrer_hostname_dim dimensions.  Also, it sets the dimension key 
|| to -2 ('N/A' (key)) if a dimesion key isn't found in the join.
||
|| Truncates the staging tables after successful load.
||
|| $Id: fn_page_view_fact_load.sql 4422 2009-02-01 11:49:14Z abyfield $
||
*/

DECLARE
 v_file_status data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status data_file.file_status%TYPE;
 v_min_eastern_date DATE;
 v_max_eastern_date DATE;
 v_min_eastern_date_sk INTEGER;
 v_max_eastern_date_sk INTEGER;
 v_row_count INTEGER:=0;
 v_cmd TEXT;
 v_session_padding INTEGER;
 v_max_session_duration INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_load(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get min/max eastern date keys for 
constraint exclusion in partitioned table
(in case we want to do future processing on this file) */
SELECT min(eastern_date),max(eastern_date) INTO v_min_eastern_date,v_max_eastern_date
FROM stg_wap_site_access_log
WHERE eastern_date BETWEEN '2005-01-01' AND '2015-12-31'; -- earliest/latest date_dim keys; anything earlier or later gets dropped

SELECT date_sk INTO v_min_eastern_date_sk
FROM dw.date_dim
WHERE full_date=v_min_eastern_date;

SELECT date_sk INTO v_max_eastern_date_sk
FROM dw.date_dim
WHERE full_date=v_max_eastern_date;

/* get session_padding value from system_parameter */
SELECT value::INTEGER INTO v_session_padding
FROM system_parameter
WHERE parameter='session_padding';

IF NOT FOUND THEN
RAISE EXCEPTION 'v_session_padding doesn''t exist in system_parameter!';
END IF;

/* get max_session_duration value from system_parameter */
SELECT value::INTEGER INTO v_max_session_duration
FROM system_parameter
WHERE parameter='max_session_duration';

IF NOT FOUND THEN
RAISE EXCEPTION 'v_max_session_duration doesn''t exist in system_parameter!';
END IF;

/******************/
/* DIMENSION LOAD */
/*****************/
/* insert missing user agents */
INSERT INTO dw.user_agent_dim (user_agent_name,device_manufacturer,
device_type,organic,auto_generated,suppress,data_file_id)
SELECT distinct a.user_agent,'Unallocated',
'Unallocated',FALSE,TRUE,FALSE,p_data_file_id
FROM stg_wap_site_access_log a
WHERE NOT EXISTS (
SELECT 1
FROM dw.user_agent_dim b
WHERE a.user_agent=b.user_agent_name)
AND a.user_agent IS NOT NULL;

/* insert missing referrer_hostnames */
INSERT INTO dw.referrer_hostname_dim (hostname,domain,referrer_type,
auto_generated,suppress,data_file_id)
SELECT distinct a.referrer_hostname,a.domain,'Unknown',
TRUE,FALSE,p_data_file_id
FROM stg_wap_site_access_log a
WHERE NOT EXISTS (
SELECT 1
FROM dw.referrer_hostname_dim b
WHERE a.referrer_hostname=b.hostname)
AND a.referrer_hostname IS NOT NULL;

/* insert missing network_types */
INSERT INTO dw.network_type_dim (network_type,
auto_generated,suppress,data_file_id)
SELECT distinct network_type,
TRUE,FALSE,p_data_file_id
FROM stg_wap_site_access_log a
WHERE NOT EXISTS (
        SELECT 1
        FROM dw.network_type_dim b
        WHERE a.network_type=b.network_type)
AND a.network_type IS NOT NULL;

/* insert missing page_templates */
INSERT INTO dw.page_template_dim (page_template,
auto_generated,suppress,data_file_id)
SELECT distinct page_template,
TRUE,FALSE,p_data_file_id
FROM stg_wap_site_access_log a
WHERE NOT EXISTS (
        SELECT 1
        FROM dw.page_template_dim b
        WHERE a.page_template=b.page_template)
AND a.page_template IS NOT NULL;

/*************/
/* FACT LOAD */
/*************/
/* load page_view_fact */
INSERT INTO dw.page_view_fact (
eastern_date_sk,
eastern_time_sk,
local_date_sk,
local_time_sk,
gmt_date_sk,
gmt_time_sk,
portal_host_sk,
partner_sk,
partner_module_sk,
user_agent_sk,
portal_sk,
content_category_sk,
display_block_sk,
referrer_hostname_sk,
request_type_sk,
stg_wap_site_access_log_id,
server,
source_ip,
client,
username,
dtrequested,
request,
method,
path,
arguments,
protocol,
status,
referrer,
uid,
session,
data_file_id,
bytes,
page_view_count,
network_type_sk,
page_template_sk)
SELECT b.date_sk, -- ET
c.time_sk, -- ET
d.date_sk, -- PT
e.time_sk, -- PT
f.date_sk, -- GMT 
g.time_sk, -- GMT 
-- assign -2 if no key exists in dimension
COALESCE(h.portal_host_sk,-2),
COALESCE(i.partner_sk,-2),
COALESCE(j.partner_module_sk,-2),
COALESCE(k.user_agent_sk,-2),
COALESCE(l.portal_sk,-2),
COALESCE(m.content_category_sk,-2),
COALESCE(n.display_block_sk,-2),
COALESCE(o.referrer_hostname_sk,-2),
COALESCE(p.request_type_sk,-2),
a.stg_wap_site_access_log_id,
a.server,
a.source_ip,
a.client,
a.username,
a.dtrequested,
a.request,
a.method,
a.path,
a.arguments,
a.protocol,
a.status,
a.referrer,
a.uid,
a.session,
p_data_file_id,
COALESCE(a.bytes,0),
1,
COALESCE(q.network_type_sk,-2),
        COALESCE(r.page_template_sk,-2)
FROM stg_wap_site_access_log a
INNER JOIN dw.date_dim b 
 ON a.eastern_date=b.full_date
INNER JOIN dw.time_dim c
 ON a.eastern_time=c.full_time
INNER JOIN dw.date_dim d 
 ON a.local_date=d.full_date
INNER JOIN dw.time_dim e
 ON a.local_time=e.full_time
INNER JOIN dw.date_dim f 
 ON a.gmt_date=f.full_date
INNER JOIN dw.time_dim g
 ON a.gmt_time=g.full_time
LEFT OUTER JOIN dw.portal_host_dim h ON LOWER(a.host)=LOWER(h.hostname)
LEFT OUTER JOIN dw.partner_dim i ON a.partner_id=i.partner_id
LEFT OUTER JOIN dw.partner_module_dim j ON a.partner_module_id=j.partner_module_id
LEFT OUTER JOIN dw.user_agent_dim k ON a.user_agent=k.user_agent_name
LEFT OUTER JOIN dw.portal_dim l ON a.portal_id=l.portal_id
LEFT OUTER JOIN dw.content_category_dim m ON a.content_category_id=m.content_category_id
LEFT OUTER JOIN dw.display_block_dim n ON a.display_block_id=n.display_block_id
LEFT OUTER JOIN dw.referrer_hostname_dim o ON a.referrer_hostname=o.hostname
LEFT OUTER JOIN dw.request_type_dim p ON a.request_type_id=p.request_type_id
LEFT OUTER JOIN dw.network_type_dim q ON a.network_type=q.network_type
LEFT OUTER JOIN dw.page_template_dim r ON a.page_template=r.page_template
WHERE
-- scd type 2
a.dtrequested_pacific BETWEEN COALESCE(h.dt_effective,'2007-10-28') AND COALESCE(h.dt_expire,'9999-12-31') -- portal_host_dim
AND a.dtrequested_pacific BETWEEN COALESCE(i.dt_effective,'2007-10-28')  AND COALESCE(i.dt_expire,'9999-12-31') -- partner_dim_
AND a.dtrequested_pacific BETWEEN COALESCE(j.dt_effective,'2007-10-28')  AND COALESCE(j.dt_expire,'9999-12-31') -- partner_module_dim
AND a.dtrequested_pacific BETWEEN COALESCE(l.dt_effective,'2007-10-28')  AND COALESCE(l.dt_expire,'9999-12-31') -- portal_dim
AND a.dtrequested_pacific BETWEEN COALESCE(m.dt_effective,'2007-10-28')  AND COALESCE(m.dt_expire,'9999-12-31') -- content_category_dim
AND a.dtrequested_pacific BETWEEN COALESCE(n.dt_effective,'2007-10-28')  AND COALESCE(n.dt_expire,'9999-12-31') -- display_block_dim
;

/* get rowcount 
GET DIAGNOSTICS won't work here 'cause
we're inserting into a partitioned table */
v_cmd := 'SELECT COUNT(*) FROM dw.page_view_fact a
WHERE a.eastern_date_sk BETWEEN ' || v_min_eastern_date_sk::text || ' AND ' || v_max_eastern_date_sk::text || '
AND a.data_file_id=' || p_data_file_id;

RAISE DEBUG 'v_cmd=%',v_cmd;

IF v_cmd IS NOT NULL THEN
EXECUTE v_cmd INTO STRICT v_row_count;
END IF;

/* load session_fact */
/* if session_start_datetime in staging is earlier than in fact, 
we must update the session info w/ the new record */
UPDATE dw.session_fact r
SET session_start_date_sk=b.date_sk, -- ET
session_start_time_sk=c.time_sk, -- ET
-- assign -2 if no key exists in dimension
portal_host_sk=COALESCE(h.portal_host_sk,-2),
partner_sk=COALESCE(i.partner_sk,-2),
user_agent_sk=COALESCE(k.user_agent_sk,-2),
portal_sk=COALESCE(l.portal_sk,-2),
initial_referrer_hostname_sk=CASE WHEN a.referrer_hostname='N/A' THEN r.initial_referrer_hostname_sk ELSE COALESCE(o.referrer_hostname_sk,-2) END,
network_type_sk=COALESCE(q.network_type_sk,-2),
session_start_datetime=a.session_start_datetime,
source_ip=a.source_ip,
client=a.client,
username=a.username,
request=a.request,
method=a.method,
path=a.path,
arguments=a.arguments,
protocol=a.protocol,
status=a.status,
referrer=a.referrer,
start_data_file_id=p_data_file_id -- start_data_file_id
FROM stg_session a
INNER JOIN dw.date_dim b 
 ON a.session_start_date=b.full_date
INNER JOIN dw.time_dim c
 ON a.session_start_time=c.full_time
LEFT OUTER JOIN dw.portal_host_dim h ON LOWER(a.host)=LOWER(h.hostname)
LEFT OUTER JOIN dw.partner_dim i ON a.partner_id=i.partner_id
LEFT OUTER JOIN dw.user_agent_dim k ON a.user_agent=k.user_agent_name
LEFT OUTER JOIN dw.portal_dim l ON a.portal_id=l.portal_id
LEFT OUTER JOIN dw.referrer_hostname_dim o ON a.referrer_hostname=o.hostname
LEFT OUTER JOIN dw.network_type_dim q ON a.network_type=q.network_type
WHERE
r.uid=a.uid
AND r.session=a.session
/* if session_fact and stg_session have referrers, and stg_session start date is earlier, update that record */
AND ((r.initial_referrer_hostname_sk<>-1 AND a.referrer_hostname<>'N/A' AND r.session_start_datetime>a.session_start_datetime) OR
/* if session_fact has no referrer and stg_session has a referrer, update that record */
      (r.initial_referrer_hostname_sk=-1 AND a.referrer_hostname<>'N/A') OR
/* if session_fact and stg_session have no referrers, and stg_session start date is earlier, update that record */
      (r.initial_referrer_hostname_sk=-1 AND a.referrer_hostname='N/A' AND r.session_start_datetime>a.session_start_datetime))
-- scd type 2
AND a.session_start_datetime_pacific BETWEEN COALESCE(h.dt_effective,'2007-10-28') AND COALESCE(h.dt_expire,'9999-12-31') -- portal_host_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(i.dt_effective,'2007-10-28')  AND COALESCE(i.dt_expire,'9999-12-31') -- partner_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(l.dt_effective,'2007-10-28')  AND COALESCE(l.dt_expire,'9999-12-31') -- portal_dim
;

/* if session_end_datetime in staging is later than in fact, 
we must update session_end_datetime and end_data_file_id */
UPDATE dw.session_fact r
SET session_end_datetime=a.session_end_datetime,
end_data_file_id=p_data_file_id -- start_data_file_id
FROM stg_session a
WHERE
r.uid=a.uid
AND r.session=a.session
AND r.session_end_datetime<a.session_end_datetime
;

/* recalculate metrics */
UPDATE dw.session_fact r
SET page_view_count=r.page_view_count+a.page_view_count,
session_duration=CASE WHEN (EXTRACT(EPOCH FROM r.session_end_datetime) - EXTRACT(EPOCH FROM r.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration 
ELSE EXTRACT(EPOCH FROM r.session_end_datetime) - EXTRACT(EPOCH FROM r.session_start_datetime) END, -- session_duration
total_duration=CASE WHEN (EXTRACT(EPOCH FROM r.session_end_datetime) -
EXTRACT(EPOCH FROM r.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration
ELSE EXTRACT(EPOCH FROM r.session_end_datetime) - EXTRACT(EPOCH FROM r.session_start_datetime) END + r.session_padding,
bounce_count=CASE WHEN (r.page_view_count+a.page_view_count)=1 THEN 1 ELSE 0 END
FROM stg_session a
WHERE
r.uid=a.uid
AND r.session=a.session
;

/* now, insert new records */
INSERT INTO dw.session_fact (
session_start_date_sk,
session_start_time_sk,
portal_host_sk,
partner_sk,
user_agent_sk,
portal_sk,
initial_referrer_hostname_sk,
network_type_sk,
uid,
session,
session_start_datetime,
session_end_datetime,
source_ip,
client,
username,
request,
method,
path,
arguments,
protocol,
status,
referrer,
start_data_file_id,
end_data_file_id,
page_view_count,
visit_count,
new_visit_count,
session_duration,
session_padding,
total_duration,
bounce_count
)
SELECT b.date_sk, -- ET
c.time_sk, -- ET
-- assign -2 if no key exists in dimension
COALESCE(h.portal_host_sk,-2),
COALESCE(i.partner_sk,-2),
COALESCE(k.user_agent_sk,-2),
COALESCE(l.portal_sk,-2),
COALESCE(o.referrer_hostname_sk,-2),
COALESCE(q.network_type_sk,-2),
a.uid,
a.session,
a.session_start_datetime,
a.session_end_datetime,
a.source_ip,
a.client,
a.username,
a.request,
a.method,
a.path,
a.arguments,
a.protocol,
a.status,
a.referrer,
p_data_file_id, -- start_data_file_id
p_data_file_id, -- end_data_file_id
a.page_view_count,
1,
a.new_visit_count,
CASE WHEN (EXTRACT(EPOCH FROM a.session_end_datetime) - EXTRACT(EPOCH FROM a.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration
ELSE EXTRACT(EPOCH FROM a.session_end_datetime) - EXTRACT(EPOCH FROM a.session_start_datetime) END, -- session_duration
v_session_padding,
CASE WHEN (EXTRACT(EPOCH FROM a.session_end_datetime) -
EXTRACT(EPOCH FROM a.session_start_datetime)) > v_max_session_duration THEN v_max_session_duration
ELSE EXTRACT(EPOCH FROM a.session_end_datetime) - EXTRACT(EPOCH FROM a.session_start_datetime) END + v_session_padding, -- total_duration
CASE WHEN a.page_view_count=1 THEN 1 ELSE 0 END -- bounce_count
FROM stg_session a
INNER JOIN dw.date_dim b 
 ON a.session_start_date=b.full_date
INNER JOIN dw.time_dim c
 ON a.session_start_time=c.full_time
LEFT OUTER JOIN dw.portal_host_dim h ON LOWER(a.host)=LOWER(h.hostname)
LEFT OUTER JOIN dw.partner_dim i ON a.partner_id=i.partner_id
LEFT OUTER JOIN dw.user_agent_dim k ON a.user_agent=k.user_agent_name
LEFT OUTER JOIN dw.portal_dim l ON a.portal_id=l.portal_id
LEFT OUTER JOIN dw.referrer_hostname_dim o ON a.referrer_hostname=o.hostname
LEFT OUTER JOIN dw.network_type_dim q ON a.network_type=q.network_type
WHERE NOT EXISTS (
SELECT 1 FROM dw.session_fact r WHERE r.uid=a.uid AND r.session=a.session)
-- scd type 2
AND a.session_start_datetime_pacific BETWEEN COALESCE(h.dt_effective,'2007-10-28') AND COALESCE(h.dt_expire,'9999-12-31') -- portal_host_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(i.dt_effective,'2007-10-28')  AND COALESCE(i.dt_expire,'9999-12-31') -- partner_dim
AND a.session_start_datetime_pacific BETWEEN COALESCE(l.dt_effective,'2007-10-28')  AND COALESCE(l.dt_expire,'9999-12-31') -- portal_dim
;

/* on successful load, truncate staging tables */
TRUNCATE TABLE stg_session;
TRUNCATE TABLE stg_session_agg_values;
TRUNCATE TABLE stg_wap_site_access_log;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp(),
min_eastern_date_sk=v_min_eastern_date_sk,max_eastern_date_sk=v_max_eastern_date_sk,fact_table_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_page_view_fact_load(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_page_view_fact_load(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;

$_$;


ALTER FUNCTION staging.fn_page_view_fact_load(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_main(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_main(p_data_file_id integer, p_file_status character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_main
||
|| Coordinates TRANSFORM and LOAD steps for page view fact table.
||
|| $Id: fn_page_view_fact_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE 
 v_file_status data_file.file_status%TYPE:=p_file_status;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_main(%,''%'')',timeofday(),p_data_file_id,v_file_status;

/* let's process EITHER a transform OR a load, then exit */
/* transform 1 */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM fn_page_view_fact_transform1(p_data_file_id,p_file_status);
/* transform 2 */
ELSIF v_file_status = 'T1' THEN
  SELECT * INTO v_file_status FROM fn_page_view_fact_transform2(p_data_file_id,p_file_status);
/* transform 3 */
ELSIF v_file_status = 'T2' THEN
  SELECT * INTO v_file_status FROM fn_page_view_fact_transform3(p_data_file_id,p_file_status);
/* transform 4 */
ELSIF v_file_status = 'T3' THEN
  SELECT * INTO v_file_status FROM fn_page_view_fact_transform4(p_data_file_id,p_file_status);
/* transform 5 */
ELSIF v_file_status = 'T4' THEN
  SELECT * INTO v_file_status FROM fn_page_view_fact_transform5(p_data_file_id,p_file_status);
/* load page view fact */
ELSIF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM fn_page_view_fact_load(p_data_file_id,p_file_status);
END IF;

RAISE DEBUG 'ENDING: % fn_page_view_fact_main(%,''%'')',timeofday(),p_data_file_id,v_file_status;

EXCEPTION
 WHEN others THEN 
 	RAISE NOTICE 'FAILED: % fn_page_view_fact_main(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_page_view_fact_main(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_transform1(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_transform1(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_transform1
||
|| Transform routine for page view fact table.
||
|| $Id: fn_page_view_fact_transform1.sql 127 2009-02-01 11:49:14Z abyfield $
||
*/

DECLARE
 v_file_status data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status data_file.file_status%TYPE;
 v_data_file_config_id INTEGER;
 
BEGIN
/* our first pass through the data */
RAISE DEBUG 'STARTING: % fn_page_view_fact_transform1(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='T1';

/* let's get the data_file_config_id, since we need to know it in 
order to assign request_type_id.  We _could_ pass it from our
initial select from the file queue, but this seems a bit cleaner for
the moment */
SELECT data_file_config_id INTO v_data_file_config_id
FROM data_file
WHERE data_file_id=p_data_file_id;

UPDATE stg_wap_site_access_log
/* assign request exceptions */
SET request_type_id=CASE
/* assign 11 to adcel records */
WHEN v_data_file_config_id=10 THEN 11 -- coming from adcel logs; assign adcel
WHEN path ILIKE '/adcel/%' THEN 11 -- assign adcel before other records
/* assign to categories based on status */
WHEN status BETWEEN 500 AND 599 THEN 15 -- server error
WHEN status BETWEEN 400 AND 499 THEN 14 -- client error
WHEN status BETWEEN 300 AND 399 THEN 13 -- redirect
/* if outside of the three above, but not successful, assign to catch all */
WHEN status NOT BETWEEN 200 AND 299 THEN 1 -- unclassified fail status
WHEN ('http://' || host || path) = referrer THEN 13 -- this is actually a redirect
/* the following are invalid due to values in the path */
WHEN path ILIKE '%favicon.ico%' THEN 2
WHEN path ILIKE '%robots.txt%' THEN 5
WHEN path ILIKE '/styles/%' THEN 6
WHEN path ILIKE '/images/%' THEN 7
WHEN path ILIKE '/img/%' THEN 8
WHEN path ILIKE '/script/%' THEN 9
WHEN path ILIKE '/media/%' THEN 10
WHEN path ILIKE '/hbt/%' THEN 12
/* Added 8/14/09 by Songndc & Eric. */
               /* if the hostname has been suppressed, assign to a dedicated request type. */
               /* XXX Note: hostnames not represented in the dimension are added later in */
               /* the load step; we have to assume these are not suppressed... */
               WHEN EXISTS
                  (SELECT 1 FROM dw.referrer_hostname_dim a
                   WHERE LOWER((fn_parse_url(referrer)).host) = a.hostname AND a.suppress = 't')
                  THEN 17
ELSE 0 -- passed all tests, so valid page view
END,
/* some hostname cleansing */
host=rtrim(host,'.'), -- remove trailing '.', if present
/* get referrer host from referrer url; if NULL, assign 'N/A' since its a dim lookup*/
referrer_hostname=COALESCE(LOWER((fn_parse_url(referrer)).host),'N/A'),
/* set '-' to NULL in session field */
session=CASE session
WHEN '-' THEN NULL
ELSE session
END,
/* fun with time zones */
eastern_date=(dtrequested AT TIME ZONE 'America/New_York')::date,
eastern_time=(dtrequested AT TIME ZONE 'America/New_York')::time,
gmt_date=(dtrequested AT TIME ZONE 'UTC')::date,
gmt_time=(dtrequested AT TIME ZONE 'UTC')::time,
dtrequested_pacific=dtrequested AT TIME ZONE 'America/Los_Angeles', -- for dimension dt_effective/dt_expire surrogate key lookups
/* if any of the following dim lookup keys is NULL, set to 'N/A' key value */
user_agent=COALESCE(LOWER(user_agent),'N/A'),
display_block_id=COALESCE(display_block_id,-100),
partner_module_id=COALESCE(partner_module_id,-100),
network_type=COALESCE(LOWER(network_type),'N/A'),
page_template=COALESCE(LOWER(page_template),'N/A'),
/* get referrer domain from referrer url; if NULL, assign 'N/A' since its a dim lookup*/
        domain=COALESCE(LOWER((fn_parse_url(referrer)).domain),'direct/none') -- if we can't parse out domain, store hostname
;



/* assign request exceptions - content-api video download */
IF v_data_file_config_id=8 THEN -- content-api
UPDATE stg_wap_site_access_log a
SET     request_type_id=16 -- content-api video download
FROM dw.partner_module_dim c
WHERE a.partner_module_id=c.partner_module_id
AND c.feature_module_name='videoGalleryModule' -- feature module associated w/ video
AND a.request_type_id=0
AND a.dtrequested_pacific BETWEEN c.dt_effective AND c.dt_expire;
END IF;


/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_page_view_fact_transform1(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
RAISE NOTICE 'FAILED: % fn_page_view_fact_transform1(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_transform1',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_page_view_fact_transform1(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_transform2(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_transform2(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_transform2
||
|| Transform routine for page view fact table.
||
|| $Id: fn_page_view_fact_transform2.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status data_file.file_status%TYPE;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_transform2(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='T2';

/* Now, let's set the partner ids */
UPDATE stg_wap_site_access_log a
SET 	partner_id=b.partner_id, -- Can't be NULL
	/* just in case time_zone_id is NULL, set default values if NULL */
	local_date=COALESCE((a.dtrequested AT TIME ZONE b.time_zone_id)::date,'2005-01-01'),
	local_time=COALESCE((a.dtrequested AT TIME ZONE b.time_zone_id)::time,'00:00:00')
FROM dw.partner_dim b
WHERE LOWER(a.partner_keyword)=LOWER(b.keyword) -- case doesn't always match, so make this case-insensitive
AND a.dtrequested_pacific BETWEEN b.dt_effective AND b.dt_expire;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RETURN v_file_status;

RAISE DEBUG 'ENDING: % fn_page_view_fact_transform2(%,''%'')',timeofday(),p_data_file_id,v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_page_view_fact_transform2(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_transform2',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_page_view_fact_transform2(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_transform3(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_transform3(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_transform3
||
|| Transform routine for page view fact table.
||
|| $Id: fn_page_view_fact_transform3.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status data_file.file_status%TYPE;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_transform3(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='T3';

/* use portal_host_dim it to set portal_ids */
UPDATE stg_wap_site_access_log a
SET portal_id=COALESCE(b.portal_id,a.portal_id)
FROM dw.portal_host_dim b
WHERE LOWER(a.host)=LOWER(b.hostname) 
AND a.dtrequested_pacific BETWEEN b.dt_effective AND b.dt_expire;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_page_view_fact_transform3(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_page_view_fact_transform3(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_transform3',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_page_view_fact_transform3(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_transform4(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_transform4(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_transform4
||
|| Transform routine for page view fact table.
||
|| $Id: fn_page_view_fact_transform4.sql 124 2009-01-25 23:22:15Z abyfield $
||
*/

DECLARE
 v_file_status data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status data_file.file_status%TYPE;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_transform4(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='T4';

/* Populate content_category from display block. */
UPDATE stg_wap_site_access_log a 
SET	content_category_id=COALESCE(b.content_category_id,a.content_category_id)
FROM dw.display_block_dim b 
WHERE a.display_block_id = b.display_block_id 
AND a.dtrequested_pacific BETWEEN b.dt_effective AND b.dt_expire;

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_page_view_fact_transform4(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_page_view_fact_transform4(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_transform4',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_page_view_fact_transform4(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_page_view_fact_transform5(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_page_view_fact_transform5(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_page_view_fact_transform5
||
|| Transform routine for session fact table.
||
|| This handles the following steps:
||	1) get uid and session (key); get min date/max date/page views
||	2) load earliest records in stg_session
||	3) update end date with max date
||      4) flag new visits
||
|| $Id: fn_page_view_fact_transform5.sql 124 2009-01-25 23:22:15Z abyfield $
||
*/

DECLARE
 v_file_status data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status data_file.file_status%TYPE;
 v_rc_temp INTEGER:=0;
 v_rc_insert INTEGER:=0;
 v_rc_update INTEGER:=0;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_page_view_fact_transform5(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* get key, max date/min date/page views */
/* XXX Disabled temporarily.
INSERT INTO stg_session_agg_values (uid,session,min_datetime,max_datetime,page_view_count)
SELECT uid,session,min(dtrequested),max(dtrequested),count(*)
FROM stg_wap_site_access_log
WHERE request_type_id=0
AND uid IS NOT NULL
AND session IS NOT NULL
AND dtrequested IS NOT NULL
GROUP BY uid,session;
XXX Disabled temporarily. */

/* load earliest records into stg_session */
/* if referrer_host exists for uid+session+min_datetime, insert earliest record associated
with it */
/* XXX Disabled temporarily.
INSERT INTO stg_session (session_start_date,session_start_time,host,partner_id,user_agent,
portal_id,referrer_hostname,network_type,uid,session,
session_start_datetime,source_ip,client,username,request,
method,path,arguments,protocol,status,
referrer,page_view_count,session_start_datetime_pacific)
SELECT a.eastern_date,a.eastern_time,a.host,a.partner_id,a.user_agent,
a.portal_id,a.referrer_hostname,a.network_type,a.uid,a.session,
a.dtrequested,a.source_ip,a.client,a.username,a.request,
a.method,a.path,a.arguments,a.protocol,a.status,
a.referrer,b.page_view_count,a.dtrequested_pacific
FROM stg_wap_site_access_log a
INNER JOIN (
	SELECT 	b1.uid,
		b1.session,
		b1.min_datetime,
		b1.page_view_count, -- carry along to outer query
		min(a1.stg_wap_site_access_log_id) as stg_wap_site_access_log_id
	FROM stg_wap_site_access_log a1
	INNER JOIN stg_session_agg_values b1 ON a1.uid=b1.uid and a1.session=b1.session and a1.dtrequested=b1.min_datetime
	WHERE a1.referrer_hostname<>'N/A'
	GROUP BY b1.uid,b1.session,b1.min_datetime,b1.page_view_count) b ON a.stg_wap_site_access_log_id=b.stg_wap_site_access_log_id
;
XXX Disabled temporarily. */

/* get rowcount */
/* XXX Disabled temporarily.
GET DIAGNOSTICS v_rc_temp = ROW_COUNT;
v_rc_insert=v_rc_temp+v_rc_insert;
XXX Disabled temporarily. */

/* now, get the earliest record associated with each uid+session+min_datetime without a referrer_host */
/* XXX Disabled temporarily.
INSERT INTO stg_session (session_start_date,session_start_time,host,partner_id,user_agent,
portal_id,referrer_hostname,network_type,uid,session,
session_start_datetime,source_ip,client,username,request,
method,path,arguments,protocol,status,
referrer,page_view_count,session_start_datetime_pacific)
SELECT a.eastern_date,a.eastern_time,a.host,a.partner_id,a.user_agent,
a.portal_id,a.referrer_hostname,a.network_type,a.uid,a.session,
a.dtrequested,a.source_ip,a.client,a.username,a.request,
a.method,a.path,a.arguments,a.protocol,a.status,
a.referrer,b.page_view_count,a.dtrequested_pacific
FROM stg_wap_site_access_log a
INNER JOIN (
        SELECT  b1.uid,
                b1.session,
                b1.min_datetime,
                b1.page_view_count, -- carry along to outer query
                min(a1.stg_wap_site_access_log_id) as stg_wap_site_access_log_id
        FROM stg_wap_site_access_log a1
        INNER JOIN stg_session_agg_values b1 ON a1.uid=b1.uid and a1.session=b1.session and a1.dtrequested=b1.min_datetime
	WHERE NOT EXISTS (
		SELECT 1
		FROM stg_session a2
		WHERE a2.uid=b1.uid and a2.session=b1.session)
        GROUP BY b1.uid,b1.session,b1.min_datetime,b1.page_view_count) b ON a.stg_wap_site_access_log_id=b.stg_wap_site_access_log_id
;
XXX Disabled temporarily. */

/* get rowcount */
/* XXX Disabled temporarily.
GET DIAGNOSTICS v_rc_temp = ROW_COUNT;
v_rc_insert=v_rc_temp+v_rc_insert;
XXX Disabled temporarily. */

/* update end date */
/* Grabbing a single record doesn't matter here, since all we want is the date */
/* XXX Disabled temporarily.
UPDATE stg_session a
SET session_end_datetime=b.dtrequested
FROM stg_wap_site_access_log b
INNER JOIN stg_session_agg_values c ON b.uid=c.uid and b.session=c.session and b.dtrequested=c.max_datetime
WHERE a.uid=b.uid
AND a.session=b.session;
XXX Disabled temporarily. */

/* get rowcount */
/* XXX Disabled temporarily. GET DIAGNOSTICS v_rc_update = ROW_COUNT; */

/* check to ensure all records have matched */
/* XXX Disabled temporarily.
IF v_rc_insert <> v_rc_update THEN
RAISE EXCEPTION 'Rowcount of update does not match rowcount of insert for data_file_id=%!  Insert:  %; Update:  %',p_data_file_id,v_rc_insert,v_rc_update;
END IF;
XXX Disabled temporarily. */

/* flag new visits */
/* XXX Disabled temporarily.
UPDATE stg_session a
SET new_visit_count=1
WHERE NOT EXISTS (
	SELECT 1
	FROM dw.session_fact b
	WHERE a.uid=b.uid)
;
XXX Disabled temporarily. */

/* update data_file table w/ status */
UPDATE data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_page_view_fact_transform5(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
	RAISE NOTICE 'FAILED: % fn_page_view_fact_transform5(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_page_view_fact_transform5',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_page_view_fact_transform5(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_parse_hostname(text); Type: FUNCTION; Schema: staging; Owner: postgres
--

CREATE FUNCTION fn_parse_hostname(text) RETURNS type_set_parse_hostname
    LANGUAGE plperl IMMUTABLE STRICT
    AS $_$

#
# fn_parse_hostname
#
# This perl function takes a URL and spits out useful stuff.
#
# $Id$
#

my ($server) = @_;
my $host = undef;
my $domain = undef;
my $port = undef;

# Split up the server (and strip any trailing dot on hostname).
if (!(($host, $port) = $server =~ m/^([^:]+):?(\d*)?$/)) {
    return (undef);
}

# Is host comprised of username@host?

if (($host =~ m/^[^@]+@([^@]+)$/)) {
        $host = $1;
}

# Figure out the domain.

# IP address?
if ($host =~ m/^(\d{1,3}\.){3}\d{1,3}$/) {
        $domain = $host;

# If we have at least two dots, take everything past the first dot.
# (Accept trailing dots since they're perfectly legal.)
} elsif (!(($domain) = $host =~ m/\.(([^\s\.]+\.)+[^\s\.]+)\.?$/)) {
        $domain = $host;
}

# Check some of our values.
if ($port !~ m/^\d+$/) {
    $port = undef;
}

return {domain => $domain, port => $port};

$_$;


ALTER FUNCTION staging.fn_parse_hostname(text) OWNER TO postgres;

--
-- Name: fn_parse_referrer_hostname(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_parse_referrer_hostname(text) RETURNS text
    LANGUAGE plperlu
    AS $_$

#
# fn_parse_referrer_hostname
#
# This perl function takes a url and gets the host server
#
# $Id: fn_parse_referrer_hostname.sql 55 2008-07-12 04:09:43Z abyfield $
#

$url = shift(@_) =~ m|(\w+)://([^/:]+)(:\d+)?/(.*)|;
$domainName = $2;

return $domainName;

$_$;


ALTER FUNCTION staging.fn_parse_referrer_hostname(text) OWNER TO warehouse_dbo;

--
-- Name: fn_parse_url(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_parse_url(text) RETURNS type_set_parse_url
    LANGUAGE plperl IMMUTABLE STRICT
    AS $_$

#
# fn_parse_url
#
# This perl function takes a URL and spits out useful stuff.
# Written by Eric Johnston (checked in by me--and therefore,
# I am taking all of the credit)
#
# $Id$
#

my ($url) = @_;
my $protocol = undef;
my $server;
my $host = undef;
my $domain = undef;
my $port = undef;
my $path = undef;

# Pick out the basics...
if (!(($protocol, $server, $path, $args) = $url =~ m/^([^:]+):\/\/([^\/]+)(\/?[^\?]*)\??(.*)$/)) {
    return (undef);
}

# Split up the server (and strip any trailing dot on hostname).
if (!(($host, $port) = $server =~ m/^([^:]+):?(\d*)?$/)) {
    return (undef);
}

# Is host comprised of username@host?
if (($host =~ m/^[^@]+@([^@]+)$/)) {
    $host = $1;
}

# Figure out the domain.

# IP address?
if ($host =~ m/^(\d{1,3}\.){3}\d{1,3}$/) {
        $domain = $host;

# Special case some of the mail services.
} elsif ($host =~ m/mail\.live\.com\.?$/ || $host =~ m/mail\.yahoo\.com\.?$/) {
	($domain) = $host =~ m/\.(([^\s\.]+\.){2}[^\s\.]+)\.?$/;

# Special case United Kingdom.
} elsif  ($host =~ m/co\.uk\.?$/) {
	($domain) = $host =~ m/\.(([^\s\.]+\.){2,}[^\s\.]+)\.?$/;

# If we have at least two dots, take everything past the first dot.
# (Accept trailing dots since they're perfectly legal.)
} else {
	($domain) = $host =~ m/\.(([^\s\.]+\.)+[^\s\.]+)\.?$/;
}

# Punt.
if (!defined($domain)) {
        $domain = $host;
}

# Check some of our values.
if ($port !~ m/^\d+$/) {
    $port = undef;
}
if (length($args) < 1) {
    $args = undef;
}

# XXX Could strip out the damned jsessionid from path here...

return {protocol => $protocol, host => $host, domain => $domain, port => $port, path => $path, args => $args};

$_$;


ALTER FUNCTION staging.fn_parse_url(text) OWNER TO warehouse_dbo;

--
-- Name: fn_partner_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_partner_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_partner_dim_load
||
|| Load routine for partner dimension.
||
|| $Id: fn_partner_dim_load.sql 5343 2009-07-23 21:06:34Z song $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='partner_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_partner_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.partner_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_partner a 
WHERE a.partner_id=b.partner_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.name<>b.name OR
a.description<>b.description OR
a.locale<>b.locale OR
a.time_zone_id<>b.time_zone_id OR
a.keyword<>b.keyword OR
a.msa_id<>b.msa_id OR
a.msa_name<>b.msa_name OR
a.msa_is_metro<>b.msa_is_metro OR
a.dtactive<>b.dtactive OR
a.dtinactive<>b.dtinactive OR
a.is_published<>b.is_published OR
a.dtdeleted<>b.dtdeleted OR
a.parent1_id<>b.parent1_id OR
a.parent1_type<>b.parent1_type OR
a.parent1_name<>b.parent1_name OR
a.parent2_id<>b.parent2_id OR
a.parent2_type<>b.parent2_type OR
a.parent2_name<>b.parent2_name OR
a.parent3_id<>b.parent3_id OR
a.parent3_type<>b.parent3_type OR
a.parent3_name<>b.parent3_name OR
a.partner_postal_code<>b.partner_postal_code OR
(b.partner_postal_code is null AND a.partner_postal_code is not null)
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.partner_dim (partner_id,name,
description,locale,time_zone_id,
keyword,msa_id,msa_name,msa_is_metro,
dtactive,dtinactive,is_published,dtdeleted,
parent1_id,parent1_type,parent1_name,
parent2_id,parent2_type,parent2_name,
parent3_id,parent3_type,parent3_name,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
name_current,description_current,parent1_id_current,
parent1_type_current,parent1_name_current,partner_postal_code)
SELECT a.partner_id,a.name,
a.description,a.locale,a.time_zone_id,
a.keyword,a.msa_id,a.msa_name,a.msa_is_metro,
a.dtactive,a.dtinactive,a.is_published,a.dtdeleted,
a.parent1_id,a.parent1_type,a.parent1_name,
a.parent2_id,a.parent2_type,a.parent2_name,
a.parent3_id,a.parent3_type,a.parent3_name,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
'N/A','N/A',-100,
'N/A','N/A', a.partner_postal_code
FROM staging.stg_partner a
INNER JOIN refer.partner_dim b ON a.partner_id=b.partner_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.partner_dim (partner_id,name,
description,locale,time_zone_id,
keyword,msa_id,msa_name,msa_is_metro,
dtactive,dtinactive,is_published,dtdeleted,
parent1_id,parent1_type,parent1_name,
parent2_id,parent2_type,parent2_name,
parent3_id,parent3_type,parent3_name,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
name_current,description_current,parent1_id_current,
parent1_type_current,parent1_name_current, partner_postal_code)
SELECT a.partner_id,a.name,
a.description,a.locale,a.time_zone_id,
a.keyword,a.msa_id,a.msa_name,a.msa_is_metro,
a.dtactive,a.dtinactive,a.is_published,a.dtdeleted,
a.parent1_id,a.parent1_type,a.parent1_name,
a.parent2_id,a.parent2_type,a.parent2_name,
a.parent3_id,a.parent3_type,a.parent3_name,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
'N/A','N/A',-100,
'N/A','N/A', a.partner_postal_code
FROM staging.stg_partner a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.partner_dim b 
WHERE a.partner_id=b.partner_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));

/* now set current values */
UPDATE refer.partner_dim b
SET name_current=a.name,
description_current=a.description,
parent1_id_current=a.parent1_id,
parent1_type_current=a.parent1_type,
parent1_name_current=a.parent1_name
FROM staging.stg_partner a
WHERE a.partner_id=b.partner_id
AND a.data_file_id=p_data_file_id
AND (b.name_current<>a.name OR
b.description_current<>a.description OR
b.parent1_id_current<>a.parent1_id OR
b.parent1_type_current<>a.parent1_type OR
b.parent1_name_current<>a.parent1_name) 
;
 
/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_partner_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_partner_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_partner_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_partner_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_partner_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_partner_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_partner_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for partner dimension.
||
|| $Id: fn_partner_dim_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_partner_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_partner_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_partner_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_partner_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_partner_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_partner_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_partner_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_partner_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_partner_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_partner_dim_transform
||
|| Transform routine for partner dimension.
||
|| $Id: fn_partner_dim_transform.sql 121 2009-01-15 05:28:36Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_partner_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_partner
SET name=COALESCE(rtrim(ltrim(name)),'N/A'),
        description=COALESCE(rtrim(ltrim(description)),'N/A'),
        locale=COALESCE(locale,'N/A'),
        time_zone_id=COALESCE(time_zone_id,'N/A'),
        keyword=COALESCE(keyword,'N/A'),
        msa_id=COALESCE(msa_id,-100),
        msa_name=COALESCE(msa_name,'N/A'),
        msa_is_metro=COALESCE(msa_is_metro,-100),
        dtactive=COALESCE(dtactive,'2005-01-01'),
        dtinactive=COALESCE(dtinactive,'9999-12-31'),
        is_published=COALESCE(is_published,-100),
        dtdeleted=COALESCE(dtdeleted,'9999-12-31'),
        parent1_id=COALESCE(parent1_id,-100),
        parent1_type=COALESCE(parent1_type,'N/A'),
        parent1_name=COALESCE(parent1_name,'N/A'),
        parent2_id=COALESCE(parent2_id,-100),
        parent2_type=COALESCE(parent2_type,'N/A'),
        parent2_name=COALESCE(parent2_name,'N/A'),
        parent3_id=COALESCE(parent3_id,-100),
        parent3_type=COALESCE(parent3_type,'N/A'),
        parent3_name=COALESCE(parent3_name, 'N/A'),
        partner_postal_code=COALESCE(partner_postal_code, 'N/A')
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_partner_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_partner_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_partner_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;


END;
$_$;


ALTER FUNCTION staging.fn_partner_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_partner_module_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_partner_module_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_partner_module_dim_load
||
|| Load routine for partner module dimension.
||
|| $Id: fn_partner_module_dim_load.sql 4479 2009-03-05 04:38:12Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='partner_module_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_partner_module_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.partner_module_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_partner_module a
WHERE a.partner_module_id=b.partner_module_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
	AND (
	a.partner_id<>b.partner_id OR
	a.feature_module_id<>b.feature_module_id OR
	a.feature_module_name<>b.feature_module_name OR
	a.feature_module_desc<>b.feature_module_desc OR
	a.feature_module_wapurl<>b.feature_module_wapurl OR
	a.display_name<>b.display_name OR
	a.description<>b.description OR
	a.source_name<>b.source_name OR
	a.is_local<>b.is_local OR
	a.state<>b.state OR
	a.enclosing_partner_module_id<>b.enclosing_partner_module_id OR
	a.enabled<>b.enabled OR
	a.group_name<>b.group_name OR
	a.city_state<>b.city_state
	)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.partner_module_dim (partner_module_id,partner_id,
feature_module_id,feature_module_name,feature_module_desc,
feature_module_wapurl,display_name,description,source_name,is_local,
state,enclosing_partner_module_id,enabled,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
group_name,city_state,
feature_module_name_current,feature_module_desc_current,
display_name_current,description_current)
SELECT a.partner_module_id,a.partner_id,
a.feature_module_id,a.feature_module_name,a.feature_module_desc,
a.feature_module_wapurl,a.display_name,a.description,a.source_name,a.is_local,
a.state,a.enclosing_partner_module_id,a.enabled,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
a.group_name,a.city_state,
'N/A','N/A',
'N/A','N/A'
FROM staging.stg_partner_module a
INNER JOIN refer.partner_module_dim b ON a.partner_module_id=b.partner_module_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.partner_module_dim (partner_module_id,partner_id,
feature_module_id,feature_module_name,feature_module_desc,
feature_module_wapurl,display_name,description,source_name,is_local,
state,enclosing_partner_module_id,enabled,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
group_name,city_state,
feature_module_name_current,feature_module_desc_current,
display_name_current,description_current)
SELECT a.partner_module_id,a.partner_id,
a.feature_module_id,a.feature_module_name,a.feature_module_desc,
a.feature_module_wapurl,a.display_name,a.description,a.source_name,a.is_local,
a.state,a.enclosing_partner_module_id,a.enabled,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
a.group_name,a.city_state,
'N/A','N/A',
'N/A','N/A'
FROM staging.stg_partner_module a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
	FROM refer.partner_module_dim b 
	WHERE a.partner_module_id=b.partner_module_id
	AND a.data_file_id=p_data_file_id
	AND a.dml_command in ('I','U'));

/* now set current values for partner module name/desc */
UPDATE refer.partner_module_dim b
SET     display_name_current=a.display_name,
        description_current=a.description
FROM staging.stg_partner_module a
WHERE a.partner_module_id=b.partner_module_id
AND a.data_file_id=p_data_file_id
AND (   b.display_name_current<>a.display_name OR
        b.description_current<>a.description)
;

/* now set current values for feature module name/desc */
UPDATE refer.partner_module_dim b
SET     feature_module_name_current=a.feature_module_name,
        feature_module_desc_current=a.feature_module_desc
FROM staging.stg_partner_module a
WHERE a.partner_module_id=b.partner_module_id
AND a.feature_module_id=b.feature_module_id
AND a.data_file_id=p_data_file_id
AND (   b.feature_module_name_current<>a.feature_module_name OR
        b.feature_module_desc_current<>a.feature_module_desc)
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_partner_module_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_partner_module_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_partner_module_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_partner_module_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_partner_module_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_partner_module_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_partner_module_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for partner module dimension.
||
|| $Id: fn_partner_module_dim_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_partner_module_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_partner_module_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_partner_module_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_partner_module_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_partner_module_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_partner_module_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_partner_module_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_partner_module_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_partner_module_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_partner_module_dim_transform
||
|| Transform routine for partner module dimension.
||
|| $Id: fn_partner_module_dim_transform.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 
BEGIN

RAISE DEBUG 'STARTING: % fn_partner_module_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_partner_module
SET	partner_id=COALESCE(partner_id,-100),
        feature_module_id=COALESCE(feature_module_id,-100),
        feature_module_name=COALESCE(feature_module_name,'N/A'),
        feature_module_desc=COALESCE(feature_module_desc,'N/A'),
        feature_module_wapurl=COALESCE(feature_module_wapurl,'N/A'),
        display_name=COALESCE(display_name,'N/A'),
        description=COALESCE(description,'N/A'),
        source_name=COALESCE(source_name,'N/A'),
        is_local=COALESCE(is_local,-100),
        state=COALESCE(state,'N/'),
        enclosing_partner_module_id=COALESCE(enclosing_partner_module_id,-100),
        enabled=COALESCE(enabled,FALSE),
	group_name=COALESCE(group_name,'N/A'),
	city_state=COALESCE(city_state,'N/A')
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_partner_module_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_partner_module_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_partner_module_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_partner_module_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_portal_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_portal_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_dim_load
||
|| Load routine for portal dimension.
||
|| $Id: fn_portal_dim_load.sql 5343 2009-07-23 21:06:34Z song $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='portal_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_portal_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.portal_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_portal a 
WHERE a.portal_id=b.portal_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.portal_name<>b.portal_name OR
a.description<>b.description OR
a.default_partner_id<>b.default_partner_id OR
a.single_partner<>b.single_partner OR
a.ondeck<>b.ondeck OR
a.keyword <> b.keyword
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.portal_dim (portal_id,portal_name,
description,
default_partner_id,single_partner,ondeck,keyword,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
portal_name_current,description_current)
SELECT a.portal_id,a.portal_name,
a.description,
a.default_partner_id,a.single_partner,a.ondeck,a.keyword,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
'N/A','N/A'
FROM staging.stg_portal a
INNER JOIN refer.portal_dim b ON a.portal_id=b.portal_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.portal_dim (portal_id,portal_name,
description,
default_partner_id,single_partner,ondeck,keyword,
auto_generated,suppress,data_file_id,dt_effective,dt_expire,
portal_name_current,description_current)
SELECT a.portal_id,a.portal_name,
a.description,
a.default_partner_id,a.single_partner,a.ondeck,a.keyword,
FALSE,FALSE,a.data_file_id,dt_expire_old + interval '1 second','9999-12-31',
'N/A','N/A'
FROM staging.stg_portal a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.portal_dim b 
WHERE a.portal_id=b.portal_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.portal_dim b
SET     portal_name_current=a.portal_name,
        description_current=a.description
FROM staging.stg_portal a
WHERE a.portal_id=b.portal_id
AND a.data_file_id=p_data_file_id
AND (   b.portal_name_current<>a.portal_name OR
        b.description_current<>a.description )
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_portal_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_portal_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_portal_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_portal_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_portal_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for portal dimension.
||
|| $Id: fn_portal_dim_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_portal_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_portal_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_portal_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_portal_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_portal_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_portal_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_portal_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_portal_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_dim_transform
||
|| Transform routine for portal dimension.
||
|| $Id: fn_portal_dim_transform.sql 4383 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % fn_portal_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* set ondeck flag */
UPDATE staging.stg_portal
SET ondeck=
CASE portal_name
WHEN 'Verizon Wireless' THEN TRUE -- Verizon
WHEN 'MEdia Net' THEN TRUE -- AT&T
ELSE FALSE END
WHERE data_file_id=p_data_file_id;

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_portal
SET portal_name=COALESCE(portal_name,'N/A'),
        description=COALESCE(description,'N/A'),
        default_partner_id=COALESCE(default_partner_id,-100),
        single_partner=COALESCE(single_partner,-100),
        keyword = COALESCE(keyword,'N/A')
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_portal_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_portal_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;


END;
$_$;


ALTER FUNCTION staging.fn_portal_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_portal_host_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_portal_host_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_host_dim_load
||
|| Load routine for portal host dimension.
||
|| $Id: fn_portal_host_dim_load.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='portal_host_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_portal_host_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.portal_host_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_portal_host a 
WHERE a.portal_host_id=b.portal_host_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
	AND (
	a.hostname<>b.hostname OR
	a.portal_id<>b.portal_id OR
	a.partner_id<>b.partner_id  OR
	a.dtcreated<>b.dt_created OR
	a.dtdeleted<>b.dt_deleted OR
	a.is_active<>b.is_active
	)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.portal_host_dim (portal_host_id,hostname,
portal_id,partner_id,dt_created,dt_deleted,is_active,
auto_generated,suppress,data_file_id,dt_effective,dt_expire)
SELECT a.portal_host_id,a.hostname,
a.portal_id,a.partner_id,a.dtcreated,a.dtdeleted,a.is_active,
FALSE,FALSE,a.data_file_id,
dt_expire_old + interval '1 second','9999-12-31'
FROM staging.stg_portal_host a
INNER JOIN refer.portal_host_dim b ON a.portal_host_id=b.portal_host_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.portal_host_dim (portal_host_id,hostname,
portal_id,partner_id,dt_created,dt_deleted,is_active,
auto_generated,suppress,data_file_id,dt_effective,dt_expire)
SELECT a.portal_host_id,a.hostname,
a.portal_id,a.partner_id,a.dtcreated,a.dtdeleted,a.is_active,
FALSE,FALSE,a.data_file_id,
dt_expire_old + interval '1 second','9999-12-31'
FROM staging.stg_portal_host a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
	FROM refer.portal_host_dim b 
	WHERE a.portal_host_id=b.portal_host_id
	AND a.data_file_id=p_data_file_id
	AND a.dml_command in ('I','U'));
 
/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_portal_host_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_portal_host_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_host_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;


END;
$_$;


ALTER FUNCTION staging.fn_portal_host_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_portal_host_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_portal_host_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_host_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for portal host dimension.
||
|| $Id: fn_portal_host_dim_main.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_portal_host_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_portal_host_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_portal_host_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_portal_host_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_portal_host_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_host_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_portal_host_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_portal_host_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_portal_host_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_host_dim_transform
||
|| Transform routine for portal host dimension.
||
|| $Id: fn_portal_host_dim_transform.sql 122 2009-01-21 00:26:54Z abyfield $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;

BEGIN

RAISE DEBUG 'STARTING: % fn_portal_host_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';

/* Remove NULL values from scd type II dim */
UPDATE staging.stg_portal_host
SET 	hostname=COALESCE(rtrim(ltrim(hostname)),'N/A'),
        portal_id=COALESCE(portal_id,-100),
        partner_id=COALESCE(partner_id,-100),
        dtcreated=COALESCE(dtcreated,'2005-01-01'),
        dtdeleted=COALESCE(dtdeleted,'9999-12-31'),
        is_active=COALESCE(is_active,-100)
WHERE data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_portal_host_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
	v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_portal_host_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_portal_host_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;

END;
$_$;


ALTER FUNCTION staging.fn_portal_host_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_3rd_network_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_3rd_network_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_3rd_network_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_3rd_network_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (22) -- daily report
GROUP BY a.process_id
HAVING count(*)=13 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_jt_performance 
UPDATE adnetwork.daily_jt_performance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_jt_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_ga_performance 
UPDATE adnetwork.daily_ga_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_ga_performance 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_mm_performance 
UPDATE adnetwork.daily_mm_performance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_mm_performance 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_mm_performance 
UPDATE adnetwork.daily_mx_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_mx_performance 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_wh_performance 
UPDATE adnetwork.daily_wh_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_wh_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_sp_performance 
UPDATE adnetwork.daily_sp_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_sp_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_sp_blue_performance 
UPDATE adnetwork.daily_sp_blue_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_sp_blue_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_yp_performance 
UPDATE adnetwork.daily_yp_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_yp_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_yp_sb_performance 
UPDATE adnetwork.daily_yp_sb_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_yp_sb_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_yp_no_performance 
UPDATE adnetwork.daily_yp_no_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_yp_no_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_adsense_dbclk_channel 
UPDATE adnetwork.daily_adsense_dbclk_channel  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_adsense_dbclk_channel
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_cg_performance 
UPDATE adnetwork.daily_cg_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_cg_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_it_performance 
UPDATE adnetwork.daily_it_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_it_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_3rd_network_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_3rd_network_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_3rd_network_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_3rd_network_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_3rd_network_requests_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_3rd_network_requests_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_3rd_network_requests_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_3rd_network_requests_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (47) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adm.daily_network_fct_request
UPDATE adm.daily_network_fct_request a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 47 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_network_fct_request a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 47 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_3rd_network_requests_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_3rd_network_requests_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_3rd_network_requests_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_3rd_network_requests_report() OWNER TO song;

--
-- Name: fn_promote_daily_3rd_network_summary_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_3rd_network_summary_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_3rd_network_summary_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_3rd_network_summary_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (28) -- daily report
GROUP BY a.process_id
HAVING count(*)=2 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_adnetwork_summary 
UPDATE adnetwork.daily_adnetwork_summary 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_adnetwork_summary
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id=v_process_id;

-- adm.daily_network_fct_performance
UPDATE adm.daily_network_fct_performance a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 28 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_network_fct_performance a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 28 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id=v_process_id;

-- adm.daily_network_fct_performance
UPDATE adm.daily_agg_network_performance a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 28 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_agg_network_performance a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 28 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id=v_process_id;

-- adm.daily_network_fct_channel
UPDATE adm.daily_network_fct_channel a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 28 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_network_fct_channel a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 28 AND b.process_id = a.process_id AND a.eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND a.process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_3rd_network_summary_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_3rd_network_summary_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_3rd_network_summary_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_3rd_network_summary_report() OWNER TO song;

--
-- Name: fn_promote_daily_ad_response_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_ad_response_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_ad_response_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_ad_response_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (10) -- daily report
GROUP BY a.process_id
HAVING count(*)=4 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adstraffic.daily_ad_serving_stats
UPDATE adstraffic.daily_ad_serving_stats
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_ad_serving_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_ad_serving_stats_by_device
UPDATE adstraffic.daily_ad_serving_stats_by_device
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_ad_serving_stats_by_device
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_ad_serving_stats_by_content_category
UPDATE adstraffic.daily_ad_serving_stats_by_content_category
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_ad_serving_stats_by_content_category
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_adcel_stats
UPDATE adstraffic.daily_adcel_stats 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_adcel_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_ad_response_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_ad_response_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_ad_response_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_ad_response_report() OWNER TO song;

--
-- Name: fn_promote_daily_adm_data_feed(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_adm_data_feed() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_doubleclick_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_adm_data_feed()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (15) -- daily adm data feed
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adm.daily_agg_adm_data_feed
UPDATE adm.daily_agg_adm_data_feed
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adm.daily_agg_adm_data_feed
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_adm_data_feed()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_adm_data_feed(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_doubleclick_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_adm_data_feed() OWNER TO song;

--
-- Name: fn_promote_daily_adsense_dbclk_channel_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_adsense_dbclk_channel_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_adsense_dbclk_channel_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_adsense_dbclk_channel_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (43) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_adsense_dbclk_channel 
UPDATE adnetwork.daily_adsense_dbclk_channel  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_adsense_dbclk_channel
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_adsense_dbclk_channel_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_adsense_dbclk_channel_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_adsense_dbclk_channel_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_adsense_dbclk_channel_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_city_grid_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_city_grid_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_city_grid_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_city_grid_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (41) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_cg_performance 
UPDATE adnetwork.daily_cg_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_cg_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_city_grid_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_city_grid_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_city_grid_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_city_grid_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_copy_ad_responses(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_daily_copy_ad_responses() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_ad_response_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_copy_ad_responses()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_copy_ad_responses($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (32) -- daily copy ad responses
GROUP BY a.process_id
HAVING count(*)=9 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_copy_ad_responses()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_copy_ad_responses(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_copy_ad_responses',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_copy_ad_responses() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_cumulative_ad_response(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_daily_cumulative_ad_response() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_ad_response_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_cumulative_ad_response()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_cumulative_ad_response($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (13) -- daily cumulative
GROUP BY a.process_id
HAVING count(*)=4 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_cumulative_ad_response()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_cumulative_ad_response(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_cumulative_ad_response',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_cumulative_ad_response() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_cumulative_ad_response_per_server(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_daily_cumulative_ad_response_per_server() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_ad_response_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_cumulative_ad_response_per_server()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_cumulative_ad_response($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (50) -- daily cumulative per server
GROUP BY a.process_id
HAVING count(*)=40 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_cumulative_ad_response_per_server()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_cumulative_ad_response_per_server(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_cumulative_ad_response_per_server',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_cumulative_ad_response_per_server() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_doubleclick_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_doubleclick_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_doubleclick_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_doubleclick_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (14) -- daily doubleclick
GROUP BY a.process_id
HAVING count(*)=12 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- dbclk.daily_agg_campaign
UPDATE dbclk.daily_agg_campaign
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE dbclk.daily_agg_campaign
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- dbclk.daily_agg_publishers_day
UPDATE dbclk.daily_agg_publishers_day
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE dbclk.daily_agg_publishers_day
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- dbclk.daily_agg_site_campaign_day
UPDATE dbclk.daily_agg_site_campaign_day
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE dbclk.daily_agg_site_campaign_day
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- dbclk.daily_agg_site_day
UPDATE dbclk.daily_agg_site_day
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE dbclk.daily_agg_site_day
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- dbclk.daily_agg_site_order
UPDATE dbclk.daily_agg_site_order
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE dbclk.daily_agg_site_order
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adm.daily_agg_revenue_by_order
UPDATE adm.daily_agg_revenue_by_order
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adm.daily_agg_revenue_by_order
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_db_sellthrough_by_site
UPDATE adstraffic.daily_db_sellthrough_by_site
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_db_sellthrough_by_site
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_db_sellthrough_by_metro
UPDATE adstraffic.daily_db_sellthrough_by_metro
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_db_sellthrough_by_metro
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adm.daily_agg_publisher_website_partner
UPDATE adm.daily_agg_publisher_website_partner
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adm.daily_agg_publisher_website_partner
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adm.daily_agg_order_placement_creative_flight
UPDATE adm.daily_agg_order_placement_creative_flight
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adm.daily_agg_order_placement_creative_flight
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adm.fn_build_daily_agg_order_atc
UPDATE adm.daily_agg_order_atc
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adm.daily_agg_order_atc
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adm.daily_network_fct_performance
UPDATE adm.daily_network_fct_performance a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_network_fct_performance a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id=v_process_id;

-- adm.daily_network_fct_performance_by_portal
UPDATE adm.daily_network_fct_performance_by_portal a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_network_fct_performance_by_portal a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id=v_process_id;

-- adm.daily_network_fct_performance
UPDATE adm.daily_agg_network_performance a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_agg_network_performance a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id=v_process_id;

-- adm.daily_network_fct_channel
UPDATE adm.daily_network_fct_channel a
SET is_active=false,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id<v_process_id
AND a.is_active=true;

UPDATE adm.daily_network_fct_channel a
SET is_active=true,dt_lastchange=clock_timestamp()
FROM control.process b
WHERE b.process_config_id = 14 AND b.process_id = a.process_id AND a.eastern_date_sk=v_date_sk
AND a.process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_doubleclick_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_doubleclick_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_doubleclick_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_doubleclick_report() OWNER TO song;

--
-- Name: fn_promote_daily_event_tracker_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_event_tracker_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_event_tracker_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_event_tracker_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_event_tracker_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (25) -- daily report
GROUP BY a.process_id
HAVING count(*)=7 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- evttracker.daily_event_stats 
UPDATE evttracker.daily_event_stats
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_stats_by_hour 
UPDATE evttracker.daily_event_stats_by_hour  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_stats_by_hour 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_download 
UPDATE evttracker.daily_event_download  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_download  
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_dma 
UPDATE evttracker.daily_event_dma  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_dma   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_dma_by_hour 
UPDATE evttracker.daily_event_dma_by_hour  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_dma_by_hour   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_x_value 
UPDATE evttracker.daily_event_x_value  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_x_value   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_x_value_by_hour 
UPDATE evttracker.daily_event_x_value_by_hour  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_x_value_by_hour   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_x_value_report 
UPDATE evttracker.daily_event_x_value_report  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_x_value_report   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_by_distance 
UPDATE evttracker.daily_event_by_distance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_by_distance   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- evttracker.daily_event_stats_adnet 
UPDATE evttracker.daily_event_stats_adnet 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.daily_event_stats_adnet   
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_event_tracker_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_event_tracker_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_event_tracker_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_event_tracker_report() OWNER TO song;

--
-- Name: fn_promote_daily_filled_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_daily_filled_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_filled_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_filled_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (51) -- daily report
GROUP BY a.process_id
HAVING count(*)=5 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adstraffic.daily_filled_stats
UPDATE adstraffic.daily_filled_stats 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_filled_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_filled_stats_by_content_category
UPDATE adstraffic.daily_filled_stats_by_content_category 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_filled_stats_by_content_category 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_filled_stats_by_device
UPDATE adstraffic.daily_filled_stats_by_device 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_filled_stats_by_device 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_filled_stats_by_dma
UPDATE adstraffic.daily_filled_stats_by_dma 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_filled_stats_by_dma 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_olap_filled_by_portal
UPDATE adstraffic.daily_olap_filled_by_portal 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_olap_filled_by_portal
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_filled_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_filled_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_filled_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_filled_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_itunes_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_itunes_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_itunes_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_itunes_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (42) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_it_performance 
UPDATE adnetwork.daily_it_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_it_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_itunes_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_itunes_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_itunes_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_itunes_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_jumptap_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_jumptap_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_jumptap_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_jumptap_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (35) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_jt_performance 
UPDATE adnetwork.daily_jt_performance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_jt_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_jumptap_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_jumptap_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_jumptap_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_jumptap_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_marchex_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_marchex_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_marchex_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_marchex_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (37) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_mx_performance 
UPDATE adnetwork.daily_mx_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_mx_performance 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_marchex_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_marchex_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_marchex_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_marchex_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_millennial_media_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_millennial_media_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_millennial_media_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_millennial_media_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (40) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_mm_performance 
UPDATE adnetwork.daily_mm_performance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_mm_performance 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_millennial_media_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_millennial_media_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_millennial_media_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_millennial_media_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_requests_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_daily_requests_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_requests_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_requests_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (52) -- daily report
GROUP BY a.process_id
HAVING count(*)=3 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adstraffic.daily_olap_trxids_by_content_category
UPDATE adstraffic.daily_olap_trxids_by_content_category 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_olap_trxids_by_content_category
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_olap_trxids_by_device
UPDATE adstraffic.daily_olap_trxids_by_device 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_olap_trxids_by_device
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_olap_trxids_by_portal
UPDATE adstraffic.daily_olap_trxids_by_portal 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_olap_trxids_by_portal
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_requests_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_requests_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_requests_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_requests_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_resolve_user_agent(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_resolve_user_agent() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_resolve_user_agent
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_resolve_user_agent()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_resolve_user_agent($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (31) -- daily resolve user agent
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_resolve_user_agent()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_resolve_user_agent(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_resolve_user_agent',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_resolve_user_agent() OWNER TO song;

--
-- Name: fn_promote_daily_resolve_user_agent_event_tracker(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_resolve_user_agent_event_tracker() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_resolve_user_agent_event_tracker
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_resolve_user_agent_event_tracker()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_resolve_user_agent($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (46) -- daily resolve user agent
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_resolve_user_agent_event_tracker()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_resolve_user_agent_event_tracker(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_resolve_user_agent_event_tracker',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_resolve_user_agent_event_tracker() OWNER TO song;

--
-- Name: fn_promote_daily_superpages_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_superpages_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_superpages_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_superpages_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (39) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_sp_blue_performance 
UPDATE adnetwork.daily_sp_blue_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_sp_blue_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk BETWEEN v_start_date_sk AND v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_superpages_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_superpages_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_superpages_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_superpages_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_unfilled_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_daily_unfilled_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_unfilled_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_unfilled_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (44) -- daily report
GROUP BY a.process_id
HAVING count(*)=5 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key 
  INTO v_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adstraffic.daily_unfilled_stats
UPDATE adstraffic.daily_unfilled_stats
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_unfilled_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_unfilled_stats_by_content_category
UPDATE adstraffic.daily_unfilled_stats_by_content_category
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_unfilled_stats_by_content_category
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_unfilled_stats_by_device
UPDATE adstraffic.daily_unfilled_stats_by_device
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_unfilled_stats_by_device
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_unfilled_stats_by_dma
UPDATE adstraffic.daily_unfilled_stats_by_dma 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_unfilled_stats_by_dma
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

-- adstraffic.daily_olap_unfilled_by_portal
UPDATE adstraffic.daily_olap_unfilled_by_portal 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.daily_olap_unfilled_by_portal
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_date_sk
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_unfilled_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_unfilled_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_daily_unfilled_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_unfilled_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_daily_where_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_where_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_where_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_where_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (36) -- daily report
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_wh_performance 
UPDATE adnetwork.daily_wh_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_wh_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_where_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_where_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_where_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_where_performance_report() OWNER TO song;

--
-- Name: fn_promote_daily_yellowpages_performance_report(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_daily_yellowpages_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_yellowpages_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_start_date_sk 	INTEGER;
 v_end_date_sk 		INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_daily_yellowpages_performance_report()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.is_complete = true
  AND a.process_config_id IN (38) -- daily report
GROUP BY a.process_id
HAVING count(*)=3 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RAISE NOTICE 'Process Not Found';
	RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT min_partition_key, max_partition_key 
  INTO v_start_date_sk, v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

-- adnetwork.daily_yp_performance 
UPDATE adnetwork.daily_yp_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_yp_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_yp_sb_performance 
UPDATE adnetwork.daily_yp_sb_performance  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_yp_sb_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

-- adnetwork.daily_yp_no_performance 
UPDATE adnetwork.daily_yp_no_performance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.daily_yp_no_performance 
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE eastern_date_sk=v_end_date_sk
AND process_id=v_process_id;

/* mark daily process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_daily_yellowpages_performance_report()',timeofday();
RAISE NOTICE '% END',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_daily_yellowpages_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_daily_yellowpages_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_daily_yellowpages_performance_report() OWNER TO song;

--
-- Name: fn_promote_double_click_fact_working(); Type: FUNCTION; Schema: staging; Owner: song
--

CREATE FUNCTION fn_promote_double_click_fact_working() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_daily_ad_response_report
||
|| $Id$
||
*/

DECLARE
 v_process_status	control.process.process_status%TYPE;
 v_process_id 		INTEGER;
 v_date_sk 			INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_double_click_fact_working()',timeofday();

/* Let's get the next daily ad response report process that's ready for promotion */
SELECT
	a.process_id INTO v_process_id
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_double_click_fact_working($1)'
  AND c.is_complete = true
GROUP BY a.process_id
HAVING count(*)=2 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
	RETURN;
END IF;

/* Now, for each aggregate table that participates in the daily reports,
turn off is_active flag for previous runs, and turn it on for current run */

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

RAISE DEBUG 'ENDING: % fn_promote_double_click_fact_working()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_double_click_fact_working(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_double_click_fact_working',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_double_click_fact_working() OWNER TO song;

--
-- Name: fn_promote_monthly_3rd_network_performance_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_3rd_network_performance_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_3rd_network_performance_report
||
|| $Id$
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_start_date_sk INTEGER;
 v_end_date_sk INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_3rd_network_performance_report()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM control.process a INTO v_process_id
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_3rd_network_performance_reports($1)'
AND c.is_complete = true
AND a.process_config_id IN (23,24) -- adresponse
GROUP BY a.process_id
HAVING count(*)=12 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_start_date_sk,v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=23 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM refer.month_dim
        WHERE date_sk_start=v_start_date_sk
        AND date_sk_end=v_end_date_sk;
END IF;

/* Now, for each aggregate table that participates in the monthly reports,
turn off is_active flag for previous runs, and turn it on for current run */
-- report details

-- adnetwork.monthly_adsense_dbclk_channel
UPDATE adnetwork.monthly_adsense_dbclk_channel
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_adsense_dbclk_channel
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_adsense_dbclk_channel_by_date
UPDATE adnetwork.monthly_adsense_dbclk_channel_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_adsense_dbclk_channel_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_cg_performance
UPDATE adnetwork.monthly_cg_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_cg_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_cg_performance_by_date
UPDATE adnetwork.monthly_cg_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_cg_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_ga_performance
UPDATE adnetwork.monthly_ga_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_ga_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_ga_performance_by_date
UPDATE adnetwork.monthly_ga_performance_by_date  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_ga_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_it_performance
UPDATE adnetwork.monthly_it_performance 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_it_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_it_performance_by_date
UPDATE adnetwork.monthly_it_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_it_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_jt_performance
UPDATE adnetwork.monthly_jt_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_jt_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_jt_performance_by_date
UPDATE adnetwork.monthly_jt_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_jt_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_mx_performance
UPDATE adnetwork.monthly_mx_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_mx_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_mx_performance_by_date
UPDATE adnetwork.monthly_mx_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_mx_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_mm_performance
UPDATE adnetwork.monthly_mm_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_mm_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_mm_performance_by_date
UPDATE adnetwork.monthly_mm_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_mm_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_sp_performance
UPDATE adnetwork.monthly_sp_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_sp_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_sp_performance_by_date
UPDATE adnetwork.monthly_sp_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_sp_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_sp_blue_performance
UPDATE adnetwork.monthly_sp_blue_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_sp_blue_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_sp_blue_performance_by_date
UPDATE adnetwork.monthly_sp_blue_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_sp_blue_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_wh_performance
UPDATE adnetwork.monthly_wh_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_wh_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_wh_performance_by_date
UPDATE adnetwork.monthly_wh_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_wh_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_yp_performance
UPDATE adnetwork.monthly_yp_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_yp_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_yp_performance_by_date
UPDATE adnetwork.monthly_yp_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_yp_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_yp_sb_performance
UPDATE adnetwork.monthly_yp_sb_performance
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_yp_sb_performance
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_yp_sb_performance_by_date
UPDATE adnetwork.monthly_yp_sb_performance_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_yp_sb_performance_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;


RAISE DEBUG 'ENDING: % fn_promote_monthly_3rd_network_performance_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_3rd_network_performance_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_monthly_3rd_network_performance_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_3rd_network_performance_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_monthly_3rd_network_summary_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_3rd_network_summary_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_3rd_network_summary_report
||
|| $Id$
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_start_date_sk INTEGER;
 v_end_date_sk INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_3rd_network_summary_report()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM control.process a INTO v_process_id
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_3rd_network_performance_reports($1)'
AND c.is_complete = true
AND a.process_config_id IN (29,30) -- adresponse
GROUP BY a.process_id
HAVING count(*)=2 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_start_date_sk,v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=29 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM refer.month_dim
        WHERE date_sk_start=v_start_date_sk
        AND date_sk_end=v_end_date_sk;
END IF;

/* Now, for each aggregate table that participates in the monthly reports,
turn off is_active flag for previous runs, and turn it on for current run */
-- report details

-- adnetwork.monthly_adnetwork_summary
UPDATE adnetwork.monthly_adnetwork_summary
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_adnetwork_summary
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adnetwork.monthly_adnetwork_summary_by_date
UPDATE adnetwork.monthly_adnetwork_summary_by_date  
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adnetwork.monthly_adnetwork_summary_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;


RAISE DEBUG 'ENDING: % fn_promote_monthly_3rd_network_summary_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_3rd_network_summary_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_monthly_3rd_network_summary_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_3rd_network_summary_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_monthly_ad_response_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_ad_response_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_ad_response_report
||
|| $Id$
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_start_date_sk INTEGER;
 v_end_date_sk INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_ad_response_report()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM control.process a INTO v_process_id
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_ad_response_reports($1)'
AND c.is_complete = true
AND a.process_config_id IN (11,12) -- adresponse
GROUP BY a.process_id
HAVING count(*)=9 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_start_date_sk,v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=11 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM refer.month_dim
        WHERE date_sk_start=v_start_date_sk
        AND date_sk_end=v_end_date_sk;
END IF;

/* Now, for each aggregate table that participates in the monthly reports,
turn off is_active flag for previous runs, and turn it on for current run */
-- report details

-- adstraffic.monthly_ad_serving_stats
UPDATE adstraffic.monthly_ad_serving_stats
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_ad_serving_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_ad_serving_stats_by_date
UPDATE adstraffic.monthly_ad_serving_stats_by_date
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_ad_serving_stats_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_ad_serving_stats_by_device
UPDATE adstraffic.monthly_ad_serving_stats_by_device
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_ad_serving_stats_by_device
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_ad_serving_stats_by_content_category
UPDATE adstraffic.monthly_ad_serving_stats_by_content_category
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_ad_serving_stats_by_content_category
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_unfilled_stats
UPDATE adstraffic.monthly_unfilled_stats
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_unfilled_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_unfilled_stats_by_content_category
UPDATE adstraffic.monthly_unfilled_stats_by_content_category 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_unfilled_stats_by_content_category
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_unfilled_stats_by_date
UPDATE adstraffic.monthly_unfilled_stats_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_unfilled_stats_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_unfilled_stats_by_device
UPDATE adstraffic.monthly_unfilled_stats_by_device 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_unfilled_stats_by_device
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- adstraffic.monthly_unfilled_stats_by_dma
UPDATE adstraffic.monthly_unfilled_stats_by_dma 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adstraffic.monthly_unfilled_stats_by_dma
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;


RAISE DEBUG 'ENDING: % fn_promote_monthly_ad_response_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_ad_response_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_monthly_ad_response_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_ad_response_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_monthly_doubleclick_forecast(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_doubleclick_forecast() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_doubleclick_forecast
||
|| $Id$
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_start_date_sk INTEGER;
 v_end_date_sk INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_doubleclick_forecast()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM control.process a INTO v_process_id
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_ad_response_reports($1)'
AND c.is_complete = true
AND a.process_config_id IN (20,21) -- doubleclick forecasting
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_start_date_sk,v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=20 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM refer.month_dim
        WHERE date_sk_start=v_start_date_sk
        AND date_sk_end=v_end_date_sk;
END IF;

/* Now, for each aggregate table that participates in the monthly reports,
turn off is_active flag for previous runs, and turn it on for current run */
-- report details

-- dbclk.monthly_agg_site
UPDATE dbclk.monthly_agg_site 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dbclk.monthly_agg_site
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;


RAISE DEBUG 'ENDING: % fn_promote_monthly_doubleclick_forecast()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_doubleclick_forecast(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_monthly_ad_response_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_doubleclick_forecast() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_monthly_event_tracker_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_event_tracker_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_event_tracker_report
||
|| $Id$
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_start_date_sk INTEGER;
 v_end_date_sk INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_event_tracker_report()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM control.process a INTO v_process_id
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_event_tracker_reports($1)'
AND c.is_complete = true
AND a.process_config_id IN (26,27) -- adresponse
GROUP BY a.process_id
HAVING count(*)=3 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_start_date_sk,v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=26 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM refer.month_dim
        WHERE date_sk_start=v_start_date_sk
        AND date_sk_end=v_end_date_sk;
END IF;

/* Now, for each aggregate table that participates in the monthly reports,
turn off is_active flag for previous runs, and turn it on for current run */
-- report details

-- evttracker.monthly_event_stats
UPDATE evttracker.monthly_event_stats
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.monthly_event_stats
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- evttracker.monthly_event_stats_by_date
UPDATE evttracker.monthly_event_stats_by_date 
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.monthly_event_stats_by_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- evttracker.monthly_event_stats_by_hour
UPDATE evttracker.monthly_event_stats_by_hour
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE evttracker.monthly_event_stats_by_hour
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;


RAISE DEBUG 'ENDING: % fn_promote_monthly_event_tracker_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_event_tracker_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_monthly_event_tracker_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_event_tracker_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_monthly_forecast_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_forecast_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_forecast_report
||
|| $Id$
||
*/

DECLARE
 v_process_status control.process.process_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_start_date_sk INTEGER;
 v_end_date_sk INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_forecast_report()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM control.process a INTO v_process_id
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_ad_response_reports($1)'
AND c.is_complete = true
AND a.process_config_id IN (16,17) -- forecasting
GROUP BY a.process_id
HAVING count(*)=1 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_start_date_sk,v_end_date_sk
FROM control.process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=16 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM refer.month_dim
        WHERE date_sk_start=v_start_date_sk
        AND date_sk_end=v_end_date_sk;
END IF;

/* Now, for each aggregate table that participates in the monthly reports,
turn off is_active flag for previous runs, and turn it on for current run */
-- report details

-- adm.monthly_forecast
UPDATE adm.monthly_forecast
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE adm.monthly_forecast
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE control.process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;


RAISE DEBUG 'ENDING: % fn_promote_monthly_forecast_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_forecast_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_promote_monthly_ad_response_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_forecast_report() OWNER TO warehouse_dbo;

--
-- Name: fn_promote_monthly_partner_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_promote_monthly_partner_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_promote_monthly_partner_report
||
|| $Id$
||
*/

DECLARE
 v_process_status data_file.file_status%TYPE;
 v_process_id INTEGER;
 v_process_config_id INTEGER;
 v_date_sk_start INTEGER;
 v_date_sk_end INTEGER;
 v_calendar_year_month VARCHAR(32);

BEGIN

RAISE DEBUG 'STARTING: % fn_promote_monthly_partner_report()',timeofday();

/* Let's get the next monthly partner report process
that's ready for promotion */
SELECT
        a.process_id
FROM process a INTO v_process_id
INNER JOIN process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_partner_report($1)'
AND c.is_complete = true
GROUP BY a.process_id
HAVING count(*)=6 -- must equal number of concurrent transactions
ORDER BY a.process_id
LIMIT 1;

/* If nothing is ready, call it a day */
IF NOT FOUND THEN
        RETURN;
END IF;

/* Lock the process record while getting min/max keys */
SELECT process_config_id,min_partition_key,max_partition_key INTO v_process_config_id,v_date_sk_start,v_date_sk_end
FROM process a
WHERE process_id=v_process_id
FOR UPDATE OF a NOWAIT;

IF v_process_config_id=4 THEN
        v_calendar_year_month:='30 day';
ELSE
        SELECT calendar_year_month INTO v_calendar_year_month
        FROM dw.month_dim
        WHERE date_sk_start=v_date_sk_start
        AND date_sk_end=v_date_sk_end;
END IF;

/* Now, for each aggregate table that participates in the three monthly
partner reports (partner activity, group activity, network activity),
turn off is_active flag for previous runs, and turn it on for current run */
-- report details
-- dw.monthly_agg_partner_act_cont_mod_type
UPDATE dw.monthly_agg_partner_act_cont_mod_type
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_cont_mod_type
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_content_category
UPDATE dw.monthly_agg_partner_act_content_category
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_content_category
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_content_module
UPDATE dw.monthly_agg_partner_act_content_module
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_content_module
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_date
UPDATE dw.monthly_agg_partner_act_date
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_date
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_day_of_week
UPDATE dw.monthly_agg_partner_act_day_of_week
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_day_of_week
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_device
UPDATE dw.monthly_agg_partner_act_device
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_device
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_hour
UPDATE dw.monthly_agg_partner_act_hour
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_hour
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_partner_act_portal
UPDATE dw.monthly_agg_partner_act_portal
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_portal
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- report overview (w/ unique counts)
-- dw.monthly_agg_partner_act_all
UPDATE dw.monthly_agg_partner_act_all
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_partner_act_all
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_group_act_all
UPDATE dw.monthly_agg_group_act_all
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_group_act_all
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_group_portal_act_all
UPDATE dw.monthly_agg_group_portal_act_all
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_group_portal_act_all
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_network_act_all
UPDATE dw.monthly_agg_network_act_all
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_network_act_all
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_ap_module_breakdown
UPDATE dw.monthly_agg_ap_module_breakdown
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_ap_module_breakdown
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

-- dw.monthly_agg_portal_act_all
UPDATE dw.monthly_agg_portal_act_all
SET is_active=false,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id<v_process_id
AND is_active=true;

UPDATE dw.monthly_agg_portal_act_all
SET is_active=true,dt_lastchange=clock_timestamp()
WHERE calendar_year_month=v_calendar_year_month
AND process_id=v_process_id;

/* mark monthly process complete */
UPDATE process 
SET process_status='SU',dt_process_completed=clock_timestamp(),dt_lastchange=clock_timestamp()
WHERE process_id=v_process_id;

/*
 * Since we're done with this report (identified by v_process_config_id),
 * let's go ahead and start running any automated reports dependent on it.
 */
PERFORM fn_cmd_shell('/home/dw_job_agent/bin/runreports ' || v_process_config_id || ' "' || v_calendar_year_month || '"');

RAISE DEBUG 'ENDING: % fn_promote_monthly_partner_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_promote_monthly_partner_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_promote_monthly_partner_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_promote_monthly_partner_report() OWNER TO warehouse_dbo;

--
-- Name: fn_purge_dim_staging_tables(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_purge_dim_staging_tables() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_purge_dim_staging_tables
||
|| This function purges the staging data for dimension tables that have been
|| successfully loaded 24 hours before.  Run nightly.
||
|| $Id$
||
*/

DECLARE
 v_cutoff_datetime TIMESTAMP;

BEGIN

RAISE DEBUG 'STARTING: % fn_purge_dim_staging_tables()',timeofday();

/* get cut off date */
SELECT CURRENT_TIMESTAMP - interval '24 hours' INTO v_cutoff_datetime;

-- stg_content_category
DELETE FROM staging.stg_content_category a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=2
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_display_block 
DELETE FROM staging.stg_display_block a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=3
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_portal
DELETE FROM staging.stg_portal a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=4
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_partner
DELETE FROM staging.stg_partner a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=5
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_partner_module
DELETE FROM staging.stg_partner_module a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=6
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_portal_host
DELETE FROM staging.stg_portal_host a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=7
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_ad_network
DELETE FROM staging.stg_ad_network a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=22
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_dc_site
DELETE FROM staging.stg_dc_site a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=23
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_dc_order
DELETE FROM staging.stg_dc_order a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=26
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_adm_placement
DELETE FROM staging.stg_adm_placement a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=30
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_adm_publisher
DELETE FROM staging.stg_adm_publisher a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=31
AND b.dt_process_loaded<=v_cutoff_datetime;

-- stg_adm_website
DELETE FROM staging.stg_adm_website a USING control.data_file b
WHERE a.data_file_id=b.data_file_id
AND b.file_status='SU'
AND b.data_file_config_id=32
AND b.dt_process_loaded<=v_cutoff_datetime;


RAISE DEBUG 'ENDING: % fn_purge_dim_staging_tables()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_purge_dim_staging_tables(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_purge_dim_staging_tables',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_purge_dim_staging_tables() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_3rd_party_performance_fact_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_3rd_party_performance_fact_data() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_3rd_party_performance_fact_data()
||
|| Author: Tho HOANG
||
|| Date: 2011-09-29
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for double click fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_3rd_party_performance_fact_data()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function,
 b.data_file_config_id INTO rec
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status IN ('ER') -- ready for extract
AND a.file_timestamp::date < v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_3rd_party_performance_fact_data()'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RAISE NOTICE 'File Not Found';
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;

IF v_file_status='ER' THEN

	v_cmd := 'SELECT COUNT(*) FROM staging.' || rec.data_file_target_table;
	EXECUTE v_cmd INTO STRICT v_count;
	IF (v_count > 0) THEN
		RAISE NOTICE 'NEED TRUNCATE DATA - ''%''',rec.data_file_target_table;
		RETURN;
	END IF;

	/* change status of file is extracting */
	v_cmd := 'UPDATE control.data_file SET file_status=''ET'' WHERE data_file_id=' || rec.data_file_id::text;
	EXECUTE v_cmd;

	RAISE NOTICE 'STARTING - ''%''',rec.file_name;

	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_adcel_file (
		rec.data_file_id,
		rec.file_name,
		rec.server_name,
		v_file_status,
		rec.data_file_target_table,
		rec.data_file_type,
		rec.unzip,
		rec.transform_on_import,
		rec.import_dir,
		rec.success_dir,
		rec.error_dir,
		rec.data_file_column_list,
		rec.data_file_load_options,
		rec.transform_script_name
	);

	RAISE NOTICE 'EXTRACTING DONE WITH STATUS - ''%''',v_file_status;

	/* transform the file */
	IF v_file_status='TR' THEN
		IF rec.data_file_config_id = 39 THEN
			/* pub_performance_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_jt_pub_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 40 THEN
			/* as_performance_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_adsense_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 41 THEN
			/* ml_performance_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_millenial_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 43 THEN
			/* mc_performance_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_marchex_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);

			
		ELSIF rec.data_file_config_id = 44 THEN
			/* aw_performance_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_where_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 49 THEN
			/* fact_sp_daily_sum*/
			SELECT * INTO v_file_status FROM staging.fn_daily_load_superpages_daily_sum_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 50 THEN
			/* fact_yp_daily_sum */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_yellowpages_daily_sum_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 51 THEN
			/* fact_jt_daily_sum */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_jumptap_daily_sum_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 52 THEN
			/* fact_it_performance */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_itunes_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 53 THEN
			/* fact_cg_performance */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_citygrid_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		END IF;

	END IF;
	
ELSIF v_file_status='ET' THEN
	
	RAISE NOTICE '% - EXTRACTING - ''%''',timeofday(),rec.file_name;
	-- END IF v_file_status='ET'
	
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_3rd_party_performance_fact_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_3rd_party_performance_fact_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_3rd_party_performance_fact_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_3rd_party_performance_fact_data() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_adnetwork_monthly_performance_fact_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_adnetwork_monthly_performance_fact_data() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_adnetwork_monthly_performance_fact_data()
||
|| Author: Tho HOANG
||
|| Date: 2012-02-08
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for double click fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_adnetwork_monthly_performance_fact_data()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function,
 b.data_file_config_id INTO rec
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status IN ('ER') -- ready for extract
AND a.file_timestamp::date < v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_adnetwork_monthly_performance_fact_data()'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RAISE NOTICE 'File Not Found';
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;

IF v_file_status='ER' THEN

	v_cmd := 'SELECT COUNT(*) FROM staging.' || rec.data_file_target_table;
	EXECUTE v_cmd INTO STRICT v_count;
	IF (v_count > 0) THEN
		RAISE NOTICE 'NEED TRUNCATE DATA - ''%''',rec.data_file_target_table;
		RETURN;
	END IF;

	/* change status of file is extracting */
	v_cmd := 'UPDATE control.data_file SET file_status=''ET'' WHERE data_file_id=' || rec.data_file_id::text;
	EXECUTE v_cmd;

	RAISE NOTICE 'STARTING - ''%''',rec.file_name;

	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_adcel_file (
		rec.data_file_id,
		rec.file_name,
		rec.server_name,
		v_file_status,
		rec.data_file_target_table,
		rec.data_file_type,
		rec.unzip,
		rec.transform_on_import,
		rec.import_dir,
		rec.success_dir,
		rec.error_dir,
		rec.data_file_column_list,
		rec.data_file_load_options,
		rec.transform_script_name
	);

	RAISE NOTICE 'EXTRACTING DONE WITH STATUS - ''%''',v_file_status;

	/* transform the file */
	IF v_file_status='TR' THEN
		IF rec.data_file_config_id = 65 THEN
			/* google adsense channel monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_ga_channel_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 66 THEN
			/* doubleclick channel monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_dbclk_channel_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 67 THEN
			/* itunes monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_itunes_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 68 THEN
			/* doubleclick channel monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_jumptap_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 69 THEN
			/* doubleclick channel monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_marchex_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 70 THEN
			/* monthly superpages */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_superpages_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 72 THEN
			/* monthly superpages */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_where_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 73 THEN
			/* monthly superpages */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_citygrid_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 74 THEN
			/* monthly superpages */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_yellowpages_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 75 THEN
			/* monthly superpages */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_millennial_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		END IF;

	END IF;
	
ELSIF v_file_status='ET' THEN
	
	RAISE NOTICE '% - EXTRACTING - ''%''',timeofday(),rec.file_name;
	-- END IF v_file_status='ET'
	
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_adnetwork_monthly_performance_fact_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_adnetwork_monthly_performance_fact_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_refresh_adnetwork_monthly_performance_fact_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_adnetwork_monthly_performance_fact_data() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_adnetwork_monthly_performance_fact_data_pt(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_adnetwork_monthly_performance_fact_data_pt() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_adnetwork_monthly_performance_fact_data_pt()
||
|| Author: Tho HOANG
||
|| Date: 2012-02-08
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for double click fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_adnetwork_monthly_performance_fact_data_pt()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function,
 b.data_file_config_id INTO rec
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status IN ('E1') -- ready for extract
AND a.file_timestamp::date < v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_adnetwork_monthly_performance_fact_data_pt()'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RAISE NOTICE 'File Not Found';
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;

IF v_file_status='E1' THEN

	v_cmd := 'SELECT COUNT(*) FROM staging.' || rec.data_file_target_table;
	EXECUTE v_cmd INTO STRICT v_count;
	IF (v_count > 0) THEN
		RAISE NOTICE 'NEED TRUNCATE DATA - ''%''',rec.data_file_target_table;
		RETURN;
	END IF;

	/* change status of file is extracting */
	v_cmd := 'UPDATE control.data_file SET file_status=''ET'' WHERE data_file_id=' || rec.data_file_id::text;
	EXECUTE v_cmd;

	RAISE NOTICE 'STARTING - ''%''',rec.file_name;

	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_adcel_file (
		rec.data_file_id,
		rec.file_name,
		rec.server_name,
		v_file_status,
		rec.data_file_target_table,
		rec.data_file_type,
		rec.unzip,
		rec.transform_on_import,
		rec.import_dir,
		rec.success_dir,
		rec.error_dir,
		rec.data_file_column_list,
		rec.data_file_load_options,
		rec.transform_script_name
	);

	RAISE NOTICE 'EXTRACTING DONE WITH STATUS - ''%''',v_file_status;

	/* transform the file */
	IF v_file_status='TR' THEN
		
		IF rec.data_file_config_id = 67 THEN
			/* doubleclick channel monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_itunes_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 69 THEN
			/* doubleclick channel monthly performance */
			SELECT * INTO v_file_status FROM staging.fn_monthly_load_marchex_performance_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		END IF;

	END IF;
	
ELSIF v_file_status='ET' THEN
	
	RAISE NOTICE '% - EXTRACTING - ''%''',timeofday(),rec.file_name;
	-- END IF v_file_status='ET'
	
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_adnetwork_monthly_performance_fact_data_pt()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_adnetwork_monthly_performance_fact_data_pt(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_refresh_adnetwork_monthly_performance_fact_data_pt',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_adnetwork_monthly_performance_fact_data_pt() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_cumulative_page_view_agg(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_cumulative_page_view_agg() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_refresh_cumulative_page_view_agg()
||
|| This job handles building the cumulative page view aggregates.  
|| It's called via a cron job.  
||
|| $Id$
||
*/

DECLARE
 v_process_status data_file.file_status%TYPE;
 rec 		RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_cumulative_page_view_agg()',timeofday();

SELECT
      a.process_id,
      a.min_partition_key AS date_sk_start,
      a.max_partition_key AS date_sk_end,
      a.min_data_file_id,
      a.max_data_file_id,
      a.process_status INTO rec
FROM process a
INNER JOIN process_configuration b ON a.process_config_id=b.process_config_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_cumulative_page_view_agg()'
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
        RETURN;
END IF;


v_process_status:=rec.process_status;
	
PERFORM fn_build_cumulative_page_view_agg_main (
       	rec.date_sk_start,
       	rec.date_sk_end,
       	rec.min_data_file_id,
       	rec.max_data_file_id,
       	rec.process_id,
       	v_process_status
       	);


RAISE DEBUG 'ENDING: % fn_refresh_cumulative_page_view_agg()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_cumulative_page_view_agg(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_refresh_cumulative_page_view_agg',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_cumulative_page_view_agg() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_3rd_network_performance_reports(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_3rd_network_performance_reports(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
/*
||
|| Function Name: fn_refresh_daily_3rd_network_performance_reports(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     Automation called daily function for data loading when daily 3rd network performance process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE

v_process_status	control.process.process_status%TYPE;
v_rec				RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_3rd_network_performance_reports(%)',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.min_data_file_id,
	a.max_data_file_id,
	a.process_status INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_3rd_network_performance_reports($1)'
  AND c.concurrent_trans_name=p_function_name
  AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=v_rec.process_status;
	
IF p_function_name='fn_build_daily_jt_performance' THEN

	PERFORM staging.fn_build_daily_jt_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_ga_performance' THEN

	PERFORM staging.fn_build_daily_ga_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_mm_performance' THEN

	PERFORM staging.fn_build_daily_mm_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_mx_performance' THEN

	PERFORM staging.fn_build_daily_mx_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_wh_performance' THEN

	PERFORM staging.fn_build_daily_wh_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_sp_performance' THEN

	PERFORM staging.fn_build_daily_sp_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_sp_blue_performance' THEN

	PERFORM staging.fn_build_daily_sp_blue_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_yp_performance' THEN

	PERFORM staging.fn_build_daily_yp_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_yp_sb_performance' THEN

	PERFORM staging.fn_build_daily_yp_sb_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_yp_no_performance' THEN

	PERFORM staging.fn_build_daily_yp_no_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_adsense_dbclk_channel' THEN

	PERFORM staging.fn_build_daily_adsense_dbclk_channel (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_cg_performance' THEN

	PERFORM staging.fn_build_daily_cg_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_it_performance' THEN

	PERFORM staging.fn_build_daily_it_performance (
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_adnetwork_summary' THEN

	PERFORM staging.fn_build_daily_adnetwork_summary (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_adnetwork_performance' THEN

	PERFORM staging.fn_build_daily_adnetwork_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_network_fct_request' THEN

	PERFORM staging.fn_build_daily_network_fct_request (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_process_status
	);

END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_3rd_network_performance_reports(%)',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
	RAISE NOTICE 'FAILED: % fn_refresh_daily_3rd_network_performance_reports(%); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_refresh_daily_3rd_network_performance_reports',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_3rd_network_performance_reports(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_ad_response_reports(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_ad_response_reports(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
/*
||
|| Function Name: fn_refresh_daily_ad_response_reports(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     Automation called daily function for data loading when daily ad response process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE

v_process_status	control.process.process_status%TYPE;
v_rec				RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_ad_response_reports(%)',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.min_data_file_id,
	a.max_data_file_id,
	a.process_status INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_ad_response_reports($1)'
  AND c.concurrent_trans_name=p_function_name
  AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=v_rec.process_status;
	
IF p_function_name='fn_build_daily_ad_serving_stats' THEN

	PERFORM staging.fn_build_daily_ad_serving_stats (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_ad_serving_stats_by_device' THEN

	PERFORM staging.fn_build_daily_ad_serving_stats_by_device (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_ad_serving_stats_by_content_category' THEN

	PERFORM staging.fn_build_daily_ad_serving_stats_by_content_category (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_campaign' THEN

	PERFORM staging.fn_build_daily_agg_campaign (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_publishers_day' THEN

	PERFORM staging.fn_build_daily_agg_publishers_day (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_site_campaign_day' THEN

	PERFORM staging.fn_build_daily_agg_site_campaign_day (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_site_day' THEN

	PERFORM staging.fn_build_daily_agg_site_day (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_site_order' THEN

	PERFORM staging.fn_build_daily_agg_site_order (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_adm_data_feed' THEN

	PERFORM staging.fn_build_daily_agg_adm_data_feed (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_revenue_by_order' THEN

	PERFORM staging.fn_build_daily_agg_revenue_by_order (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_adcel_stats' THEN

	PERFORM staging.fn_build_daily_adcel_stats (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_db_sellthrough_by_site' THEN

	PERFORM staging.fn_build_daily_db_sellthrough_by_site (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_db_sellthrough_by_metro' THEN

	PERFORM staging.fn_build_daily_db_sellthrough_by_metro (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_order_placement_creative_flight' THEN

	PERFORM staging.fn_build_daily_agg_order_placement_creative_flight (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_publisher_website_partner' THEN

	PERFORM staging.fn_build_daily_agg_publisher_website_partner (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_agg_order_atc' THEN

	PERFORM staging.fn_build_daily_agg_order_atc (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_network_fct_performance' THEN

	PERFORM staging.fn_build_daily_network_fct_performance (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_unfilled_stats' THEN

	PERFORM staging.fn_build_daily_unfilled_stats (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_unfilled_stats_by_content_category' THEN

	PERFORM staging.fn_build_daily_unfilled_stats_by_content_category (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_unfilled_stats_by_device' THEN

	PERFORM staging.fn_build_daily_unfilled_stats_by_device (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_unfilled_stats_by_dma' THEN

	PERFORM staging.fn_build_daily_unfilled_stats_by_dma (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_olap_trxids_by_content_category' THEN

	PERFORM staging.fn_build_daily_olap_trxids_by_content_category (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_olap_trxids_by_device' THEN

	PERFORM staging.fn_build_daily_olap_trxids_by_device (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_olap_trxids_by_portal' THEN

	PERFORM staging.fn_build_daily_olap_trxids_by_portal (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_olap_unfilled_by_portal' THEN

	PERFORM staging.fn_build_daily_olap_unfilled_by_portal (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_filled_stats' THEN

	PERFORM staging.fn_build_daily_filled_stats (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_filled_stats_by_content_category' THEN

	PERFORM staging.fn_build_daily_filled_stats_by_content_category (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_filled_stats_by_device' THEN

	PERFORM staging.fn_build_daily_filled_stats_by_device (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_filled_stats_by_dma' THEN

	PERFORM staging.fn_build_daily_filled_stats_by_dma (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_olap_filled_by_portal' THEN

	PERFORM staging.fn_build_daily_olap_filled_by_portal (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);

END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_ad_response_reports(%)',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
	RAISE NOTICE 'FAILED: % fn_refresh_daily_ad_response_reports(%); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_refresh_daily_ad_response_reports',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_ad_response_reports(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_copy_ad_responses(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_copy_ad_responses(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
/*
||
|| Function Name: fn_refresh_daily_copy_ad_responses(text)
||
|| Author: Tho HOANG
||
|| Date: 2011-12-26
||
|| Description: 
||     Automation called daily function to cumulative ad response data when daily ad response process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE

v_process_status	control.process.process_status%TYPE;
v_rec			RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_copy_ad_responses(%)',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.min_data_file_id,
	a.max_data_file_id,
	a.process_status INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_copy_ad_responses($1)'
  AND c.concurrent_trans_name=p_function_name
  AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=v_rec.process_status;
	
IF p_function_name='fn_build_ad_response_fact_copy' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app3-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app3-adcel',16);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app4-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app4-adcel',17);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app6-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app6-adcel',18);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app8-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app8-adcel',19);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app9-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app9-adcel',20);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app12-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app12-adcel',27);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app13-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app13-adcel',28);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app14-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app14-adcel',29);

ELSIF p_function_name='fn_build_ad_response_fact_copy_app015-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_copy (v_rec.start_date_sk,v_rec.process_id,v_process_status,'app015-adcel',81);


END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_copy_ad_responses(%)',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
	RAISE NOTICE 'FAILED: % fn_refresh_daily_copy_ad_responses(%); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_refresh_daily_copy_ad_responses',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_copy_ad_responses(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_cumulative_ad_response(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_cumulative_ad_response(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
/*
||
|| Function Name: fn_refresh_daily_cumulative_ad_response(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     Automation called daily function to cumulative ad response data when daily ad response process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE

v_process_status	control.process.process_status%TYPE;
v_rec				RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_cumulative_ad_response(%)',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.min_data_file_id,
	a.max_data_file_id,
	a.process_status INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_cumulative_ad_response($1)'
  AND c.concurrent_trans_name=p_function_name
  AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=v_rec.process_status;
	
IF p_function_name='fn_build_ad_response_fact_stats_01' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01 (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_02' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_02 (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_forecast' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_forecast (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_dbclk' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_dbclk (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_unfilled' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_unfilled (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_filled' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_filled (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app3-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app3-adcel',16);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app4-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app4-adcel',17);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app6-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app6-adcel',18);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app8-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app8-adcel',19);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app9-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app9-adcel',20);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app12-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app12-adcel',27);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app13-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app13-adcel',28);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app14-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app14-adcel',29);
	
ELSIF p_function_name='fn_build_ad_response_fact_stats_01_app015-adcel' THEN

	PERFORM staging.fn_build_ad_response_fact_stats_01(v_rec.start_date_sk,v_rec.process_id,v_process_status,'app015-adcel',81);

END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_cumulative_ad_response(%)',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
	RAISE NOTICE 'FAILED: % fn_refresh_daily_cumulative_ad_response(%); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_refresh_daily_cumulative_ad_response',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_cumulative_ad_response(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_event_tracker_reports(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_event_tracker_reports(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
/*
||
|| Function Name: fn_refresh_daily_event_tracker_reports(text)
||
|| Author: Tho HOANG
||
|| Date: 2011-11-23
||
|| Description: 
||     Automation called daily function for data loading when daily 3rd network performance process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE

v_process_status	control.process.process_status%TYPE;
v_rec				RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_event_tracker_reports(%)',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.min_data_file_id,
	a.max_data_file_id,
	a.process_status INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_event_tracker_reports($1)'
  AND c.concurrent_trans_name=p_function_name
  AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=v_rec.process_status;
	
IF p_function_name='fn_build_daily_event_stats' THEN

	PERFORM staging.fn_build_daily_event_stats (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_event_stats_by_hour' THEN

	PERFORM staging.fn_build_daily_event_stats_by_hour (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_event_download' THEN

	PERFORM staging.fn_build_daily_event_download (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_event_dma' THEN

	PERFORM staging.fn_build_daily_event_dma (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_event_x_value' THEN

	PERFORM staging.fn_build_daily_event_x_value (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_event_distance' THEN

	PERFORM staging.fn_build_daily_event_distance (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_daily_event_stats_adnet' THEN

	PERFORM staging.fn_build_daily_event_stats_adnet (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);

END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_event_tracker_reports(%)',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
	RAISE NOTICE 'FAILED: % fn_refresh_daily_event_tracker_reports(%); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_refresh_daily_event_tracker_reports',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_event_tracker_reports(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_load(integer, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_load(p_data_file_config_id integer, p_app_server text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_refresh_wap_site_access_load
||
|| This routine coordinates the entire ETL process for page view fact files.  
|| It's called via a cron job.  It only runs a single step at a time, then exits 
|| (with subsequent jobs picking up where the previous left off) due to the size 
|| of the data sets.  At some point, I'll probably make this a perl script to 
|| eliminate wait between jobs.
||
|| $Id: fn_refresh_page_view_fact_data.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
		
 v_file_status        staging.data_file.file_status%TYPE;
 rec 		      RECORD;
 function_call	      TEXT;
 v_current_up_to      TIMESTAMP;
 v_dim_table_check    SMALLINT;
 v_staging_table_name TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_load(%, ''%'')',timeofday(),p_data_file_config_id,p_app_server;

/* Check to make sure dim tables are loaded; store date "freshness" to compare
to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM dw.data_current_up_to_date
WHERE table_name IN (
'content_category_dim',
'display_block_dim',
'portal_dim',
'partner_dim',
'partner_module_dim',
'portal_host_dim');

IF v_dim_table_check < 6 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
	a.file_name,
	a.server_name,
	a.file_timestamp,
	a.file_status,
	b.data_file_target_table,
        b.data_file_type,
        b.unzip,
        b.transform_on_import,
        b.import_dir,
        b.success_dir,
        b.error_dir,
        b.data_file_column_list,
        b.data_file_load_options,
        b.transform_script_name,
	b.data_file_process_function INTO rec
FROM data_file a
INNER JOIN data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.data_file_config_id = p_data_file_config_id
AND a.file_status NOT IN ('SU','EF') -- skip successfully loaded files, file load errors
AND a.file_timestamp <= v_current_up_to -- ensure that max log date <= dimension refresh date
AND a.file_name LIKE '%' || p_app_server::text || '%'
AND b.data_file_process_wrapper_name='fn_refresh_daily_load(%,%)'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

v_staging_table_name := '';

IF p_data_file_config_id = 1 THEN
	IF p_app_server = 'app3-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app3';
	ELSIF p_app_server = 'app4-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app4';
	ELSIF p_app_server = 'app6-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app6';
	ELSIF p_app_server = 'app8-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app8';
	ELSIF p_app_server = 'app9-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app9';
	ELSIF p_app_server = 'app10-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app10';
	ELSIF p_app_server = 'app11-tomcat' THEN
		v_staging_table_name := 'stg_wap_site_access_log_app11';
	END IF;
ELSIF p_data_file_config_id = 8 THEN
	IF p_app_server = 'app3-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app3';
	ELSIF p_app_server = 'app4-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app4';
	ELSIF p_app_server = 'app6-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app6';
	ELSIF p_app_server = 'app8-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app8';
	ELSIF p_app_server = 'app9-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app9';
	ELSIF p_app_server = 'app10-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app10';
	ELSIF p_app_server = 'app11-tomcat' THEN
		v_staging_table_name := 'stg_content_api_pageview_log_app11';
	END IF;
END IF;

IF v_staging_table_name = '' THEN
RETURN;
END IF;

IF v_file_status='ER' THEN
/* extract the file */
SELECT * INTO v_file_status FROM fn_extract_file (
	rec.data_file_id,
	rec.file_name,
	rec.server_name,
	v_file_status,
	rec.data_file_target_table,
        rec.data_file_type,
        rec.unzip,
        rec.transform_on_import,
        rec.import_dir,
        rec.success_dir,
        rec.error_dir,
        rec.data_file_column_list,
        rec.data_file_load_options,
        rec.transform_script_name);

ELSIF (v_file_status LIKE 'T%' OR v_file_status LIKE 'L%') THEN
/* build the function call */
/* after the file is loaded, the transform and load processes will depend on the
file type.  We're going to replace the tokens in the data_file_process_function
string with the following values:

function: fn_daily_load_main($1,$2)
$1 = rec.data_file_id
$2 = v_file_status
$3 = v_staging_table_name
*/

function_call := 'SELECT * FROM ' || rec.data_file_process_function;
function_call := REPLACE(function_call,'$1',CAST (rec.data_file_id AS TEXT));
function_call := REPLACE(function_call,'$2','''' || v_file_status || '''');
function_call := REPLACE(function_call,'$3','''' || v_staging_table_name || '''');

EXECUTE function_call;
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_load(%, ''%'')',timeofday(),p_data_file_config_id,p_app_server;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_daily_load(%, ''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_config_id,p_app_server,SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_refresh_daily_load',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_load(p_data_file_config_id integer, p_app_server text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_daily_process_status(); Type: FUNCTION; Schema: staging; Owner: dataman
--

CREATE FUNCTION fn_refresh_daily_process_status() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
|| 2012-03-07 By Chinh Nguyen
|| This function update status of daily processes.
|| 
||
*/

DECLARE
	

BEGIN

UPDATE control.daily_process_status a
SET process_status=b.process_status,process_id_checking=b.process_id_check,note_status=b.note_status
FROM
(
SELECT a.process_id, a.full_date, a.group_process_name, a.process_config_id, b.process_config_description,
       (case when c.dt_process_completed is not null then 'Completed' when c.dt_process_queued is not null then 'Processing' else 'Waiting' end) as process_status
       ,a.register_time,c.dt_process_queued as start_date, c.dt_process_completed as end_Date
       ,(case when c.process_id is null then 0 else c.process_id end) as process_id_check
       ,(case when c.dt_process_completed is not null AND c.dt_process_completed::time > a.e_completion_time then 'Completed late!'
		when c.dt_process_completed is not null AND c.dt_process_completed::time <= a.e_completion_time then ''
		when c.dt_process_queued is not null AND c.dt_process_queued::time > a.e_star_time then 'Started late!' 
		when c.dt_process_queued is not null AND c.dt_process_queued::time <= a.e_star_time then '' 
		else '' 
		end
       ) as note_status
  FROM control.daily_process_status a
  INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
  LEFT JOIN control.process c ON c.process_config_id=a.process_config_id AND c.dt_process_queued::date=a.full_date
)b
WHERE a.full_date=b.full_date AND a.process_status <> 'Completed' AND a.process_config_id=b.process_config_id;
--WHERE a.full_date=b.full_date AND a.process_config_id=b.process_config_id;


RAISE DEBUG 'ENDING: % fn_refresh_dim_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_dim_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_refresh_dim_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_daily_process_status() OWNER TO dataman;

--
-- Name: fn_refresh_daily_resolve_user_agent(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_daily_resolve_user_agent(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
/*
||
|| Function Name: fn_refresh_daily_resolve_user_agent(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-12-06
||
|| Description: 
||     Automation called daily function for data loading when daily ad response process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE

v_process_status	control.process.process_status%TYPE;
v_rec				RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_daily_resolve_user_agent(%)',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.min_data_file_id,
	a.max_data_file_id,
	a.process_status INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
  AND b.process_wrapper_name='fn_refresh_daily_resolve_user_agent($1)'
  AND c.concurrent_trans_name=p_function_name
  AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=v_rec.process_status;
	
IF p_function_name='fn_build_resolve_ad_response_fact_user_agent' THEN

	PERFORM staging.fn_build_resolve_ad_response_fact_user_agent (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);
	
ELSIF p_function_name='fn_build_resolve_event_tracker_fact_user_agent' THEN

	PERFORM staging.fn_build_resolve_event_tracker_fact_user_agent (
		v_rec.start_date_sk,
		v_rec.process_id,
		v_process_status
	);

END IF;

RAISE DEBUG 'ENDING: % fn_refresh_daily_resolve_user_agent(%)',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
	RAISE NOTICE 'FAILED: % fn_refresh_daily_resolve_user_agent(%); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_refresh_daily_resolve_user_agent',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_daily_resolve_user_agent(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_dim_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_dim_data() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_refresh_dim_data()
||
|| This routine handles the entire ETL process for all dimension tables.  
|| It's called via a cron job.  It runs in a single transaction, and 
|| would not be appropriate for large data sets.
||
|| $Id: fn_refresh_dim_data.sql 100 2008-09-23 00:45:04Z abyfield $
||
*/

DECLARE
/* we'll collect all awaiting dim files into a cursor and process everybody
 at once.  Note that the fact files are too big for this; transactions would
be too long. */
 process_cursor	CURSOR FOR 
	SELECT a.data_file_id,
        	a.file_name,
        	a.server_name,
        	a.file_timestamp,
        	a.file_status,
        	b.data_file_target_table,
        	b.data_file_type,
        	b.unzip,
        	b.transform_on_import,
        	b.import_dir,
        	b.success_dir,
        	b.error_dir,
        	b.data_file_column_list,
        	b.data_file_load_options,
        	b.transform_script_name,
        	b.data_file_process_function 
	FROM control.data_file a
	INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
	WHERE a.file_status NOT IN ('SU','EF','EP') -- skip successfully loaded files, file load errors
	AND b.data_file_process_wrapper_name='fn_refresh_dim_data()'
	ORDER BY b.process_precedence,a.data_file_id
	FOR UPDATE OF a NOWAIT;
		
 v_file_status control.data_file.file_status%TYPE;
 rec 		RECORD;
 function_call	TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_dim_data()',timeofday();

 OPEN process_cursor;

 LOOP
	FETCH process_cursor INTO rec;
	EXIT WHEN NOT FOUND;

	v_file_status:=rec.file_status;
	
	IF v_file_status='ER' THEN
	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_file (
        	rec.data_file_id,
        	rec.file_name,
        	rec.server_name,
        	v_file_status,
        	rec.data_file_target_table,
        	rec.data_file_type,
        	rec.unzip,
        	rec.transform_on_import,
        	rec.import_dir,
        	rec.success_dir,
        	rec.error_dir,
        	rec.data_file_column_list,
        	rec.data_file_load_options,
        	rec.transform_script_name);
	END IF;

	IF v_file_status LIKE 'T%' OR v_file_status LIKE 'L%' THEN
	/* build the function call */
	/* after the file is loaded, the transform and load processes will depend on the
	file type.  We're going to replace the tokens in the data_file_process_function
	string with the following values:

	$1 = rec.data_file_id
	$2 = v_file_status
	$3 = rec.file_timestamp
	*/
	
	function_call := 'SELECT * FROM ' || rec.data_file_process_function;
	function_call := REPLACE(function_call,'$1',CAST (rec.data_file_id AS TEXT));
	function_call := REPLACE(function_call,'$2','''' || v_file_status || '''');
	function_call := REPLACE(function_call,'$3','''' || CAST (rec.file_timestamp AS TEXT) || '''');

	EXECUTE function_call;
	END IF;

 END LOOP; 

 CLOSE process_cursor;

RAISE DEBUG 'ENDING: % fn_refresh_dim_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_dim_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	--PERFORM fn_email_failure_notification('fn_refresh_dim_data',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_dim_data() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_double_click_fact_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_double_click_fact_data() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_double_click_fact_data()
||
|| Author: Tho HOANG
||
|| Date: 2011-03-03
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for double click fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_double_click_fact_data()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'adm_advertiser_dim'
,'adm_creative_dim'
,'adm_flight_dim'
,'adm_order_dim'
,'adm_organization_dim'
,'adm_placement_dim'
,'adm_publisher_dim'
,'adm_website_dim'
,'dc_order_dim'
,'dc_site_dim'
);

IF v_dim_table_check < 10 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function,
 b.data_file_config_id INTO rec
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status IN ('ER') -- ready for extract
AND a.file_timestamp::date < v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_double_click_fact_data()'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RAISE NOTICE 'File Not Found';
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;

IF v_file_status='ER' THEN

	v_cmd := 'SELECT COUNT(*) FROM staging.' || rec.data_file_target_table;
	EXECUTE v_cmd INTO STRICT v_count;
	IF (v_count > 0) THEN
		RAISE NOTICE 'NEED TRUNCATE DATA - ''%''',rec.data_file_target_table;
		RETURN;
	END IF;

	/* change status of file is extracting */
	v_cmd := 'UPDATE control.data_file SET file_status=''ET'' WHERE data_file_id=' || rec.data_file_id::text;
	EXECUTE v_cmd;

	RAISE NOTICE 'STARTING - ''%''',rec.file_name;

	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_adcel_file (
		rec.data_file_id,
		rec.file_name,
		rec.server_name,
		v_file_status,
		rec.data_file_target_table,
		rec.data_file_type,
		rec.unzip,
		rec.transform_on_import,
		rec.import_dir,
		rec.success_dir,
		rec.error_dir,
		rec.data_file_column_list,
		rec.data_file_load_options,
		rec.transform_script_name
	);

	RAISE NOTICE 'EXTRACTING DONE WITH STATUS - ''%''',v_file_status;

	/* transform the file */
	IF v_file_status='TR' THEN
		IF rec.data_file_config_id = 24 THEN
			/* site_campaign_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_site_campaign_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 25 THEN
			/* site_device_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_site_device_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 38 THEN
			/* site_order_forecast_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_site_order_forecast_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 47 THEN
			/* fact_ga_channel */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_ga_channel_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		ELSIF rec.data_file_config_id = 48 THEN
			/* fact_ad_channel_site */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_ad_channel_site_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				rec.data_file_config_id
			);
		END IF;

	END IF;
	
ELSIF v_file_status='ET' THEN
	
	RAISE NOTICE '% - EXTRACTING - ''%''',timeofday(),rec.file_name;
	-- END IF v_file_status='ET'
	
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_double_click_fact_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_double_click_fact_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_load_adcel_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_double_click_fact_data() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_event_tracker_fact_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_event_tracker_fact_data() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_event_tracker_fact_data()
||
|| Author: Tho HOANG
||
|| Date: 2011-11-02
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for event tracker fact files.  
||     It's called via a cron job.
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_event_tracker_fact_data()',timeofday();

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'partner_dim'
);

IF v_dim_table_check < 1 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from control.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function,
 b.data_file_config_id INTO rec
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status IN ('ER') -- ready for extract
AND a.file_timestamp::date < v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_event_tracker_fact_data()'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RAISE NOTICE 'File Not Found';
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;

IF v_file_status='ER' THEN

	v_cmd := 'SELECT COUNT(*) FROM staging.' || rec.data_file_target_table;
	EXECUTE v_cmd INTO STRICT v_count;
	IF (v_count > 0) THEN
		RAISE NOTICE 'NEED TRUNCATE DATA - ''%''',rec.data_file_target_table;
		RETURN;
	END IF;

	/* change status of file is extracting */
	v_cmd := 'UPDATE control.data_file SET file_status=''ET'' WHERE data_file_id=' || rec.data_file_id::text;
	EXECUTE v_cmd;

	RAISE NOTICE 'STARTING - ''%''',rec.file_name;

	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_adcel_file (
		rec.data_file_id,
		rec.file_name,
		rec.server_name,
		v_file_status,
		rec.data_file_target_table,
		rec.data_file_type,
		rec.unzip,
		rec.transform_on_import,
		rec.import_dir,
		rec.success_dir,
		rec.error_dir,
		rec.data_file_column_list,
		rec.data_file_load_options,
		rec.transform_script_name
	);

	RAISE NOTICE 'EXTRACTING DONE WITH STATUS - ''%''',v_file_status;

	/* transform the file */
	IF v_file_status='TR' THEN
		IF rec.data_file_config_id = 45 THEN
			/* event_tracker_fact */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_event_tracker_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				45
			);
		END IF;

	END IF;
	
ELSIF v_file_status='ET' THEN
	
	RAISE NOTICE '% - EXTRACTING - ''%''',timeofday(),rec.file_name;
	-- END IF v_file_status='ET'
	
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_event_tracker_fact_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_event_tracker_fact_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_event_tracker_fact_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_event_tracker_fact_data() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_load_adcel_data(text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_load_adcel_data(p_app_server text, p_file_config_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_load_adcel_data(text, integer)
||
|| Author: Tho HOANG
||
|| Date: 2011-03-03
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for page view fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||     - IN  p_app_server        -- text, Adcel application server
||           LOV (app3-adcel,app4-adcel,app6-adcel,app8-adcel,app9-adcel)
||     - IN  p_file_config_id    -- integer, data file configuration id
||           LOV (11,12,13,14,15,16,17,18,19,20)
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_load_adcel_data(''%'',%)',timeofday(),p_app_server,p_file_config_id;

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'content_category_dim',
 'display_block_dim',
 'portal_dim',
 'partner_dim',
 'partner_module_dim',
 'portal_host_dim',
 'ad_network_dim'
);

IF v_dim_table_check < 7 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
 a.file_name,
 a.server_name,
 a.file_timestamp,
 a.file_status,
 b.data_file_target_table,
 b.data_file_type,
 b.unzip,
 b.transform_on_import,
 b.import_dir,
 b.success_dir,
 b.error_dir,
 b.data_file_column_list,
 b.data_file_load_options,
 b.transform_script_name,
 b.data_file_process_function INTO rec
FROM control.data_file a
INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status IN ('ER') -- ready for extract
AND a.data_file_config_id = p_file_config_id
AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
AND a.file_name LIKE '%' || p_app_server::text || '%'
AND b.data_file_process_wrapper_name='fn_refresh_load_adcel_data(%,%)'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RAISE NOTICE 'File Not Found';
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;

IF v_file_status='ER' THEN

	v_cmd := 'SELECT COUNT(*) FROM staging.' || rec.data_file_target_table;
	EXECUTE v_cmd INTO STRICT v_count;
	IF (v_count > 0) THEN
		RAISE NOTICE 'NEED TRUNCATE DATA - ''%''',p_app_server;
		RETURN;
	END IF;

	/* change status of file is extracting */
	v_cmd := 'UPDATE control.data_file SET file_status=''ET'' WHERE data_file_id=' || rec.data_file_id::text;
	EXECUTE v_cmd;

	RAISE NOTICE 'STARTING - ''%''',rec.file_name;

	/* extract the file */
	SELECT * INTO v_file_status FROM staging.fn_extract_adcel_file (
		rec.data_file_id,
		rec.file_name,
		rec.server_name,
		v_file_status,
		rec.data_file_target_table,
		rec.data_file_type,
		rec.unzip,
		rec.transform_on_import,
		rec.import_dir,
		rec.success_dir,
		rec.error_dir,
		rec.data_file_column_list,
		rec.data_file_load_options,
		rec.transform_script_name
	);

	RAISE NOTICE 'EXTRACTING DONE WITH STATUS - ''%''',v_file_status;

	/* transform the file */
	IF v_file_status='TR' THEN
		IF (p_file_config_id >= 16 AND p_file_config_id <= 20) 
		OR (p_file_config_id >= 27 AND p_file_config_id <= 29) 
		OR (p_file_config_id >= 81 AND p_file_config_id <= 90) THEN
			/* ad-response*/
			SELECT * INTO v_file_status FROM staging.fn_daily_load_ad_response_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				p_app_server,
				p_file_config_id
			);
		ELSIF p_file_config_id >= 11 AND p_file_config_id <= 15 THEN
			/* ad-request - adcel-site-access */
			SELECT * INTO v_file_status FROM staging.fn_daily_load_ad_request_transform (
				rec.data_file_id,
				v_file_status,
				rec.data_file_target_table,
				p_app_server,
				p_file_config_id
			);
		END IF;

	END IF;
	
ELSIF v_file_status='ET' THEN
	
	RAISE NOTICE '% - EXTRACTING - ''%''',timeofday(),rec.file_name;
	-- END IF v_file_status='ET'
	
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_load_adcel_data(''%'',%)',timeofday(),p_app_server,p_file_config_id;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_load_adcel_data(''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_load_adcel_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_load_adcel_data(p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_monthly_3rd_network_performance_reports(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_monthly_3rd_network_performance_reports(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: fn_refresh_monthly_3rd_network_performance_reports(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-03-31
||
|| Description: 
||     Automation called daily function for data loading when weekly/monthly ad response process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE
 v_rec 		RECORD;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_refresh_monthly_3rd_network_performance_reports(''%'')',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.process_status
INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_3rd_network_performance_reports($1)'
AND c.concurrent_trans_name=p_function_name
AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

RAISE NOTICE '%',p_function_name;
	
IF p_function_name='fn_build_monthly_jt_performance' THEN

	PERFORM staging.fn_build_monthly_jt_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_ga_performance' THEN

	PERFORM staging.fn_build_monthly_ga_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_mm_performance' THEN

	PERFORM staging.fn_build_monthly_mm_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_mx_performance' THEN

	PERFORM staging.fn_build_monthly_mx_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_wh_performance' THEN

	PERFORM staging.fn_build_monthly_wh_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_sp_performance' THEN

	PERFORM staging.fn_build_monthly_sp_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_sp_blue_performance' THEN

	PERFORM staging.fn_build_monthly_sp_blue_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_yp_performance' THEN

	PERFORM staging.fn_build_monthly_yp_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_yp_sb_performance' THEN

	PERFORM staging.fn_build_monthly_yp_sb_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_it_performance' THEN

	PERFORM staging.fn_build_monthly_it_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_cg_performance' THEN

	PERFORM staging.fn_build_monthly_cg_performance (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_adsense_dbclk_channel' THEN

	PERFORM staging.fn_build_monthly_adsense_dbclk_channel (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_adnetwork_summary' THEN

	PERFORM staging.fn_build_monthly_adnetwork_summary (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_adnetwork_summary_by_date' THEN

	PERFORM staging.fn_build_monthly_adnetwork_summary_by_date (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

END IF;

RAISE DEBUG 'ENDING: % staging.fn_refresh_monthly_3rd_network_performance_reports(''%'')',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % staging.fn_refresh_monthly_3rd_network_performance_reports(''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
		--PERFORM fn_email_failure_notification('staging.fn_refresh_monthly_3rd_network_performance_reports',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_monthly_3rd_network_performance_reports(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_monthly_ad_response_reports(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_monthly_ad_response_reports(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: fn_refresh_monthly_ad_response_reports(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-03-31
||
|| Description: 
||     Automation called daily function for data loading when weekly/monthly ad response process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE
 v_rec 		RECORD;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_refresh_monthly_ad_response_reports(''%'')',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.process_status
INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_ad_response_reports($1)'
AND c.concurrent_trans_name=p_function_name
AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

RAISE NOTICE '%',p_function_name;
	
IF p_function_name='fn_build_monthly_ad_serving_stats' THEN

	PERFORM staging.fn_build_monthly_ad_serving_stats (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_ad_serving_stats_by_date' THEN

	PERFORM staging.fn_build_monthly_ad_serving_stats_by_date (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_ad_serving_stats_by_device' THEN

	PERFORM staging.fn_build_monthly_ad_serving_stats_by_device (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_ad_serving_stats_by_content_category' THEN

	PERFORM staging.fn_build_monthly_ad_serving_stats_by_content_category (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_forecast' THEN

	PERFORM staging.fn_build_monthly_forecast (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_agg_site' THEN

	PERFORM staging.fn_build_monthly_agg_site (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_unfilled_stats' THEN

	PERFORM staging.fn_build_monthly_unfilled_stats (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_unfilled_stats_by_content_category' THEN

	PERFORM staging.fn_build_monthly_unfilled_stats_by_content_category (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_unfilled_stats_by_date' THEN

	PERFORM staging.fn_build_monthly_unfilled_stats_by_date (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_unfilled_stats_by_device' THEN

	PERFORM staging.fn_build_monthly_unfilled_stats_by_device (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_unfilled_stats_by_dma' THEN

	PERFORM staging.fn_build_monthly_unfilled_stats_by_dma (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

END IF;

RAISE DEBUG 'ENDING: % staging.fn_refresh_monthly_ad_response_reports(''%'')',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % staging.fn_refresh_monthly_ad_response_reports(''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
		--PERFORM fn_email_failure_notification('staging.fn_refresh_monthly_ad_response_reports',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_monthly_ad_response_reports(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_monthly_event_tracker_reports(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_monthly_event_tracker_reports(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| Function Name: fn_refresh_monthly_event_tracker_reports(text)
||
|| Author: Tho HOANG
||
|| Date: 2010-03-31
||
|| Description: 
||     Automation called monhly function for data loading when weekly/monthly event tracker process available
||
|| Parameters: 
||     - IN  p_function_name        -- text
||        function name
||
*/

DECLARE
 v_rec 		RECORD;

BEGIN

RAISE DEBUG 'STARTING: % staging.fn_refresh_monthly_event_tracker_reports(''%'')',timeofday(),p_function_name;

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS start_date_sk,
	a.max_partition_key AS end_date_sk,
	a.process_status
INTO v_rec
FROM control.process a
INNER JOIN control.process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN control.process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_event_tracker_reports($1)'
AND c.concurrent_trans_name=p_function_name
AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

RAISE NOTICE '%',p_function_name;
	
IF p_function_name='fn_build_monthly_event_stats' THEN

	PERFORM staging.fn_build_monthly_event_stats (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_event_stats_by_hour' THEN

	PERFORM staging.fn_build_monthly_event_stats_by_hour (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

ELSIF p_function_name='fn_build_monthly_event_stats_by_date' THEN

	PERFORM staging.fn_build_monthly_event_stats_by_date (
		v_rec.start_date_sk,
		v_rec.end_date_sk,
		v_rec.process_id,
		v_rec.process_status,
		v_rec.process_config_id
    );

END IF;

RAISE DEBUG 'ENDING: % staging.fn_refresh_monthly_event_tracker_reports(''%'')',timeofday(),p_function_name;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % staging.fn_refresh_monthly_event_tracker_reports(''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_function_name,SQLSTATE,SQLERRM;
		--PERFORM fn_email_failure_notification('staging.fn_refresh_monthly_event_tracker_reports',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_monthly_event_tracker_reports(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_monthly_partner_report(text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_monthly_partner_report(p_function_name text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_refresh_monthly_partner_report
||
|| $Id$
||
*/

DECLARE
 v_process_status data_file.file_status%TYPE;
 rec 		RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_monthly_partner_report()',timeofday();

SELECT
	a.process_id,
	a.process_config_id,
	a.min_partition_key AS date_sk_start,
	a.max_partition_key AS date_sk_end,
	a.max_data_file_id,
	a.process_status INTO rec
FROM process a
INNER JOIN process_configuration b ON a.process_config_id=b.process_config_id
INNER JOIN process_concurrent_trans c ON a.process_id=c.process_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_partner_report($1)'
AND c.concurrent_trans_name=p_function_name
AND c.is_complete = false
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF c NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=rec.process_status;
	
IF p_function_name='fn_build_monthly_agg_partner_act' THEN

	PERFORM fn_build_monthly_agg_partner_act (
       		rec.date_sk_start,
       		rec.date_sk_end,
       		rec.max_data_file_id,
       		rec.process_id,
       		v_process_status,
		rec.process_config_id
       		);

ELSIF p_function_name='fn_build_monthly_agg_partner_act_all' THEN

        PERFORM fn_build_monthly_agg_partner_act_all (
                rec.date_sk_start,
                rec.date_sk_end,
                rec.max_data_file_id,
                rec.process_id,
                v_process_status,
                rec.process_config_id
                );

ELSIF p_function_name='fn_build_monthly_agg_group_act_all' THEN

        PERFORM fn_build_monthly_agg_group_act_all (
                rec.date_sk_start,
                rec.date_sk_end,
                rec.max_data_file_id,
                rec.process_id,
                v_process_status,
                rec.process_config_id
                );

ELSIF p_function_name='fn_build_monthly_agg_group_portal_act_all' THEN

        PERFORM fn_build_monthly_agg_group_portal_act_all (
                rec.date_sk_start,
                rec.date_sk_end,
                rec.max_data_file_id,
                rec.process_id,
                v_process_status,
                rec.process_config_id
                );

ELSIF p_function_name='fn_build_monthly_agg_network_act_all' THEN

        PERFORM fn_build_monthly_agg_network_act_all (
                rec.date_sk_start,
                rec.date_sk_end,
                rec.max_data_file_id,
                rec.process_id,
                v_process_status,
                rec.process_config_id
                );

ELSIF p_function_name='fn_build_monthly_agg_portal_act_all' THEN

        PERFORM fn_build_monthly_agg_portal_act_all (
                rec.date_sk_start,
                rec.date_sk_end,
                rec.max_data_file_id,
                rec.process_id,
                v_process_status,
                rec.process_config_id
                );

END IF;

RAISE DEBUG 'ENDING: % fn_refresh_monthly_partner_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_monthly_partner_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_refresh_monthly_partner_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_monthly_partner_report(p_function_name text) OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_monthly_site_traffic_report(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_monthly_site_traffic_report() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_refresh_monthly_site_traffic_report
||
|| $Id$
||
*/

DECLARE
 v_process_status process.process_status%TYPE;
 rec 		RECORD;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_monthly_site_traffic_report()',timeofday();

SELECT
	a.process_id,
	a.min_partition_key AS date_sk_start,
	a.max_partition_key AS date_sk_end,
	a.max_data_file_id,
	a.process_status INTO rec
FROM process a
INNER JOIN process_configuration b ON a.process_config_id=b.process_config_id
WHERE a.process_status <> 'SU'
AND b.process_wrapper_name='fn_refresh_monthly_site_traffic_report()'
ORDER BY b.process_precedence,a.process_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;

v_process_status:=rec.process_status;
	
PERFORM fn_build_monthly_agg_site_traffic (
       		rec.date_sk_start,
       		rec.date_sk_end,
       		rec.max_data_file_id,
       		rec.process_id,
       		v_process_status
       		);

RAISE DEBUG 'ENDING: % fn_refresh_monthly_site_traffic_report()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_monthly_site_traffic_report(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
	PERFORM fn_email_failure_notification('fn_refresh_monthly_site_traffic_report',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_monthly_site_traffic_report() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_page_view_fact_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_page_view_fact_data() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_refresh_page_view_fact_data
||
|| This routine coordinates the entire ETL process for page view fact files.  
|| It's called via a cron job.  It only runs a single step at a time, then exits 
|| (with subsequent jobs picking up where the previous left off) due to the size 
|| of the data sets.  At some point, I'll probably make this a perl script to 
|| eliminate wait between jobs.
||
|| $Id: fn_refresh_page_view_fact_data.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
		
 v_file_status data_file.file_status%TYPE;
 rec 		RECORD;
 function_call	TEXT;
 v_current_up_to TIMESTAMP;
 v_dim_table_check SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_page_view_fact_data()',timeofday();

/* Check to make sure dim tables are loaded; store date "freshness" to compare
to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM dw.data_current_up_to_date
WHERE table_name IN (
'content_category_dim',
'display_block_dim',
'portal_dim',
'partner_dim',
'partner_module_dim',
'portal_host_dim');

IF v_dim_table_check < 6 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
SELECT a.data_file_id,
	a.file_name,
	a.server_name,
	a.file_timestamp,
	a.file_status,
	b.data_file_target_table,
        b.data_file_type,
        b.unzip,
        b.transform_on_import,
        b.import_dir,
        b.success_dir,
        b.error_dir,
        b.data_file_column_list,
        b.data_file_load_options,
        b.transform_script_name,
	b.data_file_process_function INTO rec
FROM data_file a
INNER JOIN data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
WHERE a.file_status NOT IN ('SU','EF') -- skip successfully loaded files, file load errors
AND a.file_timestamp <= v_current_up_to -- ensure that max log date <= dimension refresh date
AND b.data_file_process_wrapper_name='fn_refresh_page_view_fact_data()'
ORDER BY b.process_precedence,a.data_file_id
LIMIT 1
FOR UPDATE OF a NOWAIT;

IF NOT FOUND THEN
	RETURN;
END IF;
		
v_file_status:=rec.file_status;

IF v_file_status='ER' THEN
/* extract the file */
SELECT * INTO v_file_status FROM fn_extract_file (
	rec.data_file_id,
	rec.file_name,
	rec.server_name,
	v_file_status,
	rec.data_file_target_table,
        rec.data_file_type,
        rec.unzip,
        rec.transform_on_import,
        rec.import_dir,
        rec.success_dir,
        rec.error_dir,
        rec.data_file_column_list,
        rec.data_file_load_options,
        rec.transform_script_name);

ELSIF (v_file_status LIKE 'T%' OR v_file_status LIKE 'L%') THEN
/* build the function call */
/* after the file is loaded, the transform and load processes will depend on the
file type.  We're going to replace the tokens in the data_file_process_function
string with the following values:

$1 = rec.data_file_id
$2 = v_file_status
$3 = rec.file_timestamp
*/

function_call := 'SELECT * FROM ' || rec.data_file_process_function;
function_call := REPLACE(function_call,'$1',CAST (rec.data_file_id AS TEXT));
function_call := REPLACE(function_call,'$2','''' || v_file_status || '''');
function_call := REPLACE(function_call,'$3','''' || CAST (rec.file_timestamp AS TEXT) || '''');

EXECUTE function_call;
END IF;

RAISE DEBUG 'ENDING: % fn_refresh_page_view_fact_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_page_view_fact_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_page_view_fact_data',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_refresh_page_view_fact_data() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_pro_audit_run_xaction(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_pro_audit_run_xaction() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| fn_refresh_pro_audit_run_xaction
||
|| Filter out rows from control.pro_audit with job_id = org.pentaho.platform.web.servlet.ViewAction
||

SELECT * FROM staging.fn_refresh_pro_audit_run_xaction();
*/

DECLARE

 v_current_up_to timestamp without time zone;
 v_message_name character varying;
 v_duration_instance_end numeric(7,2);
 v_completed boolean;
 v_row_update int;
 rec            RECORD;
BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_pro_audit_run_xaction()',timeofday();
v_row_update:=0;
/*Load the last time partition*/
SELECT max(audit_time) INTO v_current_up_to FROM control.pro_audit_run_xaction;
IF v_current_up_to IS NULL THEN
SELECT min(audit_time) INTO v_current_up_to FROM control.pro_audit;
END IF;

INSERT INTO control.pro_audit_run_xaction(job_id, inst_id, obj_id, obj_type, actor, message_type, message_name, message_text_value, message_num_value, duration, audit_time) 
SELECT * FROM control.pro_audit WHERE audit_time>v_current_up_to AND job_id='org.pentaho.platform.web.servlet.ViewAction' AND (message_type='instance_start' OR message_type='instance_end') ORDER BY audit_time LIMIT 500;

/*Update comleted value*/
FOR rec IN SELECT * FROM control.pro_audit_run_xaction WHERE message_type='instance_start' AND completed IS NULL LOOP
v_message_name:=null;
v_duration_instance_end:=null;
SELECT message_name,duration INTO v_message_name ,v_duration_instance_end
FROM control.pro_audit_run_xaction 
WHERE message_type='instance_end' 
AND message_name=rec.message_name 
AND audit_time>v_current_up_to;
IF v_message_name IS NULL THEN
RAISE NOTICE 'Load from pro_audit log ... % ',rec.message_name ;
SELECT message_name,duration INTO v_message_name ,v_duration_instance_end
FROM control.pro_audit 
WHERE message_type='instance_end' 
AND message_name=rec.message_name 
AND audit_time>v_current_up_to;
END IF;

IF v_message_name IS NULL THEN
v_completed:=false;
ELSE 
v_completed:=true;
END IF;

UPDATE control.pro_audit_run_xaction
SET completed=v_completed,
duration_instance_end=v_duration_instance_end
WHERE message_type=rec.message_type
AND message_name=rec.message_name
AND audit_time=rec.audit_time;
v_row_update:=v_row_update+1;
END LOOP;

RAISE NOTICE 'Update % rows',v_row_update;

RAISE DEBUG 'ENDING: % fn_refresh_pro_audit_run_xaction()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_pro_audit_run_xaction(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_pro_audit_run_xaction',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_pro_audit_run_xaction() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_pro_audit_update_dim(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_pro_audit_update_dim() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| fn_refresh_pro_audit_update_dim
||
|| Filter out rows from control.pro_audit with job_id = org.pentaho.platform.web.servlet.ViewAction
||

SELECT * FROM staging.fn_refresh_pro_audit_update_dim();

*/

DECLARE

 v_dim_lastupdate timestamp without time zone;
 rec            RECORD;
BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_pro_audit_update_dim()',timeofday();
v_dim_lastupdate:='2013-08-01'::timestamp without time zone;

SELECT max(dim_lastupdate) INTO v_dim_lastupdate FROM refer.pro_audit_report_name_dim;

IF v_dim_lastupdate IS NULL THEN v_dim_lastupdate:='2013-08-01'::timestamp without time zone; 
END IF;

INSERT INTO refer.pro_audit_report_name_dim(job_id,obj_id,report_name,dim_lastupdate)
SELECT a.job_id,a.obj_id,initcap(replace(replace(replace(a.obj_id,'_',' '),'-',' '),'.xaction','')),b.audit_time 
FROM control.pro_audit a 
LEFT JOIN (SELECT max(audit_time) as audit_time  FROM control.pro_audit ) b ON 1=1 
WHERE a.audit_time>=v_dim_lastupdate
AND a.obj_id NOT IN (SELECT obj_id FROM refer.pro_audit_report_name_dim GROUP BY obj_id)
GROUP BY a.job_id,a.obj_id,b.audit_time;

RAISE DEBUG 'ENDING: % fn_refresh_pro_audit_update_dim()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_pro_audit_update_dim(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_pro_audit_update_dim',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_pro_audit_update_dim() OWNER TO warehouse_dbo;

--
-- Name: fn_refresh_test_array(text, integer); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_refresh_test_array(p_app_server text, p_file_config_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_refresh_test_array(text, integer)
||
|| Author: Tho HOANG
||
|| Date: 2011-03-03
||
|| Location: DW3
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for page view fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||     - IN  p_app_server        -- text, Adcel application server
||           LOV (app3-adcel,app4-adcel,app6-adcel,app8-adcel,app9-adcel)
||     - IN  p_file_config_id    -- integer, data file configuration id
||           LOV (11,12,13,14,15,16,17,18,19,20)
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_file_status     control.data_file.file_status%TYPE;
 rec 		   RECORD;
 function_call	   TEXT;
 v_current_up_to   TIMESTAMP;
 v_dim_table_check SMALLINT;
 v_count           INTEGER;
 v_cmd TEXT;
 l_row integer;
 temp_data_file_id integer;
 l_array integer[];
 count_it integer;
 index_it integer;

BEGIN

RAISE DEBUG 'STARTING: % fn_refresh_test_array(''%'',%)',timeofday(),p_app_server,p_file_config_id;

/* Check to make sure dim tables are loaded;
store date "freshness" to compare to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM control.data_current_up_to_date
WHERE table_name IN (
 'content_category_dim',
 'display_block_dim',
 'portal_dim',
 'partner_dim',
 'partner_module_dim',
 'portal_host_dim',
 'ad_network_dim'
);

IF v_dim_table_check < 7 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;

RAISE NOTICE 'v_current_up_to=%',v_current_up_to;

/* Let's get one file from the queue, run one process, then exit.
We'll also check for data freshness, and ignore records that have dates
past our dim table(s) until the dim gets updated. */
FOR l_row IN
	SELECT a.data_file_id
	FROM control.data_file a
	INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
	WHERE a.file_status IN ('ER') -- ready for extract
	AND a.data_file_config_id = p_file_config_id
	AND a.file_timestamp::date <= v_current_up_to::date -- ensure that max log date <= dimension refresh date
	AND a.file_name LIKE '%' || p_app_server::text || '%'
	AND b.data_file_process_wrapper_name='fn_refresh_load_adcel_data(%,%)'
	ORDER BY b.process_precedence,a.data_file_id
	LIMIT 10
LOOP
 -- Put all data into array
	SELECT array_append(l_array,l_row) INTO l_array;
END LOOP;

count_it := array_upper(l_array, 1);
index_it := 1;
RAISE NOTICE 'Count = %', count_it;
BEGIN
	LOOP
		temp_data_file_id := l_array[index_it];
		RAISE NOTICE 'Data File ID = %', temp_data_file_id;
		-- Starting Extract and Transform Data
			/* Let's get one file from the queue, run one process, then exit.
			We'll also check for data freshness, and ignore records that have dates
			past our dim table(s) until the dim gets updated. */
			SELECT a.data_file_id,
			 a.file_name,
			 a.server_name,
			 a.file_timestamp,
			 a.file_status,
			 b.data_file_target_table,
			 b.data_file_type,
			 b.unzip,
			 b.transform_on_import,
			 b.import_dir,
			 b.success_dir,
			 b.error_dir,
			 b.data_file_column_list,
			 b.data_file_load_options,
			 b.transform_script_name,
			 b.data_file_process_function INTO rec
			FROM control.data_file a
			INNER JOIN control.data_file_configuration b ON a.data_file_config_id=b.data_file_config_id
			WHERE a.data_file_id = temp_data_file_id
			FOR UPDATE OF a NOWAIT;

			IF NOT FOUND THEN
				RAISE NOTICE 'File Not Found';
				RETURN;
			END IF;
					
			v_file_status:=rec.file_status;

			RAISE NOTICE '% - % ''%''',timeofday(),rec.data_file_id,rec.file_name;
		-- Ending Extract and Transform Data
		index_it := index_it + 1;
		EXIT WHEN index_it > count_it;
	END LOOP;
END;

RAISE DEBUG 'ENDING: % fn_refresh_test_array(''%'',%)',timeofday(),p_app_server,p_file_config_id;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_refresh_test_array(''%'',%); SQLSTATE=% SQLERRM=%',timeofday(),p_app_server,p_file_config_id,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_refresh_test_array',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_refresh_test_array(p_app_server text, p_file_config_id integer) OWNER TO warehouse_dbo;

--
-- Name: fn_revenue_share_dim_load(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_revenue_share_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_revenue_share_dim_load
||
|| Load routine for revenue share dimension.
||
|| $Id: fn_revenue_share_dim_load.sql 5343 2012-02-14 21:06:34Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 dt_expire_old timestamp;
 v_table_name TEXT:='revenue_share_dim';

BEGIN

RAISE DEBUG 'STARTING: % fn_revenue_share_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

v_previous_file_status:=v_file_status;
v_file_status:='SU';

/* get previous date */
SELECT current_up_to INTO dt_expire_old
FROM control.data_current_up_to_date
WHERE table_name=v_table_name;

IF NOT FOUND THEN
RAISE EXCEPTION 'No current_up_to date found for %',v_table_name;
END IF;

IF dt_expire_old >= p_file_timestamp THEN
RAISE EXCEPTION 'Old file date of % is later than/equal to new file date of % for table %',dt_expire_old,p_file_timestamp,v_table_name;
END IF;

/* SCD2 */
/* expire changed dim records */
UPDATE refer.revenue_share_dim b
SET dt_expire=dt_expire_old
FROM staging.stg_revenue_share a 
WHERE a.account_id=b.account_id
AND a.data_file_id=p_data_file_id
AND ((a.dml_command in ('I','U')
AND (
a.account_name<>b.account_name OR
a.parent_account<>b.parent_account OR
a.type<>b.type OR
a.group_id::integer<>b.group_id OR
a.partner_id::integer<>b.partner_id OR
a.rev_share_mobileweb_local::float <> b.rev_share_mobileweb_local OR
a.rev_share_mobileweb_mediation::float <> b.rev_share_mobileweb_mediation OR
a.rev_share_mobileweb_national::float <> b.rev_share_mobileweb_national OR
a.rev_share_apps_local::float <> b.rev_share_apps_local OR
a.rev_share_apps_mediation::float <> b.rev_share_apps_mediation OR
a.rev_share_apps_national::float <> b.rev_share_apps_national OR
a.partner_sk <> b.partner_sk
)) OR a.dml_command='D')
AND b.dt_expire='9999-12-31';

/* add new records to replace the ones we just expired */
INSERT INTO refer.revenue_share_dim(
            account_id, account_owner, account_name, parent_account, 
            "type", group_id, partner_id, rev_share_mobileweb_local, rev_share_mobileweb_mediation, 
            rev_share_mobileweb_national, rev_share_apps_local, rev_share_apps_mediation, 
            rev_share_apps_national, auto_generated, suppress, data_file_id, 
            dt_effective, dt_expire, partner_sk, rev_share_mobileweb_local_current, 
            rev_share_mobileweb_mediation_current, rev_share_mobileweb_national_current, 
            rev_share_apps_local_current, rev_share_apps_mediation_current, 
            rev_share_apps_national_current)
SELECT a.account_id,'N/A', a.account_name, a.parent_account,
       a.type,a.group_id::integer,a.partner_id::integer, a.rev_share_mobileweb_local::float, a.rev_share_mobileweb_mediation::float,
       a.rev_share_mobileweb_national::float, a.rev_share_apps_local::float, a.rev_share_apps_mediation::float,
       a.rev_share_apps_national::float, FALSE, FALSE, a.data_file_id, dt_expire_old + interval '1 second','9999-12-31', a.partner_sk,
       0, 0, 0, 0, 0, 0
FROM staging.stg_revenue_share a
INNER JOIN refer.revenue_share_dim b ON a.account_id=b.account_id
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND b.dt_expire=dt_expire_old;

/* add brand new records */
INSERT INTO refer.revenue_share_dim(
            account_id, account_owner, account_name, parent_account, 
            "type", group_id, partner_id, rev_share_mobileweb_local, rev_share_mobileweb_mediation, 
            rev_share_mobileweb_national, rev_share_apps_local, rev_share_apps_mediation, 
            rev_share_apps_national, auto_generated, suppress, data_file_id, 
            dt_effective, dt_expire, partner_sk, rev_share_mobileweb_local_current, 
            rev_share_mobileweb_mediation_current, rev_share_mobileweb_national_current, 
            rev_share_apps_local_current, rev_share_apps_mediation_current, 
            rev_share_apps_national_current)
SELECT a.account_id,'N/A', a.account_name, a.parent_account,
       a.type,a.group_id::integer,a.partner_id::integer, a.rev_share_mobileweb_local::float, a.rev_share_mobileweb_mediation::float,
       a.rev_share_mobileweb_national::float, a.rev_share_apps_local::float, a.rev_share_apps_mediation::float,
       a.rev_share_apps_national::float, FALSE, FALSE, a.data_file_id, dt_expire_old + interval '1 second','9999-12-31', a.partner_sk,
       0, 0, 0, 0, 0, 0
FROM staging.stg_revenue_share a
WHERE a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U')
AND NOT EXISTS (SELECT 1
FROM refer.revenue_share_dim b 
WHERE a.account_id=b.account_id
AND a.data_file_id=p_data_file_id
AND a.dml_command in ('I','U'));
 
/* now set current values */
UPDATE refer.revenue_share_dim b
SET     rev_share_mobileweb_local_current=a.rev_share_mobileweb_local::float,
        rev_share_mobileweb_mediation_current=a.rev_share_mobileweb_mediation::float,
        rev_share_mobileweb_national_current=a.rev_share_mobileweb_national::float,
        rev_share_apps_local_current=a.rev_share_apps_local::float,
        rev_share_apps_mediation_current = a.rev_share_apps_mediation::float,
        rev_share_apps_national_current=a.rev_share_apps_national::float
FROM staging.stg_revenue_share a
WHERE a.account_id=b.account_id
AND a.data_file_id=p_data_file_id
AND (   b.rev_share_mobileweb_local_current<>a.rev_share_mobileweb_local::float OR
        b.rev_share_mobileweb_mediation_current<>a.rev_share_mobileweb_mediation::float OR
        b.rev_share_mobileweb_national_current<>a.rev_share_mobileweb_national::float OR
        b.rev_share_apps_local_current<>a.rev_share_apps_local::float OR
        b.rev_share_apps_mediation_current<>a.rev_share_apps_mediation::float OR
        b.rev_share_apps_national_current<>a.rev_share_apps_national::float)
;

/* update current_up_to date */
UPDATE control.data_current_up_to_date
SET current_up_to=p_file_timestamp,dt_lastchange=clock_timestamp()
WHERE table_name=v_table_name;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_loaded=clock_timestamp()
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_revenue_share_dim_load(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_revenue_share_dim_load(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_revenue_share_dim_load',SQLSTATE,SQLERRM);

RETURN v_file_status;
END;
$_$;


ALTER FUNCTION staging.fn_revenue_share_dim_load(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_revenue_share_dim_main(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_revenue_share_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_revenue_share_dim_main
||
|| Coordinates TRANSFORM and LOAD steps for revenue share dimension.
||
|| $Id: fn_revenue_share_dim_main.sql 88 2012-02-14 00:35:24Z thohoang $
||
*/

DECLARE 
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
BEGIN

RAISE DEBUG 'STARTING: % fn_revenue_share_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

/* transform */
IF v_file_status = 'TR' THEN
  SELECT * INTO v_file_status FROM staging.fn_revenue_share_dim_transform(p_data_file_id,p_file_status);
END IF;

/* load */
IF v_file_status = 'LR' THEN
  SELECT * INTO v_file_status FROM staging.fn_revenue_share_dim_load(p_data_file_id,p_file_status,p_file_timestamp);
END IF;

RAISE DEBUG 'ENDING: % fn_revenue_share_dim_main(%,''%'',''%'')',timeofday(),p_data_file_id,v_file_status,p_file_timestamp;

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_revenue_share_dim_main(%,''%'',''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,p_file_timestamp,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_revenue_share_dim_main',SQLSTATE,SQLERRM);

END;
$_$;


ALTER FUNCTION staging.fn_revenue_share_dim_main(p_data_file_id integer, p_file_status character varying, p_file_timestamp timestamp without time zone) OWNER TO warehouse_dbo;

--
-- Name: fn_revenue_share_dim_transform(integer, character varying); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_revenue_share_dim_transform(p_data_file_id integer, p_file_status character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_portal_dim_transform
||
|| Transform routine for revenue share dimension.
||
|| $Id: fn_portal_dim_transform.sql 4383 2012-02-14 00:35:24Z thohoang $
||
*/

DECLARE
 v_file_status control.data_file.file_status%TYPE:=p_file_status;
 v_previous_file_status control.data_file.file_status%TYPE;
 v_row_count integer;

BEGIN

RAISE DEBUG 'STARTING: % fn_revenue_share_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

v_previous_file_status:=v_file_status;
v_file_status:='LR';


/* Remove NULL values from scd type II dim */
UPDATE staging.stg_revenue_share
SET account_name=COALESCE(rtrim(ltrim(account_name)),'N/A')
   ,parent_account=COALESCE(rtrim(ltrim(parent_account)),'N/A')
   ,"type"=COALESCE(rtrim(ltrim("type")),'N/A')
   ,group_id=COALESCE(rtrim(ltrim(group_id)),'-200')
   ,partner_id=COALESCE(rtrim(ltrim(partner_id)),'-200')
   ,rev_share_mobileweb_local=COALESCE(rtrim(ltrim(rev_share_mobileweb_local)),'0')
   ,rev_share_mobileweb_mediation=COALESCE(rtrim(ltrim(rev_share_mobileweb_mediation)),'0')
   ,rev_share_mobileweb_national=COALESCE(rtrim(ltrim(rev_share_mobileweb_national)),'0')
   ,rev_share_apps_local=COALESCE(rtrim(ltrim(rev_share_apps_local)),'0')
   ,rev_share_apps_mediation=COALESCE(rtrim(ltrim(rev_share_apps_mediation)),'0')
   ,rev_share_apps_national=COALESCE(rtrim(ltrim(rev_share_apps_national)),'0')
WHERE data_file_id=p_data_file_id;

UPDATE staging.stg_revenue_share a
SET partner_sk = b.partner_sk
FROM refer.partner_dim b
WHERE a.data_file_id=p_data_file_id AND CAST(a.partner_id AS INTEGER)=b.partner_id AND b.dt_expire='9999-12-31';

SELECT COUNT(*) INTO v_row_count
FROM   staging.stg_revenue_share
WHERE  data_file_id=p_data_file_id;

/* update data_file table w/ status */
UPDATE control.data_file
SET file_status=v_file_status,dt_process_transformed=clock_timestamp(),staging_load_count=v_row_count
WHERE data_file_id=p_data_file_id;

RAISE DEBUG 'ENDING: % fn_revenue_share_dim_transform(%,''%'')',timeofday(),p_data_file_id,v_file_status;

RETURN v_file_status;

EXCEPTION
 WHEN others THEN
v_file_status:=v_previous_file_status;
        RAISE NOTICE 'FAILED: % fn_revenue_share_dim_transform(%,''%''); SQLSTATE=% SQLERRM=%',timeofday(),p_data_file_id,v_file_status,SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_revenue_share_dim_transform',SQLSTATE,SQLERRM);

RETURN v_file_status;


END;
$_$;


ALTER FUNCTION staging.fn_revenue_share_dim_transform(p_data_file_id integer, p_file_status character varying) OWNER TO warehouse_dbo;

--
-- Name: fn_send_email(text, text, text, text); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_send_email(text, text, text, text) RETURNS void
    LANGUAGE plperlu
    AS $_X$

use Mail::Sendmail;

%mail = ( From => $_[0], To => $_[1], Subject => $_[2], Message => $_[3]);

sendmail(%mail) or die $Mail::Sendmail::error;

return undef;

$_X$;


ALTER FUNCTION staging.fn_send_email(text, text, text, text) OWNER TO warehouse_dbo;

--
-- Name: fn_send_email_on_table_insert(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_send_email_on_table_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

PERFORM staging.fn_send_email(NEW.sender,NEW.recipient,NEW.subject,NEW.message);

UPDATE control.email_notification_log
SET status=1,dt_sent=clock_timestamp()
WHERE email_notification_log_id=NEW.email_notification_log_id;

RETURN NULL;

END;
$$;


ALTER FUNCTION staging.fn_send_email_on_table_insert() OWNER TO warehouse_dbo;

--
-- Name: fn_test_send_mail(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_test_send_mail() RETURNS void
    LANGUAGE plpgsql
    AS $_$

/*
||
|| fn_test_send_mail
||
|| This routine coordinates the entire ETL process for page view fact files.  
|| It's called via a cron job.  It only runs a single step at a time, then exits 
|| (with subsequent jobs picking up where the previous left off) due to the size 
|| of the data sets.  At some point, I'll probably make this a perl script to 
|| eliminate wait between jobs.
||
|| $Id: fn_test_send_mail.sql 88 2008-08-27 00:35:24Z abyfield $
||
*/

DECLARE
		
 v_file_status control.data_file.file_status%TYPE;
 rec 		RECORD;
 function_call	TEXT;
 v_current_up_to TIMESTAMP;
 v_dim_table_check SMALLINT;

BEGIN

RAISE DEBUG 'STARTING: % fn_test_send_mail()',timeofday();

/* Check to make sure dim tables are loaded; store date "freshness" to compare
to log data */
SELECT MIN(current_up_to),COUNT(*) INTO v_current_up_to, v_dim_table_check
FROM dw.data_current_up_to_date
WHERE table_name IN (
'content_category_dim',
'display_block_dim',
'portal_dim',
'partner_dim',
'partner_module_dim',
'portal_host_dim');

IF v_dim_table_check < 6 THEN
 RAISE EXCEPTION 'One or more dimension tables is missing from dw.data_current_up_to_date.';
END IF;


RAISE DEBUG 'ENDING: % fn_test_send_mail()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_test_send_mail(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        PERFORM fn_email_failure_notification('fn_test_send_mail',SQLSTATE,SQLERRM);
 
END;
$_$;


ALTER FUNCTION staging.fn_test_send_mail() OWNER TO warehouse_dbo;

--
-- Name: fn_truncated_gen_adcel_data(); Type: FUNCTION; Schema: staging; Owner: warehouse_dbo
--

CREATE FUNCTION fn_truncated_gen_adcel_data() RETURNS void
    LANGUAGE plpgsql
    AS $$

/*
||
|| Function Name: fn_truncated_gen_adcel_data()
||
|| Author: Tho HOANG
||
|| Date: 2011-03-03
||
|| Description: 
||     This job adds tasks to the process queue, and
||     in the case of jobs that can have concurrent
||     processes, will signal that a process is complete.
||     This routine coordinates the entire ETL process for page view fact files.  
||     It's called via a cron job and runs parallel.
||
|| Parameters: 
||
|| Return: void
||     - Failure case: 0
||         -- Error handling: send notification email
||
*/

DECLARE
	
 v_data_file_id    INTEGER;

BEGIN

RAISE DEBUG 'STARTING: % fn_truncated_gen_adcel_data()',timeofday();

SELECT data_file_id INTO v_data_file_id
FROM staging.gen_adcel_site_access_log_app3 LIMIT 1;

IF NOT FOUND THEN
	RETURN;
END IF;
RAISE NOTICE 'NEED TRUNCATE DATA %',v_data_file_id;
SELECT data_file_id INTO v_data_file_id
FROM staging.data_file
WHERE data_file_id = v_data_file_id
AND file_status = 'SU'
LIMIT 1;

IF NOT FOUND THEN
	RETURN;
END IF;
RAISE NOTICE 'NEED TRUNCATE DATA 1';	
TRUNCATE staging.gen_adcel_site_access_log_app3;

RAISE DEBUG 'ENDING: % fn_truncated_gen_adcel_data()',timeofday();

EXCEPTION
 WHEN others THEN
        RAISE NOTICE 'FAILED: % fn_truncated_gen_adcel_data(); SQLSTATE=% SQLERRM=%',timeofday(),SQLSTATE,SQLERRM;
        --PERFORM fn_email_failure_notification('fn_refresh_load_adcel_data',SQLSTATE,SQLERRM);
 
END;
$$;


ALTER FUNCTION staging.fn_truncated_gen_adcel_data() OWNER TO warehouse_dbo;

SET search_path = adm, pg_catalog;

SET default_tablespace = adm_tablespace;

SET default_with_oids = false;

--
-- Name: ba_daily_flight; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_daily_flight (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    data_source integer NOT NULL,
    publisher_id integer NOT NULL,
    advertiser_id integer NOT NULL,
    advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    channel_id integer NOT NULL,
    partner_id integer NOT NULL,
    order_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    days_in_billing_period integer DEFAULT 0 NOT NULL,
    fl_units integer DEFAULT 0 NOT NULL,
    fl_booked_units double precision DEFAULT 0 NOT NULL,
    fl_billable_units integer DEFAULT 0 NOT NULL,
    fl_remaining_units integer DEFAULT 0 NOT NULL,
    fl_total_delivered_units_up_to_date double precision DEFAULT 0 NOT NULL,
    units_share_percent double precision DEFAULT 0 NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    gross_revenue double precision DEFAULT 0 NOT NULL,
    p_net_revenue double precision DEFAULT 0 NOT NULL,
    v_net_revenue double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    billable_revenue double precision DEFAULT 0 NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adm.ba_daily_flight OWNER TO warehouse_dbo;

--
-- Name: ba_daily_flight_exception; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_daily_flight_exception (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    data_source integer NOT NULL,
    output_publisher_id integer NOT NULL,
    output_publisher_name character varying(250) DEFAULT 'N/A'::character varying,
    input_publisher_id integer NOT NULL,
    input_publisher_name character varying(250) DEFAULT 'N/A'::character varying,
    advertiser_id integer NOT NULL,
    advertiser_name character varying(250) DEFAULT 'N/A'::character varying,
    order_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adm.ba_daily_flight_exception OWNER TO warehouse_dbo;

--
-- Name: ba_daily_flight_min; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_daily_flight_min (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    data_source integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    dfp_advertiser_id integer NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    channel_id integer NOT NULL,
    partner_id integer NOT NULL,
    order_id integer NOT NULL,
    flight_id integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adm.ba_daily_flight_min OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_local_revenue; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_local_revenue (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    publisher_id integer NOT NULL,
    adm_order_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    verve_cpm double precision DEFAULT 0 NOT NULL,
    booked_cpm double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_imps integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_impressions double precision DEFAULT 0 NOT NULL,
    total_impressions_delivered_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_imps_share double precision DEFAULT 0 NOT NULL,
    remaining_imps integer DEFAULT 0 NOT NULL,
    partner_remaining_imps integer DEFAULT 0 NOT NULL,
    billable_imps integer DEFAULT 0 NOT NULL,
    partner_billable_imps integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dc_advertiser_id integer DEFAULT (-100) NOT NULL,
    dc_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL
);


ALTER TABLE adm.ba_monthly_local_revenue OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_local_revenue_v3; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_local_revenue_v3 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    publisher_id integer NOT NULL,
    adm_order_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    verve_cpm double precision DEFAULT 0 NOT NULL,
    booked_cpm double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_imps integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_impressions double precision DEFAULT 0 NOT NULL,
    total_impressions_delivered_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_imps_share double precision DEFAULT 0 NOT NULL,
    remaining_imps integer DEFAULT 0 NOT NULL,
    partner_remaining_imps integer DEFAULT 0 NOT NULL,
    billable_imps integer DEFAULT 0 NOT NULL,
    partner_billable_imps integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dc_advertiser_id integer DEFAULT (-100) NOT NULL,
    dc_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    channel_id integer
);


ALTER TABLE adm.ba_monthly_local_revenue_v3 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_local_revenue_v4; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_local_revenue_v4 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    channel_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_local_revenue_v4 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_local_revenue_v5_bk; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_local_revenue_v5_bk (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    partner_id integer NOT NULL,
    partner_revenue_share integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_local_revenue_v5_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_national_revenue; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_national_revenue (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255) NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    flight_paused_at timestamp with time zone,
    verve_cpm double precision DEFAULT 0 NOT NULL,
    booked_cpm double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_imps integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_impressions double precision DEFAULT 0 NOT NULL,
    total_impressions_delivered_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_imps_share double precision DEFAULT 0 NOT NULL,
    remaining_imps integer DEFAULT 0 NOT NULL,
    partner_remaining_imps integer DEFAULT 0 NOT NULL,
    billable_imps integer DEFAULT 0 NOT NULL,
    partner_billable_imps integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_national_revenue OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_national_revenue_v2; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_national_revenue_v2 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255) NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_type character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    flight_paused_at timestamp with time zone,
    verve_cpm double precision DEFAULT 0 NOT NULL,
    booked_cpm double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_imps integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_impressions double precision DEFAULT 0 NOT NULL,
    total_impressions_delivered_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_imps_share double precision DEFAULT 0 NOT NULL,
    remaining_imps integer DEFAULT 0 NOT NULL,
    partner_remaining_imps integer DEFAULT 0 NOT NULL,
    billable_imps integer DEFAULT 0 NOT NULL,
    partner_billable_imps integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_national_revenue_v2 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_national_revenue_v3; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_national_revenue_v3 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255) NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_type character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    flight_paused_at timestamp with time zone,
    verve_cpm double precision DEFAULT 0 NOT NULL,
    booked_cpm double precision DEFAULT 0 NOT NULL,
    billable_cpm double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_imps integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_impressions double precision DEFAULT 0 NOT NULL,
    total_impressions_delivered_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_imps_share double precision DEFAULT 0 NOT NULL,
    remaining_imps integer DEFAULT 0 NOT NULL,
    partner_remaining_imps integer DEFAULT 0 NOT NULL,
    billable_imps integer DEFAULT 0 NOT NULL,
    partner_billable_imps integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    channel_id integer
);


ALTER TABLE adm.ba_monthly_national_revenue_v3 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_national_revenue_v4; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_national_revenue_v4 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    channel_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_national_revenue_v4 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_national_revenue_v5_bk; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_national_revenue_v5_bk (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_revenue_share integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_national_revenue_v5_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_publisher_revenue_v4; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_publisher_revenue_v4 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    portal_id integer NOT NULL,
    channel_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    partner_revenue_share double precision DEFAULT 0 NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_publisher_revenue_v4 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_publisher_revenue_v5_bk; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_publisher_revenue_v5_bk (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    partner_revenue_share double precision DEFAULT 0 NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    adjusted_billable_revenue double precision
);


ALTER TABLE adm.ba_monthly_publisher_revenue_v5_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_vlm_revenue_v4; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_vlm_revenue_v4 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    channel_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_vlm_revenue_v4 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_vlm_revenue_v5_bk; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE ba_monthly_vlm_revenue_v5_bk (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_revenue_share integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.ba_monthly_vlm_revenue_v5_bk OWNER TO warehouse_dbo;

--
-- Name: daily_agg_adm_data_feed; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_adm_data_feed (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    date_since_1970 integer NOT NULL,
    creative_id integer NOT NULL,
    placement_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_adm_data_feed OWNER TO warehouse_dbo;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: daily_agg_adm_dbclk_revenue; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_adm_dbclk_revenue (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    date_since_1970 integer NOT NULL,
    placement_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_adm_dbclk_revenue OWNER TO warehouse_dbo;

SET default_tablespace = adm_tablespace;

--
-- Name: daily_agg_api_revenue_by_partner; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_api_revenue_by_partner (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    partner_postal_code character varying(16),
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    channel_id integer,
    channel_name character varying(45),
    channel_keyword character varying(45),
    metro_id bigint,
    dma text,
    dma_avails integer,
    total_requests integer,
    local_impressions integer,
    local_revenue double precision,
    local_net_revenue double precision,
    local_ecpm double precision,
    local_net_ecpm double precision,
    local_rev_share double precision,
    vlm_impressions integer,
    vlm_revenue double precision,
    vlm_net_revenue double precision,
    vlm_ecpm double precision,
    vlm_net_ecpm double precision,
    vlm_rev_share double precision,
    national_impressions integer,
    national_revenue double precision,
    national_net_revenue double precision,
    national_ecpm double precision,
    national_net_ecpm double precision,
    national_rev_share double precision,
    remnant_impressions integer,
    remnant_revenue double precision,
    remnant_net_revenue double precision,
    remnant_ecpm double precision,
    remnant_net_ecpm double precision,
    remnant_rev_share double precision,
    total_filled_requests integer,
    local_fill_rate double precision,
    total_fill_rate double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_api_revenue_by_partner OWNER TO warehouse_dbo;

--
-- Name: daily_agg_api_revenue_by_partner_v2; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_api_revenue_by_partner_v2 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    partner_postal_code character varying(16),
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    channel_id integer,
    channel_name character varying(45),
    channel_keyword character varying(45),
    metro_id bigint,
    dma text,
    dma_avails integer,
    total_requests integer,
    local_impressions integer,
    local_revenue double precision,
    local_net_revenue double precision,
    local_ecpm double precision,
    local_net_ecpm double precision,
    local_rev_share double precision,
    vlm_impressions integer,
    vlm_revenue double precision,
    vlm_net_revenue double precision,
    vlm_ecpm double precision,
    vlm_net_ecpm double precision,
    vlm_rev_share double precision,
    national_impressions integer,
    national_revenue double precision,
    national_net_revenue double precision,
    national_ecpm double precision,
    national_net_ecpm double precision,
    national_rev_share double precision,
    remnant_impressions integer,
    remnant_revenue double precision,
    remnant_net_revenue double precision,
    remnant_ecpm double precision,
    remnant_net_ecpm double precision,
    remnant_rev_share double precision,
    total_filled_requests integer,
    local_fill_rate double precision,
    total_fill_rate double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    verve_impressions integer,
    local_clicks integer,
    vlm_clicks integer,
    national_clicks integer,
    remnant_clicks integer
);


ALTER TABLE adm.daily_agg_api_revenue_by_partner_v2 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_api_revenue_by_partner_v3; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_api_revenue_by_partner_v3 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    partner_postal_code character varying(16),
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    channel_id integer,
    channel_name character varying(45),
    channel_keyword character varying(45),
    metro_id bigint,
    dma text,
    dma_avails integer,
    total_requests integer,
    local_impressions integer,
    local_revenue double precision,
    local_net_revenue double precision,
    local_ecpm double precision,
    local_net_ecpm double precision,
    local_rev_share double precision,
    vlm_impressions integer,
    vlm_revenue double precision,
    vlm_net_revenue double precision,
    vlm_ecpm double precision,
    vlm_net_ecpm double precision,
    vlm_rev_share double precision,
    national_impressions integer,
    national_revenue double precision,
    national_net_revenue double precision,
    national_ecpm double precision,
    national_net_ecpm double precision,
    national_rev_share double precision,
    remnant_impressions integer,
    remnant_revenue double precision,
    remnant_net_revenue double precision,
    remnant_ecpm double precision,
    remnant_net_ecpm double precision,
    remnant_rev_share double precision,
    total_filled_requests integer,
    local_fill_rate double precision,
    total_fill_rate double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    verve_impressions integer,
    local_clicks integer,
    vlm_clicks integer,
    national_clicks integer,
    remnant_clicks integer
);


ALTER TABLE adm.daily_agg_api_revenue_by_partner_v3 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_local_revenue; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_local_revenue (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    date_since_1970 integer NOT NULL,
    creative_id integer NOT NULL,
    dc_ad_id integer NOT NULL,
    dc_ad_name character varying(255) NOT NULL,
    dc_site_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_local_revenue OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    network_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    placement_id integer NOT NULL,
    placement_name character varying(255),
    organization_id integer NOT NULL,
    organization_name character varying(255),
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255),
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    channel_id integer NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    p_rev_share double precision,
    v_rev_share double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    total_paid_impressions integer DEFAULT 0,
    total_net_revenue double precision DEFAULT 0,
    total_p_rev_share double precision DEFAULT 0,
    total_v_rev_share double precision DEFAULT 0,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision,
    data_source integer,
    flight_ecpm double precision
);


ALTER TABLE adm.daily_agg_network_revenue OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    network_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    order_id integer NOT NULL,
    order_name character varying(255),
    channel_id integer NOT NULL,
    channel_name character varying(45),
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    p_rev_share double precision,
    v_rev_share double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    total_paid_impressions integer DEFAULT 0,
    total_net_revenue double precision DEFAULT 0,
    total_p_rev_share double precision DEFAULT 0,
    total_v_rev_share double precision DEFAULT 0,
    api_revenue double precision
);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m01; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m01 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m01_eastern_date_s CHECK (((eastern_date_sk >= 2923) AND (eastern_date_sk <= 2953)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m01 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m02; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m02 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m02_eastern_date_s CHECK (((eastern_date_sk >= 2954) AND (eastern_date_sk <= 2981)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m02 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m03; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m03 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m03_eastern_date_s CHECK (((eastern_date_sk >= 2982) AND (eastern_date_sk <= 3012)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m03 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m04; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m04 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m04_eastern_date_s CHECK (((eastern_date_sk >= 3013) AND (eastern_date_sk <= 3042)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m04 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m05; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m05 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m05_eastern_date_s CHECK (((eastern_date_sk >= 3043) AND (eastern_date_sk <= 3073)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m05 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m06; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m06 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m06_eastern_date_s CHECK (((eastern_date_sk >= 3074) AND (eastern_date_sk <= 3103)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m06 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m07; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m07 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m07_eastern_date_s CHECK (((eastern_date_sk >= 3104) AND (eastern_date_sk <= 3134)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m07 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m08; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m08 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m08_eastern_date_s CHECK (((eastern_date_sk >= 3135) AND (eastern_date_sk <= 3165)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m08 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m09; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m09 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m09_eastern_date_s CHECK (((eastern_date_sk >= 3166) AND (eastern_date_sk <= 3195)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m09 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m10; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m10 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m10_eastern_date_s CHECK (((eastern_date_sk >= 3196) AND (eastern_date_sk <= 3226)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m10 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m11; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m11 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m11_eastern_date_s CHECK (((eastern_date_sk >= 3227) AND (eastern_date_sk <= 3256)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m11 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m12; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_by_publisher_y2013_m12 (
    CONSTRAINT daily_agg_network_revenue_by_publisher_y2013_m12_eastern_date_s CHECK (((eastern_date_sk >= 3257) AND (eastern_date_sk <= 3287)))
)
INHERITS (daily_agg_network_revenue_by_publisher);


ALTER TABLE adm.daily_agg_network_revenue_by_publisher_y2013_m12 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_min; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_min (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    network_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT true,
    process_id integer
);


ALTER TABLE adm.daily_agg_network_revenue_min OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_temp; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_temp (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    network_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    placement_id integer NOT NULL,
    placement_name character varying(255),
    organization_id integer NOT NULL,
    organization_name character varying(255),
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255),
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    channel_id integer NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    p_rev_share double precision,
    v_rev_share double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    total_paid_impressions integer DEFAULT 0,
    total_net_revenue double precision DEFAULT 0,
    total_p_rev_share double precision DEFAULT 0,
    total_v_rev_share double precision DEFAULT 0,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision,
    data_source integer,
    flight_ecpm double precision
);


ALTER TABLE adm.daily_agg_network_revenue_temp OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m01; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m01 (
    CONSTRAINT daily_agg_network_revenue_y2013_m01_eastern_date_sk_check CHECK (((eastern_date_sk >= 2923) AND (eastern_date_sk <= 2953)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m01 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m02; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m02 (
    CONSTRAINT daily_agg_network_revenue_y2013_m02_eastern_date_sk_check CHECK (((eastern_date_sk >= 2954) AND (eastern_date_sk <= 2981)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m02 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m03; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m03 (
    CONSTRAINT daily_agg_network_revenue_y2013_m03_eastern_date_sk_check CHECK (((eastern_date_sk >= 2982) AND (eastern_date_sk <= 3012)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m03 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m04; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m04 (
    CONSTRAINT daily_agg_network_revenue_y2013_m04_eastern_date_sk_check CHECK (((eastern_date_sk >= 3013) AND (eastern_date_sk <= 3042)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m04 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m05; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m05 (
    CONSTRAINT daily_agg_network_revenue_y2013_m05_eastern_date_sk_check CHECK (((eastern_date_sk >= 3043) AND (eastern_date_sk <= 3073)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m05 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m06; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m06 (
    CONSTRAINT daily_agg_network_revenue_y2013_m06_eastern_date_sk_check CHECK (((eastern_date_sk >= 3074) AND (eastern_date_sk <= 3103)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m06 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m07; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m07 (
    CONSTRAINT daily_agg_network_revenue_y2013_m07_eastern_date_sk_check CHECK (((eastern_date_sk >= 3104) AND (eastern_date_sk <= 3134)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m07 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m08; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m08 (
    CONSTRAINT daily_agg_network_revenue_y2013_m08_eastern_date_sk_check CHECK (((eastern_date_sk >= 3135) AND (eastern_date_sk <= 3165)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m08 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_network_revenue_y2013_m09; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_network_revenue_y2013_m09 (
    CONSTRAINT daily_agg_network_revenue_y2013_m09_eastern_date_sk_check CHECK (((eastern_date_sk >= 3166) AND (eastern_date_sk <= 3195)))
)
INHERITS (daily_agg_network_revenue);


ALTER TABLE adm.daily_agg_network_revenue_y2013_m09 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_order_atc; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_order_atc (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    day_since_1970 integer NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    placement_id integer NOT NULL,
    placement_name character varying(255),
    creative_id integer NOT NULL,
    creative_name character varying(255),
    flight_id integer NOT NULL,
    website_id integer NOT NULL,
    website_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    partner_id integer NOT NULL,
    partner_name character varying(255),
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    organization_id integer DEFAULT (-100),
    organization_name character varying(255),
    advertiser_id integer DEFAULT (-100),
    advertiser_name character varying(255)
);


ALTER TABLE adm.daily_agg_order_atc OWNER TO warehouse_dbo;

--
-- Name: daily_agg_order_flight; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_order_flight (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    day_since_1970 integer NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    f_budget_current double precision NOT NULL,
    f_a_budget double precision DEFAULT 0,
    f_rm_budget double precision DEFAULT 0,
    f_nm_budget double precision DEFAULT 0,
    f_start_date date NOT NULL,
    f_end_date date NOT NULL,
    month_sice_2005_of_f_end_date_current integer DEFAULT 0,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    cumulate_revenue double precision DEFAULT 0,
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    flight_status character varying(30) DEFAULT 'runing'::character varying,
    created_at timestamp with time zone,
    submitted_at timestamp with time zone,
    updated_at timestamp with time zone,
    paused_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    approved_at timestamp with time zone
);


ALTER TABLE adm.daily_agg_order_flight OWNER TO warehouse_dbo;

--
-- Name: daily_agg_order_flight_beta; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_order_flight_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    day_since_1970 integer NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    f_budget_current double precision NOT NULL,
    f_a_budget double precision DEFAULT 0,
    f_rm_budget double precision DEFAULT 0,
    f_nm_budget double precision DEFAULT 0,
    f_start_date date NOT NULL,
    f_end_date date NOT NULL,
    month_sice_2005_of_f_end_date_current integer DEFAULT 0,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    cumulate_revenue double precision DEFAULT 0,
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    flight_status character varying(30) DEFAULT 'runing'::character varying,
    created_at timestamp with time zone,
    submitted_at timestamp with time zone,
    updated_at timestamp with time zone,
    paused_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    approved_at timestamp with time zone
);


ALTER TABLE adm.daily_agg_order_flight_beta OWNER TO warehouse_dbo;

--
-- Name: daily_agg_order_placement_creative_flight; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_order_placement_creative_flight (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    day_since_1970 integer NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    placement_id integer NOT NULL,
    placement_name character varying(255),
    creative_id integer NOT NULL,
    creative_name character varying(255),
    flight_id integer NOT NULL,
    month_sice_2005_of_f_end_date_current integer DEFAULT 0,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    cumulate_revenue double precision DEFAULT 0,
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_order_placement_creative_flight OWNER TO warehouse_dbo;

--
-- Name: daily_agg_publisher_website_partner; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_publisher_website_partner (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    day_since_1970 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    website_id integer NOT NULL,
    website_name character varying(255),
    partner_id integer NOT NULL,
    partner_name character varying(255),
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_publisher_website_partner OWNER TO warehouse_dbo;

--
-- Name: daily_agg_revenue_by_order; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_revenue_by_order (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_last_date_of_this_month date NOT NULL,
    date_since_1970 integer NOT NULL,
    order_id integer NOT NULL,
    remote_id integer NOT NULL,
    order_name character varying(255),
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    cumulative_revenue double precision DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    yesterday_rank integer DEFAULT 0 NOT NULL,
    rank_after_one_day integer DEFAULT 0 NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    month_since_2005_of_end_month integer DEFAULT 0 NOT NULL,
    flight_count integer DEFAULT (-1),
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    budget double precision DEFAULT 0 NOT NULL,
    abudget double precision DEFAULT 0,
    pacing double precision DEFAULT 0 NOT NULL,
    mtd_total_revenue double precision DEFAULT 0 NOT NULL,
    remaining_monthly_budget double precision DEFAULT 0 NOT NULL,
    next_month_budget double precision DEFAULT 0 NOT NULL,
    impressions_1d_ago integer DEFAULT 0 NOT NULL,
    clicks_1d_ago integer DEFAULT 0 NOT NULL,
    revenue_1d_ago double precision DEFAULT 0 NOT NULL,
    impressions_7d_ago integer DEFAULT 0 NOT NULL,
    clicks_7d_ago integer DEFAULT 0 NOT NULL,
    revenue_7d_ago double precision DEFAULT 0 NOT NULL,
    impressions_28d_ago integer DEFAULT 0 NOT NULL,
    clicks_28d_ago integer DEFAULT 0 NOT NULL,
    revenue_28d_ago double precision DEFAULT 0 NOT NULL,
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    cpm_revenue double precision DEFAULT 0,
    cumulative_cpm_revenue double precision DEFAULT 0,
    cumulative_sponsorship_revenue double precision DEFAULT 0,
    sponsorship_revenue double precision DEFAULT 0
);


ALTER TABLE adm.daily_agg_revenue_by_order OWNER TO warehouse_dbo;

--
-- Name: daily_agg_revenue_by_order_beta; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_revenue_by_order_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_last_date_of_this_month date NOT NULL,
    date_since_1970 integer NOT NULL,
    order_id integer NOT NULL,
    remote_id integer NOT NULL,
    order_name character varying(255),
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    cumulative_revenue double precision DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    yesterday_rank integer DEFAULT 0 NOT NULL,
    rank_after_one_day integer DEFAULT 0 NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    month_since_2005_of_end_month integer DEFAULT 0 NOT NULL,
    flight_count integer DEFAULT (-1),
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    budget double precision DEFAULT 0 NOT NULL,
    abudget double precision DEFAULT 0,
    pacing double precision DEFAULT 0 NOT NULL,
    mtd_total_revenue double precision DEFAULT 0 NOT NULL,
    remaining_monthly_budget double precision DEFAULT 0 NOT NULL,
    next_month_budget double precision DEFAULT 0 NOT NULL,
    impressions_1d_ago integer DEFAULT 0 NOT NULL,
    clicks_1d_ago integer DEFAULT 0 NOT NULL,
    revenue_1d_ago double precision DEFAULT 0 NOT NULL,
    impressions_7d_ago integer DEFAULT 0 NOT NULL,
    clicks_7d_ago integer DEFAULT 0 NOT NULL,
    revenue_7d_ago double precision DEFAULT 0 NOT NULL,
    impressions_28d_ago integer DEFAULT 0 NOT NULL,
    clicks_28d_ago integer DEFAULT 0 NOT NULL,
    revenue_28d_ago double precision DEFAULT 0 NOT NULL,
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    cpm_revenue double precision DEFAULT 0,
    cumulative_cpm_revenue double precision DEFAULT 0,
    cumulative_sponsorship_revenue double precision DEFAULT 0,
    sponsorship_revenue double precision DEFAULT 0
);


ALTER TABLE adm.daily_agg_revenue_by_order_beta OWNER TO warehouse_dbo;

--
-- Name: daily_agg_revenue_by_order_yesterday; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_revenue_by_order_yesterday (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    remote_id integer NOT NULL,
    impressions integer DEFAULT (-1),
    clicks integer DEFAULT (-1),
    revenue double precision DEFAULT (-1),
    cumulative_revenue double precision DEFAULT (-1),
    tdrank integer DEFAULT (-1),
    yesterday_rank integer DEFAULT (-1),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    budget double precision DEFAULT (-1),
    abudget double precision DEFAULT (-1),
    pacing double precision DEFAULT (-1),
    mtd_total_revenue double precision DEFAULT (-1),
    remaining_monthly_budget double precision DEFAULT (-1),
    next_month_budget double precision DEFAULT (-1),
    impressions_1d_ago integer DEFAULT (-1),
    clicks_1d_ago integer DEFAULT (-1),
    revenue_1d_ago double precision DEFAULT (-1),
    impressions_7d_ago integer DEFAULT (-1),
    clicks_7d_ago integer DEFAULT (-1),
    revenue_7d_ago double precision DEFAULT (-1),
    impressions_28d_ago integer DEFAULT (-1),
    clicks_28d_ago integer DEFAULT (-1),
    revenue_28d_ago double precision DEFAULT (-1),
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_revenue_by_order_yesterday OWNER TO warehouse_dbo;

--
-- Name: daily_agg_revenue_by_order_yesterday_beta; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_revenue_by_order_yesterday_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    remote_id integer NOT NULL,
    impressions integer DEFAULT (-1),
    clicks integer DEFAULT (-1),
    revenue double precision DEFAULT (-1),
    cumulative_revenue double precision DEFAULT (-1),
    tdrank integer DEFAULT (-1),
    yesterday_rank integer DEFAULT (-1),
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    budget double precision DEFAULT (-1),
    abudget double precision DEFAULT (-1),
    pacing double precision DEFAULT (-1),
    mtd_total_revenue double precision DEFAULT (-1),
    remaining_monthly_budget double precision DEFAULT (-1),
    next_month_budget double precision DEFAULT (-1),
    impressions_1d_ago integer DEFAULT (-1),
    clicks_1d_ago integer DEFAULT (-1),
    revenue_1d_ago double precision DEFAULT (-1),
    impressions_7d_ago integer DEFAULT (-1),
    clicks_7d_ago integer DEFAULT (-1),
    revenue_7d_ago double precision DEFAULT (-1),
    impressions_28d_ago integer DEFAULT (-1),
    clicks_28d_ago integer DEFAULT (-1),
    revenue_28d_ago double precision DEFAULT (-1),
    metric character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_revenue_by_order_yesterday_beta OWNER TO warehouse_dbo;

--
-- Name: daily_agg_revenue_by_publisher; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_revenue_by_publisher (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    date_since_1970 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    cumulative_revenue double precision DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    yesterday_rank integer DEFAULT 0 NOT NULL,
    rank_after_one_day integer DEFAULT 0 NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    budget double precision DEFAULT 0 NOT NULL,
    abudget double precision DEFAULT 0,
    pacing double precision DEFAULT 0 NOT NULL,
    mtd_total_revenue double precision DEFAULT 0 NOT NULL,
    remaining_monthly_budget double precision DEFAULT 0 NOT NULL,
    next_month_budget double precision DEFAULT 0 NOT NULL,
    impressions_1d_ago integer DEFAULT 0 NOT NULL,
    clicks_1d_ago integer DEFAULT 0 NOT NULL,
    revenue_1d_ago double precision DEFAULT 0 NOT NULL,
    impressions_7d_ago integer DEFAULT 0 NOT NULL,
    clicks_7d_ago integer DEFAULT 0 NOT NULL,
    revenue_7d_ago double precision DEFAULT 0 NOT NULL,
    impressions_28d_ago integer DEFAULT 0 NOT NULL,
    clicks_28d_ago integer DEFAULT 0 NOT NULL,
    revenue_28d_ago double precision DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_revenue_by_publisher OWNER TO warehouse_dbo;

--
-- Name: daily_agg_revenue_statistics; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_revenue_statistics (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    organization_id integer NOT NULL,
    organization_name character varying(255),
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255),
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    channel_id integer NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    today_estimate_revenue double precision DEFAULT 0,
    clicks integer DEFAULT 0,
    total_paid_impressions integer DEFAULT 0,
    total_net_revenue double precision DEFAULT 0,
    total_p_rev_share double precision DEFAULT 0,
    total_v_rev_share double precision DEFAULT 0,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision,
    clicks_1 integer DEFAULT 0,
    total_paid_impressions_1 integer DEFAULT 0,
    total_net_revenue_1 double precision DEFAULT 0,
    total_p_rev_share_1 double precision DEFAULT 0,
    total_v_rev_share_1 double precision DEFAULT 0,
    cf_factor_1 double precision DEFAULT 1 NOT NULL,
    api_revenue_1 double precision,
    clicks_7 integer DEFAULT 0,
    total_paid_impressions_7 integer DEFAULT 0,
    total_net_revenue_7 double precision DEFAULT 0,
    total_p_rev_share_7 double precision DEFAULT 0,
    total_v_rev_share_7 double precision DEFAULT 0,
    cf_factor_7 double precision DEFAULT 1 NOT NULL,
    api_revenue_7 double precision,
    clicks_28 integer DEFAULT 0,
    total_paid_impressions_28 integer DEFAULT 0,
    total_net_revenue_28 double precision DEFAULT 0,
    total_p_rev_share_28 double precision DEFAULT 0,
    total_v_rev_share_28 double precision DEFAULT 0,
    cf_factor_28 double precision DEFAULT 1 NOT NULL,
    api_revenue_28 double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_agg_revenue_statistics OWNER TO warehouse_dbo;

--
-- Name: daily_network_fct_channel; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_network_fct_channel (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    publisher_id integer NOT NULL,
    publication_id integer NOT NULL,
    property_id integer NOT NULL,
    placement_id integer NOT NULL,
    organization_id integer NOT NULL,
    advertiser_id integer NOT NULL,
    order_id integer NOT NULL,
    flight_id integer NOT NULL,
    creative_id integer NOT NULL,
    channel_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    p_rev_share double precision,
    v_rev_share double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    total_paid_impressions integer DEFAULT 0,
    total_net_revenue double precision DEFAULT 0,
    total_p_rev_share double precision DEFAULT 0,
    total_v_rev_share double precision DEFAULT 0,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision
);


ALTER TABLE adm.daily_network_fct_channel OWNER TO warehouse_dbo;

--
-- Name: daily_network_fct_performance; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_network_fct_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    publisher_id integer NOT NULL,
    publication_id integer NOT NULL,
    property_id integer NOT NULL,
    placement_id integer NOT NULL,
    organization_id integer NOT NULL,
    advertiser_id integer NOT NULL,
    order_id integer NOT NULL,
    flight_id integer NOT NULL,
    creative_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_network_fct_performance OWNER TO warehouse_dbo;

--
-- Name: daily_network_fct_performance_by_portal; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_network_fct_performance_by_portal (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    publisher_id integer NOT NULL,
    publication_id integer NOT NULL,
    property_id integer NOT NULL,
    placement_id integer NOT NULL,
    organization_id integer NOT NULL,
    advertiser_id integer NOT NULL,
    order_id integer NOT NULL,
    flight_id integer NOT NULL,
    creative_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    p_rev_share double precision,
    v_rev_share double precision
);


ALTER TABLE adm.daily_network_fct_performance_by_portal OWNER TO warehouse_dbo;

--
-- Name: daily_network_fct_request; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_network_fct_request (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    publisher_id integer NOT NULL,
    publication_id integer NOT NULL,
    property_id integer NOT NULL,
    channel_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    impressions integer,
    clicks integer,
    revenue double precision,
    requests integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    local_imps integer
);


ALTER TABLE adm.daily_network_fct_request OWNER TO warehouse_dbo;

--
-- Name: daily_network_fct_request_beta; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_network_fct_request_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    publisher_id integer NOT NULL,
    property_id integer NOT NULL,
    channel_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    impressions integer,
    clicks integer,
    revenue double precision,
    requests integer,
    local_imps integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.daily_network_fct_request_beta OWNER TO warehouse_dbo;

--
-- Name: local_revenue; Type: TABLE; Schema: adm; Owner: song; Tablespace: adm_tablespace
--

CREATE TABLE local_revenue (
    month_sk integer,
    ad_name character varying(255),
    dpf_order_id integer,
    order_start_date date,
    order_end_date date,
    adm_order_id integer,
    name character varying(255),
    flight_id integer,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    metric character varying(50),
    budget double precision,
    rate double precision,
    cpm_or_ecpm double precision,
    impressions_delivered integer,
    calendar_year_month character varying(32),
    partner_id integer
);


ALTER TABLE adm.local_revenue OWNER TO song;

--
-- Name: monthly_agg_adm_data_feed; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE monthly_agg_adm_data_feed (
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    creative_id integer NOT NULL,
    placement_id integer NOT NULL,
    website_id integer NOT NULL,
    publication_id integer NOT NULL,
    publisher_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_keyword character varying(32) NOT NULL,
    portal_id integer NOT NULL,
    order_id integer NOT NULL,
    network_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    adm_order_id integer NOT NULL,
    dc_order_id integer NOT NULL,
    dc_order_start_date date,
    dc_order_end_date date,
    dc_order_cpm_booked integer,
    ad_id integer,
    ad_name character varying(255),
    ad_cost_type character varying(255),
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    flight_cancelled_at timestamp with time zone,
    flight_paused_at timestamp with time zone,
    end_date_billing_period date
);


ALTER TABLE adm.monthly_agg_adm_data_feed OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_adm_data_feed_v2; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE monthly_agg_adm_data_feed_v2 (
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    creative_id integer NOT NULL,
    placement_id integer NOT NULL,
    website_id integer NOT NULL,
    publication_id integer NOT NULL,
    publisher_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_keyword character varying(32) NOT NULL,
    portal_id integer NOT NULL,
    order_id integer NOT NULL,
    network_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    adm_order_id integer NOT NULL,
    dc_order_id integer NOT NULL,
    dc_order_start_date date,
    dc_order_end_date date,
    dc_order_cpm_booked integer,
    ad_id integer,
    ad_name character varying(255),
    ad_cost_type character varying(255),
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    flight_cancelled_at timestamp with time zone,
    flight_paused_at timestamp with time zone,
    flight_type timestamp with time zone,
    end_date_billing_period date
);


ALTER TABLE adm.monthly_agg_adm_data_feed_v2 OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_adm_dbclk_revenue; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE monthly_agg_adm_dbclk_revenue (
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    placement_id integer NOT NULL,
    property_id integer NOT NULL,
    publisher_id integer NOT NULL,
    partner_id integer NOT NULL,
    portal_id integer NOT NULL,
    network_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    p_net_revenue double precision,
    v_net_revenue double precision,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_cancelled_at timestamp with time zone,
    flight_paused_at timestamp with time zone,
    adm_order_id integer NOT NULL,
    dc_order_id integer NOT NULL,
    dc_order_start_date timestamp with time zone,
    dc_order_end_date timestamp with time zone,
    dc_order_cpm_booked integer,
    ad_id integer,
    ad_name character varying(255),
    ad_cost_type character varying(255),
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    end_date_billing_period timestamp with time zone,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    channel_id integer
);


ALTER TABLE adm.monthly_agg_adm_dbclk_revenue OWNER TO warehouse_dbo;

--
-- Name: monthly_forecast; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE monthly_forecast (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_description character varying(255) NOT NULL,
    partner_dtactive date,
    partner_dtdeleted date,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    partner_module_id integer NOT NULL,
    feature_module_name character varying(30) NOT NULL,
    display_name character varying(80) NOT NULL,
    device_type character varying(64) NOT NULL,
    device_type_id integer NOT NULL,
    location_id integer NOT NULL,
    country_id bigint NOT NULL,
    region_id bigint NOT NULL,
    metro_id bigint NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    fullfilled_code_y integer NOT NULL,
    monthly_impressions double precision DEFAULT 0 NOT NULL,
    impressions double precision DEFAULT 0 NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    min_date date,
    max_date date,
    num_of_days integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.monthly_forecast OWNER TO warehouse_dbo;

--
-- Name: monthly_forecast_working; Type: TABLE; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE monthly_forecast_working (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_description character varying(255) NOT NULL,
    partner_dtactive date,
    partner_dtdeleted date,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    partner_module_id integer NOT NULL,
    feature_module_name character varying(30) NOT NULL,
    display_name character varying(80) NOT NULL,
    device_type character varying(64) NOT NULL,
    device_type_id integer NOT NULL,
    location_id integer NOT NULL,
    country_id bigint NOT NULL,
    region_id bigint NOT NULL,
    metro_id bigint NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    fullfilled_code_y integer NOT NULL,
    monthly_impressions double precision DEFAULT 0 NOT NULL,
    impressions double precision DEFAULT 0 NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    min_date date,
    max_date date,
    num_of_days integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adm.monthly_forecast_working OWNER TO warehouse_dbo;

SET search_path = adnetwork, pg_catalog;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: adsense_dblck_channel; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE adsense_dblck_channel (
    eastern_date_sk integer NOT NULL,
    ga_channel_sk integer NOT NULL,
    dc_site_sk integer NOT NULL,
    partner_sk integer NOT NULL,
    portal_sk integer NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    channel_page_views integer NOT NULL,
    channel_clicks integer NOT NULL,
    channel_page_ctr double precision NOT NULL,
    channel_cpc double precision NOT NULL,
    channel_page_rpm double precision NOT NULL,
    channel_estimated_earnings double precision NOT NULL,
    total_clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.adsense_dblck_channel OWNER TO warehouse_dbo;

--
-- Name: ba_adsense_dblck_channel_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_adsense_dblck_channel_bk (
    month_sk integer NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    ga_channel_sk integer NOT NULL,
    dc_site_sk integer NOT NULL,
    partner_sk integer NOT NULL,
    portal_sk integer NOT NULL,
    eastern_start_full_date date,
    eastern_end_full_date date,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    channel_page_views integer NOT NULL,
    channel_clicks integer NOT NULL,
    channel_page_ctr double precision NOT NULL,
    channel_cpc double precision NOT NULL,
    channel_page_rpm double precision NOT NULL,
    channel_estimated_earnings double precision NOT NULL,
    total_clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    process_id integer,
    total_impressions_delivered integer DEFAULT 0 NOT NULL,
    page_views integer DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_adsense_dblck_channel_bk OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: ba_monthly_adnetwork_summary_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE ba_monthly_adnetwork_summary_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_name character varying(75) NOT NULL,
    requests bigint NOT NULL,
    paid_impressions bigint NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count bigint NOT NULL,
    fullfilled_code_y bigint NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_billable_impressions bigint DEFAULT 0 NOT NULL,
    parent1_id integer,
    parent1_name character varying(40),
    partner_id integer,
    partner_name character varying(75),
    ad_network_id integer DEFAULT 0 NOT NULL,
    portal_id integer DEFAULT (-100) NOT NULL,
    displayed_impressions integer DEFAULT 0 NOT NULL,
    event_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_monthly_adnetwork_summary_bk OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: ba_monthly_adsense_dbclk_channel_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_adsense_dbclk_channel_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    requests integer,
    fullfilled_code_count integer,
    fullfilled_code_y integer,
    fullfilled_code_n integer,
    fullfilled_code_e integer,
    fullfilled_code_t integer,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_monthly_adsense_dbclk_channel_bk OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: ba_monthly_cg_mobile_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE ba_monthly_cg_mobile_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    monthly_ys integer DEFAULT 0,
    monthly_estimate_revenue double precision DEFAULT 0,
    total_monthly_estimate_revenue double precision DEFAULT 0,
    p_estimate_revenue double precision DEFAULT 0,
    v_estimate_revenue double precision DEFAULT 0,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_cg_mobile_performance_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_cg_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE ba_monthly_cg_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    monthly_ys integer DEFAULT 0,
    monthly_estimate_revenue double precision DEFAULT 0,
    total_monthly_estimate_revenue double precision DEFAULT 0,
    p_estimate_revenue double precision DEFAULT 0,
    v_estimate_revenue double precision DEFAULT 0,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    total_fullfilled_code_count integer,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_cg_performance_bk OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: ba_monthly_it_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_it_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    app_name character varying(255),
    requests double precision NOT NULL,
    impressions double precision NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.ba_monthly_it_performance_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_jt_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_jt_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site character varying(255),
    total_requests integer NOT NULL,
    total_paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    paid_impressions integer,
    clicks integer,
    net_revenue double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_monthly_jt_performance_bk OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: ba_monthly_kt_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE ba_monthly_kt_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    subid character varying(255),
    views integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_monthly_kt_performance_bk OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: ba_monthly_mm_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_mm_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    id integer NOT NULL,
    name character varying(255),
    requests integer NOT NULL,
    ads_served integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_monthly_mm_performance_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_mx_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_mx_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_name character varying(255),
    total_ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_cost double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    clicks integer,
    cost double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    ad_network_id integer NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_mx_performance_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_sp_blue_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_sp_blue_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_ppc_revenue double precision NOT NULL,
    ppc_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    verve_revenue_share double precision,
    revenue double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    requests integer,
    paid_impressions integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    ad_network_id integer NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_sp_blue_performance_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_wh_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_wh_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_keyword character varying(255),
    total_requests integer NOT NULL,
    total_filled integer NOT NULL,
    total_clicked integer NOT NULL,
    total_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    filled integer,
    clicked integer,
    revenue double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_wh_performance_bk OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: ba_monthly_yp_no_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE ba_monthly_yp_no_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_yp_no_performance_bk OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: ba_monthly_yp_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_yp_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE adnetwork.ba_monthly_yp_performance_bk OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_yp_sb_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE ba_monthly_yp_sb_performance_bk (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.ba_monthly_yp_sb_performance_bk OWNER TO warehouse_dbo;

--
-- Name: daily_adnetwork_summary; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_adnetwork_summary (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id character varying(75) NOT NULL,
    ad_network_name character varying(75) NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.daily_adnetwork_summary OWNER TO warehouse_dbo;

--
-- Name: daily_adsense_dbclk_channel; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_adsense_dbclk_channel (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    requests integer,
    fullfilled_code_count integer,
    fullfilled_code_y integer,
    fullfilled_code_n integer,
    fullfilled_code_e integer,
    fullfilled_code_t integer
);


ALTER TABLE adnetwork.daily_adsense_dbclk_channel OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: daily_cg_mobile_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE daily_cg_mobile_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    total_requests integer NOT NULL,
    total_paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    total_fullfilled_code_count integer,
    fullfilled_code_y_rate double precision,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    estimated_net_earnings double precision,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    displayed_impressions integer
);


ALTER TABLE adnetwork.daily_cg_mobile_performance OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: daily_cg_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_cg_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_requests integer,
    total_paid_impressions integer,
    total_clicks integer,
    total_fullfilled_code_count integer,
    total_event_count integer,
    event_count_rate double precision,
    event_count integer
);


ALTER TABLE adnetwork.daily_cg_performance OWNER TO warehouse_dbo;

--
-- Name: daily_ga_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_ga_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site character varying(255),
    ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.daily_ga_performance OWNER TO warehouse_dbo;

--
-- Name: daily_it_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_it_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    app_name character varying(255),
    requests double precision NOT NULL,
    impressions double precision NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    fullfilled_code_count integer,
    fullfilled_code_y integer,
    fullfilled_code_n integer,
    fullfilled_code_e integer,
    fullfilled_code_t integer
);


ALTER TABLE adnetwork.daily_it_performance OWNER TO warehouse_dbo;

--
-- Name: daily_jt_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_jt_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site character varying(255),
    total_requests integer NOT NULL,
    total_paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    paid_impressions integer,
    net_revenue double precision,
    clicks integer,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0
);


ALTER TABLE adnetwork.daily_jt_performance OWNER TO warehouse_dbo;

--
-- Name: daily_jt_summary; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_jt_summary (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.daily_jt_summary OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: daily_kt_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE daily_kt_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    subid character varying(255),
    views integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.daily_kt_performance OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: daily_mm_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_mm_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    id integer NOT NULL,
    name character varying(255),
    requests integer NOT NULL,
    ads_served integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0
);


ALTER TABLE adnetwork.daily_mm_performance OWNER TO warehouse_dbo;

--
-- Name: daily_mx_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_mx_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_name character varying(255),
    total_ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_cost double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    clicks integer,
    cost double precision,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_event_count integer,
    event_count_rate double precision,
    event_count integer
);


ALTER TABLE adnetwork.daily_mx_performance OWNER TO warehouse_dbo;

--
-- Name: daily_sp_blue_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_sp_blue_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_ppc_revenue double precision NOT NULL,
    ppc_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    verve_revenue_share double precision,
    revenue double precision,
    requests integer,
    paid_impressions integer,
    clicks integer,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_event_count integer,
    event_count_rate double precision,
    event_count integer
);


ALTER TABLE adnetwork.daily_sp_blue_performance OWNER TO warehouse_dbo;

--
-- Name: daily_sp_blue_performance_bk; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_sp_blue_performance_bk (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.daily_sp_blue_performance_bk OWNER TO warehouse_dbo;

--
-- Name: daily_sp_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_sp_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.daily_sp_performance OWNER TO warehouse_dbo;

--
-- Name: daily_wh_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_wh_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_keyword character varying(255),
    total_requests integer NOT NULL,
    total_filled integer NOT NULL,
    total_clicked integer NOT NULL,
    total_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    filled integer,
    clicked integer,
    revenue double precision,
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    displayed_impressions integer
);


ALTER TABLE adnetwork.daily_wh_performance OWNER TO warehouse_dbo;

--
-- Name: daily_yp_no_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_yp_no_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    displayed_impressions integer,
    total_event_count integer,
    event_count_rate double precision,
    event_count integer
);


ALTER TABLE adnetwork.daily_yp_no_performance OWNER TO warehouse_dbo;

--
-- Name: daily_yp_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_yp_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0
);


ALTER TABLE adnetwork.daily_yp_performance OWNER TO warehouse_dbo;

--
-- Name: daily_yp_sb_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE daily_yp_sb_performance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    last_known_revenue double precision DEFAULT 0,
    last_known_ys integer DEFAULT 0,
    last_known_ecpm double precision DEFAULT 0,
    today_ys integer DEFAULT 0,
    today_estimate_revenue double precision DEFAULT 0,
    is_estimated integer DEFAULT 0,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    displayed_impressions integer,
    total_event_count integer,
    event_count_rate double precision,
    event_count integer
);


ALTER TABLE adnetwork.daily_yp_sb_performance OWNER TO warehouse_dbo;

--
-- Name: mapping_ga; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE mapping_ga (
    current_google_adsense_site character varying(255) NOT NULL,
    partner_keyword character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(255) NOT NULL,
    partner_group_id integer NOT NULL,
    partner_group_name character varying(255) NOT NULL,
    new_google_adsense_site character varying(255) NOT NULL,
    note character varying(255)
);


ALTER TABLE adnetwork.mapping_ga OWNER TO warehouse_dbo;

--
-- Name: mapping_mm; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE mapping_mm (
    current_millennial_media_name character varying(255) NOT NULL,
    partner_keyword character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(255) NOT NULL,
    group_id integer NOT NULL,
    group_name character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(255) NOT NULL,
    new_millennial_media_name character varying(255) NOT NULL,
    note character varying(255)
);


ALTER TABLE adnetwork.mapping_mm OWNER TO warehouse_dbo;

--
-- Name: monthly_adnetwork_summary; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_adnetwork_summary (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id character varying(75) NOT NULL,
    ad_network_name character varying(75) NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_adnetwork_summary OWNER TO warehouse_dbo;

--
-- Name: monthly_adnetwork_summary_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_adnetwork_summary_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_adnetwork_summary_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_adsense_dbclk_channel; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_adsense_dbclk_channel (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    requests integer,
    fullfilled_code_count integer,
    fullfilled_code_y integer,
    fullfilled_code_n integer,
    fullfilled_code_e integer,
    fullfilled_code_t integer
);


ALTER TABLE adnetwork.monthly_adsense_dbclk_channel OWNER TO warehouse_dbo;

--
-- Name: monthly_adsense_dbclk_channel_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_adsense_dbclk_channel_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    requests integer,
    fullfilled_code_count integer,
    fullfilled_code_y integer,
    fullfilled_code_n integer,
    fullfilled_code_e integer,
    fullfilled_code_t integer
);


ALTER TABLE adnetwork.monthly_adsense_dbclk_channel_by_date OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: monthly_cg_mobile_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE monthly_cg_mobile_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    displayed_impressions integer,
    displayed_impressions_rate double precision,
    total_displayed_impressions integer,
    total_fullfilled_code_count integer
);


ALTER TABLE adnetwork.monthly_cg_mobile_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_cg_mobile_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE monthly_cg_mobile_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    displayed_impressions integer
);


ALTER TABLE adnetwork.monthly_cg_mobile_performance_by_date OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: monthly_cg_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_cg_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision,
    total_fullfilled_code_count integer
);


ALTER TABLE adnetwork.monthly_cg_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_cg_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_cg_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    event_count integer
);


ALTER TABLE adnetwork.monthly_cg_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_ga_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_ga_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site character varying(255),
    ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_ga_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_ga_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_ga_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_ga_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_it_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_it_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    app_name character varying(255),
    requests double precision NOT NULL,
    impressions double precision NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_it_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_it_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_it_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    requests double precision NOT NULL,
    impressions double precision NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_it_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_jt_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_jt_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site character varying(255),
    total_requests integer NOT NULL,
    total_paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    paid_impressions integer,
    clicks integer,
    net_revenue double precision
);


ALTER TABLE adnetwork.monthly_jt_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_jt_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_jt_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_jt_performance_by_date OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: monthly_kt_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE monthly_kt_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    subid character varying(255),
    views integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    requests integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_kt_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_kt_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE monthly_kt_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_kt_performance_by_date OWNER TO warehouse_dbo;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: monthly_mm_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_mm_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    id integer NOT NULL,
    name character varying(255),
    requests integer NOT NULL,
    ads_served integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_mm_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_mm_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_mm_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    requests integer NOT NULL,
    ads_served integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_mm_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_mx_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_mx_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_name character varying(255),
    total_ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_cost double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    clicks integer,
    cost double precision,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.monthly_mx_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_mx_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_mx_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    total_ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    cost double precision NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    event_count integer
);


ALTER TABLE adnetwork.monthly_mx_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_sp_blue_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_sp_blue_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_ppc_revenue double precision NOT NULL,
    ppc_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    verve_revenue_share double precision,
    revenue double precision,
    requests integer,
    paid_impressions integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.monthly_sp_blue_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_sp_blue_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_sp_blue_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_ppc_revenue double precision NOT NULL,
    ppc_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    verve_revenue_share double precision,
    revenue double precision,
    requests integer,
    paid_impressions integer,
    clicks integer,
    event_count integer
);


ALTER TABLE adnetwork.monthly_sp_blue_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_sp_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_sp_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_sp_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_sp_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_sp_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE adnetwork.monthly_sp_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_wh_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_wh_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_keyword character varying(255),
    total_requests integer NOT NULL,
    total_filled integer NOT NULL,
    total_clicked integer NOT NULL,
    total_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    filled integer,
    clicked integer,
    revenue double precision,
    displayed_impressions integer,
    displayed_impressions_rate double precision,
    total_displayed_impressions integer
);


ALTER TABLE adnetwork.monthly_wh_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_wh_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_wh_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    requests integer NOT NULL,
    filled integer NOT NULL,
    clicked integer NOT NULL,
    revenue double precision NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    displayed_impressions integer
);


ALTER TABLE adnetwork.monthly_wh_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_yp_no_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_yp_no_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    displayed_impressions integer,
    displayed_impressions_rate double precision,
    total_displayed_impressions integer,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.monthly_yp_no_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_yp_no_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_yp_no_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    displayed_impressions integer,
    event_count integer
);


ALTER TABLE adnetwork.monthly_yp_no_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_yp_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_yp_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14)
);


ALTER TABLE adnetwork.monthly_yp_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_yp_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_yp_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer
);


ALTER TABLE adnetwork.monthly_yp_performance_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_yp_sb_performance; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_yp_sb_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    displayed_impressions integer,
    displayed_impressions_rate double precision,
    total_displayed_impressions integer,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE adnetwork.monthly_yp_sb_performance OWNER TO warehouse_dbo;

--
-- Name: monthly_yp_sb_performance_by_date; Type: TABLE; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE TABLE monthly_yp_sb_performance_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    site_counts integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    impressions integer,
    total_clicks integer,
    clicks integer,
    displayed_impressions integer,
    event_count integer
);


ALTER TABLE adnetwork.monthly_yp_sb_performance_by_date OWNER TO warehouse_dbo;

SET search_path = adsops, pg_catalog;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: daily_agg_delivery; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_source_id integer DEFAULT (-100) NOT NULL,
    ad_source_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    ad_network_id character varying(255) NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    advertiser_id integer DEFAULT (-100) NOT NULL,
    advertiser_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer DEFAULT (-100) NOT NULL,
    adm_order_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer DEFAULT (-100) NOT NULL,
    flight_impressions integer DEFAULT 0 NOT NULL,
    flight_metric character varying(50) DEFAULT 'N/A'::character varying NOT NULL,
    flight_rate double precision DEFAULT 0 NOT NULL,
    flight_budget double precision DEFAULT 0 NOT NULL,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    flight_cancelled_at timestamp with time zone,
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    daily_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    daily_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_adnetwork_publisher; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_adnetwork_publisher (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    daily_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    daily_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_adnetwork_publisher OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_adnetwork_publisher_beta; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_adnetwork_publisher_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    daily_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    daily_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_adnetwork_publisher_beta OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_adnetwork_publisher_v3; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_adnetwork_publisher_v3 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    filled_requests integer DEFAULT 0 NOT NULL,
    unfilled_requests integer DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    pub_revenue double precision,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    total_filled_requests_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL,
    ui_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_adnetwork_publisher_v3 OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: daily_agg_delivery_advertiser; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE daily_agg_delivery_advertiser (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    organization_id integer DEFAULT (-100) NOT NULL,
    organization_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    publisher_id integer DEFAULT (-100) NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    advertiser_id integer DEFAULT (-100) NOT NULL,
    advertiser_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    order_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    order_id integer DEFAULT (-100) NOT NULL,
    flight_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer DEFAULT (-100) NOT NULL,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_quantity integer NOT NULL,
    portal_id integer DEFAULT (-100) NOT NULL,
    portal_keyword character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    booked_value double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    booked_units integer DEFAULT 0 NOT NULL,
    delivery_rate double precision DEFAULT 0 NOT NULL,
    impressions integer DEFAULT 0 NOT NULL,
    gross_revenue double precision DEFAULT 0 NOT NULL,
    ecpm double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_advertiser OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_advertiser_beta; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE daily_agg_delivery_advertiser_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    organization_id integer DEFAULT (-100) NOT NULL,
    organization_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    publisher_id integer DEFAULT (-100) NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    advertiser_id integer DEFAULT (-100) NOT NULL,
    advertiser_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    order_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    order_id integer DEFAULT (-100) NOT NULL,
    flight_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer DEFAULT (-100) NOT NULL,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_quantity integer NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    booked_value double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    booked_units integer DEFAULT 0 NOT NULL,
    delivery_rate double precision DEFAULT 0 NOT NULL,
    impressions integer DEFAULT 0 NOT NULL,
    gross_revenue double precision DEFAULT 0 NOT NULL,
    ecpm double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_advertiser_beta OWNER TO warehouse_dbo;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: daily_agg_delivery_publisher_property; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_publisher_property (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    daily_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    daily_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_publisher_property OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_publisher_property_beta; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_publisher_property_beta (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    daily_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    daily_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_publisher_property_beta OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_publisher_property_beta_temp; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_publisher_property_beta_temp (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    daily_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    daily_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_publisher_property_beta_temp OWNER TO warehouse_dbo;

SET default_tablespace = adm_tablespace;

--
-- Name: daily_agg_delivery_publisher_property_beta_y2013_m03; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_delivery_publisher_property_beta_y2013_m03 (
    CONSTRAINT daily_agg_delivery_publisher_property_beta_y2013_m03_check CHECK (((eastern_date_sk >= 2982) AND (eastern_date_sk <= 3012)))
)
INHERITS (daily_agg_delivery_publisher_property_beta);


ALTER TABLE adsops.daily_agg_delivery_publisher_property_beta_y2013_m03 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_delivery_publisher_property_beta_y2013_m04; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_agg_delivery_publisher_property_beta_y2013_m04 (
    CONSTRAINT daily_agg_delivery_publisher_property_beta_y2013_m04_check CHECK (((eastern_date_sk >= 3013) AND (eastern_date_sk <= 3042)))
)
INHERITS (daily_agg_delivery_publisher_property_beta);


ALTER TABLE adsops.daily_agg_delivery_publisher_property_beta_y2013_m04 OWNER TO warehouse_dbo;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: daily_agg_delivery_publisher_property_v3; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_delivery_publisher_property_v3 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    filled_requests integer DEFAULT 0 NOT NULL,
    unfilled_requests integer DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_today double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    pub_revenue double precision,
    total_yes_responses_today integer DEFAULT 0 NOT NULL,
    total_filled_requests_today integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL,
    ui_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.daily_agg_delivery_publisher_property_v3 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_local_zero_delivered; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_local_zero_delivered (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    order_id integer DEFAULT (-100) NOT NULL,
    order_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    network_id integer NOT NULL,
    flight_sk integer DEFAULT (-100) NOT NULL,
    flight_id integer DEFAULT (-100) NOT NULL,
    flight_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision DEFAULT 0 NOT NULL,
    flight_budget double precision DEFAULT 0 NOT NULL,
    flight_quantity integer DEFAULT 0 NOT NULL,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    flight_impressions integer DEFAULT 0 NOT NULL,
    flight_clicks integer DEFAULT 0 NOT NULL,
    zero_impressions_date timestamp without time zone,
    zero_clicks_date timestamp without time zone,
    consecutive_days_zero_impressions integer DEFAULT 0 NOT NULL,
    consecutive_days_zero_clicks integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_local_zero_delivered OWNER TO warehouse_dbo;

--
-- Name: daily_agg_local_zero_delivered_v1; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_local_zero_delivered_v1 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer DEFAULT (-100) NOT NULL,
    publisher_name character varying(255),
    order_id integer DEFAULT (-100) NOT NULL,
    order_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    order_updated_by character varying(255),
    network_id integer NOT NULL,
    flight_sk integer DEFAULT (-100) NOT NULL,
    flight_id integer DEFAULT (-100) NOT NULL,
    flight_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision DEFAULT 0 NOT NULL,
    flight_budget double precision DEFAULT 0 NOT NULL,
    flight_quantity integer DEFAULT 0 NOT NULL,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    flight_impressions integer DEFAULT 0 NOT NULL,
    flight_clicks integer DEFAULT 0 NOT NULL,
    flight_active_ads_count integer DEFAULT 0 NOT NULL,
    flight_actual_delivery double precision DEFAULT 0 NOT NULL,
    flight_expected_delivery double precision DEFAULT 0 NOT NULL,
    flight_updated_by character varying(255),
    zero_impressions_date timestamp without time zone,
    zero_clicks_date timestamp without time zone,
    consecutive_days_zero_impressions integer DEFAULT 0 NOT NULL,
    consecutive_days_zero_clicks integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_local_zero_delivered_v1 OWNER TO warehouse_dbo;

--
-- Name: daily_agg_low_rate; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_agg_low_rate (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    order_created_at timestamp with time zone,
    publisher_id integer,
    publisher_name character varying(255),
    publisher_email character varying(255),
    organization_id integer,
    organization_name character varying(255),
    flight_id integer,
    dfp_flight_id integer,
    flight_name character varying(255),
    flight_rate double precision,
    flight_metric character varying(50),
    flight_created_at timestamp with time zone,
    flight_created_by character varying(255),
    flight_updated_at timestamp with time zone,
    flight_updated_by character varying(255),
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    flight_quantity integer,
    network_id integer,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_agg_low_rate OWNER TO warehouse_dbo;

--
-- Name: daily_infobright_counts; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_infobright_counts (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    report_date text,
    group_type text,
    group_value text,
    day_8 integer NOT NULL,
    day_7 integer NOT NULL,
    day_6 integer NOT NULL,
    day_5 integer NOT NULL,
    day_4 integer NOT NULL,
    day_3 integer NOT NULL,
    day_2 integer NOT NULL,
    day_1 integer NOT NULL,
    delta_7 double precision,
    delta_6 double precision,
    delta_5 double precision,
    delta_4 double precision,
    delta_3 double precision,
    delta_2 double precision,
    delta_1 double precision,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.daily_infobright_counts OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_delivery_adnetwork_publisher_beta; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_agg_delivery_adnetwork_publisher_beta (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    monthly_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_this_month double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    monthly_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_this_month integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.monthly_agg_delivery_adnetwork_publisher_beta OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_delivery_adnetwork_publisher_v3; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_agg_delivery_adnetwork_publisher_v3 (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests bigint DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count bigint DEFAULT 0 NOT NULL,
    fullfilled_code_y bigint DEFAULT 0 NOT NULL,
    fullfilled_code_n bigint DEFAULT 0 NOT NULL,
    fullfilled_code_e bigint DEFAULT 0 NOT NULL,
    fullfilled_code_t bigint DEFAULT 0 NOT NULL,
    filled_requests bigint DEFAULT 0 NOT NULL,
    unfilled_requests bigint DEFAULT 0 NOT NULL,
    undisplayed_impressions bigint DEFAULT 0 NOT NULL,
    verve_impressions bigint DEFAULT 0 NOT NULL,
    reported_impressions bigint DEFAULT 0 NOT NULL,
    clicks bigint DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_this_month double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    pub_revenue double precision,
    total_yes_responses_this_month bigint DEFAULT 0 NOT NULL,
    total_filled_requests_this_month bigint DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events bigint DEFAULT 0 NOT NULL,
    ui_count bigint DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.monthly_agg_delivery_adnetwork_publisher_v3 OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_delivery_publisher_property_beta; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_agg_delivery_publisher_property_beta (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests integer DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    response_percentage double precision DEFAULT 0 NOT NULL,
    monthly_share_response_percentage double precision DEFAULT 0 NOT NULL,
    avg_daisy_chain_depth double precision DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    undisplayed_percentage double precision DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    pub_fill_percentage double precision DEFAULT 0 NOT NULL,
    impressions_discrepancy_percentage double precision DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    ctr double precision DEFAULT 0 NOT NULL,
    cpm double precision DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_this_month double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    verve_rpm double precision,
    pub_revenue double precision,
    pub_rpm double precision,
    monthly_rev_percentage double precision DEFAULT 0 NOT NULL,
    total_yes_responses_this_month integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.monthly_agg_delivery_publisher_property_beta OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_delivery_publisher_property_v3; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_agg_delivery_publisher_property_v3 (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(40) NOT NULL,
    property_id integer DEFAULT (-100) NOT NULL,
    property_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    partner_description character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) DEFAULT 'N/A'::character varying NOT NULL,
    rpt_adm_portal_id integer DEFAULT (-100) NOT NULL,
    channel_id integer DEFAULT (-100) NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    pub_rev_share_percentage double precision DEFAULT 0 NOT NULL,
    adcel_requests bigint DEFAULT 0 NOT NULL,
    adcel_requests_by_adnetwork bigint DEFAULT 0 NOT NULL,
    fullfilled_code_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_y integer DEFAULT 0 NOT NULL,
    fullfilled_code_n integer DEFAULT 0 NOT NULL,
    fullfilled_code_e integer DEFAULT 0 NOT NULL,
    fullfilled_code_t integer DEFAULT 0 NOT NULL,
    filled_requests integer DEFAULT 0 NOT NULL,
    unfilled_requests integer DEFAULT 0 NOT NULL,
    undisplayed_impressions integer DEFAULT 0 NOT NULL,
    verve_impressions integer DEFAULT 0 NOT NULL,
    reported_impressions integer DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL,
    unreported_revenue double precision DEFAULT 0 NOT NULL,
    reported_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue double precision DEFAULT 0 NOT NULL,
    total_revenue_this_month double precision DEFAULT 0 NOT NULL,
    verve_revenue double precision,
    pub_revenue double precision,
    total_yes_responses_this_month bigint DEFAULT 0 NOT NULL,
    total_filled_requests_this_month integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    bannerclick_events integer DEFAULT 0 NOT NULL,
    ui_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE adsops.monthly_agg_delivery_publisher_property_v3 OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: pro_audit; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE pro_audit (
    job_id character varying(255) NOT NULL,
    inst_id character varying(128) DEFAULT NULL::character varying,
    obj_id character varying(128) DEFAULT NULL::character varying,
    obj_type character varying(255) DEFAULT NULL::character varying,
    actor character varying(45) DEFAULT NULL::character varying,
    message_type character varying(255) DEFAULT NULL::character varying,
    message_name character varying(128) DEFAULT NULL::character varying,
    message_text_value character varying(128) DEFAULT NULL::character varying,
    message_num_value bigint,
    duration numeric(7,2) DEFAULT NULL::numeric,
    audit_time timestamp without time zone DEFAULT (now())::timestamp without time zone
);


ALTER TABLE adsops.pro_audit OWNER TO warehouse_dbo;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: weekly_agg_mcclatchy_off; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE weekly_agg_mcclatchy_off (
    year_week character varying(32) NOT NULL,
    start_week date NOT NULL,
    end_week date NOT NULL,
    start_date_sk integer NOT NULL,
    end_date_sk integer NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    dfp_order_id bigint NOT NULL,
    publisher_id integer,
    publisher_name character varying(255),
    publisher_email character varying(255),
    property_id integer,
    property_name character varying(255),
    organization_id integer,
    organization_name character varying(255),
    flight_id integer,
    dfp_flight_id bigint,
    flight_name character varying(255),
    flight_metric character varying(50),
    flight_quantity integer,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    network_id integer,
    delivery_impressions integer,
    creative_id integer,
    creative_click_through_url character varying(800),
    dfp_creative_id bigint,
    dfp_creative_name character varying(255),
    dfp_ads_size character varying(255),
    dfp_placement character varying(255),
    dfp_targeting_citeria character varying(40000),
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.weekly_agg_mcclatchy_off OWNER TO warehouse_dbo;

--
-- Name: weekly_low_rate; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE weekly_low_rate (
    year_week character varying(32) NOT NULL,
    start_week date NOT NULL,
    end_week date NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    order_created_at timestamp with time zone,
    publisher_id integer,
    publisher_name character varying(255),
    publisher_email character varying(255),
    property_id integer,
    property_name character varying(255),
    organization_id integer,
    organization_name character varying(255),
    flight_id integer,
    dfp_flight_id integer,
    flight_name character varying(255),
    flight_rate double precision,
    flight_metric character varying(50),
    flight_created_at timestamp with time zone,
    flight_updated_at timestamp with time zone,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    network_id integer,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.weekly_low_rate OWNER TO warehouse_dbo;

--
-- Name: weekly_new_booked; Type: TABLE; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE weekly_new_booked (
    year_week character varying(32) NOT NULL,
    start_week date NOT NULL,
    end_week date NOT NULL,
    order_id integer NOT NULL,
    order_name character varying(255),
    publisher_id integer,
    publisher_name character varying(255),
    publisher_email character varying(255),
    organization_id integer,
    organization_name character varying(255),
    flight_id integer,
    dfp_flight_id integer,
    flight_name character varying(255),
    flight_rate double precision,
    flight_metric character varying(50),
    flight_budget double precision,
    flight_quantity integer,
    flight_created_at timestamp with time zone,
    flight_updated_at timestamp with time zone,
    flight_start_date timestamp without time zone,
    flight_end_date timestamp without time zone,
    network_id integer,
    metro_id integer,
    dma text,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adsops.weekly_new_booked OWNER TO warehouse_dbo;

SET search_path = adstraffic, pg_catalog;

--
-- Name: daily_ad_serving_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_ad_serving_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    location_quality_100 integer DEFAULT 0
);


ALTER TABLE adstraffic.daily_ad_serving_stats OWNER TO warehouse_dbo;

--
-- Name: daily_ad_serving_stats_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_ad_serving_stats_by_content_category (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    location_quality_100 integer DEFAULT 0
);


ALTER TABLE adstraffic.daily_ad_serving_stats_by_content_category OWNER TO warehouse_dbo;

--
-- Name: daily_ad_serving_stats_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_ad_serving_stats_by_device (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    location_quality_100 integer DEFAULT 0
);


ALTER TABLE adstraffic.daily_ad_serving_stats_by_device OWNER TO warehouse_dbo;

--
-- Name: daily_adcel_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_adcel_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    total_ad_requests integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_adcel_stats OWNER TO warehouse_dbo;

--
-- Name: daily_attributed_request_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_attributed_request_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    request_count bigint NOT NULL,
    ui_count bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_attributed_request_stats OWNER TO warehouse_dbo;

--
-- Name: daily_db_sellthrough; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_db_sellthrough (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    dc_site_id integer NOT NULL,
    dart_site_name character varying(255) NOT NULL,
    metro_id bigint DEFAULT (-1) NOT NULL,
    metro_name text NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_db_sellthrough OWNER TO warehouse_dbo;

--
-- Name: daily_db_sellthrough_by_metro; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_db_sellthrough_by_metro (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    metro_id bigint DEFAULT (-1) NOT NULL,
    metro_name text NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_db_sellthrough_by_metro OWNER TO warehouse_dbo;

--
-- Name: daily_db_sellthrough_by_site; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_db_sellthrough_by_site (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    dc_site_id integer NOT NULL,
    dart_site_name character varying(255) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    impressions_delivered integer DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    impressions_booked integer DEFAULT 0
);


ALTER TABLE adstraffic.daily_db_sellthrough_by_site OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_event_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    event_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_event_stats OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats_by_adnet; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_event_stats_by_adnet (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    adnet_id integer NOT NULL,
    adnet_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    event_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_event_stats_by_adnet OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_event_stats_by_content_category (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_event_stats_by_content_category OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_event_stats_by_device (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    event_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_event_stats_by_device OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats_by_dma; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_event_stats_by_dma (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    event_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_event_stats_by_dma OWNER TO warehouse_dbo;

--
-- Name: daily_filled_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_filled_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    filled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_filled_stats OWNER TO warehouse_dbo;

--
-- Name: daily_filled_stats_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_filled_stats_by_content_category (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    filled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_filled_stats_by_content_category OWNER TO warehouse_dbo;

--
-- Name: daily_filled_stats_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_filled_stats_by_device (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    filled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_filled_stats_by_device OWNER TO warehouse_dbo;

--
-- Name: daily_filled_stats_by_dma; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_filled_stats_by_dma (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    filled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_filled_stats_by_dma OWNER TO warehouse_dbo;

--
-- Name: daily_geo_quality; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_geo_quality (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    trxids_count integer NOT NULL,
    filled_count integer NOT NULL,
    location_quality_0 integer NOT NULL,
    location_quality_5 integer NOT NULL,
    location_quality_10 integer NOT NULL,
    location_quality_20 integer NOT NULL,
    location_quality_45 integer NOT NULL,
    location_quality_50 integer NOT NULL,
    location_quality_100 integer NOT NULL,
    country_us integer NOT NULL,
    country_international integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    location_quality_1_48 integer,
    location_quality_49_50 integer,
    location_quality_51_100 integer
);


ALTER TABLE adstraffic.daily_geo_quality OWNER TO warehouse_dbo;

--
-- Name: daily_location_stats_by_metro; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_location_stats_by_metro (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    country_id bigint DEFAULT (-1) NOT NULL,
    country_alpha2 text NOT NULL,
    metro_id bigint DEFAULT (-1) NOT NULL,
    metro_name text NOT NULL,
    postal_code_id bigint DEFAULT (-1) NOT NULL,
    postal_code text NOT NULL,
    trxids_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_location_stats_by_metro OWNER TO warehouse_dbo;

--
-- Name: daily_location_stats_by_region; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_location_stats_by_region (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    country_id bigint DEFAULT (-1) NOT NULL,
    country_alpha2 text NOT NULL,
    region_id bigint DEFAULT (-1) NOT NULL,
    region_name text NOT NULL,
    postal_code_id bigint DEFAULT (-1) NOT NULL,
    postal_code text NOT NULL,
    trxids_count integer DEFAULT 0 NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_location_stats_by_region OWNER TO warehouse_dbo;

--
-- Name: daily_olap_attributed_request_by_uis; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_attributed_request_by_uis (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    uis_key character varying(255) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    request_count integer NOT NULL,
    ui_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_attributed_request_by_uis OWNER TO warehouse_dbo;

--
-- Name: daily_olap_event_by_portal; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_event_by_portal (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    event_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_event_by_portal OWNER TO warehouse_dbo;

--
-- Name: daily_olap_filled_by_portal; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_filled_by_portal (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    filled_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_filled_by_portal OWNER TO warehouse_dbo;

--
-- Name: daily_olap_trxids_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_trxids_by_content_category (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    trxids_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_trxids_by_content_category OWNER TO warehouse_dbo;

--
-- Name: daily_olap_trxids_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_trxids_by_device (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    trxids_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_trxids_by_device OWNER TO warehouse_dbo;

--
-- Name: daily_olap_trxids_by_portal; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_trxids_by_portal (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    trxids_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_trxids_by_portal OWNER TO warehouse_dbo;

--
-- Name: daily_olap_unfilled_by_portal; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_olap_unfilled_by_portal (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    location_quality integer NOT NULL,
    unfilled_count integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_olap_unfilled_by_portal OWNER TO warehouse_dbo;

--
-- Name: daily_unfilled_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_unfilled_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    unfilled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_unfilled_stats OWNER TO warehouse_dbo;

--
-- Name: daily_unfilled_stats_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_unfilled_stats_by_content_category (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    unfilled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_unfilled_stats_by_content_category OWNER TO warehouse_dbo;

--
-- Name: daily_unfilled_stats_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_unfilled_stats_by_device (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    unfilled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_unfilled_stats_by_device OWNER TO warehouse_dbo;

--
-- Name: daily_unfilled_stats_by_dma; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE daily_unfilled_stats_by_dma (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    unfilled_count integer NOT NULL,
    location_quality_100 integer DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.daily_unfilled_stats_by_dma OWNER TO warehouse_dbo;

--
-- Name: monthly_ad_serving_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_ad_serving_stats (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    fullfilled_code_count bigint NOT NULL,
    fullfilled_code_y bigint NOT NULL,
    fullfilled_code_n bigint NOT NULL,
    fullfilled_code_e bigint NOT NULL,
    fullfilled_code_t bigint NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    total_ad_requests bigint DEFAULT (-1)
);


ALTER TABLE adstraffic.monthly_ad_serving_stats OWNER TO warehouse_dbo;

--
-- Name: monthly_ad_serving_stats_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_ad_serving_stats_by_content_category (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    fullfilled_code_count bigint NOT NULL,
    fullfilled_code_y bigint NOT NULL,
    fullfilled_code_n bigint NOT NULL,
    fullfilled_code_e bigint NOT NULL,
    fullfilled_code_t bigint NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_ad_serving_stats_by_content_category OWNER TO warehouse_dbo;

--
-- Name: monthly_ad_serving_stats_by_date; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_ad_serving_stats_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    fullfilled_code_count bigint NOT NULL,
    fullfilled_code_y bigint NOT NULL,
    fullfilled_code_n bigint NOT NULL,
    fullfilled_code_e bigint NOT NULL,
    fullfilled_code_t bigint NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    total_ad_requests bigint DEFAULT (-1)
);


ALTER TABLE adstraffic.monthly_ad_serving_stats_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_ad_serving_stats_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_ad_serving_stats_by_device (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    fullfilled_code_count bigint NOT NULL,
    fullfilled_code_y bigint NOT NULL,
    fullfilled_code_n bigint NOT NULL,
    fullfilled_code_e bigint NOT NULL,
    fullfilled_code_t bigint NOT NULL,
    duration bigint NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_ad_serving_stats_by_device OWNER TO warehouse_dbo;

--
-- Name: monthly_unfilled_stats; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_unfilled_stats (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    unfilled_count bigint NOT NULL,
    location_quality_100 bigint DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_unfilled_stats OWNER TO warehouse_dbo;

--
-- Name: monthly_unfilled_stats_by_content_category; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_unfilled_stats_by_content_category (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    unfilled_count bigint NOT NULL,
    location_quality_100 bigint DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_unfilled_stats_by_content_category OWNER TO warehouse_dbo;

--
-- Name: monthly_unfilled_stats_by_date; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_unfilled_stats_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    unfilled_count bigint NOT NULL,
    location_quality_100 bigint DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_unfilled_stats_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_unfilled_stats_by_device; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_unfilled_stats_by_device (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    organic boolean,
    device_type character varying(64),
    device_manufacturer character varying(64),
    unfilled_count bigint NOT NULL,
    location_quality_100 bigint DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_unfilled_stats_by_device OWNER TO warehouse_dbo;

--
-- Name: monthly_unfilled_stats_by_dma; Type: TABLE; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE TABLE monthly_unfilled_stats_by_dma (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    metro_id bigint NOT NULL,
    metro_name text NOT NULL,
    country_id bigint NOT NULL,
    country_alpha2 text NOT NULL,
    country_name text NOT NULL,
    unfilled_count bigint NOT NULL,
    location_quality_100 bigint DEFAULT 0,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE adstraffic.monthly_unfilled_stats_by_dma OWNER TO warehouse_dbo;

SET search_path = billing, pg_catalog;

SET default_tablespace = billing_tablespace;

--
-- Name: ba_adsense_dblck_channel; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_adsense_dblck_channel (
    month_sk integer NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    ga_channel_sk integer NOT NULL,
    dc_site_sk integer NOT NULL,
    partner_sk integer NOT NULL,
    portal_sk integer NOT NULL,
    eastern_start_full_date date,
    eastern_end_full_date date,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    channel_page_views integer NOT NULL,
    channel_clicks integer NOT NULL,
    channel_page_ctr double precision NOT NULL,
    channel_cpc double precision NOT NULL,
    channel_page_rpm double precision NOT NULL,
    channel_estimated_earnings double precision NOT NULL,
    total_clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    process_id integer,
    total_impressions_delivered integer DEFAULT 0 NOT NULL,
    page_views integer DEFAULT 0 NOT NULL,
    clicks integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_adsense_dblck_channel OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_adnetwork_summary; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_adnetwork_summary (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_name character varying(75) NOT NULL,
    requests bigint NOT NULL,
    paid_impressions bigint NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    fullfilled_code_count bigint NOT NULL,
    fullfilled_code_y bigint NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_billable_impressions bigint DEFAULT 0 NOT NULL,
    parent1_id integer,
    parent1_name character varying(40),
    partner_id integer,
    partner_name character varying(75),
    ad_network_id integer DEFAULT 0 NOT NULL,
    portal_id integer DEFAULT (-100) NOT NULL,
    displayed_impressions integer DEFAULT 0 NOT NULL,
    event_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_monthly_adnetwork_summary OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_adsense_dbclk_channel; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_adsense_dbclk_channel (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    estimated_earnings double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    requests integer,
    fullfilled_code_count integer,
    fullfilled_code_y integer,
    fullfilled_code_n integer,
    fullfilled_code_e integer,
    fullfilled_code_t integer,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_monthly_adsense_dbclk_channel OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_advance_digital; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_advance_digital (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    platform_id integer NOT NULL,
    platform_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    flight_id integer NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    impressions integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE billing.ba_monthly_advance_digital OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_cg_mobile_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_cg_mobile_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    monthly_ys integer DEFAULT 0,
    monthly_estimate_revenue double precision DEFAULT 0,
    total_monthly_estimate_revenue double precision DEFAULT 0,
    p_estimate_revenue double precision DEFAULT 0,
    v_estimate_revenue double precision DEFAULT 0,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision
);


ALTER TABLE billing.ba_monthly_cg_mobile_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_cg_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_cg_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    placement character varying(255),
    requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    total_estimated_net_earnings double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    estimated_net_earnings double precision,
    monthly_ys integer DEFAULT 0,
    monthly_estimate_revenue double precision DEFAULT 0,
    total_monthly_estimate_revenue double precision DEFAULT 0,
    p_estimate_revenue double precision DEFAULT 0,
    v_estimate_revenue double precision DEFAULT 0,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    total_fullfilled_code_count integer,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE billing.ba_monthly_cg_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_it_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_it_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    app_name character varying(255),
    requests double precision NOT NULL,
    impressions double precision NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE billing.ba_monthly_it_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_jt_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_jt_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site character varying(255),
    total_requests integer NOT NULL,
    total_paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    paid_impressions integer,
    clicks integer,
    net_revenue double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_monthly_jt_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_kt_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_kt_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    subid character varying(255),
    views integer NOT NULL,
    paid_impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_monthly_kt_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_local_revenue_v5; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_local_revenue_v5 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    partner_id integer NOT NULL,
    partner_revenue_share integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE billing.ba_monthly_local_revenue_v5 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_mm_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_mm_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    id integer NOT NULL,
    name character varying(255),
    requests integer NOT NULL,
    ads_served integer NOT NULL,
    clicks integer NOT NULL,
    net_revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_monthly_mm_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_mx_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_mx_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_name character varying(255),
    total_ad_requests integer NOT NULL,
    paid_impressions integer NOT NULL,
    total_clicks integer NOT NULL,
    total_cost double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    clicks integer,
    cost double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    ad_network_id integer NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE billing.ba_monthly_mx_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_national_revenue_v5; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_national_revenue_v5 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_revenue_share integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE billing.ba_monthly_national_revenue_v5 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_publisher_revenue_v5; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_publisher_revenue_v5 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    partner_revenue_share double precision DEFAULT 0 NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    cf_factor double precision DEFAULT 1 NOT NULL,
    api_revenue double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    adjusted_billable_revenue double precision
);


ALTER TABLE billing.ba_monthly_publisher_revenue_v5 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_sp_blue_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_sp_blue_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_ppc_revenue double precision NOT NULL,
    ppc_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    verve_revenue_share double precision,
    revenue double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    requests integer,
    paid_impressions integer,
    clicks integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    ad_network_id integer NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE billing.ba_monthly_sp_blue_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_vlm_revenue_v5; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_vlm_revenue_v5 (
    calendar_year_month character varying(32) NOT NULL,
    eastern_start_date_sk integer NOT NULL,
    eastern_end_date_sk integer NOT NULL,
    month_since_2005 integer NOT NULL,
    month character varying(32),
    year integer,
    data_source integer NOT NULL,
    network_id integer NOT NULL,
    dfp_advertiser_id integer DEFAULT (-100) NOT NULL,
    dfp_advertiser_name character varying(250) DEFAULT 'N/A'::character varying NOT NULL,
    adm_order_id integer NOT NULL,
    adm_order_name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) DEFAULT 'N/A'::character varying NOT NULL,
    partner_id integer NOT NULL,
    partner_revenue_share integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    flight_clicks integer NOT NULL,
    flight_metric character varying(50) NOT NULL,
    flight_rate double precision NOT NULL,
    flight_budget double precision NOT NULL,
    flight_start_date timestamp without time zone NOT NULL,
    flight_end_date timestamp without time zone NOT NULL,
    verve_rate double precision DEFAULT 0 NOT NULL,
    booked_rate double precision DEFAULT 0 NOT NULL,
    billable_rate double precision DEFAULT 0 NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue double precision NOT NULL,
    gross_revenue double precision NOT NULL,
    billable_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    delivered_units integer DEFAULT 0 NOT NULL,
    total_num_of_days_in_billing_period integer DEFAULT 0 NOT NULL,
    booked_units double precision DEFAULT 0 NOT NULL,
    total_units_up_to_month double precision DEFAULT 0 NOT NULL,
    partner_units_share double precision DEFAULT 0 NOT NULL,
    remaining_units integer DEFAULT 0 NOT NULL,
    partner_remaining_units integer DEFAULT 0 NOT NULL,
    billable_units integer DEFAULT 0 NOT NULL,
    partner_billable_units integer DEFAULT 0 NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE billing.ba_monthly_vlm_revenue_v5 OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_wh_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_wh_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    site_keyword character varying(255),
    total_requests integer NOT NULL,
    total_filled integer NOT NULL,
    total_clicked integer NOT NULL,
    total_revenue double precision NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    fullfilled_code_n integer NOT NULL,
    fullfilled_code_e integer NOT NULL,
    fullfilled_code_t integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_fullfilled_code_y integer,
    fullfilled_code_y_rate double precision,
    requests integer,
    filled integer,
    clicked integer,
    revenue double precision,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision
);


ALTER TABLE billing.ba_monthly_wh_performance OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: ba_monthly_yp_no_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE ba_monthly_yp_no_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE billing.ba_monthly_yp_no_performance OWNER TO warehouse_dbo;

SET default_tablespace = billing_tablespace;

--
-- Name: ba_monthly_yp_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_yp_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    total_billable_impressions integer DEFAULT 0 NOT NULL
);


ALTER TABLE billing.ba_monthly_yp_performance OWNER TO warehouse_dbo;

--
-- Name: ba_monthly_yp_sb_performance; Type: TABLE; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE TABLE ba_monthly_yp_sb_performance (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(40) NOT NULL,
    fullfilled_code_count integer NOT NULL,
    fullfilled_code_y integer NOT NULL,
    total_fullfilled_code_y integer NOT NULL,
    fullfilled_code_y_rate double precision NOT NULL,
    total_revenue double precision NOT NULL,
    revenue double precision NOT NULL,
    channel_id integer NOT NULL,
    gross_revenue double precision NOT NULL,
    p_net_revenue double precision NOT NULL,
    v_net_revenue double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    total_requests integer,
    requests integer,
    total_impressions integer,
    total_clicks integer,
    clicks integer,
    impressions integer,
    portal_id integer,
    portal_name character varying(45),
    portal_keyword character varying(14),
    total_billable_impressions integer DEFAULT 0 NOT NULL,
    displayed_impressions integer,
    total_displayed_impressions integer,
    displayed_impressions_rate double precision,
    event_count integer,
    total_event_count integer,
    event_count_rate double precision
);


ALTER TABLE billing.ba_monthly_yp_sb_performance OWNER TO warehouse_dbo;

SET search_path = control, pg_catalog;

SET default_tablespace = control_tablespace;

--
-- Name: adm_checkpoint; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE adm_checkpoint (
    id integer NOT NULL,
    file_name character varying(255),
    status character varying(255),
    downloaded_date character varying(255),
    app character varying(255),
    server character varying(255)
);


ALTER TABLE control.adm_checkpoint OWNER TO warehouse_dbo;

--
-- Name: adm_checkpoint_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_checkpoint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.adm_checkpoint_id_seq OWNER TO warehouse_dbo;

--
-- Name: adm_checkpoint_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_checkpoint_id_seq OWNED BY adm_checkpoint.id;


SET default_tablespace = adm_tablespace;

--
-- Name: daily_process_status; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE TABLE daily_process_status (
    process_id integer NOT NULL,
    full_date date NOT NULL,
    group_process_name character varying(32) NOT NULL,
    process_config_id integer NOT NULL,
    process_status character varying(32) NOT NULL,
    update_time timestamp without time zone DEFAULT now() NOT NULL,
    register_time timestamp without time zone DEFAULT now() NOT NULL,
    process_id_checking integer DEFAULT 0 NOT NULL,
    e_star_time time without time zone DEFAULT '00:00:00'::time without time zone,
    e_completion_time time without time zone DEFAULT '00:00:00'::time without time zone,
    note_status character varying(32)
);


ALTER TABLE control.daily_process_status OWNER TO warehouse_dbo;

--
-- Name: daily_process_status_process_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE daily_process_status_process_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.daily_process_status_process_id_seq OWNER TO warehouse_dbo;

--
-- Name: daily_process_status_process_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE daily_process_status_process_id_seq OWNED BY daily_process_status.process_id;


SET default_tablespace = control_tablespace;

--
-- Name: data_current_up_to_date; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE data_current_up_to_date (
    table_name text NOT NULL,
    table_type character(1) NOT NULL,
    current_up_to timestamp without time zone NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.data_current_up_to_date OWNER TO warehouse_dbo;

--
-- Name: data_file; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE data_file (
    data_file_id integer NOT NULL,
    file_name character varying(255) NOT NULL,
    server_name character varying(16) NOT NULL,
    file_timestamp timestamp without time zone NOT NULL,
    data_file_config_id smallint NOT NULL,
    file_status character varying(2) NOT NULL,
    dt_file_queued timestamp without time zone NOT NULL,
    dt_file_extracted timestamp without time zone,
    dt_process_transformed timestamp without time zone,
    dt_process_loaded timestamp without time zone,
    min_eastern_date_sk integer,
    max_eastern_date_sk integer,
    backup_filename_id integer,
    pre_transform_count integer,
    staging_load_count integer,
    fact_table_load_count integer
);


ALTER TABLE control.data_file OWNER TO warehouse_dbo;

--
-- Name: data_file_config_data_file_config_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE data_file_config_data_file_config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.data_file_config_data_file_config_id_seq OWNER TO warehouse_dbo;

--
-- Name: data_file_configuration; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE data_file_configuration (
    data_file_config_id smallint DEFAULT nextval('data_file_config_data_file_config_id_seq'::regclass) NOT NULL,
    data_file_config_name character varying(64) NOT NULL,
    data_file_config_description character varying(64),
    data_file_target_table character varying(64) NOT NULL,
    data_file_type character(1) NOT NULL,
    unzip boolean NOT NULL,
    transform_on_import boolean NOT NULL,
    import_dir character varying(64) NOT NULL,
    success_dir character varying(64) NOT NULL,
    error_dir character varying(64) NOT NULL,
    data_file_column_list text NOT NULL,
    data_file_load_options text,
    data_file_mask text,
    transform_script_name character varying(64),
    data_file_process_function character varying(64) NOT NULL,
    data_file_process_wrapper_name character varying(64) NOT NULL,
    process_precedence smallint NOT NULL
);


ALTER TABLE control.data_file_configuration OWNER TO warehouse_dbo;

--
-- Name: data_file_data_file_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE data_file_data_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.data_file_data_file_id_seq OWNER TO warehouse_dbo;

--
-- Name: data_file_data_file_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE data_file_data_file_id_seq OWNED BY data_file.data_file_id;


--
-- Name: email_notification_log; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE email_notification_log (
    email_notification_log_id integer NOT NULL,
    sender text NOT NULL,
    recipient text NOT NULL,
    subject text NOT NULL,
    message text,
    status smallint NOT NULL,
    dt_sent timestamp without time zone,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.email_notification_log OWNER TO warehouse_dbo;

--
-- Name: email_notification_log_email_notification_log_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE email_notification_log_email_notification_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.email_notification_log_email_notification_log_id_seq OWNER TO warehouse_dbo;

--
-- Name: email_notification_log_email_notification_log_id_seq1; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE email_notification_log_email_notification_log_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.email_notification_log_email_notification_log_id_seq1 OWNER TO warehouse_dbo;

--
-- Name: email_notification_log_email_notification_log_id_seq1; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE email_notification_log_email_notification_log_id_seq1 OWNED BY email_notification_log.email_notification_log_id;


--
-- Name: emaill_reports_schedule; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE emaill_reports_schedule (
    schedule_id integer NOT NULL,
    schedule_type character varying(250) NOT NULL,
    email_to character varying(250) NOT NULL,
    report_file_type character varying(250) NOT NULL,
    report_name character varying(250) NOT NULL,
    solution character varying(250) NOT NULL,
    path character varying(250) NOT NULL,
    xaction_file character varying(250) NOT NULL,
    parameter_string character varying(550) NOT NULL,
    next_fire_time timestamp without time zone,
    last_fire_time timestamp without time zone,
    report_agg_table character varying(250),
    report_group character varying(250) DEFAULT 'other'::character varying NOT NULL,
    parameter_string_example character varying(250) DEFAULT ''::character varying NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


ALTER TABLE control.emaill_reports_schedule OWNER TO warehouse_dbo;

--
-- Name: emaill_reports_schedule_schedule_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE emaill_reports_schedule_schedule_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.emaill_reports_schedule_schedule_id_seq OWNER TO warehouse_dbo;

--
-- Name: emaill_reports_schedule_schedule_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE emaill_reports_schedule_schedule_id_seq OWNED BY emaill_reports_schedule.schedule_id;


--
-- Name: etl_checkpoint; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE etl_checkpoint (
    id integer NOT NULL,
    dw_process_id integer,
    file_id integer,
    file_name character varying(255),
    status character varying(255),
    row_count integer,
    created_at timestamp without time zone,
    created_by character varying(255),
    updated_at timestamp without time zone,
    updated_by character varying(255)
);


ALTER TABLE control.etl_checkpoint OWNER TO warehouse_dbo;

--
-- Name: etl_checkpoint_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE etl_checkpoint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.etl_checkpoint_id_seq OWNER TO warehouse_dbo;

--
-- Name: etl_checkpoint_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE etl_checkpoint_id_seq OWNED BY etl_checkpoint.id;


--
-- Name: failure_notification_whitelist; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE failure_notification_whitelist (
    sqlstate character varying(5) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.failure_notification_whitelist OWNER TO warehouse_dbo;

--
-- Name: pree_agg_log_dim_checkpoint_id_seq; Type: SEQUENCE; Schema: control; Owner: dataman
--

CREATE SEQUENCE pree_agg_log_dim_checkpoint_id_seq
    START WITH 726592
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.pree_agg_log_dim_checkpoint_id_seq OWNER TO dataman;

SET default_tablespace = '';

--
-- Name: pro_audit; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE pro_audit (
    job_id character varying(255) NOT NULL,
    inst_id character varying(128) DEFAULT NULL::character varying,
    obj_id character varying(128) DEFAULT NULL::character varying,
    obj_type character varying(255) DEFAULT NULL::character varying,
    actor character varying(45) DEFAULT NULL::character varying,
    message_type character varying(255) DEFAULT NULL::character varying,
    message_name character varying(128) DEFAULT NULL::character varying,
    message_text_value character varying(128) DEFAULT NULL::character varying,
    message_num_value bigint,
    duration numeric(7,2) DEFAULT NULL::numeric,
    audit_time timestamp without time zone DEFAULT (now())::timestamp without time zone
);


ALTER TABLE control.pro_audit OWNER TO warehouse_dbo;

--
-- Name: pro_audit_run_xaction; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: 
--

CREATE TABLE pro_audit_run_xaction (
    job_id character varying(255) NOT NULL,
    inst_id character varying(128) DEFAULT NULL::character varying,
    obj_id character varying(128) DEFAULT NULL::character varying,
    obj_type character varying(255) DEFAULT NULL::character varying,
    actor character varying(45) DEFAULT NULL::character varying,
    message_type character varying(255) DEFAULT NULL::character varying,
    message_name character varying(128) DEFAULT NULL::character varying,
    message_text_value character varying(128) DEFAULT NULL::character varying,
    message_num_value bigint,
    duration numeric(7,2) DEFAULT NULL::numeric,
    audit_time timestamp without time zone DEFAULT (now())::timestamp without time zone,
    completed boolean,
    duration_instance_end numeric(7,2) DEFAULT NULL::numeric
);


ALTER TABLE control.pro_audit_run_xaction OWNER TO warehouse_dbo;

SET default_tablespace = control_tablespace;

--
-- Name: process; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE process (
    process_id integer NOT NULL,
    process_config_id smallint NOT NULL,
    process_status character varying(2) NOT NULL,
    min_partition_key integer NOT NULL,
    max_partition_key integer NOT NULL,
    min_data_file_id integer,
    max_data_file_id integer,
    dt_process_queued timestamp without time zone NOT NULL,
    dt_process_completed timestamp without time zone,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.process OWNER TO warehouse_dbo;

--
-- Name: process_checkpoint; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE process_checkpoint (
    process_config_id integer NOT NULL,
    last_key integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.process_checkpoint OWNER TO warehouse_dbo;

--
-- Name: process_concurrent_trans; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE process_concurrent_trans (
    process_id integer NOT NULL,
    concurrent_trans_name text NOT NULL,
    is_complete boolean NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.process_concurrent_trans OWNER TO warehouse_dbo;

--
-- Name: process_config_process_config_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE process_config_process_config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.process_config_process_config_id_seq OWNER TO warehouse_dbo;

--
-- Name: process_configuration; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE process_configuration (
    process_config_id smallint DEFAULT nextval('process_config_process_config_id_seq'::regclass) NOT NULL,
    process_config_name character varying(64) NOT NULL,
    process_config_description character varying(64),
    process_function character varying(64) NOT NULL,
    process_wrapper_name character varying(64) NOT NULL,
    process_precedence smallint NOT NULL
);


ALTER TABLE control.process_configuration OWNER TO warehouse_dbo;

--
-- Name: process_process_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE process_process_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.process_process_id_seq OWNER TO warehouse_dbo;

--
-- Name: process_process_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE process_process_id_seq OWNED BY process.process_id;


--
-- Name: process_temp; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE process_temp (
    process_temp_id integer NOT NULL,
    process_config_id smallint NOT NULL,
    process_status character varying(2) NOT NULL,
    min_partition_key integer NOT NULL,
    max_partition_key integer NOT NULL,
    min_data_file_id integer,
    max_data_file_id integer,
    dt_process_queued timestamp without time zone NOT NULL,
    dt_process_completed timestamp without time zone,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.process_temp OWNER TO warehouse_dbo;

--
-- Name: process_temp_process_temp_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE process_temp_process_temp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.process_temp_process_temp_id_seq OWNER TO warehouse_dbo;

--
-- Name: process_temp_process_temp_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE process_temp_process_temp_id_seq OWNED BY process_temp.process_temp_id;


--
-- Name: system_parameter; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE system_parameter (
    parameter text NOT NULL,
    value text NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE control.system_parameter OWNER TO warehouse_dbo;

SET default_tablespace = '';

--
-- Name: transfer_file_log; Type: TABLE; Schema: control; Owner: dataman; Tablespace: 
--

CREATE TABLE transfer_file_log (
    id integer DEFAULT nextval('pree_agg_log_dim_checkpoint_id_seq'::regclass) NOT NULL,
    full_date character varying(12),
    file_name character varying(255),
    full_location_source character varying(1024),
    file_size_source integer,
    full_location_destination character varying(1024),
    file_size_destination bigint,
    status character varying(255),
    data_file_type character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    updated_by character varying(255),
    data_file_config_id smallint
);


ALTER TABLE control.transfer_file_log OWNER TO dataman;

SET default_tablespace = control_tablespace;

--
-- Name: transfer_process_log; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE transfer_process_log (
    process_id integer NOT NULL,
    full_date date DEFAULT (now())::date NOT NULL,
    from_host character varying(250) NOT NULL,
    table_name character varying(250) NOT NULL,
    conditions text,
    export_count integer DEFAULT 0 NOT NULL,
    start_time timestamp without time zone DEFAULT (now())::timestamp without time zone,
    to_host character varying(250) NOT NULL,
    end_time timestamp without time zone,
    import_count integer DEFAULT 0 NOT NULL,
    transfer_type character varying(250) DEFAULT 'normal'::character varying NOT NULL,
    is_complete boolean DEFAULT false,
    transfer_by character varying(100) DEFAULT 'human'::character varying,
    status character varying(10)
);


ALTER TABLE control.transfer_process_log OWNER TO warehouse_dbo;

--
-- Name: transfer_process_log_process_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE transfer_process_log_process_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.transfer_process_log_process_id_seq OWNER TO warehouse_dbo;

--
-- Name: transfer_process_log_process_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE transfer_process_log_process_id_seq OWNED BY transfer_process_log.process_id;


--
-- Name: transfering_checkpoint; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE transfering_checkpoint (
    id integer NOT NULL,
    process_name character varying(255),
    transfer_date character varying(255),
    status character varying(255),
    process_id integer NOT NULL
);


ALTER TABLE control.transfering_checkpoint OWNER TO warehouse_dbo;

--
-- Name: transfering_checkpoint_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE transfering_checkpoint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.transfering_checkpoint_id_seq OWNER TO warehouse_dbo;

--
-- Name: transfering_checkpoint_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE transfering_checkpoint_id_seq OWNED BY transfering_checkpoint.id;


--
-- Name: transfering_data; Type: TABLE; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE transfering_data (
    id integer NOT NULL,
    full_date character varying(255),
    process_name character varying(255),
    period integer NOT NULL,
    row_dw integer NOT NULL,
    row_nw integer NOT NULL,
    impression_dw integer NOT NULL,
    impression_nw integer NOT NULL,
    click_dw integer NOT NULL,
    click_nw integer NOT NULL,
    revenue_dw double precision NOT NULL,
    revenue_nw double precision NOT NULL,
    transfering_checkpoint_id integer NOT NULL
);


ALTER TABLE control.transfering_data OWNER TO warehouse_dbo;

--
-- Name: transfering_data_id_seq; Type: SEQUENCE; Schema: control; Owner: warehouse_dbo
--

CREATE SEQUENCE transfering_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE control.transfering_data_id_seq OWNER TO warehouse_dbo;

--
-- Name: transfering_data_id_seq; Type: SEQUENCE OWNED BY; Schema: control; Owner: warehouse_dbo
--

ALTER SEQUENCE transfering_data_id_seq OWNED BY transfering_data.id;


SET search_path = dbclk, pg_catalog;

--
-- Name: daily_agg_adm_creative; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_adm_creative (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    adm_creative_id integer NOT NULL,
    adm_placement_id integer NOT NULL,
    impression_count integer NOT NULL,
    click_count integer NOT NULL,
    revenue_total double precision NOT NULL,
    delta_prior_day_impressions character varying(50) NOT NULL,
    delta_prior_day_clicks character varying(50) NOT NULL,
    delta_prior_day_revenue character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_adm_creative OWNER TO warehouse_dbo;

--
-- Name: daily_agg_adm_creative_delivery; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_adm_creative_delivery (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    creative_id integer NOT NULL,
    impressions integer NOT NULL,
    flight_id integer NOT NULL,
    flight_impressions integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_adm_creative_delivery OWNER TO warehouse_dbo;

--
-- Name: daily_agg_campaign; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_campaign (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    campaign_id integer NOT NULL,
    campaign_name character varying(255) NOT NULL,
    impression_count integer NOT NULL,
    click_count integer NOT NULL,
    revenue_total double precision NOT NULL,
    delta_prior_day_impressions character varying(50) NOT NULL,
    delta_prior_day_clicks character varying(50) NOT NULL,
    delta_prior_day_revenue character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_campaign OWNER TO warehouse_dbo;

--
-- Name: daily_agg_publisher_device; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_publisher_device (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) NOT NULL,
    device character varying(255) NOT NULL,
    percent_device character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_publisher_device OWNER TO warehouse_dbo;

--
-- Name: daily_agg_publishers_day; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_publishers_day (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) NOT NULL,
    impression_count integer NOT NULL,
    click_count integer NOT NULL,
    revenue_total double precision NOT NULL,
    delta_prior_day_impressions character varying(50) NOT NULL,
    delta_prior_day_clicks character varying(50) NOT NULL,
    delta_prior_day_revenue character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_publishers_day OWNER TO warehouse_dbo;

--
-- Name: daily_agg_site_campaign_day; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_site_campaign_day (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    site_id integer NOT NULL,
    site_name character varying(255) NOT NULL,
    campaign_id integer NOT NULL,
    campaign_name character varying(255) NOT NULL,
    impression_count integer NOT NULL,
    click_count integer NOT NULL,
    revenue_total double precision NOT NULL,
    delta_prior_day_impressions character varying(50) NOT NULL,
    delta_prior_day_clicks character varying(50) NOT NULL,
    delta_prior_day_revenue character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_site_campaign_day OWNER TO warehouse_dbo;

--
-- Name: daily_agg_site_day; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_site_day (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    site_id integer NOT NULL,
    site_name character varying(255) NOT NULL,
    impression_count integer NOT NULL,
    click_count integer NOT NULL,
    revenue_total double precision NOT NULL,
    delta_prior_day_impressions character varying(50) NOT NULL,
    delta_prior_day_clicks character varying(50) NOT NULL,
    delta_prior_day_revenue character varying(50) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_site_day OWNER TO warehouse_dbo;

--
-- Name: daily_agg_site_order; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_agg_site_order (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    publisher_id integer NOT NULL,
    publisher_name character varying(255) NOT NULL,
    campaign_id integer NOT NULL,
    campaign_name character varying(255) NOT NULL,
    ad_id integer NOT NULL,
    creative_id integer NOT NULL,
    impression_count integer NOT NULL,
    click_count integer NOT NULL,
    revenue_total double precision NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE dbclk.daily_agg_site_order OWNER TO warehouse_dbo;

--
-- Name: daily_order_count_site; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE daily_order_count_site (
    order_id integer NOT NULL,
    site_count integer NOT NULL
);


ALTER TABLE dbclk.daily_order_count_site OWNER TO warehouse_dbo;

--
-- Name: monthly_agg_site; Type: TABLE; Schema: dbclk; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE TABLE monthly_agg_site (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    start_date_sk integer NOT NULL,
    end_date_sk integer NOT NULL,
    dc_site_id integer NOT NULL,
    dart_site_name character varying(255) NOT NULL,
    impressions_delivered integer NOT NULL,
    clicks_recorded integer NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    total_ad_requests integer DEFAULT 0,
    partner_id integer DEFAULT 0,
    partner_name character varying(75),
    parent1_id integer,
    parent1_name character varying(40),
    partner_postal_code character varying(16),
    partner_keyword character varying(50),
    portal_keyword character varying(50),
    portal_id integer DEFAULT 0,
    portal_name character varying(45),
    partner_city character varying(100),
    partner_stateabbr character varying(20),
    dmacode smallint,
    dmaname character varying(32)
);


ALTER TABLE dbclk.monthly_agg_site OWNER TO warehouse_dbo;

SET search_path = evttracker, pg_catalog;

SET default_tablespace = evttracker_tablespace;

--
-- Name: daily_event_adcel_stats; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_adcel_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_adcel_stats OWNER TO warehouse_dbo;

--
-- Name: daily_event_by_distance; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_by_distance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    distance_id integer NOT NULL,
    distance_name character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_by_distance OWNER TO warehouse_dbo;

--
-- Name: daily_event_dma; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_dma (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    dma_id bigint NOT NULL,
    dma_name text NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_dma OWNER TO warehouse_dbo;

--
-- Name: daily_event_dma_by_hour; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_dma_by_hour (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    hour24_of_day smallint NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    dma_id bigint NOT NULL,
    dma_name text NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_dma_by_hour OWNER TO warehouse_dbo;

--
-- Name: daily_event_download; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_download (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    bundle_package character varying(255) NOT NULL,
    adclick_count integer NOT NULL,
    download_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_download OWNER TO warehouse_dbo;

--
-- Name: daily_event_location_by_distance; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_location_by_distance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    store_location_id integer NOT NULL,
    external_id character varying(255),
    store_location_name character varying(255) NOT NULL,
    address1 character varying(255),
    postal_code_id integer,
    zip_code text,
    metro_id integer,
    dma_name text,
    latitude double precision,
    longitude double precision,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    distance_id integer NOT NULL,
    distance_name character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_location_by_distance OWNER TO warehouse_dbo;

--
-- Name: daily_event_maps; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_maps (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    longitude double precision,
    latitude double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_maps OWNER TO warehouse_dbo;

--
-- Name: daily_event_maps_olap; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_maps_olap (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    longitude double precision,
    latitude double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


ALTER TABLE evttracker.daily_event_maps_olap OWNER TO warehouse_dbo;

--
-- Name: daily_event_maps_olap_min; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_maps_olap_min (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


ALTER TABLE evttracker.daily_event_maps_olap_min OWNER TO warehouse_dbo;

--
-- Name: daily_event_maps_tmp; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_maps_tmp (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    longitude double precision,
    latitude double precision,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_maps_tmp OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_stats OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats_adnet; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_stats_adnet (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    adnet_id character varying(255),
    adnet_name character varying(255),
    report_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_stats_adnet OWNER TO warehouse_dbo;

--
-- Name: daily_event_stats_by_hour; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_stats_by_hour (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    hour24_of_day smallint NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_stats_by_hour OWNER TO warehouse_dbo;

--
-- Name: daily_event_x_value; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_x_value (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    x_value text NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_x_value OWNER TO warehouse_dbo;

--
-- Name: daily_event_x_value_by_hour; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_x_value_by_hour (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    hour24_of_day smallint NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    x_value text NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_x_value_by_hour OWNER TO warehouse_dbo;

--
-- Name: daily_event_x_value_report; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_event_x_value_report (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    hour24_of_day smallint NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    x_value text NOT NULL,
    adimp_count integer NOT NULL,
    expandimp_count integer NOT NULL,
    adimp2_count integer NOT NULL,
    ctaclick_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_event_x_value_report OWNER TO warehouse_dbo;

--
-- Name: daily_store_location_by_distance; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_store_location_by_distance (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    store_location_id integer NOT NULL,
    store_location_name character varying(255) NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    distance_id integer NOT NULL,
    distance_name character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_store_location_by_distance OWNER TO warehouse_dbo;

--
-- Name: daily_trane_stats; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE daily_trane_stats (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.daily_trane_stats OWNER TO warehouse_dbo;

--
-- Name: monthly_event_stats; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE monthly_event_stats (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.monthly_event_stats OWNER TO warehouse_dbo;

--
-- Name: monthly_event_stats_by_date; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE monthly_event_stats_by_date (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    full_date date NOT NULL,
    day_of_week character varying(32) NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.monthly_event_stats_by_date OWNER TO warehouse_dbo;

--
-- Name: monthly_event_stats_by_hour; Type: TABLE; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE monthly_event_stats_by_hour (
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    hour24_of_day smallint NOT NULL,
    flight_id character varying(255) NOT NULL,
    creative_id character varying(255) NOT NULL,
    event_name character varying(255) NOT NULL,
    event_count integer NOT NULL,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    process_id integer
);


ALTER TABLE evttracker.monthly_event_stats_by_hour OWNER TO warehouse_dbo;

SET search_path = public, pg_catalog;

--
-- Name: books; Type: TABLE; Schema: public; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE TABLE books (
    id integer NOT NULL,
    title text NOT NULL,
    author_id integer,
    subject_id integer
);


ALTER TABLE public.books OWNER TO warehouse_dbo;

--
-- Name: dt_expire_old; Type: TABLE; Schema: public; Owner: song; Tablespace: evttracker_tablespace
--

CREATE TABLE dt_expire_old (
    current_up_to timestamp without time zone
);


ALTER TABLE public.dt_expire_old OWNER TO song;

--
-- Name: first_rec; Type: TABLE; Schema: public; Owner: song; Tablespace: evttracker_tablespace
--

CREATE TABLE first_rec (
    data_file_id integer,
    file_name character varying(64),
    server_name character varying(16),
    file_timestamp timestamp without time zone,
    file_status character varying(2),
    data_file_target_table character varying(64),
    data_file_type character(1),
    unzip boolean,
    transform_on_import boolean,
    import_dir character varying(64),
    success_dir character varying(64),
    error_dir character varying(64),
    data_file_column_list text,
    data_file_load_options text,
    transform_script_name character varying(64),
    data_file_process_function character varying(64)
);


ALTER TABLE public.first_rec OWNER TO song;

SET default_with_oids = true;

--
-- Name: geometry_columns; Type: TABLE; Schema: public; Owner: postgres; Tablespace: evttracker_tablespace
--

CREATE TABLE geometry_columns (
    f_table_catalog character varying(256) NOT NULL,
    f_table_schema character varying(256) NOT NULL,
    f_table_name character varying(256) NOT NULL,
    f_geometry_column character varying(256) NOT NULL,
    coord_dimension integer NOT NULL,
    srid integer NOT NULL,
    type character varying(30) NOT NULL
);


ALTER TABLE public.geometry_columns OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: rec; Type: TABLE; Schema: public; Owner: song; Tablespace: evttracker_tablespace
--

CREATE TABLE rec (
    data_file_id integer,
    file_name character varying(64),
    server_name character varying(16),
    file_timestamp timestamp without time zone,
    file_status character varying(2),
    data_file_target_table character varying(64),
    data_file_type character(1),
    unzip boolean,
    transform_on_import boolean,
    import_dir character varying(64),
    success_dir character varying(64),
    error_dir character varying(64),
    data_file_column_list text,
    data_file_load_options text,
    transform_script_name character varying(64),
    data_file_process_function character varying(64)
);


ALTER TABLE public.rec OWNER TO song;

--
-- Name: spatial_ref_sys; Type: TABLE; Schema: public; Owner: postgres; Tablespace: evttracker_tablespace
--

CREATE TABLE spatial_ref_sys (
    srid integer NOT NULL,
    auth_name character varying(256),
    auth_srid integer,
    srtext character varying(2048),
    proj4text character varying(2048)
);


ALTER TABLE public.spatial_ref_sys OWNER TO postgres;

SET default_tablespace = '';

--
-- Name: tranformer_table_tmp_20130514t16571900000; Type: TABLE; Schema: public; Owner: import_export_script; Tablespace: 
--

CREATE TABLE tranformer_table_tmp_20130514t16571900000 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    network_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    placement_id integer NOT NULL,
    placement_name character varying(255),
    organization_id integer NOT NULL,
    organization_name character varying(255),
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255),
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    channel_id integer NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    p_rev_share double precision,
    v_rev_share double precision,
    dt_lastchange timestamp without time zone NOT NULL,
    is_active boolean NOT NULL,
    process_id integer,
    today_ys integer,
    today_estimate_revenue double precision,
    total_paid_impressions integer,
    total_net_revenue double precision,
    total_p_rev_share double precision,
    total_v_rev_share double precision,
    cf_factor double precision NOT NULL,
    api_revenue double precision,
    data_source integer,
    flight_ecpm double precision
);


ALTER TABLE public.tranformer_table_tmp_20130514t16571900000 OWNER TO import_export_script;

--
-- Name: tranformer_table_tmp_20130514t17115500000; Type: TABLE; Schema: public; Owner: import_export_script; Tablespace: 
--

CREATE TABLE tranformer_table_tmp_20130514t17115500000 (
    eastern_date_sk integer NOT NULL,
    full_date date NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 integer NOT NULL,
    period integer NOT NULL,
    network_id integer NOT NULL,
    network_name character varying(255),
    publisher_id integer NOT NULL,
    publisher_name character varying(255),
    property_id integer NOT NULL,
    property_name character varying(255),
    placement_id integer NOT NULL,
    placement_name character varying(255),
    organization_id integer NOT NULL,
    organization_name character varying(255),
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255),
    order_id integer NOT NULL,
    order_name character varying(255),
    flight_id integer NOT NULL,
    channel_id integer NOT NULL,
    channel_name character varying(45),
    channel_keyword character varying(45),
    partner_id integer NOT NULL,
    partner_name character varying(75) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_description character varying(255) NOT NULL,
    parent1_id integer NOT NULL,
    parent1_name character varying(40) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    portal_keyword character varying(14) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    revenue numeric NOT NULL,
    p_rev_share double precision,
    v_rev_share double precision,
    dt_lastchange timestamp without time zone NOT NULL,
    is_active boolean NOT NULL,
    process_id integer,
    today_ys integer,
    today_estimate_revenue double precision,
    total_paid_impressions integer,
    total_net_revenue double precision,
    total_p_rev_share double precision,
    total_v_rev_share double precision,
    cf_factor double precision NOT NULL,
    api_revenue double precision,
    data_source integer,
    flight_ecpm double precision
);


ALTER TABLE public.tranformer_table_tmp_20130514t17115500000 OWNER TO import_export_script;

SET default_tablespace = evttracker_tablespace;

--
-- Name: v_rec; Type: TABLE; Schema: public; Owner: song; Tablespace: evttracker_tablespace
--

CREATE TABLE v_rec (
    data_file_id integer,
    file_name character varying(64),
    server_name character varying(16),
    file_timestamp timestamp without time zone,
    file_status character varying(2),
    data_file_target_table character varying(64),
    data_file_type character(1),
    unzip boolean,
    transform_on_import boolean,
    import_dir character varying(64),
    success_dir character varying(64),
    error_dir character varying(64),
    data_file_column_list text,
    data_file_load_options text,
    transform_script_name character varying(64),
    data_file_process_function character varying(64)
);


ALTER TABLE public.v_rec OWNER TO song;

--
-- Name: v_yesterday_date_sk; Type: TABLE; Schema: public; Owner: dataman; Tablespace: evttracker_tablespace
--

CREATE TABLE v_yesterday_date_sk (
    "coalesce" integer
);


ALTER TABLE public.v_yesterday_date_sk OWNER TO dataman;

SET search_path = refer, pg_catalog;

SET default_tablespace = refer_tablespace;

--
-- Name: ad_network_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE ad_network_dim (
    ad_network_sk integer NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    bill_type integer NOT NULL,
    account_number character varying(50) NOT NULL,
    url_base character varying(255) NOT NULL,
    is_active integer NOT NULL,
    service_key character varying(50) NOT NULL,
    timeout integer NOT NULL,
    portal_aware integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    ad_network_name_current character varying(255) NOT NULL,
    account_number_current character varying(50) NOT NULL,
    url_base_current character varying(255) NOT NULL,
    service_key_current character varying(50) NOT NULL
);


ALTER TABLE refer.ad_network_dim OWNER TO warehouse_dbo;

--
-- Name: ad_network_dim_ad_network_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE ad_network_dim_ad_network_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.ad_network_dim_ad_network_sk_seq OWNER TO warehouse_dbo;

--
-- Name: ad_network_dim_ad_network_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE ad_network_dim_ad_network_sk_seq OWNED BY ad_network_dim.ad_network_sk;


--
-- Name: ad_network_dim_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW ad_network_dim_view AS
    (SELECT (-101) AS ad_network_sk, (-101) AS ad_network_id, 'AdSense DBCLK Channel'::text AS ad_network_name UNION ALL SELECT (-102) AS ad_network_sk, (-102) AS ad_network_id, 'iTunes'::text AS ad_network_name) UNION ALL SELECT ad_network_dim.ad_network_sk, ad_network_dim.ad_network_id, ad_network_dim.ad_network_name FROM ad_network_dim;


ALTER TABLE refer.ad_network_dim_view OWNER TO warehouse_dbo;

--
-- Name: ad_network_param_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE ad_network_param_dim (
    ad_network_param_sk integer NOT NULL,
    ad_network_id integer NOT NULL,
    target_char_id integer NOT NULL,
    attr_id integer NOT NULL,
    param_value character varying(255) NOT NULL,
    dtcreated timestamp with time zone,
    dtdeleted timestamp with time zone,
    prov_status integer NOT NULL,
    dtmodified timestamp with time zone,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    param_value_current character varying(255) NOT NULL
);


ALTER TABLE refer.ad_network_param_dim OWNER TO warehouse_dbo;

--
-- Name: ad_network_param_dim_ad_network_param_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE ad_network_param_dim_ad_network_param_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.ad_network_param_dim_ad_network_param_sk_seq OWNER TO warehouse_dbo;

--
-- Name: ad_network_param_dim_ad_network_param_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE ad_network_param_dim_ad_network_param_sk_seq OWNED BY ad_network_param_dim.ad_network_param_sk;


--
-- Name: adm_advertiser_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_advertiser_dim (
    advertiser_sk integer NOT NULL,
    advertiser_id integer NOT NULL,
    name character varying(255) NOT NULL,
    publisher_id integer NOT NULL,
    organization_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    kind_id integer NOT NULL,
    notes character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_advertiser_dim OWNER TO warehouse_dbo;

--
-- Name: adm_advertiser_dim_advertiser_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_advertiser_dim_advertiser_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_advertiser_dim_advertiser_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_advertiser_dim_advertiser_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_advertiser_dim_advertiser_sk_seq OWNED BY adm_advertiser_dim.advertiser_sk;


--
-- Name: adm_channel_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_channel_dim (
    channel_sk integer NOT NULL,
    channel_id integer NOT NULL,
    keyname character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    portal_id integer NOT NULL,
    portal_sk integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    keyname_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_channel_dim OWNER TO warehouse_dbo;

--
-- Name: adm_channel_dim_channel_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_channel_dim_channel_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_channel_dim_channel_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_channel_dim_channel_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_channel_dim_channel_sk_seq OWNED BY adm_channel_dim.channel_sk;


--
-- Name: adm_creative_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_creative_dim (
    creative_sk integer NOT NULL,
    creative_id integer NOT NULL,
    name character varying(255) NOT NULL,
    remote_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    flight_id integer NOT NULL,
    campaign_id integer NOT NULL,
    third_party boolean NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    updated_by character varying(255) NOT NULL,
    impressio_tracking_url character varying(255) NOT NULL,
    click_through_url character varying(255) NOT NULL,
    click_tracking_url character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    digest character varying(255),
    digest_current character varying(255),
    active boolean
);


ALTER TABLE refer.adm_creative_dim OWNER TO warehouse_dbo;

--
-- Name: adm_creative_dim_bk; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_creative_dim_bk (
    creative_sk integer NOT NULL,
    creative_id integer NOT NULL,
    name character varying(255) NOT NULL,
    remote_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    flight_id integer NOT NULL,
    campaign_id integer NOT NULL,
    third_party boolean NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    updated_by character varying(255) NOT NULL,
    impressio_tracking_url character varying(255) NOT NULL,
    click_through_url character varying(255) NOT NULL,
    click_tracking_url character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    digest character varying(255),
    digest_current character varying(255)
);


ALTER TABLE refer.adm_creative_dim_bk OWNER TO warehouse_dbo;

--
-- Name: adm_creative_dim_creative_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_creative_dim_creative_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_creative_dim_creative_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_creative_dim_creative_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_creative_dim_creative_sk_seq OWNED BY adm_creative_dim.creative_sk;


--
-- Name: adm_dim_adsizes; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_adsizes (
    adsize_sk integer NOT NULL,
    adsize_id integer NOT NULL,
    height integer NOT NULL,
    width integer NOT NULL,
    aspect_ratio boolean NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.adm_dim_adsizes OWNER TO warehouse_dbo;

--
-- Name: adm_dim_adsizes_adsize_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_adsizes_adsize_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_adsizes_adsize_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_adsizes_adsize_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_adsizes_adsize_sk_seq OWNED BY adm_dim_adsizes.adsize_sk;


--
-- Name: adm_dim_advertisers; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_advertisers (
    advertiser_sk integer NOT NULL,
    advertiser_id integer NOT NULL,
    organization_id integer NOT NULL,
    publisher_id integer NOT NULL,
    kind_id integer NOT NULL,
    name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_advertisers OWNER TO warehouse_dbo;

--
-- Name: adm_dim_advertisers_advertiser_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_advertisers_advertiser_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_advertisers_advertiser_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_advertisers_advertiser_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_advertisers_advertiser_sk_seq OWNED BY adm_dim_advertisers.advertiser_sk;


--
-- Name: adm_dim_advertisers_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_advertisers_view AS
    SELECT (-100) AS advertiser_sk, (-100) AS advertiser_id, (-100) AS organization_id, (-100) AS publisher_id, (-100) AS kind_id, 'N/A'::character varying AS name, ''::character varying AS email, 'N/A'::character varying AS name_current UNION ALL SELECT adm_dim_advertisers.advertiser_sk, adm_dim_advertisers.advertiser_id, adm_dim_advertisers.organization_id, adm_dim_advertisers.publisher_id, adm_dim_advertisers.kind_id, adm_dim_advertisers.name, adm_dim_advertisers.email, adm_dim_advertisers.name_current FROM adm_dim_advertisers;


ALTER TABLE refer.adm_dim_advertisers_view OWNER TO warehouse_dbo;

--
-- Name: adm_dim_creatives; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_creatives (
    creative_sk integer NOT NULL,
    creative_id integer NOT NULL,
    dfp_creative_id bigint NOT NULL,
    organization_id integer NOT NULL,
    publisher_id integer NOT NULL,
    advertiser_id integer NOT NULL,
    flight_id integer NOT NULL,
    name character varying(255) NOT NULL,
    ads_count integer NOT NULL,
    alt_text character varying(255) NOT NULL,
    digest character varying(255) NOT NULL,
    aspect_ratio_code character varying(255) NOT NULL,
    kind character varying(50) NOT NULL,
    archived boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    updated_by character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    alt_text_current character varying(255) NOT NULL,
    kind_current character varying(50) NOT NULL,
    clickthroughurl character varying(800),
    adsizeid integer
);


ALTER TABLE refer.adm_dim_creatives OWNER TO warehouse_dbo;

--
-- Name: adm_dim_creatives_creative_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_creatives_creative_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_creatives_creative_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_creatives_creative_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_creatives_creative_sk_seq OWNED BY adm_dim_creatives.creative_sk;


--
-- Name: adm_dim_flights; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_flights (
    flight_sk integer NOT NULL,
    flight_id integer NOT NULL,
    dfp_line_item_id bigint NOT NULL,
    order_id integer NOT NULL,
    network_id integer NOT NULL,
    name character varying(255),
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone NOT NULL,
    quantity integer NOT NULL,
    rate double precision NOT NULL,
    budget double precision NOT NULL,
    bundle_package character varying(255),
    number character varying(50) NOT NULL,
    metric character varying(50) NOT NULL,
    kind character varying(50),
    impressions integer NOT NULL,
    clicks integer NOT NULL,
    actual_delivery double precision NOT NULL,
    ads_count integer NOT NULL,
    affiliate_ppm double precision NOT NULL,
    compliant boolean NOT NULL,
    digest character varying(255),
    expected_delivery double precision NOT NULL,
    dow_bits integer NOT NULL,
    hod_bits integer NOT NULL,
    metro_id integer NOT NULL,
    overbooked boolean NOT NULL,
    property_scope_id integer NOT NULL,
    rotation_id integer NOT NULL,
    shadow boolean NOT NULL,
    share_of_voice double precision NOT NULL,
    submitted_at timestamp with time zone,
    approved_at timestamp with time zone,
    approved_by character varying(255),
    created_at timestamp with time zone,
    paused_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    requested_at timestamp with time zone,
    requested_by character varying(255),
    updated_at timestamp with time zone,
    updated_by character varying(255),
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255),
    start_date_current timestamp without time zone NOT NULL,
    end_date_current timestamp without time zone NOT NULL,
    quantity_current integer NOT NULL,
    rate_current double precision NOT NULL,
    budget_current double precision NOT NULL,
    number_current character varying(50) NOT NULL,
    metric_current character varying(50) NOT NULL,
    kind_current character varying(50) NOT NULL,
    billing_line_item_id integer,
    geo_scope_id integer,
    active_ads_count integer,
    network_id_current integer
);


ALTER TABLE refer.adm_dim_flights OWNER TO warehouse_dbo;

--
-- Name: adm_dim_orders; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_orders (
    order_sk integer NOT NULL,
    order_id integer NOT NULL,
    dfp_order_id bigint NOT NULL,
    organization_id integer NOT NULL,
    publisher_id integer NOT NULL,
    advertiser_id integer NOT NULL,
    advertiser_io character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    agency_rate integer NOT NULL,
    order_date timestamp without time zone NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone NOT NULL,
    flights_count integer NOT NULL,
    kind character varying(50) NOT NULL,
    number character varying(50) NOT NULL,
    performing_flights_count integer NOT NULL,
    sales_region_id integer NOT NULL,
    shadow boolean NOT NULL,
    third_party_sold boolean NOT NULL,
    zzz_property_id integer NOT NULL,
    zzz_property_scope_id integer NOT NULL,
    creator_id integer NOT NULL,
    approved_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    updated_by character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    start_date_current timestamp without time zone NOT NULL,
    end_date_current timestamp without time zone NOT NULL,
    flights_count_current integer NOT NULL,
    kind_current character varying(255) NOT NULL,
    number_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_orders OWNER TO warehouse_dbo;

--
-- Name: adm_flight_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_flight_dim (
    flight_sk integer NOT NULL,
    flight_id integer NOT NULL,
    remote_id integer NOT NULL,
    salt character varying(255) NOT NULL,
    start_date timestamp without time zone NOT NULL,
    created_at timestamp with time zone,
    share_of_voice double precision NOT NULL,
    creatives_count integer NOT NULL,
    impressions integer NOT NULL,
    quantity integer NOT NULL,
    order_id integer NOT NULL,
    submitted_at timestamp with time zone,
    updated_at timestamp with time zone,
    paused_at timestamp with time zone,
    rate double precision NOT NULL,
    ready_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    clicks integer NOT NULL,
    approved_at timestamp with time zone,
    complete boolean,
    updated_by character varying(255),
    budget double precision NOT NULL,
    end_date timestamp without time zone NOT NULL,
    number character varying(50) NOT NULL,
    metric character varying(50) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    rate_current double precision NOT NULL,
    budget_current double precision NOT NULL,
    metric_current character varying(50) NOT NULL,
    start_date_current timestamp without time zone,
    end_date_current timestamp without time zone,
    digest character varying(255),
    digest_current character varying(255),
    name character varying(255),
    name_current character varying(255),
    placement_ids text,
    zone_ids text,
    target_ids text,
    metro_id integer,
    ad_unit_id integer,
    bundle_package character varying(255),
    kind character varying(50),
    kind_current character varying(50),
    network_id integer DEFAULT (-100),
    delivery_rate double precision,
    delivery_rate_current double precision
);


ALTER TABLE refer.adm_flight_dim OWNER TO warehouse_dbo;

--
-- Name: adm_order_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_order_dim (
    order_sk integer NOT NULL,
    order_id integer NOT NULL,
    name character varying(255),
    order_date timestamp without time zone,
    platform_id integer NOT NULL,
    remote_id integer NOT NULL,
    start_date timestamp without time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    advertiser_id integer NOT NULL,
    advertiser_io character varying(255),
    updated_by character varying(255),
    end_date timestamp without time zone,
    flights_count integer NOT NULL,
    organization_id integer NOT NULL,
    publisher_id integer NOT NULL,
    kind character varying(50) NOT NULL,
    number character varying(50) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255),
    kind_current character varying(50),
    number_current character varying(50),
    flights_count_current integer,
    website_id integer,
    network boolean,
    network_id integer
);


ALTER TABLE refer.adm_order_dim OWNER TO warehouse_dbo;

--
-- Name: adm_dim_flights_compile; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_flights_compile AS
    SELECT (-100) AS flight_id, 'N/A'::character varying AS name, (-100) AS order_id, (-100) AS publisher_id, (-100) AS property_id, (-100) AS organization_id, (-100) AS advertiser_id, (-100) AS flight_sk, 'N/A'::character varying AS kind, 'N/A'::character varying AS metric, '9999-12-31 00:00:00'::timestamp without time zone AS start_date, '9999-12-31 00:00:00'::timestamp without time zone AS end_date, 0 AS actual_delivery, '9999-12-30 16:00:00-08'::timestamp with time zone AS created_at, '9999-12-30 16:00:00-08'::timestamp with time zone AS updated_at, 0 AS budget, (-100) AS network_id UNION ALL SELECT a.flight_id, a.name, a.order_id, a.publisher_id, a.property_id, a.organization_id, a.advertiser_id, a.flight_sk, a.kind, a.metric, a.start_date, a.end_date, a.actual_delivery, a.created_at, a.updated_at, a.budget, a.network_id FROM (SELECT a.flight_id, a.name, a.order_id, b.publisher_id, (-100) AS property_id, b.organization_id, b.advertiser_id, a.flight_sk, b.kind, a.metric, a.start_date, a.end_date, a.actual_delivery, a.created_at, a.updated_at, a.budget, a.network_id FROM (adm_dim_flights a JOIN adm_dim_orders b ON (((b.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) AND (b.order_id = a.order_id)))) WHERE (a.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) UNION ALL SELECT c.flight_id, c.name, c.order_id, d.publisher_id, d.website_id AS property_id, d.organization_id, d.advertiser_id, c.flight_sk, d.kind, c.metric, c.start_date, c.end_date, c.delivery_rate AS actual_delivery, c.created_at, c.updated_at, c.budget, c.network_id FROM (adm_flight_dim c JOIN adm_order_dim d ON (((d.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) AND (d.order_id = c.order_id)))) WHERE ((c.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) AND (NOT (EXISTS (SELECT 1 FROM adm_dim_flights e WHERE ((e.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) AND (e.flight_id = c.flight_id))))))) a;


ALTER TABLE refer.adm_dim_flights_compile OWNER TO warehouse_dbo;

--
-- Name: adm_dim_flights_flight_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_flights_flight_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_flights_flight_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_flights_flight_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_flights_flight_sk_seq OWNED BY adm_dim_flights.flight_sk;


--
-- Name: adm_dim_io_lineitems; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_io_lineitems (
    billing_line_items_sk integer NOT NULL,
    billing_line_items_id bigint NOT NULL,
    name character varying(255),
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flights_count bigint,
    budget double precision NOT NULL,
    quantity bigint,
    io_date timestamp without time zone,
    insertion_order_id bigint,
    external_ref text,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    comments_count bigint,
    budget_current double precision NOT NULL,
    name_current character varying(255),
    start_date_current timestamp without time zone NOT NULL,
    end_date_current timestamp without time zone NOT NULL,
    quantity_current integer NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.adm_dim_io_lineitems OWNER TO warehouse_dbo;

--
-- Name: adm_dim_io_lineitems_billing_line_items_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_io_lineitems_billing_line_items_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_io_lineitems_billing_line_items_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_io_lineitems_billing_line_items_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_io_lineitems_billing_line_items_sk_seq OWNED BY adm_dim_io_lineitems.billing_line_items_sk;


--
-- Name: adm_dim_orders_compile; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_orders_compile AS
    SELECT (-100) AS order_id, 'N/A'::character varying AS name, (-100) AS publisher_id, (-100) AS organization_id, (-100) AS advertiser_id, (-100) AS order_sk UNION ALL SELECT a.order_id, a.name, a.publisher_id, a.organization_id, a.advertiser_id, a.order_sk FROM (SELECT adm_dim_orders.order_id, adm_dim_orders.name, adm_dim_orders.publisher_id, adm_dim_orders.organization_id, adm_dim_orders.advertiser_id, adm_dim_orders.order_sk FROM adm_dim_orders WHERE (adm_dim_orders.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) UNION SELECT a.order_id, a.name, a.publisher_id, a.organization_id, a.advertiser_id, a.order_sk FROM adm_order_dim a WHERE ((a.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) AND (NOT (EXISTS (SELECT 1 FROM adm_dim_orders b WHERE ((b.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) AND (b.order_id = a.order_id))))))) a;


ALTER TABLE refer.adm_dim_orders_compile OWNER TO warehouse_dbo;

--
-- Name: adm_dim_orders_order_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_orders_order_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_orders_order_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_orders_order_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_orders_order_sk_seq OWNED BY adm_dim_orders.order_sk;


--
-- Name: adm_dim_organizations; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_organizations (
    organization_sk integer NOT NULL,
    organization_id integer NOT NULL,
    dfp_company_id integer NOT NULL,
    name character varying(255) NOT NULL,
    domain character varying(255) NOT NULL,
    advertisers_count integer NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_organizations OWNER TO warehouse_dbo;

--
-- Name: adm_dim_organizations_organization_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_organizations_organization_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_organizations_organization_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_organizations_organization_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_organizations_organization_sk_seq OWNED BY adm_dim_organizations.organization_sk;


--
-- Name: adm_dim_organizations_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_organizations_view AS
    SELECT (-100) AS organization_sk, (-100) AS organization_id, (-100) AS dfp_company_id, 'N/A'::character varying AS name, ''::character varying AS domain, 0 AS advertisers_count, true AS active, 'N/A'::character varying AS name_current UNION ALL SELECT adm_dim_organizations.organization_sk, adm_dim_organizations.organization_id, adm_dim_organizations.dfp_company_id, adm_dim_organizations.name, adm_dim_organizations.domain, adm_dim_organizations.advertisers_count, adm_dim_organizations.active, adm_dim_organizations.name_current FROM adm_dim_organizations LIMIT 10;


ALTER TABLE refer.adm_dim_organizations_view OWNER TO warehouse_dbo;

--
-- Name: adm_dim_platforms; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_platforms (
    platform_sk integer NOT NULL,
    platform_id integer NOT NULL,
    dfp_custom_targeting_value_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_platforms OWNER TO warehouse_dbo;

--
-- Name: adm_dim_platforms_platform_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_platforms_platform_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_platforms_platform_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_platforms_platform_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_platforms_platform_sk_seq OWNED BY adm_dim_platforms.platform_sk;


--
-- Name: adm_dim_platforms_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_platforms_view AS
    SELECT (-100) AS platform_sk, (-100) AS platform_id, (-100) AS dfp_custom_targeting_value_id, 'N/A'::character varying AS name, 'N/A'::character varying AS name_current UNION ALL SELECT adm_dim_platforms.platform_sk, adm_dim_platforms.platform_id, adm_dim_platforms.dfp_custom_targeting_value_id, adm_dim_platforms.name, adm_dim_platforms.name_current FROM adm_dim_platforms;


ALTER TABLE refer.adm_dim_platforms_view OWNER TO warehouse_dbo;

--
-- Name: adm_dim_portals; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_portals (
    portal_sk integer NOT NULL,
    portal_id integer NOT NULL,
    platform_id integer NOT NULL,
    dfp_custom_targeting_value_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    network_param character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_portals OWNER TO warehouse_dbo;

--
-- Name: adm_dim_portals_portal_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_portals_portal_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_portals_portal_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_portals_portal_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_portals_portal_sk_seq OWNED BY adm_dim_portals.portal_sk;


--
-- Name: adm_dim_properties; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_properties (
    property_sk integer NOT NULL,
    property_id integer NOT NULL,
    dfp_ad_unit_id bigint NOT NULL,
    dfp_ad_unit_code character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    publisher_id integer NOT NULL,
    keyname character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    in_house boolean NOT NULL,
    local_marketplace boolean NOT NULL,
    off_platform boolean NOT NULL,
    minimum_budget double precision NOT NULL,
    country_id integer NOT NULL,
    metro_id integer NOT NULL,
    region_id integer NOT NULL,
    sales_region_id integer NOT NULL,
    revision character varying(255) NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    minimum_budget_current double precision NOT NULL
);


ALTER TABLE refer.adm_dim_properties OWNER TO warehouse_dbo;

--
-- Name: adm_dim_properties_property_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_properties_property_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_properties_property_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_properties_property_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_properties_property_sk_seq OWNED BY adm_dim_properties.property_sk;


--
-- Name: adm_dim_properties_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_properties_view AS
    SELECT (-100) AS property_sk, (-100) AS property_id, 'N/A'::character varying AS keyname, 'N/A'::character varying AS name UNION ALL SELECT adm_dim_properties.property_sk, adm_dim_properties.property_id, adm_dim_properties.keyname, adm_dim_properties.name FROM adm_dim_properties;


ALTER TABLE refer.adm_dim_properties_view OWNER TO warehouse_dbo;

--
-- Name: adm_dim_propertygroups; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_propertygroups (
    propertygroup_sk integer NOT NULL,
    propertygroup_id integer NOT NULL,
    dfp_placement_id integer NOT NULL,
    name character varying(255) NOT NULL,
    off_platform boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_propertygroups OWNER TO warehouse_dbo;

--
-- Name: adm_dim_propertygroups_propertygroup_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_propertygroups_propertygroup_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_propertygroups_propertygroup_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_propertygroups_propertygroup_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_propertygroups_propertygroup_sk_seq OWNED BY adm_dim_propertygroups.propertygroup_sk;


--
-- Name: adm_dim_publishers; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_dim_publishers (
    publisher_sk integer NOT NULL,
    publisher_id integer NOT NULL,
    dfp_placement_id integer NOT NULL,
    partner_group_id integer NOT NULL,
    company_name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    company_name_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_dim_publishers OWNER TO warehouse_dbo;

--
-- Name: adm_dim_publishers_publisher_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_dim_publishers_publisher_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_dim_publishers_publisher_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_dim_publishers_publisher_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_dim_publishers_publisher_sk_seq OWNED BY adm_dim_publishers.publisher_sk;


--
-- Name: adm_dim_publishers_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_dim_publishers_view AS
    SELECT (-100) AS publisher_sk, (-100) AS publisher_id, (-100) AS partner_group_id, 'N/A'::character varying AS company_name, ''::character varying AS email, 'N/A'::character varying AS company_name_current UNION ALL SELECT adm_dim_publishers.publisher_sk, adm_dim_publishers.publisher_id, adm_dim_publishers.partner_group_id, adm_dim_publishers.company_name, adm_dim_publishers.email, adm_dim_publishers.company_name_current FROM adm_dim_publishers;


ALTER TABLE refer.adm_dim_publishers_view OWNER TO warehouse_dbo;

--
-- Name: adm_flight_dim_bk; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_flight_dim_bk (
    flight_sk integer NOT NULL,
    flight_id integer NOT NULL,
    remote_id integer NOT NULL,
    salt character varying(255) NOT NULL,
    start_date timestamp without time zone NOT NULL,
    created_at timestamp with time zone,
    share_of_voice double precision NOT NULL,
    creatives_count integer NOT NULL,
    impressions integer NOT NULL,
    quantity integer NOT NULL,
    order_id integer NOT NULL,
    submitted_at timestamp with time zone,
    updated_at timestamp with time zone,
    paused_at timestamp with time zone,
    rate double precision NOT NULL,
    ready_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    clicks integer NOT NULL,
    approved_at timestamp with time zone,
    complete boolean,
    updated_by character varying(255),
    budget double precision NOT NULL,
    end_date timestamp without time zone NOT NULL,
    number character varying(50) NOT NULL,
    metric character varying(50) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    rate_current double precision NOT NULL,
    budget_current double precision NOT NULL,
    metric_current character varying(50) NOT NULL,
    start_date_current timestamp without time zone,
    end_date_current timestamp without time zone,
    digest character varying(255),
    digest_current character varying(255),
    name character varying(255),
    name_current character varying(255),
    placement_ids text,
    zone_ids text,
    target_ids text,
    metro_id integer,
    ad_unit_id integer,
    bundle_package character varying(255),
    kind character varying(50),
    kind_current character varying(50)
);


ALTER TABLE refer.adm_flight_dim_bk OWNER TO warehouse_dbo;

--
-- Name: adm_flight_dim_flight_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_flight_dim_flight_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_flight_dim_flight_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_flight_dim_flight_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_flight_dim_flight_sk_seq OWNED BY adm_flight_dim.flight_sk;


--
-- Name: adm_mapping_channels; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_mapping_channels (
    mapping_sk integer NOT NULL,
    mapping_id integer NOT NULL,
    channel_id integer NOT NULL,
    name character varying(255) NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.adm_mapping_channels OWNER TO warehouse_dbo;

--
-- Name: adm_mapping_channels_mapping_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_mapping_channels_mapping_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_mapping_channels_mapping_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_mapping_channels_mapping_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_mapping_channels_mapping_sk_seq OWNED BY adm_mapping_channels.mapping_sk;


--
-- Name: adm_mapping_portals; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_mapping_portals (
    mapping_sk integer NOT NULL,
    mapping_id integer NOT NULL,
    portal_id integer NOT NULL,
    name character varying(255) NOT NULL,
    channel_id integer NOT NULL,
    rpt_adm_portal_id integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.adm_mapping_portals OWNER TO warehouse_dbo;

--
-- Name: adm_mapping_portals_mapping_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_mapping_portals_mapping_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_mapping_portals_mapping_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_mapping_portals_mapping_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_mapping_portals_mapping_sk_seq OWNED BY adm_mapping_portals.mapping_sk;


--
-- Name: adm_network_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_network_dim (
    network_sk integer NOT NULL,
    network_id integer NOT NULL,
    name character varying(30) NOT NULL,
    revenue_type character varying(30) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(30) NOT NULL,
    revenue_type_current character varying(30) NOT NULL
);


ALTER TABLE refer.adm_network_dim OWNER TO warehouse_dbo;

--
-- Name: adm_network_dim_network_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_network_dim_network_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_network_dim_network_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_network_dim_network_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_network_dim_network_sk_seq OWNED BY adm_network_dim.network_sk;


--
-- Name: adm_network_dim_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW adm_network_dim_view AS
    SELECT (-100) AS network_sk, (-100) AS network_id, 'N/A'::character varying AS name, 'N/A'::character varying AS revenue_type, 'N/A'::character varying AS name_current, 'N/A'::character varying AS revenue_type_current UNION ALL SELECT adm_network_dim.network_sk, adm_network_dim.network_id, adm_network_dim.name, adm_network_dim.revenue_type, adm_network_dim.name_current, adm_network_dim.revenue_type_current FROM adm_network_dim;


ALTER TABLE refer.adm_network_dim_view OWNER TO warehouse_dbo;

--
-- Name: adm_order_dim_bk; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_order_dim_bk (
    order_sk integer NOT NULL,
    order_id integer NOT NULL,
    name character varying(255),
    order_date timestamp without time zone,
    platform_id integer NOT NULL,
    remote_id integer NOT NULL,
    start_date timestamp without time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    advertiser_id integer NOT NULL,
    advertiser_io character varying(255),
    updated_by character varying(255),
    end_date timestamp without time zone,
    flights_count integer NOT NULL,
    organization_id integer NOT NULL,
    publisher_id integer NOT NULL,
    kind character varying(50) NOT NULL,
    number character varying(50) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255),
    kind_current character varying(50),
    number_current character varying(50),
    flights_count_current integer,
    website_id integer,
    network boolean,
    network_id integer
);


ALTER TABLE refer.adm_order_dim_bk OWNER TO warehouse_dbo;

--
-- Name: adm_order_dim_order_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_order_dim_order_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_order_dim_order_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_order_dim_order_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_order_dim_order_sk_seq OWNED BY adm_order_dim.order_sk;


--
-- Name: adm_organization_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_organization_dim (
    organization_sk integer NOT NULL,
    organization_id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    domain character varying(255) NOT NULL,
    clients_count integer NOT NULL,
    advertisers_count integer NOT NULL,
    active boolean NOT NULL,
    old_id integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    domain_current character varying(255) NOT NULL
);


ALTER TABLE refer.adm_organization_dim OWNER TO warehouse_dbo;

--
-- Name: adm_organization_dim_organization_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_organization_dim_organization_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_organization_dim_organization_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_organization_dim_organization_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_organization_dim_organization_sk_seq OWNED BY adm_organization_dim.organization_sk;


--
-- Name: adm_placement_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_placement_dim (
    placement_sk integer NOT NULL,
    placement_id integer NOT NULL,
    cpm double precision NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    keyname character varying(255) NOT NULL,
    website_id integer NOT NULL,
    chanel_id integer NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    monthly_impressions integer,
    description character varying(255),
    active boolean NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    cpm_current double precision NOT NULL,
    name_current character varying(255) NOT NULL,
    keyname_current character varying(255) NOT NULL,
    description_current character varying(255)
);


ALTER TABLE refer.adm_placement_dim OWNER TO warehouse_dbo;

--
-- Name: adm_placement_dim_placement_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_placement_dim_placement_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_placement_dim_placement_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_placement_dim_placement_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_placement_dim_placement_sk_seq OWNED BY adm_placement_dim.placement_sk;


--
-- Name: adm_portal_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_portal_dim (
    portal_sk integer NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(255) NOT NULL,
    channel_id integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    portal_name_current character varying(255) NOT NULL,
    channel_id_current integer NOT NULL
);


ALTER TABLE refer.adm_portal_dim OWNER TO warehouse_dbo;

--
-- Name: adm_portal_dim_portal_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_portal_dim_portal_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_portal_dim_portal_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_portal_dim_portal_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_portal_dim_portal_sk_seq OWNED BY adm_portal_dim.portal_sk;


--
-- Name: adm_publication_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_publication_dim (
    publication_sk integer NOT NULL,
    publication_id integer NOT NULL,
    name character varying(255),
    publisher_id integer NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255)
);


ALTER TABLE refer.adm_publication_dim OWNER TO warehouse_dbo;

--
-- Name: adm_publication_dim_publication_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_publication_dim_publication_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_publication_dim_publication_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_publication_dim_publication_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_publication_dim_publication_sk_seq OWNED BY adm_publication_dim.publication_sk;


--
-- Name: adm_publisher_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_publisher_dim (
    publisher_sk integer NOT NULL,
    publisher_id integer NOT NULL,
    company_name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    company_name_current character varying(255) NOT NULL,
    email_current character varying(255) NOT NULL,
    partner_group_id integer DEFAULT (-100)
);


ALTER TABLE refer.adm_publisher_dim OWNER TO warehouse_dbo;

--
-- Name: adm_publisher_dim_publisher_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_publisher_dim_publisher_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_publisher_dim_publisher_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_publisher_dim_publisher_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_publisher_dim_publisher_sk_seq OWNED BY adm_publisher_dim.publisher_sk;


--
-- Name: adm_website_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_website_dim (
    website_sk integer NOT NULL,
    website_id integer NOT NULL,
    minimum_budget double precision NOT NULL,
    name character varying(255) NOT NULL,
    store_name character varying(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    keyname character varying(255) NOT NULL,
    currency_id integer NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    url character varying(255) NOT NULL,
    network boolean NOT NULL,
    introduction character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    publisher_id integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    minimum_budget_current double precision NOT NULL,
    name_current character varying(255) NOT NULL,
    store_name_current character varying(255) NOT NULL,
    keyname_current character varying(255) NOT NULL,
    introduction_current character varying(255) NOT NULL,
    publication_id integer
);


ALTER TABLE refer.adm_website_dim OWNER TO warehouse_dbo;

--
-- Name: adm_website_dim_bk; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE adm_website_dim_bk (
    website_sk integer NOT NULL,
    website_id integer NOT NULL,
    minimum_budget double precision NOT NULL,
    name character varying(255) NOT NULL,
    store_name character varying(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    keyname character varying(255) NOT NULL,
    currency_id integer NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    url character varying(255) NOT NULL,
    network boolean NOT NULL,
    introduction character varying(255) NOT NULL,
    partner_id integer NOT NULL,
    publisher_id integer NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    minimum_budget_current double precision NOT NULL,
    name_current character varying(255) NOT NULL,
    store_name_current character varying(255) NOT NULL,
    keyname_current character varying(255) NOT NULL,
    introduction_current character varying(255) NOT NULL,
    publication_id integer
);


ALTER TABLE refer.adm_website_dim_bk OWNER TO warehouse_dbo;

--
-- Name: adm_website_dim_website_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE adm_website_dim_website_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.adm_website_dim_website_sk_seq OWNER TO warehouse_dbo;

--
-- Name: adm_website_dim_website_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE adm_website_dim_website_sk_seq OWNED BY adm_website_dim.website_sk;


--
-- Name: content_category_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE content_category_dim (
    content_category_sk integer NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    category_name_current character varying(255) NOT NULL
);


ALTER TABLE refer.content_category_dim OWNER TO warehouse_dbo;

--
-- Name: content_category_dim_content_category_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE content_category_dim_content_category_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.content_category_dim_content_category_sk_seq OWNER TO warehouse_dbo;

--
-- Name: content_category_dim_content_category_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE content_category_dim_content_category_sk_seq OWNED BY content_category_dim.content_category_sk;


--
-- Name: correction_factor_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE correction_factor_dim (
    correction_factor_sk integer NOT NULL,
    adnet_id integer NOT NULL,
    adnet_name character varying(255) NOT NULL,
    adsource_id integer NOT NULL,
    adsource_type character varying(255),
    cf_factor double precision DEFAULT 1.0,
    start_date timestamp without time zone DEFAULT ('now'::text)::timestamp(2) with time zone NOT NULL,
    end_date timestamp without time zone DEFAULT '9999-12-31 00:00:00'::timestamp without time zone NOT NULL,
    is_active boolean DEFAULT true,
    adnet_id_current integer NOT NULL,
    adnet_name_current character varying(255) NOT NULL,
    adsource_id_current integer NOT NULL,
    adsource_type_current character varying(255),
    cf_factor_current double precision DEFAULT 1.0,
    auto_generated boolean DEFAULT false NOT NULL,
    suppress boolean DEFAULT true NOT NULL,
    data_file_id integer DEFAULT (-100),
    dt_effective timestamp without time zone DEFAULT ('now'::text)::timestamp(2) with time zone NOT NULL,
    dt_expire timestamp without time zone DEFAULT '9999-12-31 00:00:00'::timestamp without time zone NOT NULL,
    cf_type integer DEFAULT 1 NOT NULL
);


ALTER TABLE refer.correction_factor_dim OWNER TO warehouse_dbo;

--
-- Name: correction_factor_dim_correction_factor_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE correction_factor_dim_correction_factor_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.correction_factor_dim_correction_factor_sk_seq OWNER TO warehouse_dbo;

--
-- Name: correction_factor_dim_correction_factor_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE correction_factor_dim_correction_factor_sk_seq OWNED BY correction_factor_dim.correction_factor_sk;


--
-- Name: date_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE date_dim (
    date_sk integer NOT NULL,
    full_date date NOT NULL,
    day_since_2005 smallint NOT NULL,
    month_since_2005 smallint NOT NULL,
    day_of_week character varying(32) NOT NULL,
    calendar_month character varying(32) NOT NULL,
    calendar_year smallint NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    day_of_month smallint NOT NULL,
    day_of_year smallint NOT NULL,
    week_of_year_sunday smallint NOT NULL,
    year_week_sunday character varying(32) NOT NULL,
    week_sunday_start date NOT NULL,
    week_of_year_monday smallint NOT NULL,
    year_week_monday character varying(32) NOT NULL,
    week_monday_start date NOT NULL,
    holiday character varying(32) NOT NULL,
    day_type character varying(32) NOT NULL
);


ALTER TABLE refer.date_dim OWNER TO warehouse_dbo;

--
-- Name: date_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW date_view AS
    SELECT date_dim.date_sk, date_dim.full_date, date_dim.day_since_2005, date_dim.month_since_2005, date_dim.day_of_week, date_dim.calendar_month, date_dim.calendar_year, date_dim.calendar_year_month, date_dim.day_of_month, date_dim.day_of_year, date_dim.week_of_year_sunday, date_dim.year_week_sunday, date_dim.week_sunday_start, date_dim.week_of_year_monday, date_dim.year_week_monday, date_dim.week_monday_start, date_dim.holiday, date_dim.day_type FROM date_dim WHERE (date_dim.full_date <= (now())::date);


ALTER TABLE refer.date_view OWNER TO warehouse_dbo;

--
-- Name: dc_ad_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dc_ad_dim (
    dc_ad_sk integer NOT NULL,
    dc_ad_id integer NOT NULL,
    ad_name character varying(255) NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    ad_name_current character varying(255) NOT NULL,
    ad_cost_type character varying(255)
);


ALTER TABLE refer.dc_ad_dim OWNER TO warehouse_dbo;

--
-- Name: dc_ad_dim_dc_ad_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dc_ad_dim_dc_ad_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dc_ad_dim_dc_ad_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dc_ad_dim_dc_ad_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dc_ad_dim_dc_ad_sk_seq OWNED BY dc_ad_dim.dc_ad_sk;


--
-- Name: dc_order_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dc_order_dim (
    dc_order_sk integer NOT NULL,
    dc_order_id integer NOT NULL,
    order_name character varying(255) NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    advertiser_id integer NOT NULL,
    advertiser_name character varying(255) NOT NULL,
    contract_approved boolean NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    order_name_current character varying(255) NOT NULL,
    advertiser_name_current character varying(255) NOT NULL
);


ALTER TABLE refer.dc_order_dim OWNER TO warehouse_dbo;

--
-- Name: dc_order_dim_dc_order_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dc_order_dim_dc_order_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dc_order_dim_dc_order_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dc_order_dim_dc_order_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dc_order_dim_dc_order_sk_seq OWNED BY dc_order_dim.dc_order_sk;


--
-- Name: dc_site_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dc_site_dim (
    dc_site_sk integer NOT NULL,
    dc_site_id integer NOT NULL,
    dart_site_name character varying(255) NOT NULL,
    site_keyword character varying(255) NOT NULL,
    status boolean NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    dart_site_name_current character varying(255) NOT NULL,
    site_keyword_current character varying(255) NOT NULL,
    partner_keyword character varying(50),
    partner_keyword_current character varying(50),
    portal_keyword character varying(50),
    portal_keyword_current character varying(50)
);


ALTER TABLE refer.dc_site_dim OWNER TO warehouse_dbo;

--
-- Name: dc_site_dim_dc_site_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dc_site_dim_dc_site_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dc_site_dim_dc_site_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dc_site_dim_dc_site_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dc_site_dim_dc_site_sk_seq OWNED BY dc_site_dim.dc_site_sk;


--
-- Name: dfp_dim_ad_units; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_ad_units (
    ad_unit_sk integer NOT NULL,
    ad_unit_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    status character varying(50) NOT NULL,
    parent_id bigint NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.dfp_dim_ad_units OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_ad_units_ad_unit_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_ad_units_ad_unit_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_ad_units_ad_unit_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_ad_units_ad_unit_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_ad_units_ad_unit_sk_seq OWNED BY dfp_dim_ad_units.ad_unit_sk;


--
-- Name: dfp_dim_creatives; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_creatives (
    creative_sk integer NOT NULL,
    creative_id bigint NOT NULL,
    advertiser_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    status_creative_type character varying(255) NOT NULL,
    last_modified timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    customfieldvalues character varying(255),
    size character varying(255),
    previewurl character varying(255),
    appliedlabels character varying(255)
);


ALTER TABLE refer.dfp_dim_creatives OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_creatives_creative_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_creatives_creative_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_creatives_creative_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_creatives_creative_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_creatives_creative_sk_seq OWNED BY dfp_dim_creatives.creative_sk;


--
-- Name: dfp_dim_line_items; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_line_items (
    line_item_sk integer NOT NULL,
    line_item_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    order_id bigint NOT NULL,
    order_name character varying(255) NOT NULL,
    web_property_code character varying(255) NOT NULL,
    last_modified_by_app character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.dfp_dim_line_items OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_line_items_line_item_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_line_items_line_item_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_line_items_line_item_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_line_items_line_item_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_line_items_line_item_sk_seq OWNED BY dfp_dim_line_items.line_item_sk;


--
-- Name: dfp_dim_lineitem_creatives; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_lineitem_creatives (
    lineitem_creatives_sk integer NOT NULL,
    line_item_id bigint NOT NULL,
    creative_id bigint NOT NULL,
    creativeset_id bigint,
    manualcreativerotationweight character varying(255),
    sequentialcreativerotationindex character varying(255),
    startdatetime timestamp without time zone NOT NULL,
    enddatetime timestamp without time zone NOT NULL,
    destinationurl character varying(255),
    sizes character varying(255),
    status character varying(255),
    stats character varying(255),
    lastmodifieddatetime timestamp without time zone NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.dfp_dim_lineitem_creatives OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_lineitem_creatives_lineitem_creatives_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_lineitem_creatives_lineitem_creatives_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_lineitem_creatives_lineitem_creatives_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_lineitem_creatives_lineitem_creatives_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_lineitem_creatives_lineitem_creatives_sk_seq OWNED BY dfp_dim_lineitem_creatives.lineitem_creatives_sk;


--
-- Name: dfp_dim_lineitem_targets; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_lineitem_targets (
    lineitem_targets_sk integer NOT NULL,
    lineitem_id bigint NOT NULL,
    customcriteria_key_id character varying(1000),
    customcriteria_valueids character varying(40000),
    customcriteria_displayname character varying(40000),
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.dfp_dim_lineitem_targets OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_lineitem_targets_lineitem_targets_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_lineitem_targets_lineitem_targets_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_lineitem_targets_lineitem_targets_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_lineitem_targets_lineitem_targets_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_lineitem_targets_lineitem_targets_sk_seq OWNED BY dfp_dim_lineitem_targets.lineitem_targets_sk;


--
-- Name: dfp_dim_orders; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_orders (
    order_sk integer NOT NULL,
    order_id bigint NOT NULL,
    advertiser_id bigint NOT NULL,
    agency_id bigint NOT NULL,
    creator_id bigint NOT NULL,
    sales_person_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.dfp_dim_orders OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_orders_order_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_orders_order_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_orders_order_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_orders_order_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_orders_order_sk_seq OWNED BY dfp_dim_orders.order_sk;


--
-- Name: dfp_dim_placements; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE dfp_dim_placements (
    placement_sk integer NOT NULL,
    placement_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    targeting_site_name character varying(255) NOT NULL,
    description character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL
);


ALTER TABLE refer.dfp_dim_placements OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_placements_placement_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE dfp_dim_placements_placement_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.dfp_dim_placements_placement_sk_seq OWNER TO warehouse_dbo;

--
-- Name: dfp_dim_placements_placement_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE dfp_dim_placements_placement_sk_seq OWNED BY dfp_dim_placements.placement_sk;


--
-- Name: display_block_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE display_block_dim (
    display_block_sk integer NOT NULL,
    display_block_id integer NOT NULL,
    partner_id integer NOT NULL,
    display_order integer NOT NULL,
    parent_block_id integer NOT NULL,
    display_name character varying(40) NOT NULL,
    content_category_id integer NOT NULL,
    display_block_type character varying(24) NOT NULL,
    description character varying(80) NOT NULL,
    partner_module_id integer NOT NULL,
    dt_deleted timestamp without time zone NOT NULL,
    dt_created timestamp without time zone NOT NULL,
    status character varying(20) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    display_name_current character varying(40) NOT NULL,
    description_current character varying(80) NOT NULL
);


ALTER TABLE refer.display_block_dim OWNER TO warehouse_dbo;

--
-- Name: display_block_dim_display_block_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE display_block_dim_display_block_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.display_block_dim_display_block_sk_seq OWNER TO warehouse_dbo;

--
-- Name: display_block_dim_display_block_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE display_block_dim_display_block_sk_seq OWNED BY display_block_dim.display_block_sk;


--
-- Name: event_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE event_dim (
    event_sk integer NOT NULL,
    event_name character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    event_name_current character varying(255) NOT NULL
);


ALTER TABLE refer.event_dim OWNER TO warehouse_dbo;

--
-- Name: event_dim_event_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE event_dim_event_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.event_dim_event_sk_seq OWNER TO warehouse_dbo;

--
-- Name: event_dim_event_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE event_dim_event_sk_seq OWNED BY event_dim.event_sk;


--
-- Name: ga_channel_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE ga_channel_dim (
    ga_channel_sk integer NOT NULL,
    channel_name character varying(255) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    channel_mapping character varying(255) NOT NULL
);


ALTER TABLE refer.ga_channel_dim OWNER TO warehouse_dbo;

--
-- Name: ga_channel_dim_ga_channel_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE ga_channel_dim_ga_channel_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.ga_channel_dim_ga_channel_sk_seq OWNER TO warehouse_dbo;

--
-- Name: ga_channel_dim_ga_channel_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE ga_channel_dim_ga_channel_sk_seq OWNED BY ga_channel_dim.ga_channel_sk;


--
-- Name: partner_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE partner_dim (
    partner_sk integer NOT NULL,
    partner_id integer NOT NULL,
    name character varying(75) NOT NULL,
    description character varying(255) NOT NULL,
    locale character varying(12) NOT NULL,
    time_zone_id character varying(40) NOT NULL,
    keyword character varying(14) NOT NULL,
    msa_id integer NOT NULL,
    msa_name character varying(75) NOT NULL,
    msa_is_metro smallint NOT NULL,
    dtactive timestamp without time zone NOT NULL,
    dtinactive timestamp without time zone NOT NULL,
    is_published smallint NOT NULL,
    dtdeleted timestamp without time zone NOT NULL,
    parent1_id integer NOT NULL,
    parent1_type character varying(20) NOT NULL,
    parent1_name character varying(40) NOT NULL,
    parent2_id integer NOT NULL,
    parent2_type character varying(20) NOT NULL,
    parent2_name character varying(75) NOT NULL,
    parent3_id integer NOT NULL,
    parent3_type character varying(20) NOT NULL,
    parent3_name character varying(75) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(75) NOT NULL,
    description_current character varying(255) NOT NULL,
    parent1_id_current integer NOT NULL,
    parent1_type_current character varying(20) NOT NULL,
    parent1_name_current character varying(40) NOT NULL,
    partner_postal_code character varying(16)
);


ALTER TABLE refer.partner_dim OWNER TO warehouse_dbo;

--
-- Name: group_dim; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW group_dim AS
    SELECT partner_dim.parent1_id, partner_dim.parent1_name, partner_dim.parent1_type FROM partner_dim WHERE (partner_dim.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone) GROUP BY partner_dim.parent1_id, partner_dim.parent1_name, partner_dim.parent1_type;


ALTER TABLE refer.group_dim OWNER TO warehouse_dbo;

--
-- Name: month_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE month_dim (
    month_sk integer NOT NULL,
    calendar_year_month character varying(32) NOT NULL,
    month_since_2005 smallint NOT NULL,
    date_sk_start integer NOT NULL,
    date_sk_end integer NOT NULL
);


ALTER TABLE refer.month_dim OWNER TO warehouse_dbo;

--
-- Name: month_dim_month_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE month_dim_month_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.month_dim_month_sk_seq OWNER TO warehouse_dbo;

--
-- Name: month_dim_month_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE month_dim_month_sk_seq OWNED BY month_dim.month_sk;


--
-- Name: network_type_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE network_type_dim (
    network_type_sk integer NOT NULL,
    network_type text NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer
);


ALTER TABLE refer.network_type_dim OWNER TO warehouse_dbo;

--
-- Name: network_type_dim_network_type_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE network_type_dim_network_type_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.network_type_dim_network_type_sk_seq OWNER TO warehouse_dbo;

--
-- Name: network_type_dim_network_type_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE network_type_dim_network_type_sk_seq OWNED BY network_type_dim.network_type_sk;


--
-- Name: page_template_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE page_template_dim (
    page_template_sk integer NOT NULL,
    page_template text NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer
);


ALTER TABLE refer.page_template_dim OWNER TO warehouse_dbo;

--
-- Name: page_template_dim_page_template_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE page_template_dim_page_template_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.page_template_dim_page_template_sk_seq OWNER TO warehouse_dbo;

--
-- Name: page_template_dim_page_template_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE page_template_dim_page_template_sk_seq OWNED BY page_template_dim.page_template_sk;


--
-- Name: partner_dim_partner_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE partner_dim_partner_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.partner_dim_partner_sk_seq OWNER TO warehouse_dbo;

--
-- Name: partner_dim_partner_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE partner_dim_partner_sk_seq OWNED BY partner_dim.partner_sk;


--
-- Name: partner_module_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE partner_module_dim (
    partner_module_sk integer NOT NULL,
    partner_module_id integer NOT NULL,
    partner_id integer NOT NULL,
    feature_module_id integer NOT NULL,
    feature_module_name character varying(30) NOT NULL,
    feature_module_desc character varying(250) NOT NULL,
    feature_module_wapurl character varying(75) NOT NULL,
    display_name character varying(80) NOT NULL,
    description character varying(80) NOT NULL,
    source_name character varying(80) NOT NULL,
    is_local smallint NOT NULL,
    state character varying(2) NOT NULL,
    enclosing_partner_module_id integer NOT NULL,
    enabled boolean NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    group_name character varying(80) NOT NULL,
    city_state character varying(80) NOT NULL,
    feature_module_name_current character varying(30) NOT NULL,
    feature_module_desc_current character varying(255) NOT NULL,
    display_name_current character varying(80) NOT NULL,
    description_current character varying(80) NOT NULL
);


ALTER TABLE refer.partner_module_dim OWNER TO warehouse_dbo;

--
-- Name: partner_module_dim_partner_module_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE partner_module_dim_partner_module_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.partner_module_dim_partner_module_sk_seq OWNER TO warehouse_dbo;

--
-- Name: partner_module_dim_partner_module_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE partner_module_dim_partner_module_sk_seq OWNED BY partner_module_dim.partner_module_sk;


--
-- Name: partner_view; Type: VIEW; Schema: refer; Owner: warehouse_dbo
--

CREATE VIEW partner_view AS
    SELECT partner_dim.partner_sk, partner_dim.partner_id, partner_dim.name, partner_dim.description, partner_dim.locale, partner_dim.time_zone_id, partner_dim.keyword, partner_dim.msa_id, partner_dim.msa_name, partner_dim.msa_is_metro, partner_dim.dtactive, partner_dim.dtinactive, partner_dim.is_published, partner_dim.dtdeleted, partner_dim.parent1_id, partner_dim.parent1_type, partner_dim.parent1_name, partner_dim.parent2_id, partner_dim.parent2_type, partner_dim.parent2_name, partner_dim.parent3_id, partner_dim.parent3_type, partner_dim.parent3_name, partner_dim.auto_generated, partner_dim.suppress, partner_dim.data_file_id, partner_dim.dt_effective, partner_dim.dt_expire, partner_dim.name_current, partner_dim.description_current, partner_dim.parent1_id_current, partner_dim.parent1_type_current, partner_dim.parent1_name_current, partner_dim.partner_postal_code FROM partner_dim WHERE (partner_dim.dt_expire = '9999-12-31 00:00:00'::timestamp without time zone);


ALTER TABLE refer.partner_view OWNER TO warehouse_dbo;

--
-- Name: point_of_interest_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE point_of_interest_dim (
    point_of_interest_sk integer NOT NULL,
    point_of_interest_id integer NOT NULL,
    name character varying(255) NOT NULL,
    address1 character varying(255),
    address2 character varying(255),
    phone_number character varying(255),
    postal_code_id integer,
    postal_code_suffix integer,
    radius integer,
    segment_id integer,
    latitude double precision,
    longitude double precision,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    address1_current character varying(255),
    postal_code_id_current integer,
    latitude_current double precision,
    longitude_current double precision
);


ALTER TABLE refer.point_of_interest_dim OWNER TO warehouse_dbo;

--
-- Name: point_of_interest_dim_bk; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE point_of_interest_dim_bk (
    point_of_interest_sk integer NOT NULL,
    point_of_interest_id integer NOT NULL,
    name character varying(255) NOT NULL,
    address1 character varying(255),
    address2 character varying(255),
    phone_number character varying(255),
    postal_code_id integer,
    postal_code_suffix integer,
    radius integer,
    segment_id integer,
    latitude double precision,
    longitude double precision,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    address1_current character varying(255),
    postal_code_id_current integer,
    latitude_current double precision,
    longitude_current double precision
);


ALTER TABLE refer.point_of_interest_dim_bk OWNER TO warehouse_dbo;

--
-- Name: point_of_interest_dim_point_of_interest_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE point_of_interest_dim_point_of_interest_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.point_of_interest_dim_point_of_interest_sk_seq OWNER TO warehouse_dbo;

--
-- Name: point_of_interest_dim_point_of_interest_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE point_of_interest_dim_point_of_interest_sk_seq OWNED BY point_of_interest_dim.point_of_interest_sk;


--
-- Name: point_of_interest_dim_tmp; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE point_of_interest_dim_tmp (
    point_of_interest_sk integer NOT NULL,
    point_of_interest_id integer NOT NULL,
    name character varying(255) NOT NULL,
    address1 character varying(255),
    address2 character varying(255),
    phone_number character varying(255),
    postal_code_id integer,
    postal_code_suffix integer,
    radius integer,
    segment_id integer,
    latitude double precision,
    longitude double precision,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    address1_current character varying(255),
    postal_code_id_current integer,
    latitude_current double precision,
    longitude_current double precision
);


ALTER TABLE refer.point_of_interest_dim_tmp OWNER TO warehouse_dbo;

--
-- Name: portal_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE portal_dim (
    portal_sk integer NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45) NOT NULL,
    description character varying(255) NOT NULL,
    default_partner_id integer NOT NULL,
    single_partner smallint NOT NULL,
    ondeck boolean NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    portal_name_current character varying(45) NOT NULL,
    description_current character varying(255) NOT NULL,
    keyword character varying(14)
);


ALTER TABLE refer.portal_dim OWNER TO warehouse_dbo;

--
-- Name: portal_dim_portal_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE portal_dim_portal_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.portal_dim_portal_sk_seq OWNER TO warehouse_dbo;

--
-- Name: portal_dim_portal_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE portal_dim_portal_sk_seq OWNED BY portal_dim.portal_sk;


--
-- Name: portal_host_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE portal_host_dim (
    portal_host_sk integer NOT NULL,
    portal_host_id integer NOT NULL,
    hostname character varying(50) NOT NULL,
    portal_id integer NOT NULL,
    partner_id integer NOT NULL,
    dt_created timestamp without time zone NOT NULL,
    dt_deleted timestamp without time zone NOT NULL,
    is_active smallint NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL
);


ALTER TABLE refer.portal_host_dim OWNER TO warehouse_dbo;

--
-- Name: portal_host_dim_portal_host_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE portal_host_dim_portal_host_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.portal_host_dim_portal_host_sk_seq OWNER TO warehouse_dbo;

--
-- Name: portal_host_dim_portal_host_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE portal_host_dim_portal_host_sk_seq OWNED BY portal_host_dim.portal_host_sk;


--
-- Name: pro_audit_report_name_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE pro_audit_report_name_dim (
    job_id character varying(255) NOT NULL,
    obj_id character varying(128) DEFAULT NULL::character varying NOT NULL,
    report_name character varying(255) NOT NULL,
    auto_generate boolean DEFAULT true NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    dim_lastupdate timestamp without time zone DEFAULT (now())::timestamp without time zone
);


ALTER TABLE refer.pro_audit_report_name_dim OWNER TO warehouse_dbo;

--
-- Name: referrer_hostname_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE referrer_hostname_dim (
    referrer_hostname_sk integer NOT NULL,
    hostname text,
    domain text,
    referrer_type character varying(16),
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer
);


ALTER TABLE refer.referrer_hostname_dim OWNER TO warehouse_dbo;

--
-- Name: referrer_hostname_dim_referrer_hostname_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE referrer_hostname_dim_referrer_hostname_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.referrer_hostname_dim_referrer_hostname_sk_seq OWNER TO warehouse_dbo;

--
-- Name: referrer_hostname_dim_referrer_hostname_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE referrer_hostname_dim_referrer_hostname_sk_seq OWNED BY referrer_hostname_dim.referrer_hostname_sk;


--
-- Name: request_type_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE request_type_dim (
    request_type_sk integer NOT NULL,
    request_type_id integer NOT NULL,
    request_type_description character varying(64) NOT NULL,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL
);


ALTER TABLE refer.request_type_dim OWNER TO warehouse_dbo;

--
-- Name: request_type_dim_request_type_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE request_type_dim_request_type_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.request_type_dim_request_type_sk_seq OWNER TO warehouse_dbo;

--
-- Name: request_type_dim_request_type_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE request_type_dim_request_type_sk_seq OWNED BY request_type_dim.request_type_sk;


--
-- Name: revenue_share_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE revenue_share_dim (
    revenue_share_sk integer NOT NULL,
    account_id character varying(255) NOT NULL,
    account_owner character varying(255),
    account_name character varying(255) NOT NULL,
    parent_account character varying(255) NOT NULL,
    type character varying(255),
    group_id integer NOT NULL,
    partner_id integer NOT NULL,
    rev_share_mobileweb_local double precision,
    rev_share_mobileweb_mediation double precision,
    rev_share_mobileweb_national double precision,
    rev_share_apps_local double precision,
    rev_share_apps_mediation double precision,
    rev_share_apps_national double precision,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    partner_sk integer NOT NULL,
    rev_share_mobileweb_local_current double precision,
    rev_share_mobileweb_mediation_current double precision,
    rev_share_mobileweb_national_current double precision,
    rev_share_apps_local_current double precision,
    rev_share_apps_mediation_current double precision,
    rev_share_apps_national_current double precision,
    is_relevant integer DEFAULT 1,
    is_active integer DEFAULT 1
);


ALTER TABLE refer.revenue_share_dim OWNER TO warehouse_dbo;

--
-- Name: revenue_share_dim_revenue_share_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE revenue_share_dim_revenue_share_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.revenue_share_dim_revenue_share_sk_seq OWNER TO warehouse_dbo;

--
-- Name: revenue_share_dim_revenue_share_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE revenue_share_dim_revenue_share_sk_seq OWNED BY revenue_share_dim.revenue_share_sk;


--
-- Name: store_location_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE store_location_dim (
    store_location_sk integer NOT NULL,
    store_location_id integer NOT NULL,
    name character varying(255) NOT NULL,
    external_load_id character varying(255),
    store_id integer,
    url character varying(255),
    phone character varying(255),
    address_one character varying(255),
    address_two character varying(255),
    city character varying(255),
    state character varying(255),
    postal_code character varying(255),
    latitude double precision,
    longitude double precision,
    boundary_radius integer,
    external_id character varying(255),
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer,
    dt_effective timestamp without time zone NOT NULL,
    dt_expire timestamp without time zone NOT NULL,
    name_current character varying(255) NOT NULL,
    external_id_current character varying(255)
);


ALTER TABLE refer.store_location_dim OWNER TO warehouse_dbo;

--
-- Name: store_location_dim_store_location_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE store_location_dim_store_location_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.store_location_dim_store_location_sk_seq OWNER TO warehouse_dbo;

--
-- Name: store_location_dim_store_location_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE store_location_dim_store_location_sk_seq OWNED BY store_location_dim.store_location_sk;


--
-- Name: time_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE time_dim (
    time_sk integer NOT NULL,
    full_time time without time zone NOT NULL,
    hour24_of_day smallint NOT NULL,
    hour12_of_day smallint NOT NULL,
    day_half bpchar NOT NULL,
    minute_of_hour smallint NOT NULL,
    minute_of_day smallint NOT NULL,
    second_of_minute smallint NOT NULL,
    second_of_hour smallint NOT NULL,
    second_of_day integer NOT NULL,
    quarter_of_hour smallint NOT NULL,
    quarter_of_day smallint NOT NULL,
    half_of_hour smallint NOT NULL,
    half_of_day smallint NOT NULL
);


ALTER TABLE refer.time_dim OWNER TO warehouse_dbo;

--
-- Name: user_agent_dim; Type: TABLE; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE user_agent_dim (
    user_agent_sk integer NOT NULL,
    user_agent_name text NOT NULL,
    device_manufacturer character varying(64),
    device_type character varying(64),
    organic boolean,
    auto_generated boolean NOT NULL,
    suppress boolean NOT NULL,
    data_file_id integer
);


ALTER TABLE refer.user_agent_dim OWNER TO warehouse_dbo;

--
-- Name: user_agent_dim_user_agent_sk_seq; Type: SEQUENCE; Schema: refer; Owner: warehouse_dbo
--

CREATE SEQUENCE user_agent_dim_user_agent_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE refer.user_agent_dim_user_agent_sk_seq OWNER TO warehouse_dbo;

--
-- Name: user_agent_dim_user_agent_sk_seq; Type: SEQUENCE OWNED BY; Schema: refer; Owner: warehouse_dbo
--

ALTER SEQUENCE user_agent_dim_user_agent_sk_seq OWNED BY user_agent_dim.user_agent_sk;


SET search_path = staging, pg_catalog;

SET default_tablespace = staging_tablespace;

--
-- Name: ad_request_log_app3; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_request_log_app3 (
    wap_site text,
    originate_ip text,
    field3 text,
    request_date text,
    request_url text,
    status_code text,
    bytes text,
    referrer text,
    user_agent text,
    session_id text,
    req_url_b text,
    req_url_c text,
    req_url_db text,
    req_url_p text,
    req_url_pm text,
    req_url_s text,
    req_url_dguid text,
    req_url_ip text,
    req_url_ll text,
    req_url_ou text,
    req_url_pos text,
    req_url_size text,
    req_url_ua text,
    req_rul_ui text,
    req_rul_z text,
    partner_id text,
    portal_id text,
    data_file_id text,
    app_server text,
    dt_lastchanged date
);


ALTER TABLE staging.ad_request_log_app3 OWNER TO song;

--
-- Name: ad_request_test_1; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_request_test_1 (
    field1 text,
    field2 text,
    field3 text,
    field4 text,
    field5 text,
    field6 text,
    field7 text,
    field8 text,
    field9 text,
    field10 text,
    field11 text,
    field12 text,
    field13 text
);


ALTER TABLE staging.ad_request_test_1 OWNER TO song;

--
-- Name: ad_request_test_2; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_request_test_2 (
    field1 text,
    field2 character varying(15),
    field3 character varying(10),
    field4 character varying(10),
    field5 character varying(21),
    field6 character varying(15),
    field7 text,
    field8 character varying(15),
    field9 character varying(10),
    field10 text,
    field11 text,
    field12 character varying(10),
    field13 character varying(32)
);


ALTER TABLE staging.ad_request_test_2 OWNER TO song;

--
-- Name: ad_request_test_bk; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_request_test_bk (
    field1 text,
    field2 character varying(15),
    field3 character varying(10),
    field4 character varying(10),
    field5 character varying(21),
    field6 character varying(15),
    field7 text,
    field8 character varying(15),
    field9 character varying(10),
    field10 text,
    field11 text,
    field12 character varying(10),
    field13 character varying(32)
);


ALTER TABLE staging.ad_request_test_bk OWNER TO song;

--
-- Name: ad_response_test; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_response_test (
    field1 text,
    field2 character varying(15),
    field3 character varying(32),
    field4 character varying(32),
    field5 character varying(15),
    field6 character varying(15),
    field7 character varying(15),
    field8 character varying(15),
    field9 text,
    field10 text,
    field11 text,
    field12 character varying(15),
    field13 character varying(15),
    field14 character(1)
);


ALTER TABLE staging.ad_response_test OWNER TO song;

--
-- Name: ad_response_test_1; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_response_test_1 (
    field1 text,
    field2 text,
    field3 text,
    field4 text,
    field5 text,
    field6 text,
    field7 text,
    field8 text,
    field9 text,
    field10 text,
    field11 text,
    field12 text,
    field13 text,
    field14 text
);


ALTER TABLE staging.ad_response_test_1 OWNER TO song;

--
-- Name: ad_response_test_2; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE ad_response_test_2 (
    field1 text,
    field2 text,
    field3 text,
    field4 text,
    field5 text,
    field6 text,
    field7 text,
    field8 text,
    field9 text,
    field10 text,
    field11 text,
    field12 text,
    field13 text,
    field14 text
);


ALTER TABLE staging.ad_response_test_2 OWNER TO song;

--
-- Name: ad_response_test_BK; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE "ad_response_test_BK" (
    field1 date,
    field2 character varying(15),
    field3 character varying(32),
    field4 character varying(32),
    field5 character varying(15),
    field6 character varying(15),
    field7 character varying(15),
    field8 character varying(15),
    field9 text,
    field10 date,
    field11 text,
    field12 character varying(15),
    field13 character varying(15),
    field14 character(1)
);


ALTER TABLE staging."ad_response_test_BK" OWNER TO song;

--
-- Name: backup_filename_backup_filename_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE backup_filename_backup_filename_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.backup_filename_backup_filename_id_seq OWNER TO warehouse_dbo;

--
-- Name: backup_filename; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE backup_filename (
    backup_filename_id integer DEFAULT nextval('backup_filename_backup_filename_id_seq'::regclass) NOT NULL,
    name text NOT NULL,
    location text,
    backup_type text,
    dt_backup_started timestamp without time zone,
    dt_backup_completed timestamp without time zone,
    dt_lastchange timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE staging.backup_filename OWNER TO warehouse_dbo;

--
-- Name: bbuniq_agg_group_act_adj; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE bbuniq_agg_group_act_adj (
    process_id integer,
    calendar_year_month character varying(32),
    parent1_id integer,
    pv_per_unique real,
    orig_view_count integer,
    orig_unique_count integer,
    adj_unique_count integer
);


ALTER TABLE staging.bbuniq_agg_group_act_adj OWNER TO ejohnst;

--
-- Name: bbuniq_agg_group_portal_act_adj; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE bbuniq_agg_group_portal_act_adj (
    process_id integer,
    calendar_year_month character varying(32),
    parent1_id integer,
    portal_id integer,
    pv_per_unique real,
    orig_view_count integer,
    orig_unique_count integer,
    adj_unique_count integer
);


ALTER TABLE staging.bbuniq_agg_group_portal_act_adj OWNER TO ejohnst;

--
-- Name: bbuniq_agg_network_act_adj; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE bbuniq_agg_network_act_adj (
    calendar_year_month character varying(32),
    pv_per_unique real,
    orig_view_count integer,
    orig_unique_count integer,
    adj_unique_count integer,
    process_id integer
);


ALTER TABLE staging.bbuniq_agg_network_act_adj OWNER TO ejohnst;

--
-- Name: bbuniq_agg_partner_act_adj; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE bbuniq_agg_partner_act_adj (
    process_id integer,
    calendar_year_month character varying(32),
    partner_id integer,
    pv_per_unique real,
    orig_view_count integer,
    orig_unique_count integer,
    adj_unique_count integer
);


ALTER TABLE staging.bbuniq_agg_partner_act_adj OWNER TO ejohnst;

--
-- Name: bbuniq_agg_portal_act_adj; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE bbuniq_agg_portal_act_adj (
    process_id integer,
    calendar_year_month character varying(32),
    portal_id integer,
    pv_per_unique real,
    orig_view_count integer,
    orig_unique_count integer,
    adj_unique_count integer
);


ALTER TABLE staging.bbuniq_agg_portal_act_adj OWNER TO ejohnst;

--
-- Name: bbuniq_agg_site_traffic_adj; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE bbuniq_agg_site_traffic_adj (
    process_id integer,
    calendar_year_month character varying(32),
    portal_id integer,
    partner_id integer,
    pv_per_unique real,
    orig_view_count integer,
    orig_unique_count integer,
    adj_unique_count integer
);


ALTER TABLE staging.bbuniq_agg_site_traffic_adj OWNER TO ejohnst;

--
-- Name: content_category_dim_temp; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE content_category_dim_temp (
    content_category_sk_temp integer NOT NULL,
    content_category_id integer,
    category_name character varying(255),
    auto_generated boolean,
    suppress boolean,
    data_file_id integer,
    dt_effective timestamp without time zone,
    dt_expire timestamp without time zone,
    category_name_current character varying(255)
);


ALTER TABLE staging.content_category_dim_temp OWNER TO warehouse_dbo;

--
-- Name: content_category_dim_temp_content_category_sk_temp_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE content_category_dim_temp_content_category_sk_temp_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.content_category_dim_temp_content_category_sk_temp_seq OWNER TO warehouse_dbo;

--
-- Name: content_category_dim_temp_content_category_sk_temp_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE content_category_dim_temp_content_category_sk_temp_seq OWNED BY content_category_dim_temp.content_category_sk_temp;


--
-- Name: data_file_temp; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE data_file_temp (
    data_file_temp_id integer NOT NULL,
    file_name character varying(64) NOT NULL,
    server_name character varying(16) NOT NULL,
    file_timestamp timestamp without time zone NOT NULL,
    data_file_config_id smallint NOT NULL,
    file_status character varying(2) NOT NULL,
    dt_file_queued timestamp without time zone NOT NULL,
    dt_file_extracted timestamp without time zone,
    dt_process_transformed timestamp without time zone,
    dt_process_loaded timestamp without time zone,
    min_eastern_date_sk integer,
    max_eastern_date_sk integer,
    backup_filename_id integer,
    pre_transform_count integer,
    staging_load_count integer,
    fact_table_load_count integer
);


ALTER TABLE staging.data_file_temp OWNER TO warehouse_dbo;

--
-- Name: data_file_temp_data_file_temp_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE data_file_temp_data_file_temp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.data_file_temp_data_file_temp_id_seq OWNER TO warehouse_dbo;

--
-- Name: data_file_temp_data_file_temp_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE data_file_temp_data_file_temp_id_seq OWNED BY data_file_temp.data_file_temp_id;


--
-- Name: dim_advertisers; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_advertisers (
    advertiser_sk integer NOT NULL,
    id integer NOT NULL,
    name character varying(50),
    publisher_id integer,
    organization_id integer,
    dw_status smallint DEFAULT 1 NOT NULL,
    dw_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_advertisers OWNER TO song;

--
-- Name: dim_advertisers_advertiser_sk_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE dim_advertisers_advertiser_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.dim_advertisers_advertiser_sk_seq OWNER TO song;

--
-- Name: dim_advertisers_advertiser_sk_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE dim_advertisers_advertiser_sk_seq OWNED BY dim_advertisers.advertiser_sk;


--
-- Name: dim_flights; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_flights (
    flight_sk integer NOT NULL,
    id integer NOT NULL,
    name character varying(50),
    order_id integer,
    publisher_id integer,
    property_id integer,
    organization_id integer,
    advertiser_id integer,
    dw_status smallint DEFAULT 1 NOT NULL,
    dw_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_flights OWNER TO song;

--
-- Name: dim_flights_flight_sk_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE dim_flights_flight_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.dim_flights_flight_sk_seq OWNER TO song;

--
-- Name: dim_flights_flight_sk_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE dim_flights_flight_sk_seq OWNED BY dim_flights.flight_sk;


--
-- Name: dim_networks; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_networks (
    id integer NOT NULL,
    name character varying(255),
    revenue_type character varying(255),
    dw_id integer,
    dw_status smallint DEFAULT 1 NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_networks OWNER TO song;

--
-- Name: dim_orders; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_orders (
    order_sk integer NOT NULL,
    id integer NOT NULL,
    name character varying(255),
    publisher_id integer,
    property_id integer,
    organization_id integer,
    advertiser_id integer,
    dw_status smallint DEFAULT 1 NOT NULL,
    dw_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_orders OWNER TO song;

--
-- Name: dim_orders_order_sk_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE dim_orders_order_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.dim_orders_order_sk_seq OWNER TO song;

--
-- Name: dim_orders_order_sk_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE dim_orders_order_sk_seq OWNED BY dim_orders.order_sk;


--
-- Name: dim_organizations; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_organizations (
    organization_sk integer NOT NULL,
    id integer NOT NULL,
    name character varying(50),
    dw_status smallint DEFAULT 1 NOT NULL,
    dw_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_organizations OWNER TO song;

--
-- Name: dim_organizations_organization_sk_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE dim_organizations_organization_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.dim_organizations_organization_sk_seq OWNER TO song;

--
-- Name: dim_organizations_organization_sk_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE dim_organizations_organization_sk_seq OWNED BY dim_organizations.organization_sk;


--
-- Name: dim_properties; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_properties (
    property_sk integer NOT NULL,
    id integer,
    name character varying(50),
    publisher_id integer,
    dw_status smallint DEFAULT 1 NOT NULL,
    dw_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_properties OWNER TO song;

--
-- Name: dim_properties_property_sk_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE dim_properties_property_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.dim_properties_property_sk_seq OWNER TO song;

--
-- Name: dim_properties_property_sk_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE dim_properties_property_sk_seq OWNED BY dim_properties.property_sk;


--
-- Name: dim_publishers; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE dim_publishers (
    publisher_sk integer NOT NULL,
    id integer,
    name character varying(50),
    dw_status smallint DEFAULT 1 NOT NULL,
    dw_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE staging.dim_publishers OWNER TO song;

--
-- Name: dim_publishers_publisher_sk_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE dim_publishers_publisher_sk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.dim_publishers_publisher_sk_seq OWNER TO song;

--
-- Name: dim_publishers_publisher_sk_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE dim_publishers_publisher_sk_seq OWNED BY dim_publishers.publisher_sk;


--
-- Name: emj_access_log; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE emj_access_log (
    stg_wap_site_access_log_id bigint,
    server character varying(32),
    host character varying(50),
    source_ip inet,
    client character varying(32),
    username character varying(32),
    dtrequested timestamp with time zone,
    request text,
    method text,
    path text,
    arguments text,
    protocol text,
    status smallint,
    bytes integer,
    referrer text,
    user_agent text,
    uid character varying(64),
    session character varying(64),
    page_template text,
    network_type text,
    partner_keyword text,
    display_block_id integer,
    partner_module_id integer,
    content_location integer,
    user_location integer,
    partner_id integer,
    portal_id integer,
    content_category_id integer,
    referrer_hostname text,
    request_type_id integer,
    eastern_date date,
    eastern_time time without time zone,
    local_date date,
    local_time time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    dtrequested_pacific timestamp without time zone,
    domain text
);


ALTER TABLE staging.emj_access_log OWNER TO ejohnst;

--
-- Name: emj_agent_uniques; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE emj_agent_uniques (
    user_agent_sk integer,
    views bigint,
    uniques bigint
);


ALTER TABLE staging.emj_agent_uniques OWNER TO ejohnst;

--
-- Name: emj_agent_uniques_bk20110103; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE emj_agent_uniques_bk20110103 (
    user_agent_sk integer,
    views bigint,
    uniques bigint
);


ALTER TABLE staging.emj_agent_uniques_bk20110103 OWNER TO ejohnst;

--
-- Name: emj_agent_uniques_bk20110104; Type: TABLE; Schema: staging; Owner: postgres; Tablespace: staging_tablespace
--

CREATE TABLE emj_agent_uniques_bk20110104 (
    user_agent_sk integer,
    views bigint,
    uniques bigint
);


ALTER TABLE staging.emj_agent_uniques_bk20110104 OWNER TO postgres;

--
-- Name: fct_performance; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE fct_performance (
    network_id integer,
    period integer,
    publisher_id integer,
    property_id integer,
    placement_id integer,
    organization_id integer,
    advertiser_id integer,
    order_id integer,
    flight_id integer,
    creative_id integer,
    impressions integer,
    clicks integer,
    revenue numeric
);


ALTER TABLE staging.fct_performance OWNER TO song;

--
-- Name: seq_gen_ad_channel_site; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_channel_site
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_channel_site OWNER TO warehouse_dbo;

--
-- Name: gen_ad_channel_site; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_channel_site (
    gen_ad_channel_site_id integer DEFAULT nextval('seq_gen_ad_channel_site'::regclass) NOT NULL,
    ad_name text,
    site_id text,
    site_name text,
    report_date text,
    impressions_delivered text,
    clicks_recorded text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    ga_channel_sk integer DEFAULT (-2),
    dc_site_sk integer DEFAULT (-2),
    partner_keyword character varying(255),
    portal_keyword character varying(255),
    partner_sk integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_channel_site OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app12; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app12
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app12 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app12; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app12 (
    gen_ad_response_app12_id integer DEFAULT nextval('seq_gen_ad_response_app12'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app12 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app12_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app12_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app12_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app12_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app12_sub1 (
    gen_ad_response_app12_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app12_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app12_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app13; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app13
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app13 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app13; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app13 (
    gen_ad_response_app13_id integer DEFAULT nextval('seq_gen_ad_response_app13'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app13 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app13_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app13_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app13_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app13_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app13_sub1 (
    gen_ad_response_app13_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app13_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app13_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app14; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app14
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app14 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app14; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app14 (
    gen_ad_response_app14_id integer DEFAULT nextval('seq_gen_ad_response_app14'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app14 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app14_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app14_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app14_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app14_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app14_sub1 (
    gen_ad_response_app14_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app14_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app14_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app15; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app15
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app15 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app15; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app15 (
    gen_ad_response_app15_id integer DEFAULT nextval('seq_gen_ad_response_app15'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
);


ALTER TABLE staging.gen_ad_response_app15 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app15_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app15_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app15_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app15_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app15_sub1 (
    gen_ad_response_app15_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app15_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app15_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app3; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app3
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app3 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app3; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app3 (
    gen_ad_response_app3_id integer DEFAULT nextval('seq_gen_ad_response_app3'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app3 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app3_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app3_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app3_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app3_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app3_sub1 (
    gen_ad_response_app3_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app3_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app3_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app4; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app4
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app4 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app4; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app4 (
    gen_ad_response_app4_id integer DEFAULT nextval('seq_gen_ad_response_app4'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app4 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app4_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app4_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app4_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app4_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app4_sub1 (
    gen_ad_response_app4_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app4_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app4_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app6; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app6
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app6 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app6; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app6 (
    gen_ad_response_app6_id integer DEFAULT nextval('seq_gen_ad_response_app6'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app6 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app6_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app6_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app6_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app6_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app6_sub1 (
    gen_ad_response_app6_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app6_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app6_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app8; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app8
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app8 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app8; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app8 (
    gen_ad_response_app8_id integer DEFAULT nextval('seq_gen_ad_response_app8'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app8 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app8_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app8_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app8_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app8_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app8_sub1 (
    gen_ad_response_app8_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app8_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app8_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app9; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app9
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app9 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app9; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app9 (
    gen_ad_response_app9_id integer DEFAULT nextval('seq_gen_ad_response_app9'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app9 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ad_response_app9_sub1; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ad_response_app9_sub1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ad_response_app9_sub1 OWNER TO warehouse_dbo;

--
-- Name: gen_ad_response_app9_sub1; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ad_response_app9_sub1 (
    gen_ad_response_app9_sub1_id integer DEFAULT nextval('seq_gen_ad_response_app9_sub1'::regclass) NOT NULL,
    app_server text,
    response_date text,
    remote_ip text,
    session_id text,
    request_guid text,
    portal_id text,
    partner_id text,
    ad_content_category_id text,
    ad_network_id text,
    ad_response_url text,
    field10 text,
    user_agent text,
    status_code text,
    duration text,
    fullfilled_code text,
    fullfilled_code_count text,
    fullfilled_code_y text,
    fullfilled_code_n text,
    fullfilled_code_e text,
    fullfilled_code_t text,
    placement_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    portal_sk integer,
    ad_content_category_sk integer,
    ad_network_sk integer,
    user_agent_sk integer,
    site_keyword text,
    dc_site_sk integer DEFAULT (-2),
    location_id text,
    location_quality text,
    partner_module_id text,
    location_sk integer DEFAULT (-2),
    partner_module_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ad_response_app9_sub1 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_adcel_site_access_log_app3; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_adcel_site_access_log_app3
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_adcel_site_access_log_app3 OWNER TO warehouse_dbo;

--
-- Name: gen_adcel_site_access_log_app3; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_adcel_site_access_log_app3 (
    gen_adcel_site_access_log_app3_id integer DEFAULT nextval('seq_gen_adcel_site_access_log_app3'::regclass) NOT NULL,
    app_server text,
    wap_site text,
    source_ip text,
    auth_username text,
    request_date text,
    request_url text,
    req_method text,
    req_path text,
    req_arguments text,
    req_protocol text,
    status_code text,
    response_bytes text,
    referrer text,
    user_agent text,
    session_id text,
    req_url_b text,
    req_url_c text,
    req_url_db text,
    req_url_p text,
    req_url_pm text,
    req_url_s text,
    req_url_dguid text,
    req_url_ip text,
    req_url_ll text,
    req_url_ou text,
    req_url_pos text,
    req_url_size text,
    req_url_ua text,
    req_rul_ui text,
    req_rul_z text,
    referrer_hostname text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date text,
    eastern_time text,
    local_date text DEFAULT '2005-01-01'::text,
    local_time text DEFAULT '00:00:00'::text,
    gmt_date text,
    gmt_time text,
    request_date_pacific text,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    content_category_sk integer,
    display_block_sk integer,
    portal_sk integer,
    partner_module_sk integer,
    user_agent_sk integer,
    referrer_hostname_sk integer,
    request_type_sk integer,
    ad_request_count integer,
    domain text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_adcel_site_access_log_app3 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_adcel_site_access_log_app4; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_adcel_site_access_log_app4
    START WITH 5102256
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_adcel_site_access_log_app4 OWNER TO warehouse_dbo;

--
-- Name: gen_adcel_site_access_log_app4; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_adcel_site_access_log_app4 (
    gen_adcel_site_access_log_app4_id integer DEFAULT nextval('seq_gen_adcel_site_access_log_app4'::regclass) NOT NULL,
    app_server text,
    wap_site text,
    source_ip text,
    auth_username text,
    request_date text,
    request_url text,
    req_method text,
    req_path text,
    req_arguments text,
    req_protocol text,
    status_code text,
    response_bytes text,
    referrer text,
    user_agent text,
    session_id text,
    req_url_b text,
    req_url_c text,
    req_url_db text,
    req_url_p text,
    req_url_pm text,
    req_url_s text,
    req_url_dguid text,
    req_url_ip text,
    req_url_ll text,
    req_url_ou text,
    req_url_pos text,
    req_url_size text,
    req_url_ua text,
    req_rul_ui text,
    req_rul_z text,
    referrer_hostname text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date text,
    eastern_time text,
    local_date text DEFAULT '2005-01-01'::text,
    local_time text DEFAULT '00:00:00'::text,
    gmt_date text,
    gmt_time text,
    request_date_pacific text,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    content_category_sk integer,
    display_block_sk integer,
    portal_sk integer,
    partner_module_sk integer,
    user_agent_sk integer,
    referrer_hostname_sk integer,
    request_type_sk integer,
    ad_request_count integer,
    domain text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_adcel_site_access_log_app4 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_adcel_site_access_log_app6; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_adcel_site_access_log_app6
    START WITH 5102256
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_adcel_site_access_log_app6 OWNER TO warehouse_dbo;

--
-- Name: gen_adcel_site_access_log_app6; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_adcel_site_access_log_app6 (
    gen_adcel_site_access_log_app6_id integer DEFAULT nextval('seq_gen_adcel_site_access_log_app6'::regclass) NOT NULL,
    app_server text,
    wap_site text,
    source_ip text,
    auth_username text,
    request_date text,
    request_url text,
    req_method text,
    req_path text,
    req_arguments text,
    req_protocol text,
    status_code text,
    response_bytes text,
    referrer text,
    user_agent text,
    session_id text,
    req_url_b text,
    req_url_c text,
    req_url_db text,
    req_url_p text,
    req_url_pm text,
    req_url_s text,
    req_url_dguid text,
    req_url_ip text,
    req_url_ll text,
    req_url_ou text,
    req_url_pos text,
    req_url_size text,
    req_url_ua text,
    req_rul_ui text,
    req_rul_z text,
    referrer_hostname text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date text,
    eastern_time text,
    local_date text DEFAULT '2005-01-01'::text,
    local_time text DEFAULT '00:00:00'::text,
    gmt_date text,
    gmt_time text,
    request_date_pacific text,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    content_category_sk integer,
    display_block_sk integer,
    portal_sk integer,
    partner_module_sk integer,
    user_agent_sk integer,
    referrer_hostname_sk integer,
    request_type_sk integer,
    ad_request_count integer,
    domain text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_adcel_site_access_log_app6 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_adcel_site_access_log_app8; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_adcel_site_access_log_app8
    START WITH 5102256
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_adcel_site_access_log_app8 OWNER TO warehouse_dbo;

--
-- Name: gen_adcel_site_access_log_app8; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_adcel_site_access_log_app8 (
    gen_adcel_site_access_log_app8_id integer DEFAULT nextval('seq_gen_adcel_site_access_log_app8'::regclass) NOT NULL,
    app_server text,
    wap_site text,
    source_ip text,
    auth_username text,
    request_date text,
    request_url text,
    req_method text,
    req_path text,
    req_arguments text,
    req_protocol text,
    status_code text,
    response_bytes text,
    referrer text,
    user_agent text,
    session_id text,
    req_url_b text,
    req_url_c text,
    req_url_db text,
    req_url_p text,
    req_url_pm text,
    req_url_s text,
    req_url_dguid text,
    req_url_ip text,
    req_url_ll text,
    req_url_ou text,
    req_url_pos text,
    req_url_size text,
    req_url_ua text,
    req_rul_ui text,
    req_rul_z text,
    referrer_hostname text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date text,
    eastern_time text,
    local_date text DEFAULT '2005-01-01'::text,
    local_time text DEFAULT '00:00:00'::text,
    gmt_date text,
    gmt_time text,
    request_date_pacific text,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    content_category_sk integer,
    display_block_sk integer,
    portal_sk integer,
    partner_module_sk integer,
    user_agent_sk integer,
    referrer_hostname_sk integer,
    request_type_sk integer,
    ad_request_count integer,
    domain text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_adcel_site_access_log_app8 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_adcel_site_access_log_app9; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_adcel_site_access_log_app9
    START WITH 5102256
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_adcel_site_access_log_app9 OWNER TO warehouse_dbo;

--
-- Name: gen_adcel_site_access_log_app9; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_adcel_site_access_log_app9 (
    gen_adcel_site_access_log_app9_id integer DEFAULT nextval('seq_gen_adcel_site_access_log_app9'::regclass) NOT NULL,
    app_server text,
    wap_site text,
    source_ip text,
    auth_username text,
    request_date text,
    request_url text,
    req_method text,
    req_path text,
    req_arguments text,
    req_protocol text,
    status_code text,
    response_bytes text,
    referrer text,
    user_agent text,
    session_id text,
    req_url_b text,
    req_url_c text,
    req_url_db text,
    req_url_p text,
    req_url_pm text,
    req_url_s text,
    req_url_dguid text,
    req_url_ip text,
    req_url_ll text,
    req_url_ou text,
    req_url_pos text,
    req_url_size text,
    req_url_ua text,
    req_rul_ui text,
    req_rul_z text,
    referrer_hostname text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date text,
    eastern_time text,
    local_date text DEFAULT '2005-01-01'::text,
    local_time text DEFAULT '00:00:00'::text,
    gmt_date text,
    gmt_time text,
    request_date_pacific text,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer,
    content_category_sk integer,
    display_block_sk integer,
    portal_sk integer,
    partner_module_sk integer,
    user_agent_sk integer,
    referrer_hostname_sk integer,
    request_type_sk integer,
    ad_request_count integer,
    domain text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_adcel_site_access_log_app9 OWNER TO warehouse_dbo;

--
-- Name: seq_gen_adsense_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_adsense_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_adsense_performance OWNER TO warehouse_dbo;

--
-- Name: gen_adsense_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_adsense_performance (
    gen_adsense_performance_id integer DEFAULT nextval('seq_gen_adsense_performance'::regclass) NOT NULL,
    site text,
    report_date text,
    ad_requests text,
    coverage text,
    clicks text,
    ad_request_ctr text,
    cpc text,
    ad_request_rpm text,
    estimated_earnings text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_adsense_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_citygrid_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_citygrid_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_citygrid_performance OWNER TO warehouse_dbo;

--
-- Name: gen_citygrid_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_citygrid_performance (
    gen_citygrid_performance_id integer DEFAULT nextval('seq_gen_citygrid_performance'::regclass) NOT NULL,
    placement text,
    billable_leads text,
    estimated_net_earnings text,
    report_date text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_citygrid_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_event_tracker_log; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_event_tracker_log
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_event_tracker_log OWNER TO warehouse_dbo;

--
-- Name: gen_event_tracker_log; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_event_tracker_log (
    gen_event_tracker_log_id integer DEFAULT nextval('seq_gen_event_tracker_log'::regclass) NOT NULL,
    app_server text,
    req_ipaddress text,
    remote_logical_user text,
    remote_auth_user text,
    request_date text,
    request_url text,
    status_code text,
    bytes_sent text,
    referrer text,
    user_agent text,
    req_method text,
    req_protocol text,
    req_path text,
    req_arguments text,
    url_f text,
    url_fd text,
    url_c text,
    url_cd text,
    url_e text,
    url_u text,
    url_p text,
    url_bp text,
    url_d text,
    url_fh text,
    url_ch text,
    url_r text,
    url_x text,
    url_adnet text,
    referrer_hostname text,
    rs_01 text,
    rs_02 text,
    rs_03 text,
    rs_04 text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    request_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    user_agent_sk integer DEFAULT (-2),
    referrer_hostname_sk integer DEFAULT (-2),
    event_sk integer DEFAULT (-2),
    adm_flight_sk integer DEFAULT (-2),
    adm_creative_sk integer DEFAULT (-2),
    adm_order_sk integer DEFAULT (-2),
    adm_placement_sk integer DEFAULT (-2),
    adm_advertiser_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_event_tracker_log OWNER TO warehouse_dbo;

--
-- Name: seq_gen_ga_channel; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_ga_channel
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_ga_channel OWNER TO warehouse_dbo;

--
-- Name: gen_ga_channel; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_ga_channel (
    gen_ga_channel_id integer DEFAULT nextval('seq_gen_ga_channel'::regclass) NOT NULL,
    custom_channel text,
    product text,
    page_views text,
    clicks text,
    page_ctr text,
    cpc text,
    page_rpm text,
    estimated_earnings text,
    report_date text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    ga_channel_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_ga_channel OWNER TO warehouse_dbo;

--
-- Name: seq_gen_itunes_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_itunes_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_itunes_performance OWNER TO warehouse_dbo;

--
-- Name: gen_itunes_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_itunes_performance (
    gen_itunes_performance_id integer DEFAULT nextval('seq_gen_itunes_performance'::regclass) NOT NULL,
    app_name text,
    revenue text,
    ecpm text,
    requests text,
    impressions text,
    fill_rate text,
    ctr text,
    report_date text,
    partner_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2),
    portal_id integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_itunes_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_jt_pub_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_jt_pub_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_jt_pub_performance OWNER TO warehouse_dbo;

--
-- Name: gen_jt_pub_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_jt_pub_performance (
    gen_jt_pub_performance_id integer DEFAULT nextval('seq_gen_jt_pub_performance'::regclass) NOT NULL,
    report_date text,
    site text,
    spot text,
    primary_category text,
    size text,
    placement text,
    requests text,
    paid_impressions text,
    fill_rate text,
    clicks text,
    click_thru_rate text,
    net_revenue text,
    net_cost_per_click text,
    net_ecpm text,
    net_revenue_per_thousand text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_jt_pub_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_jumptap_daily_sum; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_jumptap_daily_sum
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_jumptap_daily_sum OWNER TO warehouse_dbo;

--
-- Name: gen_jumptap_daily_sum; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_jumptap_daily_sum (
    gen_jumptap_daily_sum_id integer DEFAULT nextval('seq_gen_jumptap_daily_sum'::regclass) NOT NULL,
    report_date text,
    requests text,
    paid_impressions text,
    clicks text,
    net_revenue text,
    fill_rate text,
    click_thru_rate text,
    net_cost_per_click text,
    net_ecpm text,
    net_revenue_per_thousand text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_jumptap_daily_sum OWNER TO warehouse_dbo;

--
-- Name: seq_gen_marchex_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_marchex_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_marchex_performance OWNER TO warehouse_dbo;

--
-- Name: gen_marchex_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_marchex_performance (
    gen_marchex_performance_id integer DEFAULT nextval('seq_gen_marchex_performance'::regclass) NOT NULL,
    id text,
    name text,
    site_name text,
    avgcpc text,
    clicks text,
    converion_rate text,
    conversions text,
    cost text,
    cost_per_conversion text,
    report_date text,
    queries text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_marchex_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_millenial_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_millenial_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_millenial_performance OWNER TO warehouse_dbo;

--
-- Name: gen_millenial_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_millenial_performance (
    gen_millenial_performance_id integer DEFAULT nextval('seq_gen_millenial_performance'::regclass) NOT NULL,
    id text,
    name text,
    report_date text,
    requests text,
    ads_served text,
    fill_rate_percentage text,
    clicks text,
    click_thru_rate_percentage text,
    net_revenue text,
    net_ecpm text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2),
    partner_keyword text,
    portal_keyword text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_millenial_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_ad_channel_site; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_ad_channel_site
    START WITH 100
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_ad_channel_site OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_ad_channel_site; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_ad_channel_site (
    gen_monthly_ad_channel_site_id integer DEFAULT nextval('seq_gen_monthly_ad_channel_site'::regclass) NOT NULL,
    site_id integer,
    site_name text,
    order_id text,
    order_name text,
    order_start_date text,
    order_end_date text,
    order_cpm_booked text,
    order_status text,
    date_ad text,
    creative_id integer,
    ad_id integer,
    ad_name text,
    ad_cost_type text,
    ad_weight text,
    ad_type text,
    impressions_delivered text,
    clicks_recorded text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    ga_channel_sk integer DEFAULT (-2),
    dc_site_sk integer DEFAULT (-2),
    partner_keyword character varying(255),
    portal_keyword character varying(255),
    partner_sk integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
);


ALTER TABLE staging.gen_monthly_ad_channel_site OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_citygrid_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_citygrid_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_citygrid_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_citygrid_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_citygrid_performance (
    gen_monthly_citygrid_performance_id integer DEFAULT nextval('seq_gen_monthly_citygrid_performance'::regclass) NOT NULL,
    placement text,
    billable_connections text,
    revenue text,
    cpc text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_citygrid_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_doubleclick_site; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_doubleclick_site
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_doubleclick_site OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_doubleclick_site; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_doubleclick_site (
    gen_monthly_doubleclick_site_id integer DEFAULT nextval('seq_gen_monthly_doubleclick_site'::regclass) NOT NULL,
    site_id integer,
    site_name text,
    order_id text,
    order_name text,
    order_start_date text,
    order_end_date text,
    order_cpm_booked text,
    order_status text,
    date_ad text,
    creative_id integer,
    ad_id integer,
    ad_name text,
    ad_cost_type text,
    ad_weight text,
    ad_type text,
    impressions_delivered text,
    clicks_recorded text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    ga_channel_sk integer DEFAULT (-2),
    dc_site_sk integer DEFAULT (-2),
    partner_keyword character varying(255),
    portal_keyword character varying(255),
    partner_sk integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
);


ALTER TABLE staging.gen_monthly_doubleclick_site OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_ga_channel; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_ga_channel
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_ga_channel OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_ga_channel; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_ga_channel (
    gen_monthly_ga_channel_id integer DEFAULT nextval('seq_gen_monthly_ga_channel'::regclass) NOT NULL,
    custom_channel text,
    product text,
    page_views text,
    clicks text,
    page_ctr text,
    cpc text,
    page_rpm text,
    estimated_earnings text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    ga_channel_sk integer DEFAULT (-2)
);


ALTER TABLE staging.gen_monthly_ga_channel OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_itunes_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_itunes_performance
    START WITH 23163
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_itunes_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_itunes_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_itunes_performance (
    gen_monthly_itunes_performance_id integer DEFAULT nextval('seq_gen_monthly_itunes_performance'::regclass) NOT NULL,
    app_name text,
    revenue text,
    ecpm text,
    requests text,
    impressions text,
    fill_rate text,
    ctr text,
    calendar_year_month character varying(32),
    partner_id text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    partner_sk integer DEFAULT (-2),
    portal_id integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
);


ALTER TABLE staging.gen_monthly_itunes_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_jumptap_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_jumptap_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_jumptap_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_jumptap_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_jumptap_performance (
    gen_monthly_jumptap_performance_id integer DEFAULT nextval('seq_gen_monthly_jumptap_performance'::regclass) NOT NULL,
    site text,
    spot text,
    primary_category text,
    size text,
    placement text,
    requests text,
    paid_impressions text,
    fill_rate text,
    clicks text,
    click_thru_rate text,
    net_revenue text,
    net_cost_per_click text,
    net_ecpm text,
    net_revenue_per_thousand text,
    calendar_year_month text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_jumptap_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_marchex_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_marchex_performance
    START WITH 23482
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_marchex_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_marchex_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_marchex_performance (
    gen_monthly_marchex_performance_id integer DEFAULT nextval('seq_gen_monthly_marchex_performance'::regclass) NOT NULL,
    id text,
    name text,
    site_name text,
    avgcpc text,
    clicks text,
    converion_rate text,
    conversions text,
    cost text,
    cost_per_conversion text,
    queries text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    partner_sk integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_marchex_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_millennial_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_millennial_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_millennial_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_millennial_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_millennial_performance (
    gen_monthly_millennial_performance_id integer DEFAULT nextval('seq_gen_monthly_millennial_performance'::regclass) NOT NULL,
    id text,
    name text,
    requests text,
    ads_served text,
    fill_rate_percentage text,
    clicks text,
    click_thru_rate_percentage text,
    net_revenue text,
    net_ecpm text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    partner_sk integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2),
    partner_keyword text,
    portal_keyword text
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_millennial_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_superpages_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_superpages_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_superpages_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_superpages_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_superpages_performance (
    gen_monthly_superpages_performance_id integer DEFAULT nextval('seq_gen_monthly_superpages_performance'::regclass) NOT NULL,
    ppc_revenue text,
    src text,
    searches text,
    ppc_billable_clicks text,
    report_date text,
    affiliate_name text,
    coverage text,
    rpc text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    ad_network_id integer DEFAULT (-200),
    ad_network_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_superpages_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_where_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_where_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_where_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_where_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_where_performance (
    gen_monthly_where_performance_id integer DEFAULT nextval('seq_gen_monthly_where_performance'::regclass) NOT NULL,
    pubid text,
    placement text,
    gmtoffset text,
    startdatehour text,
    enddatehour text,
    requests text,
    filled text,
    clicked text,
    revenue text,
    fillpercent text,
    ctr text,
    ecpm text,
    report_date text,
    partner_keyword text,
    placement_1 text,
    placement_2 text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date,
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_where_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_monthly_yellowpages_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_yellowpages_performance
    START WITH 26409
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_yellowpages_performance OWNER TO warehouse_dbo;

--
-- Name: gen_monthly_yellowpages_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_monthly_yellowpages_performance (
    gen_monthly_yellowpages_performance_id integer DEFAULT nextval('seq_gen_monthly_yellowpages_performance'::regclass) NOT NULL,
    site_name text,
    report_date text,
    requests text,
    impressions text,
    fill_rate text,
    clicks text,
    ctr text,
    ecpm text,
    est_earnings text,
    calendar_year_month character varying(32),
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    month_sk integer,
    eastern_start_date_sk integer,
    eastern_end_date_sk integer,
    eastern_start_full_date date,
    eastern_end_full_date date
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_monthly_yellowpages_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_site_campaign; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_site_campaign
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_site_campaign OWNER TO warehouse_dbo;

--
-- Name: gen_site_campaign; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_site_campaign (
    gen_site_campaign_id integer DEFAULT nextval('seq_gen_site_campaign'::regclass) NOT NULL,
    site_id text,
    site_name text,
    order_id integer,
    order_name text,
    response_date text,
    ad_id text,
    creative_id text,
    impressions_delivered text,
    clicks_recorded text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    dc_site_sk integer DEFAULT (-2),
    dc_order_sk integer DEFAULT (-2),
    creative_sk integer DEFAULT (-2),
    website_sk integer DEFAULT (-2),
    publisher_sk integer DEFAULT (-2),
    placement_sk integer DEFAULT (-2),
    publisher_id integer DEFAULT (-100),
    partner_keyword character varying(50)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_site_campaign OWNER TO warehouse_dbo;

--
-- Name: seq_gen_site_device; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_site_device
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_site_device OWNER TO warehouse_dbo;

--
-- Name: gen_site_device; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_site_device (
    gen_site_device_id integer DEFAULT nextval('seq_gen_site_device'::regclass) NOT NULL,
    site_id text,
    site_name text,
    mobile_platform text,
    response_date text,
    impressions_delivered text,
    clicks_recorded text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    dc_site_sk integer DEFAULT (-2),
    partner_keyword character varying(50),
    website_sk integer DEFAULT (-2),
    publisher_sk integer DEFAULT (-2),
    publisher_id integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_site_device OWNER TO warehouse_dbo;

--
-- Name: seq_gen_site_order_forecast; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_site_order_forecast
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_site_order_forecast OWNER TO warehouse_dbo;

--
-- Name: gen_site_order_forecast; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_site_order_forecast (
    gen_site_order_forecast_id integer DEFAULT nextval('seq_gen_site_order_forecast'::regclass) NOT NULL,
    site_id text,
    site_name text,
    order_id integer,
    order_name text,
    order_start_date text,
    order_end_date text,
    order_cpm_booked text,
    order_status text,
    response_date text,
    creative_id text,
    ad_id text,
    ad_name text,
    ad_cost_type text,
    ad_weight text,
    ad_type text,
    impressions_delivered text,
    clicks_recorded text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    dc_site_sk integer DEFAULT (-2),
    dc_order_sk integer DEFAULT (-2),
    website_sk integer DEFAULT (-2),
    creative_sk integer DEFAULT (-2),
    publisher_sk integer DEFAULT (-2),
    placement_sk integer DEFAULT (-2),
    publisher_id integer DEFAULT (-100),
    partner_keyword character varying(50)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_site_order_forecast OWNER TO warehouse_dbo;

--
-- Name: seq_gen_superpages_daily_sum; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_superpages_daily_sum
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_superpages_daily_sum OWNER TO warehouse_dbo;

--
-- Name: gen_superpages_daily_sum; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_superpages_daily_sum (
    gen_superpages_daily_sum_id integer DEFAULT nextval('seq_gen_superpages_daily_sum'::regclass) NOT NULL,
    ppc_revenue text,
    src text,
    searches text,
    ppc_billable_clicks text,
    report_date text,
    affiliate_name text,
    coverage text,
    rpc text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    ad_network_id integer DEFAULT (-200),
    ad_network_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_superpages_daily_sum OWNER TO warehouse_dbo;

--
-- Name: seq_gen_where_performance; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_where_performance
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_where_performance OWNER TO warehouse_dbo;

--
-- Name: gen_where_performance; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_where_performance (
    gen_where_performance_id integer DEFAULT nextval('seq_gen_where_performance'::regclass) NOT NULL,
    pubid text,
    placement text,
    gmtoffset text,
    startdatehour text,
    enddatehour text,
    requests text,
    filled text,
    clicked text,
    revenue text,
    fillpercent text,
    ctr text,
    ecpm text,
    partner_keyword text,
    placement_1 text,
    placement_2 text,
    report_date text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    response_date_pacific timestamp without time zone,
    eastern_date_sk integer DEFAULT (-2),
    eastern_time_sk integer DEFAULT (-2),
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2),
    partner_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_where_performance OWNER TO warehouse_dbo;

--
-- Name: seq_gen_yellowpages_daily_sum; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_yellowpages_daily_sum
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_yellowpages_daily_sum OWNER TO warehouse_dbo;

--
-- Name: gen_yellowpages_daily_sum; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE gen_yellowpages_daily_sum (
    gen_yellowpages_daily_sum_id integer DEFAULT nextval('seq_gen_yellowpages_daily_sum'::regclass) NOT NULL,
    site_name text,
    report_date text,
    requests text,
    impressions text,
    fill_rate text,
    clicks text,
    ctr text,
    ecpm text,
    est_earnings text,
    data_file_id integer,
    dt_lastchanged timestamp with time zone DEFAULT now() NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    report_date_pacific timestamp without time zone,
    eastern_date_sk integer,
    eastern_time_sk integer,
    local_date_sk integer DEFAULT (-2),
    local_time_sk integer DEFAULT (-2),
    gmt_date_sk integer DEFAULT (-2),
    gmt_time_sk integer DEFAULT (-2)
)
WITH (fillfactor=50);


ALTER TABLE staging.gen_yellowpages_daily_sum OWNER TO warehouse_dbo;

--
-- Name: googleadsense_dim; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE googleadsense_dim (
    partner_group_id integer NOT NULL,
    partner_group_name character varying(40) NOT NULL,
    current_google_adsense_site character varying(100) NOT NULL,
    partner_keyword character varying(14) NOT NULL,
    partner_name character varying(75) NOT NULL,
    portal_name character varying(100) NOT NULL,
    portal_keyword character varying(100) NOT NULL,
    new_google_adsense_site character varying(100) NOT NULL,
    note character varying(100) NOT NULL
);


ALTER TABLE staging.googleadsense_dim OWNER TO warehouse_dbo;

--
-- Name: process_config_process_config_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE process_config_process_config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.process_config_process_config_id_seq OWNER TO warehouse_dbo;

--
-- Name: process_process_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE process_process_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.process_process_id_seq OWNER TO warehouse_dbo;

--
-- Name: rec; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE rec (
    data_file_id integer,
    file_name character varying(64),
    server_name character varying(16),
    file_timestamp timestamp without time zone,
    file_status character varying(2),
    data_file_target_table character varying(64),
    data_file_type character(1),
    unzip boolean,
    transform_on_import boolean,
    import_dir character varying(64),
    success_dir character varying(64),
    error_dir character varying(64),
    data_file_column_list text,
    data_file_load_options text,
    transform_script_name character varying(64),
    data_file_process_function character varying(64)
);


ALTER TABLE staging.rec OWNER TO song;

--
-- Name: seq_gen_monthly_jumptap_daily_sum; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_monthly_jumptap_daily_sum
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_monthly_jumptap_daily_sum OWNER TO warehouse_dbo;

--
-- Name: seq_gen_yellow_pages; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE seq_gen_yellow_pages
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.seq_gen_yellow_pages OWNER TO warehouse_dbo;

--
-- Name: stg_ad_network; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_ad_network (
    stg_ad_network_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    ad_network_id integer NOT NULL,
    ad_network_name character varying(255) NOT NULL,
    bill_type integer,
    account_number character varying(50),
    url_base character varying(255),
    is_active integer,
    service_key character varying(50),
    timeout integer,
    portal_aware integer,
    data_file_id integer NOT NULL
);


ALTER TABLE staging.stg_ad_network OWNER TO warehouse_dbo;

--
-- Name: stg_ad_network_param; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_ad_network_param (
    stg_ad_network_param_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    ad_network_id integer NOT NULL,
    target_char_id integer NOT NULL,
    attr_id integer NOT NULL,
    param_value character varying(255) NOT NULL,
    dtcreated timestamp with time zone,
    dtdeleted timestamp with time zone,
    prov_status integer NOT NULL,
    dtmodified timestamp with time zone,
    data_file_id integer NOT NULL
);


ALTER TABLE staging.stg_ad_network_param OWNER TO warehouse_dbo;

--
-- Name: stg_ad_network_param_stg_ad_network_param_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_ad_network_param_stg_ad_network_param_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_ad_network_param_stg_ad_network_param_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_ad_network_param_stg_ad_network_param_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_ad_network_param_stg_ad_network_param_id_seq OWNED BY stg_ad_network_param.stg_ad_network_param_id;


--
-- Name: stg_ad_network_stg_ad_network_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_ad_network_stg_ad_network_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_ad_network_stg_ad_network_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_ad_network_stg_ad_network_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_ad_network_stg_ad_network_id_seq OWNED BY stg_ad_network.stg_ad_network_id;


--
-- Name: stg_adm_advertiser; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_advertiser (
    stg_adm_advertiser_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    advertiser_id integer,
    name character varying(255),
    publisher_id integer,
    organization_id integer,
    created_at character varying(50),
    updated_at character varying(50),
    kind_id integer,
    notes character varying(255),
    email character varying(255),
    data_file_id integer
);


ALTER TABLE staging.stg_adm_advertiser OWNER TO warehouse_dbo;

--
-- Name: stg_adm_advertiser_stg_adm_advertiser_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_advertiser_stg_adm_advertiser_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_advertiser_stg_adm_advertiser_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_advertiser_stg_adm_advertiser_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_advertiser_stg_adm_advertiser_id_seq OWNED BY stg_adm_advertiser.stg_adm_advertiser_id;


--
-- Name: stg_adm_channel; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_channel (
    stg_adm_channel_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    id integer NOT NULL,
    keyname character varying(255),
    name character varying(255),
    data_file_id integer,
    portal_id integer DEFAULT (-2),
    portal_sk integer DEFAULT (-2)
);


ALTER TABLE staging.stg_adm_channel OWNER TO warehouse_dbo;

--
-- Name: stg_adm_channel_stg_adm_channel_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_channel_stg_adm_channel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_channel_stg_adm_channel_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_channel_stg_adm_channel_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_channel_stg_adm_channel_id_seq OWNED BY stg_adm_channel.stg_adm_channel_id;


--
-- Name: stg_adm_creative; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_creative (
    stg_adm_creative_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    name character varying(255) NOT NULL,
    remote_id integer,
    created_at character varying(255),
    flight_id integer,
    campaign_id integer,
    third_party boolean,
    updated_at character varying(255),
    creative_id integer NOT NULL,
    updated_by character varying(255),
    impressio_tracking_url character varying(255),
    click_through_url character varying(255),
    click_tracking_url character varying(255),
    digest character varying(255),
    active boolean,
    data_file_id integer
);


ALTER TABLE staging.stg_adm_creative OWNER TO warehouse_dbo;

--
-- Name: stg_adm_creative_stg_adm_creative_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_creative_stg_adm_creative_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_creative_stg_adm_creative_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_creative_stg_adm_creative_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_creative_stg_adm_creative_id_seq OWNED BY stg_adm_creative.stg_adm_creative_id;


--
-- Name: stg_adm_flight; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_flight (
    stg_adm_flight_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    remote_id integer,
    salt character varying(255),
    start_date character varying(50),
    created_at character varying(50),
    share_of_voice double precision,
    creatives_count integer,
    impressions integer,
    quantity integer,
    order_id integer,
    submitted_at character varying(50),
    updated_at character varying(50),
    paused_at character varying(50),
    rate double precision,
    ready_at character varying(50),
    cancelled_at character varying(50),
    flight_id integer,
    clicks integer,
    approved_at character varying(50),
    complete boolean,
    updated_by character varying(255),
    budget double precision,
    end_date character varying(50),
    number character varying(50),
    metric character varying(50),
    data_file_id integer,
    digest character varying(255),
    name character varying(255),
    placement_ids text,
    zone_ids text,
    target_ids text,
    metro_id integer,
    ad_unit_id integer,
    bundle_package character varying(255),
    kind character varying(50)
);


ALTER TABLE staging.stg_adm_flight OWNER TO warehouse_dbo;

--
-- Name: stg_adm_flight_stg_adm_flight_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_flight_stg_adm_flight_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_flight_stg_adm_flight_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_flight_stg_adm_flight_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_flight_stg_adm_flight_id_seq OWNED BY stg_adm_flight.stg_adm_flight_id;


--
-- Name: stg_adm_order; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_order (
    stg_adm_order_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    name character varying(255),
    order_date character varying(50),
    platform_id integer,
    remote_id integer,
    start_date character varying(50),
    created_at character varying(50),
    updated_at character varying(50),
    order_id integer,
    advertiser_id integer,
    advertiser_io character varying(255),
    updated_by character varying(255),
    end_date character varying(50),
    flights_count integer,
    organization_id integer,
    publisher_id integer,
    kind character varying(50),
    number character varying(50),
    website_id integer,
    network boolean,
    network_id integer,
    data_file_id integer
);


ALTER TABLE staging.stg_adm_order OWNER TO warehouse_dbo;

--
-- Name: stg_adm_order_stg_adm_order_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_order_stg_adm_order_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_order_stg_adm_order_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_order_stg_adm_order_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_order_stg_adm_order_id_seq OWNED BY stg_adm_order.stg_adm_order_id;


--
-- Name: stg_adm_organization; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_organization (
    stg_adm_organization_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    name character varying(255),
    created_at character varying(50),
    updated_at character varying(50),
    domain character varying(255),
    clients_count integer,
    advertisers_count integer,
    organization_id integer,
    active boolean,
    old_id integer,
    data_file_id integer
);


ALTER TABLE staging.stg_adm_organization OWNER TO warehouse_dbo;

--
-- Name: stg_adm_organization_stg_adm_organization_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_organization_stg_adm_organization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_organization_stg_adm_organization_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_organization_stg_adm_organization_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_organization_stg_adm_organization_id_seq OWNED BY stg_adm_organization.stg_adm_organization_id;


--
-- Name: stg_adm_placement; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_placement (
    stg_adm_placement_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    cpm double precision,
    name character varying(255),
    created_at character varying(50),
    keyname character varying(255),
    website_id integer,
    chanel_id integer,
    updated_at character varying(50),
    monthly_impressions integer,
    placement_id integer,
    description character varying(255),
    active boolean,
    data_file_id integer
);


ALTER TABLE staging.stg_adm_placement OWNER TO warehouse_dbo;

--
-- Name: stg_adm_placement_stg_adm_placement_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_placement_stg_adm_placement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_placement_stg_adm_placement_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_placement_stg_adm_placement_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_placement_stg_adm_placement_id_seq OWNED BY stg_adm_placement.stg_adm_placement_id;


--
-- Name: stg_adm_portal; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_portal (
    stg_adm_portal_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    channel_id integer,
    portal_id integer,
    portal_name character varying(255),
    data_file_id integer
);


ALTER TABLE staging.stg_adm_portal OWNER TO warehouse_dbo;

--
-- Name: stg_adm_portal_stg_adm_portal_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_portal_stg_adm_portal_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_portal_stg_adm_portal_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_portal_stg_adm_portal_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_portal_stg_adm_portal_id_seq OWNED BY stg_adm_portal.stg_adm_portal_id;


--
-- Name: stg_adm_publication; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_publication (
    stg_adm_publication_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    publication_id integer,
    name character varying(255),
    publisher_id integer,
    created_at character varying(50),
    updated_at character varying(50),
    data_file_id integer
);


ALTER TABLE staging.stg_adm_publication OWNER TO warehouse_dbo;

--
-- Name: stg_adm_publication_stg_adm_publication_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_publication_stg_adm_publication_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_publication_stg_adm_publication_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_publication_stg_adm_publication_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_publication_stg_adm_publication_id_seq OWNED BY stg_adm_publication.stg_adm_publication_id;


--
-- Name: stg_adm_publisher; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_publisher (
    stg_adm_publisher_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    company_name character varying(255),
    publisher_id integer,
    email character varying(255),
    partner_group_id integer,
    data_file_id integer
);


ALTER TABLE staging.stg_adm_publisher OWNER TO warehouse_dbo;

--
-- Name: stg_adm_publisher_stg_adm_publisher_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_publisher_stg_adm_publisher_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_publisher_stg_adm_publisher_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_publisher_stg_adm_publisher_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_publisher_stg_adm_publisher_id_seq OWNED BY stg_adm_publisher.stg_adm_publisher_id;


--
-- Name: stg_adm_website; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_adm_website (
    stg_adm_website_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    minimum_budget double precision,
    name character varying(255),
    store_name character varying(255),
    created_at character varying(50),
    keyname character varying(255),
    currency_id integer,
    updated_at character varying(50),
    url character varying(255),
    website_id integer,
    network boolean,
    introduction character varying(255),
    partner_id integer,
    publisher_id integer,
    publication_id integer,
    data_file_id integer
);


ALTER TABLE staging.stg_adm_website OWNER TO warehouse_dbo;

--
-- Name: stg_adm_website_stg_adm_website_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_adm_website_stg_adm_website_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_adm_website_stg_adm_website_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_adm_website_stg_adm_website_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_adm_website_stg_adm_website_id_seq OWNED BY stg_adm_website.stg_adm_website_id;


--
-- Name: stg_content_category; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_content_category (
    stg_content_category_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(64),
    data_file_id integer NOT NULL
);


ALTER TABLE staging.stg_content_category OWNER TO warehouse_dbo;

--
-- Name: stg_content_category_stg_content_category_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_content_category_stg_content_category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_content_category_stg_content_category_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_content_category_stg_content_category_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_content_category_stg_content_category_id_seq OWNED BY stg_content_category.stg_content_category_id;


--
-- Name: stg_content_category_temp; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_content_category_temp (
    stg_content_category_temp_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    content_category_id integer NOT NULL,
    category_name character varying(64),
    data_file_id integer NOT NULL
);


ALTER TABLE staging.stg_content_category_temp OWNER TO warehouse_dbo;

--
-- Name: stg_content_category_temp_stg_content_category_temp_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_content_category_temp_stg_content_category_temp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_content_category_temp_stg_content_category_temp_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_content_category_temp_stg_content_category_temp_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_content_category_temp_stg_content_category_temp_id_seq OWNED BY stg_content_category_temp.stg_content_category_temp_id;


--
-- Name: stg_dc_ad; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE stg_dc_ad (
    stg_dc_ad_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    dc_ad_id integer,
    ad_name character varying(255),
    start_date character varying(255),
    end_date character varying(255),
    data_file_id integer
);


ALTER TABLE staging.stg_dc_ad OWNER TO song;

--
-- Name: stg_dc_ad_stg_dc_ad_id_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE stg_dc_ad_stg_dc_ad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_dc_ad_stg_dc_ad_id_seq OWNER TO song;

--
-- Name: stg_dc_ad_stg_dc_ad_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE stg_dc_ad_stg_dc_ad_id_seq OWNED BY stg_dc_ad.stg_dc_ad_id;


--
-- Name: stg_dc_order; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE stg_dc_order (
    stg_dc_order_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    dc_order_id integer,
    order_name character varying(255),
    start_date character varying(255),
    end_date character varying(255),
    advertiser_id integer,
    advertiser_name character varying(255),
    contract_approved boolean,
    data_file_id integer
);


ALTER TABLE staging.stg_dc_order OWNER TO song;

--
-- Name: stg_dc_order_stg_dc_order_id_seq; Type: SEQUENCE; Schema: staging; Owner: song
--

CREATE SEQUENCE stg_dc_order_stg_dc_order_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_dc_order_stg_dc_order_id_seq OWNER TO song;

--
-- Name: stg_dc_order_stg_dc_order_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: song
--

ALTER SEQUENCE stg_dc_order_stg_dc_order_id_seq OWNED BY stg_dc_order.stg_dc_order_id;


--
-- Name: stg_dc_site; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_dc_site (
    stg_dc_site_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    dc_site_id integer,
    dart_site_name character varying(255),
    site_keyword character varying(255),
    status boolean,
    data_file_id integer,
    portal_keyword character varying(50),
    partner_keyword character varying(50)
);


ALTER TABLE staging.stg_dc_site OWNER TO warehouse_dbo;

--
-- Name: stg_dc_site_stg_dc_site_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_dc_site_stg_dc_site_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_dc_site_stg_dc_site_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_dc_site_stg_dc_site_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_dc_site_stg_dc_site_id_seq OWNED BY stg_dc_site.stg_dc_site_id;


--
-- Name: stg_dfp_dim_lineitem_creative_stg_dfp_dim_lineitem_creative_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_dfp_dim_lineitem_creative_stg_dfp_dim_lineitem_creative_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_dfp_dim_lineitem_creative_stg_dfp_dim_lineitem_creative_seq OWNER TO warehouse_dbo;

SET default_tablespace = refer_tablespace;

--
-- Name: stg_dfp_dim_lineitem_creatives; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE stg_dfp_dim_lineitem_creatives (
    stg_dfp_dim_lineitem_creatives_id integer DEFAULT nextval('stg_dfp_dim_lineitem_creative_stg_dfp_dim_lineitem_creative_seq'::regclass) NOT NULL,
    dml_command character(1) NOT NULL,
    line_item_id bigint,
    creative_id bigint,
    creativeset_id bigint,
    manualcreativerotationweight text,
    sequentialcreativerotationindex text,
    startdatetime text,
    startdatetimetype text,
    enddatetime text,
    destinationurl text,
    sizes text,
    status text,
    stats text,
    lastmodifieddatetime text,
    data_file_id integer
);


ALTER TABLE staging.stg_dfp_dim_lineitem_creatives OWNER TO warehouse_dbo;

--
-- Name: stg_dfp_dim_lineitem_targets_stg_dfp_dim_lineitem_targets_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_dfp_dim_lineitem_targets_stg_dfp_dim_lineitem_targets_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_dfp_dim_lineitem_targets_stg_dfp_dim_lineitem_targets_seq OWNER TO warehouse_dbo;

--
-- Name: stg_dfp_dim_lineitem_targets; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE TABLE stg_dfp_dim_lineitem_targets (
    stg_dfp_dim_lineitem_targets_id integer DEFAULT nextval('stg_dfp_dim_lineitem_targets_stg_dfp_dim_lineitem_targets_seq'::regclass) NOT NULL,
    dml_command character(1) NOT NULL,
    lineitem_id bigint,
    customcriteria_key_id text,
    customcriteria_valueids text,
    customcriteria_displayname text,
    data_file_id integer
);


ALTER TABLE staging.stg_dfp_dim_lineitem_targets OWNER TO warehouse_dbo;

SET default_tablespace = staging_tablespace;

--
-- Name: stg_display_block; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_display_block (
    stg_display_block_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    display_block_id integer NOT NULL,
    partner_id integer,
    display_order integer,
    parent_block_id integer,
    display_name character varying(40),
    content_category_id integer,
    display_block_type character varying(24),
    description character varying(80),
    partner_module_id integer,
    dt_deleted timestamp without time zone,
    dt_created timestamp without time zone,
    status character varying(20),
    data_file_id integer NOT NULL
);


ALTER TABLE staging.stg_display_block OWNER TO warehouse_dbo;

--
-- Name: stg_display_block_stg_display_block_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_display_block_stg_display_block_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_display_block_stg_display_block_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_display_block_stg_display_block_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_display_block_stg_display_block_id_seq OWNED BY stg_display_block.stg_display_block_id;


--
-- Name: stg_mapping_ga; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_mapping_ga (
    current_google_adsense_site character varying(255),
    partner_keyword character varying(255),
    partner_id character varying(255),
    partner_name character varying(255),
    partner_group_id character varying(255),
    partner_group_name character varying(255),
    new_google_adsense_site character varying(255),
    note character varying(255)
);


ALTER TABLE staging.stg_mapping_ga OWNER TO warehouse_dbo;

--
-- Name: stg_mapping_mm; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_mapping_mm (
    stg_mapping_mm_id integer NOT NULL,
    current_millennial_media_name character varying(255) NOT NULL,
    partner_keyword character varying(50),
    partner_id integer,
    partner_name character varying(255),
    group_id integer,
    group_name character varying(255),
    portal_id integer,
    portal_name character varying(255),
    new_millennial_media_name character varying(255),
    note character varying(255)
);


ALTER TABLE staging.stg_mapping_mm OWNER TO warehouse_dbo;

--
-- Name: stg_mapping_mm_stg_mapping_mm_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_mapping_mm_stg_mapping_mm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_mapping_mm_stg_mapping_mm_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_mapping_mm_stg_mapping_mm_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_mapping_mm_stg_mapping_mm_id_seq OWNED BY stg_mapping_mm.stg_mapping_mm_id;


--
-- Name: stg_partner; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_partner (
    stg_partner_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    partner_id integer NOT NULL,
    name character varying(75),
    description character varying(255),
    locale character varying(12),
    time_zone_id character varying(40),
    keyword character varying(14),
    msa_id integer,
    msa_name character varying(75),
    msa_is_metro smallint,
    dtactive timestamp without time zone,
    dtinactive timestamp without time zone,
    is_published smallint,
    dtdeleted timestamp without time zone,
    parent1_id integer,
    parent1_type character varying(20),
    parent1_name character varying(40),
    parent2_id integer,
    parent2_type character varying(20),
    parent2_name character varying(75),
    parent3_id integer,
    parent3_type character varying(20),
    parent3_name character varying(75),
    data_file_id integer NOT NULL,
    partner_postal_code character varying(16)
);


ALTER TABLE staging.stg_partner OWNER TO warehouse_dbo;

--
-- Name: stg_partner_module; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_partner_module (
    stg_partner_module_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    partner_module_id integer NOT NULL,
    partner_id integer,
    feature_module_id integer,
    feature_module_name character varying(30),
    feature_module_desc character varying(250),
    feature_module_wapurl character varying(75),
    display_name character varying(80),
    description character varying(80),
    source_name character varying(80),
    is_local smallint,
    state character varying(2),
    enclosing_partner_module_id integer,
    enabled boolean,
    data_file_id integer NOT NULL,
    group_name character varying(80),
    city_state character varying(80)
);


ALTER TABLE staging.stg_partner_module OWNER TO warehouse_dbo;

--
-- Name: stg_partner_module_stg_partner_module_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_partner_module_stg_partner_module_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_partner_module_stg_partner_module_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_partner_module_stg_partner_module_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_partner_module_stg_partner_module_id_seq OWNED BY stg_partner_module.stg_partner_module_id;


--
-- Name: stg_partner_stg_partner_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_partner_stg_partner_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_partner_stg_partner_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_partner_stg_partner_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_partner_stg_partner_id_seq OWNED BY stg_partner.stg_partner_id;


--
-- Name: stg_portal; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_portal (
    stg_portal_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    portal_id integer NOT NULL,
    portal_name character varying(45),
    description character varying(255),
    default_partner_id integer,
    single_partner smallint,
    ondeck boolean,
    data_file_id integer NOT NULL,
    keyword character varying(14)
);


ALTER TABLE staging.stg_portal OWNER TO warehouse_dbo;

--
-- Name: stg_portal_host; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_portal_host (
    stg_portal_host_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    portal_host_id integer NOT NULL,
    hostname character varying(50),
    portal_id integer,
    partner_id integer,
    dtcreated timestamp without time zone,
    dtdeleted timestamp without time zone,
    is_active smallint,
    data_file_id integer NOT NULL
);


ALTER TABLE staging.stg_portal_host OWNER TO warehouse_dbo;

--
-- Name: stg_portal_host_stg_portal_host_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_portal_host_stg_portal_host_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_portal_host_stg_portal_host_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_portal_host_stg_portal_host_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_portal_host_stg_portal_host_id_seq OWNED BY stg_portal_host.stg_portal_host_id;


--
-- Name: stg_portal_stg_portal_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_portal_stg_portal_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_portal_stg_portal_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_portal_stg_portal_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_portal_stg_portal_id_seq OWNED BY stg_portal.stg_portal_id;


--
-- Name: stg_revenue_share; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_revenue_share (
    stg_revenue_share_id integer NOT NULL,
    dml_command character(1) NOT NULL,
    account_id character varying(255) NOT NULL,
    account_name character varying(255),
    parent_account character varying(255),
    type character varying(255),
    group_id character varying(255),
    partner_id character varying(255),
    rev_share_mobileweb_local character varying(255),
    rev_share_mobileweb_mediation character varying(255),
    rev_share_mobileweb_national character varying(255),
    rev_share_apps_local character varying(255),
    rev_share_apps_mediation character varying(255),
    rev_share_apps_national character varying(255),
    partner_sk integer DEFAULT (-2),
    data_file_id integer
);


ALTER TABLE staging.stg_revenue_share OWNER TO warehouse_dbo;

--
-- Name: stg_revenue_share_stg_revenue_share_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_revenue_share_stg_revenue_share_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE staging.stg_revenue_share_stg_revenue_share_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_revenue_share_stg_revenue_share_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_revenue_share_stg_revenue_share_id_seq OWNED BY stg_revenue_share.stg_revenue_share_id;


--
-- Name: stg_session; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_session (
    session_start_date date,
    session_start_time time(6) without time zone,
    host character varying(50),
    partner_id integer,
    user_agent text,
    portal_id integer,
    referrer_hostname text,
    network_type text,
    uid character varying(64) NOT NULL,
    session character varying(64) NOT NULL,
    session_start_datetime timestamp with time zone NOT NULL,
    session_end_datetime timestamp with time zone,
    source_ip inet,
    client character varying(32),
    username character varying(32),
    request text,
    method text,
    path text,
    arguments text,
    protocol text,
    status smallint,
    referrer text,
    page_view_count integer NOT NULL,
    new_visit_count integer DEFAULT 0 NOT NULL,
    session_start_datetime_pacific timestamp(6) without time zone NOT NULL
);


ALTER TABLE staging.stg_session OWNER TO warehouse_dbo;

--
-- Name: stg_session_agg_values; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_session_agg_values (
    uid character varying(64) NOT NULL,
    session character varying(64) NOT NULL,
    min_datetime timestamp with time zone NOT NULL,
    max_datetime timestamp with time zone NOT NULL,
    page_view_count integer NOT NULL
);


ALTER TABLE staging.stg_session_agg_values OWNER TO warehouse_dbo;

--
-- Name: stg_wap_site_access_log; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE stg_wap_site_access_log (
    stg_wap_site_access_log_id integer NOT NULL,
    server character varying(32),
    host character varying(50),
    source_ip inet,
    client character varying(32),
    username character varying(32),
    dtrequested timestamp with time zone,
    request text,
    method text,
    path text,
    arguments text,
    protocol text,
    status smallint,
    bytes integer,
    referrer text,
    user_agent text,
    uid character varying(64),
    session character varying(64),
    page_template text,
    network_type text,
    partner_keyword text,
    display_block_id integer,
    partner_module_id integer,
    content_location integer,
    user_location integer,
    partner_id integer DEFAULT (-100) NOT NULL,
    portal_id integer DEFAULT (-100) NOT NULL,
    content_category_id integer DEFAULT (-100) NOT NULL,
    referrer_hostname text,
    request_type_id integer DEFAULT (-100) NOT NULL,
    eastern_date date,
    eastern_time time without time zone,
    local_date date DEFAULT '2005-01-01'::date,
    local_time time without time zone DEFAULT '00:00:00'::time without time zone,
    gmt_date date,
    gmt_time time without time zone,
    dtrequested_pacific timestamp without time zone,
    domain text
)
WITH (fillfactor=50);


ALTER TABLE staging.stg_wap_site_access_log OWNER TO warehouse_dbo;

--
-- Name: stg_wap_site_access_log_stg_wap_site_access_log_id_seq; Type: SEQUENCE; Schema: staging; Owner: warehouse_dbo
--

CREATE SEQUENCE stg_wap_site_access_log_stg_wap_site_access_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483646
    CACHE 1
    CYCLE;


ALTER TABLE staging.stg_wap_site_access_log_stg_wap_site_access_log_id_seq OWNER TO warehouse_dbo;

--
-- Name: stg_wap_site_access_log_stg_wap_site_access_log_id_seq; Type: SEQUENCE OWNED BY; Schema: staging; Owner: warehouse_dbo
--

ALTER SEQUENCE stg_wap_site_access_log_stg_wap_site_access_log_id_seq OWNED BY stg_wap_site_access_log.stg_wap_site_access_log_id;


--
-- Name: t_dma_dim; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE t_dma_dim (
    zipcode character(5),
    dmacode smallint,
    dmaname character varying(32),
    dmaindicator character(1),
    statecode smallint,
    countycode smallint,
    stateabbr character(2),
    countyname character varying(32),
    countysize smallint,
    territorycode character(1),
    dmarank smallint,
    metroindicator character(1)
);


ALTER TABLE staging.t_dma_dim OWNER TO ejohnst;

--
-- Name: t_jul_adreqs_fact; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE t_jul_adreqs_fact (
    dtrequested timestamp with time zone,
    portal_keyword character varying,
    portal_sk integer,
    partner_keyword character varying,
    partner_sk integer,
    content_category_id integer,
    content_category_sk integer,
    display_block_id integer,
    display_block_sk integer,
    partner_module_id integer,
    partner_module_sk integer,
    transact_id character varying,
    postalcode character varying
);


ALTER TABLE staging.t_jul_adreqs_fact OWNER TO ejohnst;

--
-- Name: t_jun_adreqs_fact; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE t_jun_adreqs_fact (
    dtrequested timestamp with time zone,
    portal_keyword character varying,
    portal_sk integer,
    partner_keyword character varying,
    partner_sk integer,
    content_category_id integer,
    content_category_sk integer,
    display_block_id integer,
    display_block_sk integer,
    partner_module_id integer,
    partner_module_sk integer,
    transact_id character varying,
    postalcode character varying
);


ALTER TABLE staging.t_jun_adreqs_fact OWNER TO ejohnst;

--
-- Name: t_location_dim; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE t_location_dim (
    country character varying(12),
    postalcode character varying(7),
    postaltype character(1),
    cityname character varying(64),
    citytype character(1),
    countyname character varying(64),
    countyfips character(5),
    provincename character varying(64),
    provinceabbr character(2),
    statefips character(2),
    msacode character(4),
    areacode character varying(16),
    timezone character varying(16),
    utc numeric(3,1),
    dst character(1),
    latitude numeric(9,6),
    longitude numeric(9,6),
    msaname character varying,
    msatype character varying(16)
);


ALTER TABLE staging.t_location_dim OWNER TO ejohnst;

--
-- Name: t_msa_dim; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE t_msa_dim (
    msacode character(4),
    msaname character varying,
    msatype character varying(16)
);


ALTER TABLE staging.t_msa_dim OWNER TO ejohnst;

--
-- Name: t_partner_location; Type: TABLE; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE TABLE t_partner_location (
    partner_id integer,
    group_name character varying,
    partner_name character varying,
    city character varying,
    stateabbr character varying,
    zipcode character varying,
    dmacode smallint,
    dmaname character varying,
    uniques integer,
    views integer
);


ALTER TABLE staging.t_partner_location OWNER TO ejohnst;

--
-- Name: test; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE test (
    field text,
    field1 character varying(100)
);


ALTER TABLE staging.test OWNER TO song;

--
-- Name: tmp1_zvents_by_partner; Type: TABLE; Schema: staging; Owner: abyfield; Tablespace: staging_tablespace
--

CREATE TABLE tmp1_zvents_by_partner (
    partner_id integer,
    partner_name character varying(255),
    parent_id integer,
    parent1_name character varying(40),
    zvent_views bigint
);


ALTER TABLE staging.tmp1_zvents_by_partner OWNER TO abyfield;

--
-- Name: tmp2_all_by_partner; Type: TABLE; Schema: staging; Owner: abyfield; Tablespace: staging_tablespace
--

CREATE TABLE tmp2_all_by_partner (
    partner_id integer,
    partner_name character varying(255),
    parent_id integer,
    parent1_name character varying(40),
    all_views bigint
);


ALTER TABLE staging.tmp2_all_by_partner OWNER TO abyfield;

--
-- Name: tmp3_zvents_by_parent; Type: TABLE; Schema: staging; Owner: abyfield; Tablespace: staging_tablespace
--

CREATE TABLE tmp3_zvents_by_parent (
    parent_id integer,
    parent1_name character varying(40),
    zvent_views bigint
);


ALTER TABLE staging.tmp3_zvents_by_parent OWNER TO abyfield;

--
-- Name: tmp4_all_by_parent; Type: TABLE; Schema: staging; Owner: abyfield; Tablespace: staging_tablespace
--

CREATE TABLE tmp4_all_by_parent (
    parent_id integer,
    parent1_name character varying(40),
    all_views bigint
);


ALTER TABLE staging.tmp4_all_by_parent OWNER TO abyfield;

--
-- Name: tmp_ap_portal; Type: TABLE; Schema: staging; Owner: abyfield; Tablespace: staging_tablespace
--

CREATE TABLE tmp_ap_portal (
    file_name character varying(64),
    portal_name character varying(45),
    count bigint
);


ALTER TABLE staging.tmp_ap_portal OWNER TO abyfield;

--
-- Name: tmp_ap_portal2; Type: TABLE; Schema: staging; Owner: abyfield; Tablespace: staging_tablespace
--

CREATE TABLE tmp_ap_portal2 (
    data_file_id integer,
    file_name character varying(64),
    portal_name character varying(45),
    count bigint
);


ALTER TABLE staging.tmp_ap_portal2 OWNER TO abyfield;

--
-- Name: tmp_ap_portal3; Type: TABLE; Schema: staging; Owner: postgres; Tablespace: staging_tablespace
--

CREATE TABLE tmp_ap_portal3 (
    data_file_id integer,
    file_name character varying(64),
    portal_name character varying(45),
    count bigint
);


ALTER TABLE staging.tmp_ap_portal3 OWNER TO postgres;

--
-- Name: tmp_content_category; Type: TABLE; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE tmp_content_category (
    content_category_id integer NOT NULL,
    category_name character varying(100)
);


ALTER TABLE staging.tmp_content_category OWNER TO warehouse_dbo;

--
-- Name: v_file_status; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE v_file_status (
    fn_extract_file character varying
);


ALTER TABLE staging.v_file_status OWNER TO song;

--
-- Name: v_rec; Type: TABLE; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

CREATE TABLE v_rec (
    data_file_id integer,
    file_name character varying(64),
    server_name character varying(16),
    file_timestamp timestamp without time zone,
    file_status character varying(2),
    data_file_config_id smallint,
    data_file_target_table character varying(64),
    data_file_type character(1),
    unzip boolean,
    transform_on_import boolean,
    import_dir character varying(64),
    success_dir character varying(64),
    error_dir character varying(64),
    data_file_column_list text,
    data_file_load_options text,
    transform_script_name character varying(64),
    data_file_process_function character varying(64)
);


ALTER TABLE staging.v_rec OWNER TO song;

SET search_path = verveloc, pg_catalog;

--
-- Name: country; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE country (
    id integer NOT NULL,
    alpha2 character(2),
    alpha3 character(3),
    name text,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE verveloc.country OWNER TO warehouse_dbo;

--
-- Name: ip_cache; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE ip_cache (
    ip_cache_id bigint NOT NULL,
    ip inet,
    network_type text,
    lat_lon text,
    country text,
    metro_area integer,
    dt_create timestamp without time zone DEFAULT ('now'::text)::timestamp without time zone NOT NULL,
    dt_last_update date DEFAULT ('now'::text)::date NOT NULL,
    unexpired boolean DEFAULT true
);


ALTER TABLE verveloc.ip_cache OWNER TO warehouse_dbo;

--
-- Name: ip_cache_ip_cache_id_seq; Type: SEQUENCE; Schema: verveloc; Owner: warehouse_dbo
--

CREATE SEQUENCE ip_cache_ip_cache_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE verveloc.ip_cache_ip_cache_id_seq OWNER TO warehouse_dbo;

--
-- Name: ip_cache_ip_cache_id_seq; Type: SEQUENCE OWNED BY; Schema: verveloc; Owner: warehouse_dbo
--

ALTER SEQUENCE ip_cache_ip_cache_id_seq OWNED BY ip_cache.ip_cache_id;


--
-- Name: location; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE location (
    id bigint NOT NULL,
    name text,
    country_id bigint,
    region_id bigint,
    metro_id bigint,
    postal_code_id bigint,
    accuracy integer,
    pl_country_id bigint,
    pl_region_id bigint,
    pl_metro_id bigint,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    longitude double precision,
    latitude double precision
);


ALTER TABLE verveloc.location OWNER TO warehouse_dbo;

--
-- Name: location_id_seq; Type: SEQUENCE; Schema: verveloc; Owner: warehouse_dbo
--

CREATE SEQUENCE location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE verveloc.location_id_seq OWNER TO warehouse_dbo;

--
-- Name: location_id_seq; Type: SEQUENCE OWNED BY; Schema: verveloc; Owner: warehouse_dbo
--

ALTER SEQUENCE location_id_seq OWNED BY location.id;


--
-- Name: metro; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE metro (
    id bigint NOT NULL,
    name text,
    country_id bigint,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE verveloc.metro OWNER TO warehouse_dbo;

--
-- Name: metro_id_seq; Type: SEQUENCE; Schema: verveloc; Owner: warehouse_dbo
--

CREATE SEQUENCE metro_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE verveloc.metro_id_seq OWNER TO warehouse_dbo;

--
-- Name: metro_id_seq; Type: SEQUENCE OWNED BY; Schema: verveloc; Owner: warehouse_dbo
--

ALTER SEQUENCE metro_id_seq OWNED BY metro.id;


--
-- Name: postal_code; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE postal_code (
    id bigint NOT NULL,
    name text,
    region_id bigint,
    metro_id bigint,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE verveloc.postal_code OWNER TO warehouse_dbo;

--
-- Name: postal_code_id_seq; Type: SEQUENCE; Schema: verveloc; Owner: warehouse_dbo
--

CREATE SEQUENCE postal_code_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE verveloc.postal_code_id_seq OWNER TO warehouse_dbo;

--
-- Name: postal_code_id_seq; Type: SEQUENCE OWNED BY; Schema: verveloc; Owner: warehouse_dbo
--

ALTER SEQUENCE postal_code_id_seq OWNED BY postal_code.id;


--
-- Name: refer_ip_zip; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE refer_ip_zip (
    ip text,
    zipcode integer
);


ALTER TABLE verveloc.refer_ip_zip OWNER TO warehouse_dbo;

--
-- Name: region; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE region (
    id bigint NOT NULL,
    country_id bigint NOT NULL,
    name text,
    code character(2),
    fips text,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE verveloc.region OWNER TO warehouse_dbo;

--
-- Name: region_id_seq; Type: SEQUENCE; Schema: verveloc; Owner: warehouse_dbo
--

CREATE SEQUENCE region_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE verveloc.region_id_seq OWNER TO warehouse_dbo;

--
-- Name: region_id_seq; Type: SEQUENCE OWNED BY; Schema: verveloc; Owner: warehouse_dbo
--

ALTER SEQUENCE region_id_seq OWNED BY region.id;


--
-- Name: vrvlocation; Type: TABLE; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE TABLE vrvlocation (
    id bigint NOT NULL,
    name character varying(200),
    address character varying(255),
    neighborhood character varying(200),
    zip character varying(10),
    city character varying(100),
    state character varying(20),
    lat double precision,
    lng double precision,
    type integer,
    partner_id bigint,
    phone character varying(40),
    external_location_id character varying(32),
    locality_data character varying(120),
    vernacular_data character varying(255)
);


ALTER TABLE verveloc.vrvlocation OWNER TO warehouse_dbo;

--
-- Name: vrvlocation_id_seq; Type: SEQUENCE; Schema: verveloc; Owner: warehouse_dbo
--

CREATE SEQUENCE vrvlocation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE verveloc.vrvlocation_id_seq OWNER TO warehouse_dbo;

--
-- Name: vrvlocation_id_seq; Type: SEQUENCE OWNED BY; Schema: verveloc; Owner: warehouse_dbo
--

ALTER SEQUENCE vrvlocation_id_seq OWNED BY vrvlocation.id;


SET search_path = adm, pg_catalog;

--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m01 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m02 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m03 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m04 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m05 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m06 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m07 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m08 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m09 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m10 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m11 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_by_publisher_y2013_m12 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m01 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m02 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m03 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m04 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m05 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m06 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m07 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m08 ALTER COLUMN cf_factor SET DEFAULT 1;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: is_active; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: today_ys; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN today_ys SET DEFAULT 0;


--
-- Name: today_estimate_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN today_estimate_revenue SET DEFAULT 0;


--
-- Name: total_paid_impressions; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN total_paid_impressions SET DEFAULT 0;


--
-- Name: total_net_revenue; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN total_net_revenue SET DEFAULT 0;


--
-- Name: total_p_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN total_p_rev_share SET DEFAULT 0;


--
-- Name: total_v_rev_share; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN total_v_rev_share SET DEFAULT 0;


--
-- Name: cf_factor; Type: DEFAULT; Schema: adm; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_network_revenue_y2013_m09 ALTER COLUMN cf_factor SET DEFAULT 1;


SET search_path = adsops, pg_catalog;

--
-- Name: property_id; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN property_id SET DEFAULT (-100);


--
-- Name: property_name; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN property_name SET DEFAULT 'N/A'::character varying;


--
-- Name: partner_keyword; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN partner_keyword SET DEFAULT 'N/A'::character varying;


--
-- Name: portal_keyword; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN portal_keyword SET DEFAULT 'N/A'::character varying;


--
-- Name: rpt_adm_portal_id; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN rpt_adm_portal_id SET DEFAULT (-100);


--
-- Name: channel_id; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN channel_id SET DEFAULT (-100);


--
-- Name: pub_rev_share_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN pub_rev_share_percentage SET DEFAULT 0;


--
-- Name: adcel_requests; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN adcel_requests SET DEFAULT 0;


--
-- Name: adcel_requests_by_adnetwork; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN adcel_requests_by_adnetwork SET DEFAULT 0;


--
-- Name: fullfilled_code_count; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN fullfilled_code_count SET DEFAULT 0;


--
-- Name: fullfilled_code_y; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN fullfilled_code_y SET DEFAULT 0;


--
-- Name: fullfilled_code_n; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN fullfilled_code_n SET DEFAULT 0;


--
-- Name: fullfilled_code_e; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN fullfilled_code_e SET DEFAULT 0;


--
-- Name: fullfilled_code_t; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN fullfilled_code_t SET DEFAULT 0;


--
-- Name: response_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN response_percentage SET DEFAULT 0;


--
-- Name: daily_share_response_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN daily_share_response_percentage SET DEFAULT 0;


--
-- Name: avg_daisy_chain_depth; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN avg_daisy_chain_depth SET DEFAULT 0;


--
-- Name: undisplayed_impressions; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN undisplayed_impressions SET DEFAULT 0;


--
-- Name: undisplayed_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN undisplayed_percentage SET DEFAULT 0;


--
-- Name: verve_impressions; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN verve_impressions SET DEFAULT 0;


--
-- Name: reported_impressions; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN reported_impressions SET DEFAULT 0;


--
-- Name: pub_fill_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN pub_fill_percentage SET DEFAULT 0;


--
-- Name: impressions_discrepancy_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN impressions_discrepancy_percentage SET DEFAULT 0;


--
-- Name: clicks; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN clicks SET DEFAULT 0;


--
-- Name: ctr; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN ctr SET DEFAULT 0;


--
-- Name: cpm; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN cpm SET DEFAULT 0;


--
-- Name: unreported_revenue; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN unreported_revenue SET DEFAULT 0;


--
-- Name: reported_revenue; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN reported_revenue SET DEFAULT 0;


--
-- Name: total_revenue; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN total_revenue SET DEFAULT 0;


--
-- Name: total_revenue_today; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN total_revenue_today SET DEFAULT 0;


--
-- Name: daily_rev_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN daily_rev_percentage SET DEFAULT 0;


--
-- Name: total_yes_responses_today; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN total_yes_responses_today SET DEFAULT 0;


--
-- Name: is_active; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: bannerclick_events; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m03 ALTER COLUMN bannerclick_events SET DEFAULT 0;


--
-- Name: property_id; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN property_id SET DEFAULT (-100);


--
-- Name: property_name; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN property_name SET DEFAULT 'N/A'::character varying;


--
-- Name: partner_keyword; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN partner_keyword SET DEFAULT 'N/A'::character varying;


--
-- Name: portal_keyword; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN portal_keyword SET DEFAULT 'N/A'::character varying;


--
-- Name: rpt_adm_portal_id; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN rpt_adm_portal_id SET DEFAULT (-100);


--
-- Name: channel_id; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN channel_id SET DEFAULT (-100);


--
-- Name: pub_rev_share_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN pub_rev_share_percentage SET DEFAULT 0;


--
-- Name: adcel_requests; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN adcel_requests SET DEFAULT 0;


--
-- Name: adcel_requests_by_adnetwork; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN adcel_requests_by_adnetwork SET DEFAULT 0;


--
-- Name: fullfilled_code_count; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN fullfilled_code_count SET DEFAULT 0;


--
-- Name: fullfilled_code_y; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN fullfilled_code_y SET DEFAULT 0;


--
-- Name: fullfilled_code_n; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN fullfilled_code_n SET DEFAULT 0;


--
-- Name: fullfilled_code_e; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN fullfilled_code_e SET DEFAULT 0;


--
-- Name: fullfilled_code_t; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN fullfilled_code_t SET DEFAULT 0;


--
-- Name: response_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN response_percentage SET DEFAULT 0;


--
-- Name: daily_share_response_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN daily_share_response_percentage SET DEFAULT 0;


--
-- Name: avg_daisy_chain_depth; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN avg_daisy_chain_depth SET DEFAULT 0;


--
-- Name: undisplayed_impressions; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN undisplayed_impressions SET DEFAULT 0;


--
-- Name: undisplayed_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN undisplayed_percentage SET DEFAULT 0;


--
-- Name: verve_impressions; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN verve_impressions SET DEFAULT 0;


--
-- Name: reported_impressions; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN reported_impressions SET DEFAULT 0;


--
-- Name: pub_fill_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN pub_fill_percentage SET DEFAULT 0;


--
-- Name: impressions_discrepancy_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN impressions_discrepancy_percentage SET DEFAULT 0;


--
-- Name: clicks; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN clicks SET DEFAULT 0;


--
-- Name: ctr; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN ctr SET DEFAULT 0;


--
-- Name: cpm; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN cpm SET DEFAULT 0;


--
-- Name: unreported_revenue; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN unreported_revenue SET DEFAULT 0;


--
-- Name: reported_revenue; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN reported_revenue SET DEFAULT 0;


--
-- Name: total_revenue; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN total_revenue SET DEFAULT 0;


--
-- Name: total_revenue_today; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN total_revenue_today SET DEFAULT 0;


--
-- Name: daily_rev_percentage; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN daily_rev_percentage SET DEFAULT 0;


--
-- Name: total_yes_responses_today; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN total_yes_responses_today SET DEFAULT 0;


--
-- Name: is_active; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN is_active SET DEFAULT false;


--
-- Name: dt_lastchange; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN dt_lastchange SET DEFAULT now();


--
-- Name: bannerclick_events; Type: DEFAULT; Schema: adsops; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_agg_delivery_publisher_property_beta_y2013_m04 ALTER COLUMN bannerclick_events SET DEFAULT 0;


SET search_path = control, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_checkpoint ALTER COLUMN id SET DEFAULT nextval('adm_checkpoint_id_seq'::regclass);


--
-- Name: process_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY daily_process_status ALTER COLUMN process_id SET DEFAULT nextval('daily_process_status_process_id_seq'::regclass);


--
-- Name: data_file_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY data_file ALTER COLUMN data_file_id SET DEFAULT nextval('data_file_data_file_id_seq'::regclass);


--
-- Name: email_notification_log_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY email_notification_log ALTER COLUMN email_notification_log_id SET DEFAULT nextval('email_notification_log_email_notification_log_id_seq1'::regclass);


--
-- Name: schedule_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY emaill_reports_schedule ALTER COLUMN schedule_id SET DEFAULT nextval('emaill_reports_schedule_schedule_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY etl_checkpoint ALTER COLUMN id SET DEFAULT nextval('etl_checkpoint_id_seq'::regclass);


--
-- Name: process_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY process ALTER COLUMN process_id SET DEFAULT nextval('process_process_id_seq'::regclass);


--
-- Name: process_temp_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY process_temp ALTER COLUMN process_temp_id SET DEFAULT nextval('process_temp_process_temp_id_seq'::regclass);


--
-- Name: process_id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY transfer_process_log ALTER COLUMN process_id SET DEFAULT nextval('transfer_process_log_process_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY transfering_checkpoint ALTER COLUMN id SET DEFAULT nextval('transfering_checkpoint_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY transfering_data ALTER COLUMN id SET DEFAULT nextval('transfering_data_id_seq'::regclass);


SET search_path = refer, pg_catalog;

--
-- Name: ad_network_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY ad_network_dim ALTER COLUMN ad_network_sk SET DEFAULT nextval('ad_network_dim_ad_network_sk_seq'::regclass);


--
-- Name: ad_network_param_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY ad_network_param_dim ALTER COLUMN ad_network_param_sk SET DEFAULT nextval('ad_network_param_dim_ad_network_param_sk_seq'::regclass);


--
-- Name: advertiser_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_advertiser_dim ALTER COLUMN advertiser_sk SET DEFAULT nextval('adm_advertiser_dim_advertiser_sk_seq'::regclass);


--
-- Name: channel_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_channel_dim ALTER COLUMN channel_sk SET DEFAULT nextval('adm_channel_dim_channel_sk_seq'::regclass);


--
-- Name: creative_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_creative_dim ALTER COLUMN creative_sk SET DEFAULT nextval('adm_creative_dim_creative_sk_seq'::regclass);


--
-- Name: adsize_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_adsizes ALTER COLUMN adsize_sk SET DEFAULT nextval('adm_dim_adsizes_adsize_sk_seq'::regclass);


--
-- Name: advertiser_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_advertisers ALTER COLUMN advertiser_sk SET DEFAULT nextval('adm_dim_advertisers_advertiser_sk_seq'::regclass);


--
-- Name: creative_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_creatives ALTER COLUMN creative_sk SET DEFAULT nextval('adm_dim_creatives_creative_sk_seq'::regclass);


--
-- Name: flight_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_flights ALTER COLUMN flight_sk SET DEFAULT nextval('adm_dim_flights_flight_sk_seq'::regclass);


--
-- Name: billing_line_items_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_io_lineitems ALTER COLUMN billing_line_items_sk SET DEFAULT nextval('adm_dim_io_lineitems_billing_line_items_sk_seq'::regclass);


--
-- Name: order_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_orders ALTER COLUMN order_sk SET DEFAULT nextval('adm_dim_orders_order_sk_seq'::regclass);


--
-- Name: organization_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_organizations ALTER COLUMN organization_sk SET DEFAULT nextval('adm_dim_organizations_organization_sk_seq'::regclass);


--
-- Name: platform_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_platforms ALTER COLUMN platform_sk SET DEFAULT nextval('adm_dim_platforms_platform_sk_seq'::regclass);


--
-- Name: portal_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_portals ALTER COLUMN portal_sk SET DEFAULT nextval('adm_dim_portals_portal_sk_seq'::regclass);


--
-- Name: property_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_properties ALTER COLUMN property_sk SET DEFAULT nextval('adm_dim_properties_property_sk_seq'::regclass);


--
-- Name: propertygroup_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_propertygroups ALTER COLUMN propertygroup_sk SET DEFAULT nextval('adm_dim_propertygroups_propertygroup_sk_seq'::regclass);


--
-- Name: publisher_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_dim_publishers ALTER COLUMN publisher_sk SET DEFAULT nextval('adm_dim_publishers_publisher_sk_seq'::regclass);


--
-- Name: flight_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_flight_dim ALTER COLUMN flight_sk SET DEFAULT nextval('adm_flight_dim_flight_sk_seq'::regclass);


--
-- Name: mapping_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_mapping_channels ALTER COLUMN mapping_sk SET DEFAULT nextval('adm_mapping_channels_mapping_sk_seq'::regclass);


--
-- Name: mapping_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_mapping_portals ALTER COLUMN mapping_sk SET DEFAULT nextval('adm_mapping_portals_mapping_sk_seq'::regclass);


--
-- Name: network_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_network_dim ALTER COLUMN network_sk SET DEFAULT nextval('adm_network_dim_network_sk_seq'::regclass);


--
-- Name: order_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_order_dim ALTER COLUMN order_sk SET DEFAULT nextval('adm_order_dim_order_sk_seq'::regclass);


--
-- Name: organization_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_organization_dim ALTER COLUMN organization_sk SET DEFAULT nextval('adm_organization_dim_organization_sk_seq'::regclass);


--
-- Name: placement_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_placement_dim ALTER COLUMN placement_sk SET DEFAULT nextval('adm_placement_dim_placement_sk_seq'::regclass);


--
-- Name: portal_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_portal_dim ALTER COLUMN portal_sk SET DEFAULT nextval('adm_portal_dim_portal_sk_seq'::regclass);


--
-- Name: publication_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_publication_dim ALTER COLUMN publication_sk SET DEFAULT nextval('adm_publication_dim_publication_sk_seq'::regclass);


--
-- Name: publisher_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_publisher_dim ALTER COLUMN publisher_sk SET DEFAULT nextval('adm_publisher_dim_publisher_sk_seq'::regclass);


--
-- Name: website_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY adm_website_dim ALTER COLUMN website_sk SET DEFAULT nextval('adm_website_dim_website_sk_seq'::regclass);


--
-- Name: content_category_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY content_category_dim ALTER COLUMN content_category_sk SET DEFAULT nextval('content_category_dim_content_category_sk_seq'::regclass);


--
-- Name: correction_factor_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY correction_factor_dim ALTER COLUMN correction_factor_sk SET DEFAULT nextval('correction_factor_dim_correction_factor_sk_seq'::regclass);


--
-- Name: dc_ad_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dc_ad_dim ALTER COLUMN dc_ad_sk SET DEFAULT nextval('dc_ad_dim_dc_ad_sk_seq'::regclass);


--
-- Name: dc_order_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dc_order_dim ALTER COLUMN dc_order_sk SET DEFAULT nextval('dc_order_dim_dc_order_sk_seq'::regclass);


--
-- Name: dc_site_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dc_site_dim ALTER COLUMN dc_site_sk SET DEFAULT nextval('dc_site_dim_dc_site_sk_seq'::regclass);


--
-- Name: ad_unit_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_ad_units ALTER COLUMN ad_unit_sk SET DEFAULT nextval('dfp_dim_ad_units_ad_unit_sk_seq'::regclass);


--
-- Name: creative_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_creatives ALTER COLUMN creative_sk SET DEFAULT nextval('dfp_dim_creatives_creative_sk_seq'::regclass);


--
-- Name: line_item_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_line_items ALTER COLUMN line_item_sk SET DEFAULT nextval('dfp_dim_line_items_line_item_sk_seq'::regclass);


--
-- Name: lineitem_creatives_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_lineitem_creatives ALTER COLUMN lineitem_creatives_sk SET DEFAULT nextval('dfp_dim_lineitem_creatives_lineitem_creatives_sk_seq'::regclass);


--
-- Name: lineitem_targets_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_lineitem_targets ALTER COLUMN lineitem_targets_sk SET DEFAULT nextval('dfp_dim_lineitem_targets_lineitem_targets_sk_seq'::regclass);


--
-- Name: order_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_orders ALTER COLUMN order_sk SET DEFAULT nextval('dfp_dim_orders_order_sk_seq'::regclass);


--
-- Name: placement_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY dfp_dim_placements ALTER COLUMN placement_sk SET DEFAULT nextval('dfp_dim_placements_placement_sk_seq'::regclass);


--
-- Name: display_block_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY display_block_dim ALTER COLUMN display_block_sk SET DEFAULT nextval('display_block_dim_display_block_sk_seq'::regclass);


--
-- Name: event_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY event_dim ALTER COLUMN event_sk SET DEFAULT nextval('event_dim_event_sk_seq'::regclass);


--
-- Name: ga_channel_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY ga_channel_dim ALTER COLUMN ga_channel_sk SET DEFAULT nextval('ga_channel_dim_ga_channel_sk_seq'::regclass);


--
-- Name: month_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY month_dim ALTER COLUMN month_sk SET DEFAULT nextval('month_dim_month_sk_seq'::regclass);


--
-- Name: network_type_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY network_type_dim ALTER COLUMN network_type_sk SET DEFAULT nextval('network_type_dim_network_type_sk_seq'::regclass);


--
-- Name: page_template_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY page_template_dim ALTER COLUMN page_template_sk SET DEFAULT nextval('page_template_dim_page_template_sk_seq'::regclass);


--
-- Name: partner_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY partner_dim ALTER COLUMN partner_sk SET DEFAULT nextval('partner_dim_partner_sk_seq'::regclass);


--
-- Name: partner_module_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY partner_module_dim ALTER COLUMN partner_module_sk SET DEFAULT nextval('partner_module_dim_partner_module_sk_seq'::regclass);


--
-- Name: point_of_interest_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY point_of_interest_dim ALTER COLUMN point_of_interest_sk SET DEFAULT nextval('point_of_interest_dim_point_of_interest_sk_seq'::regclass);


--
-- Name: portal_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY portal_dim ALTER COLUMN portal_sk SET DEFAULT nextval('portal_dim_portal_sk_seq'::regclass);


--
-- Name: portal_host_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY portal_host_dim ALTER COLUMN portal_host_sk SET DEFAULT nextval('portal_host_dim_portal_host_sk_seq'::regclass);


--
-- Name: referrer_hostname_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY referrer_hostname_dim ALTER COLUMN referrer_hostname_sk SET DEFAULT nextval('referrer_hostname_dim_referrer_hostname_sk_seq'::regclass);


--
-- Name: request_type_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY request_type_dim ALTER COLUMN request_type_sk SET DEFAULT nextval('request_type_dim_request_type_sk_seq'::regclass);


--
-- Name: revenue_share_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY revenue_share_dim ALTER COLUMN revenue_share_sk SET DEFAULT nextval('revenue_share_dim_revenue_share_sk_seq'::regclass);


--
-- Name: store_location_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY store_location_dim ALTER COLUMN store_location_sk SET DEFAULT nextval('store_location_dim_store_location_sk_seq'::regclass);


--
-- Name: user_agent_sk; Type: DEFAULT; Schema: refer; Owner: warehouse_dbo
--

ALTER TABLE ONLY user_agent_dim ALTER COLUMN user_agent_sk SET DEFAULT nextval('user_agent_dim_user_agent_sk_seq'::regclass);


SET search_path = staging, pg_catalog;

--
-- Name: content_category_sk_temp; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY content_category_dim_temp ALTER COLUMN content_category_sk_temp SET DEFAULT nextval('content_category_dim_temp_content_category_sk_temp_seq'::regclass);


--
-- Name: data_file_temp_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY data_file_temp ALTER COLUMN data_file_temp_id SET DEFAULT nextval('data_file_temp_data_file_temp_id_seq'::regclass);


--
-- Name: advertiser_sk; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY dim_advertisers ALTER COLUMN advertiser_sk SET DEFAULT nextval('dim_advertisers_advertiser_sk_seq'::regclass);


--
-- Name: flight_sk; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY dim_flights ALTER COLUMN flight_sk SET DEFAULT nextval('dim_flights_flight_sk_seq'::regclass);


--
-- Name: order_sk; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY dim_orders ALTER COLUMN order_sk SET DEFAULT nextval('dim_orders_order_sk_seq'::regclass);


--
-- Name: organization_sk; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY dim_organizations ALTER COLUMN organization_sk SET DEFAULT nextval('dim_organizations_organization_sk_seq'::regclass);


--
-- Name: property_sk; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY dim_properties ALTER COLUMN property_sk SET DEFAULT nextval('dim_properties_property_sk_seq'::regclass);


--
-- Name: publisher_sk; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY dim_publishers ALTER COLUMN publisher_sk SET DEFAULT nextval('dim_publishers_publisher_sk_seq'::regclass);


--
-- Name: stg_ad_network_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_ad_network ALTER COLUMN stg_ad_network_id SET DEFAULT nextval('stg_ad_network_stg_ad_network_id_seq'::regclass);


--
-- Name: stg_ad_network_param_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_ad_network_param ALTER COLUMN stg_ad_network_param_id SET DEFAULT nextval('stg_ad_network_param_stg_ad_network_param_id_seq'::regclass);


--
-- Name: stg_adm_advertiser_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_advertiser ALTER COLUMN stg_adm_advertiser_id SET DEFAULT nextval('stg_adm_advertiser_stg_adm_advertiser_id_seq'::regclass);


--
-- Name: stg_adm_channel_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_channel ALTER COLUMN stg_adm_channel_id SET DEFAULT nextval('stg_adm_channel_stg_adm_channel_id_seq'::regclass);


--
-- Name: stg_adm_creative_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_creative ALTER COLUMN stg_adm_creative_id SET DEFAULT nextval('stg_adm_creative_stg_adm_creative_id_seq'::regclass);


--
-- Name: stg_adm_flight_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_flight ALTER COLUMN stg_adm_flight_id SET DEFAULT nextval('stg_adm_flight_stg_adm_flight_id_seq'::regclass);


--
-- Name: stg_adm_order_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_order ALTER COLUMN stg_adm_order_id SET DEFAULT nextval('stg_adm_order_stg_adm_order_id_seq'::regclass);


--
-- Name: stg_adm_organization_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_organization ALTER COLUMN stg_adm_organization_id SET DEFAULT nextval('stg_adm_organization_stg_adm_organization_id_seq'::regclass);


--
-- Name: stg_adm_placement_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_placement ALTER COLUMN stg_adm_placement_id SET DEFAULT nextval('stg_adm_placement_stg_adm_placement_id_seq'::regclass);


--
-- Name: stg_adm_portal_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_portal ALTER COLUMN stg_adm_portal_id SET DEFAULT nextval('stg_adm_portal_stg_adm_portal_id_seq'::regclass);


--
-- Name: stg_adm_publication_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_publication ALTER COLUMN stg_adm_publication_id SET DEFAULT nextval('stg_adm_publication_stg_adm_publication_id_seq'::regclass);


--
-- Name: stg_adm_publisher_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_publisher ALTER COLUMN stg_adm_publisher_id SET DEFAULT nextval('stg_adm_publisher_stg_adm_publisher_id_seq'::regclass);


--
-- Name: stg_adm_website_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_adm_website ALTER COLUMN stg_adm_website_id SET DEFAULT nextval('stg_adm_website_stg_adm_website_id_seq'::regclass);


--
-- Name: stg_content_category_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_content_category ALTER COLUMN stg_content_category_id SET DEFAULT nextval('stg_content_category_stg_content_category_id_seq'::regclass);


--
-- Name: stg_content_category_temp_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_content_category_temp ALTER COLUMN stg_content_category_temp_id SET DEFAULT nextval('stg_content_category_temp_stg_content_category_temp_id_seq'::regclass);


--
-- Name: stg_dc_ad_id; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY stg_dc_ad ALTER COLUMN stg_dc_ad_id SET DEFAULT nextval('stg_dc_ad_stg_dc_ad_id_seq'::regclass);


--
-- Name: stg_dc_order_id; Type: DEFAULT; Schema: staging; Owner: song
--

ALTER TABLE ONLY stg_dc_order ALTER COLUMN stg_dc_order_id SET DEFAULT nextval('stg_dc_order_stg_dc_order_id_seq'::regclass);


--
-- Name: stg_dc_site_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_dc_site ALTER COLUMN stg_dc_site_id SET DEFAULT nextval('stg_dc_site_stg_dc_site_id_seq'::regclass);


--
-- Name: stg_display_block_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_display_block ALTER COLUMN stg_display_block_id SET DEFAULT nextval('stg_display_block_stg_display_block_id_seq'::regclass);


--
-- Name: stg_mapping_mm_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_mapping_mm ALTER COLUMN stg_mapping_mm_id SET DEFAULT nextval('stg_mapping_mm_stg_mapping_mm_id_seq'::regclass);


--
-- Name: stg_partner_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_partner ALTER COLUMN stg_partner_id SET DEFAULT nextval('stg_partner_stg_partner_id_seq'::regclass);


--
-- Name: stg_partner_module_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_partner_module ALTER COLUMN stg_partner_module_id SET DEFAULT nextval('stg_partner_module_stg_partner_module_id_seq'::regclass);


--
-- Name: stg_portal_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_portal ALTER COLUMN stg_portal_id SET DEFAULT nextval('stg_portal_stg_portal_id_seq'::regclass);


--
-- Name: stg_portal_host_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_portal_host ALTER COLUMN stg_portal_host_id SET DEFAULT nextval('stg_portal_host_stg_portal_host_id_seq'::regclass);


--
-- Name: stg_revenue_share_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_revenue_share ALTER COLUMN stg_revenue_share_id SET DEFAULT nextval('stg_revenue_share_stg_revenue_share_id_seq'::regclass);


--
-- Name: stg_wap_site_access_log_id; Type: DEFAULT; Schema: staging; Owner: warehouse_dbo
--

ALTER TABLE ONLY stg_wap_site_access_log ALTER COLUMN stg_wap_site_access_log_id SET DEFAULT nextval('stg_wap_site_access_log_stg_wap_site_access_log_id_seq'::regclass);


SET search_path = verveloc, pg_catalog;

--
-- Name: ip_cache_id; Type: DEFAULT; Schema: verveloc; Owner: warehouse_dbo
--

ALTER TABLE ONLY ip_cache ALTER COLUMN ip_cache_id SET DEFAULT nextval('ip_cache_ip_cache_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: verveloc; Owner: warehouse_dbo
--

ALTER TABLE ONLY location ALTER COLUMN id SET DEFAULT nextval('location_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: verveloc; Owner: warehouse_dbo
--

ALTER TABLE ONLY metro ALTER COLUMN id SET DEFAULT nextval('metro_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: verveloc; Owner: warehouse_dbo
--

ALTER TABLE ONLY postal_code ALTER COLUMN id SET DEFAULT nextval('postal_code_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: verveloc; Owner: warehouse_dbo
--

ALTER TABLE ONLY region ALTER COLUMN id SET DEFAULT nextval('region_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: verveloc; Owner: warehouse_dbo
--

ALTER TABLE ONLY vrvlocation ALTER COLUMN id SET DEFAULT nextval('vrvlocation_id_seq'::regclass);


SET search_path = adnetwork, pg_catalog;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: current_google_adsense_site_pk; Type: CONSTRAINT; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY mapping_ga
    ADD CONSTRAINT current_google_adsense_site_pk PRIMARY KEY (current_google_adsense_site);


--
-- Name: current_millennial_media_name_pk; Type: CONSTRAINT; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY mapping_mm
    ADD CONSTRAINT current_millennial_media_name_pk PRIMARY KEY (current_millennial_media_name);


SET search_path = control, pg_catalog;

SET default_tablespace = control_tablespace;

--
-- Name: adm_checkpoint_pri_id; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

ALTER TABLE ONLY adm_checkpoint
    ADD CONSTRAINT adm_checkpoint_pri_id PRIMARY KEY (id);


SET default_tablespace = '';

--
-- Name: dist_file_name; Type: CONSTRAINT; Schema: control; Owner: dataman; Tablespace: 
--

ALTER TABLE ONLY transfer_file_log
    ADD CONSTRAINT dist_file_name UNIQUE (file_name);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: etl_checkpoint_pri_id; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY etl_checkpoint
    ADD CONSTRAINT etl_checkpoint_pri_id PRIMARY KEY (id);


--
-- Name: pk_data_current_up_to_date; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY data_current_up_to_date
    ADD CONSTRAINT pk_data_current_up_to_date PRIMARY KEY (table_name);


--
-- Name: pk_data_file; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY data_file
    ADD CONSTRAINT pk_data_file PRIMARY KEY (data_file_id);


--
-- Name: pk_data_file_configuration; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY data_file_configuration
    ADD CONSTRAINT pk_data_file_configuration PRIMARY KEY (data_file_config_id);


--
-- Name: pk_email_notification_log; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY email_notification_log
    ADD CONSTRAINT pk_email_notification_log PRIMARY KEY (email_notification_log_id);


--
-- Name: pk_failure_notification_whitelist; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY failure_notification_whitelist
    ADD CONSTRAINT pk_failure_notification_whitelist PRIMARY KEY (sqlstate);


--
-- Name: pk_process; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY process
    ADD CONSTRAINT pk_process PRIMARY KEY (process_id);


--
-- Name: pk_process_checkpoint; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY process_checkpoint
    ADD CONSTRAINT pk_process_checkpoint PRIMARY KEY (process_config_id);


--
-- Name: pk_process_concurrent_trans; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY process_concurrent_trans
    ADD CONSTRAINT pk_process_concurrent_trans PRIMARY KEY (process_id, concurrent_trans_name);


--
-- Name: pk_process_configuration; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY process_configuration
    ADD CONSTRAINT pk_process_configuration PRIMARY KEY (process_config_id);


--
-- Name: pk_process_temp; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY process_temp
    ADD CONSTRAINT pk_process_temp PRIMARY KEY (process_temp_id);


--
-- Name: pk_system_parameter; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY system_parameter
    ADD CONSTRAINT pk_system_parameter PRIMARY KEY (parameter);


--
-- Name: pree_agg_log_dim_checkpoint_pri_id; Type: CONSTRAINT; Schema: control; Owner: dataman; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY transfer_file_log
    ADD CONSTRAINT pree_agg_log_dim_checkpoint_pri_id PRIMARY KEY (id);


SET default_tablespace = control_tablespace;

--
-- Name: transfering_checkpoint_pri_id; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

ALTER TABLE ONLY transfering_checkpoint
    ADD CONSTRAINT transfering_checkpoint_pri_id PRIMARY KEY (id);


--
-- Name: transfering_data_pri_id; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

ALTER TABLE ONLY transfering_data
    ADD CONSTRAINT transfering_data_pri_id PRIMARY KEY (id);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: unq_data_file_on_file_name; Type: CONSTRAINT; Schema: control; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY data_file
    ADD CONSTRAINT unq_data_file_on_file_name UNIQUE (file_name);


SET search_path = public, pg_catalog;

--
-- Name: books_id_pkey; Type: CONSTRAINT; Schema: public; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY books
    ADD CONSTRAINT books_id_pkey PRIMARY KEY (id);


--
-- Name: geometry_columns_pk; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY geometry_columns
    ADD CONSTRAINT geometry_columns_pk PRIMARY KEY (f_table_catalog, f_table_schema, f_table_name, f_geometry_column);


--
-- Name: spatial_ref_sys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: adnetworks_tablespace
--

ALTER TABLE ONLY spatial_ref_sys
    ADD CONSTRAINT spatial_ref_sys_pkey PRIMARY KEY (srid);


SET search_path = refer, pg_catalog;

SET default_tablespace = refer_tablespace;

--
-- Name: pk_ad_network_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY ad_network_dim
    ADD CONSTRAINT pk_ad_network_dim PRIMARY KEY (ad_network_sk);


--
-- Name: pk_ad_network_param_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY ad_network_param_dim
    ADD CONSTRAINT pk_ad_network_param_dim PRIMARY KEY (ad_network_param_sk);


--
-- Name: pk_adm_advertiser_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_advertiser_dim
    ADD CONSTRAINT pk_adm_advertiser_dim PRIMARY KEY (advertiser_sk);


--
-- Name: pk_adm_channel_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_channel_dim
    ADD CONSTRAINT pk_adm_channel_dim PRIMARY KEY (channel_sk);


--
-- Name: pk_adm_creative_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_creative_dim
    ADD CONSTRAINT pk_adm_creative_dim PRIMARY KEY (creative_sk);


--
-- Name: pk_adm_creative_dim_bk; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_creative_dim_bk
    ADD CONSTRAINT pk_adm_creative_dim_bk PRIMARY KEY (creative_sk);


--
-- Name: pk_adm_dim_adsizes; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_adsizes
    ADD CONSTRAINT pk_adm_dim_adsizes PRIMARY KEY (adsize_sk);


--
-- Name: pk_adm_dim_advertisers; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_advertisers
    ADD CONSTRAINT pk_adm_dim_advertisers PRIMARY KEY (advertiser_sk);


--
-- Name: pk_adm_dim_creatives; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_creatives
    ADD CONSTRAINT pk_adm_dim_creatives PRIMARY KEY (creative_sk);


--
-- Name: pk_adm_dim_flights; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_flights
    ADD CONSTRAINT pk_adm_dim_flights PRIMARY KEY (flight_sk);


--
-- Name: pk_adm_dim_io_lineitems; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_io_lineitems
    ADD CONSTRAINT pk_adm_dim_io_lineitems PRIMARY KEY (billing_line_items_sk);


--
-- Name: pk_adm_dim_orders; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_orders
    ADD CONSTRAINT pk_adm_dim_orders PRIMARY KEY (order_sk);


--
-- Name: pk_adm_dim_organizations; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_organizations
    ADD CONSTRAINT pk_adm_dim_organizations PRIMARY KEY (organization_sk);


--
-- Name: pk_adm_dim_platforms; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_platforms
    ADD CONSTRAINT pk_adm_dim_platforms PRIMARY KEY (platform_sk);


--
-- Name: pk_adm_dim_portals; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_portals
    ADD CONSTRAINT pk_adm_dim_portals PRIMARY KEY (portal_sk);


--
-- Name: pk_adm_dim_properties; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_properties
    ADD CONSTRAINT pk_adm_dim_properties PRIMARY KEY (property_sk);


--
-- Name: pk_adm_dim_propertygroups; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_propertygroups
    ADD CONSTRAINT pk_adm_dim_propertygroups PRIMARY KEY (propertygroup_sk);


--
-- Name: pk_adm_dim_publishers; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_dim_publishers
    ADD CONSTRAINT pk_adm_dim_publishers PRIMARY KEY (publisher_sk);


--
-- Name: pk_adm_flight_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_flight_dim
    ADD CONSTRAINT pk_adm_flight_dim PRIMARY KEY (flight_sk);


--
-- Name: pk_adm_flight_dim_bk; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_flight_dim_bk
    ADD CONSTRAINT pk_adm_flight_dim_bk PRIMARY KEY (flight_sk);


--
-- Name: pk_adm_mapping_channels; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_mapping_channels
    ADD CONSTRAINT pk_adm_mapping_channels PRIMARY KEY (mapping_sk);


--
-- Name: pk_adm_mapping_portals; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_mapping_portals
    ADD CONSTRAINT pk_adm_mapping_portals PRIMARY KEY (mapping_sk);


--
-- Name: pk_adm_network_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_network_dim
    ADD CONSTRAINT pk_adm_network_dim PRIMARY KEY (network_sk);


--
-- Name: pk_adm_order_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_order_dim
    ADD CONSTRAINT pk_adm_order_dim PRIMARY KEY (order_sk);


--
-- Name: pk_adm_order_dim_bk; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_order_dim_bk
    ADD CONSTRAINT pk_adm_order_dim_bk PRIMARY KEY (order_sk);


--
-- Name: pk_adm_organization_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_organization_dim
    ADD CONSTRAINT pk_adm_organization_dim PRIMARY KEY (organization_sk);


--
-- Name: pk_adm_placement_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_placement_dim
    ADD CONSTRAINT pk_adm_placement_dim PRIMARY KEY (placement_sk);


--
-- Name: pk_adm_portal_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_portal_dim
    ADD CONSTRAINT pk_adm_portal_dim PRIMARY KEY (portal_sk);


--
-- Name: pk_adm_publication_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_publication_dim
    ADD CONSTRAINT pk_adm_publication_dim PRIMARY KEY (publication_sk);


--
-- Name: pk_adm_publisher_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_publisher_dim
    ADD CONSTRAINT pk_adm_publisher_dim PRIMARY KEY (publisher_sk);


--
-- Name: pk_adm_website_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_website_dim
    ADD CONSTRAINT pk_adm_website_dim PRIMARY KEY (website_sk);


--
-- Name: pk_adm_website_dim_bk; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY adm_website_dim_bk
    ADD CONSTRAINT pk_adm_website_dim_bk PRIMARY KEY (website_sk);


--
-- Name: pk_content_category_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY content_category_dim
    ADD CONSTRAINT pk_content_category_dim PRIMARY KEY (content_category_sk);


--
-- Name: pk_correction_factor_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY correction_factor_dim
    ADD CONSTRAINT pk_correction_factor_dim PRIMARY KEY (correction_factor_sk);


--
-- Name: pk_date_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY date_dim
    ADD CONSTRAINT pk_date_dim PRIMARY KEY (date_sk);


--
-- Name: pk_dc_ad_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dc_ad_dim
    ADD CONSTRAINT pk_dc_ad_dim PRIMARY KEY (dc_ad_sk);


--
-- Name: pk_dc_order_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dc_order_dim
    ADD CONSTRAINT pk_dc_order_dim PRIMARY KEY (dc_order_sk);


--
-- Name: pk_dc_site_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dc_site_dim
    ADD CONSTRAINT pk_dc_site_dim PRIMARY KEY (dc_site_sk);


--
-- Name: pk_dfp_dim_ad_units; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_ad_units
    ADD CONSTRAINT pk_dfp_dim_ad_units PRIMARY KEY (ad_unit_sk);


--
-- Name: pk_dfp_dim_creatives; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_creatives
    ADD CONSTRAINT pk_dfp_dim_creatives PRIMARY KEY (creative_sk);


--
-- Name: pk_dfp_dim_line_items; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_line_items
    ADD CONSTRAINT pk_dfp_dim_line_items PRIMARY KEY (line_item_sk);


--
-- Name: pk_dfp_dim_lineitem_creatives; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_lineitem_creatives
    ADD CONSTRAINT pk_dfp_dim_lineitem_creatives PRIMARY KEY (lineitem_creatives_sk);


--
-- Name: pk_dfp_dim_lineitem_targets; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_lineitem_targets
    ADD CONSTRAINT pk_dfp_dim_lineitem_targets PRIMARY KEY (lineitem_targets_sk);


--
-- Name: pk_dfp_dim_orders; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_orders
    ADD CONSTRAINT pk_dfp_dim_orders PRIMARY KEY (order_sk);


--
-- Name: pk_dfp_dim_placements; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dfp_dim_placements
    ADD CONSTRAINT pk_dfp_dim_placements PRIMARY KEY (placement_sk);


--
-- Name: pk_display_block_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY display_block_dim
    ADD CONSTRAINT pk_display_block_dim PRIMARY KEY (display_block_sk);


--
-- Name: pk_event_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY event_dim
    ADD CONSTRAINT pk_event_dim PRIMARY KEY (event_sk);


--
-- Name: pk_ga_channel_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY ga_channel_dim
    ADD CONSTRAINT pk_ga_channel_dim PRIMARY KEY (ga_channel_sk);


--
-- Name: pk_month_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY month_dim
    ADD CONSTRAINT pk_month_dim PRIMARY KEY (month_sk);


--
-- Name: pk_network_type_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY network_type_dim
    ADD CONSTRAINT pk_network_type_dim PRIMARY KEY (network_type_sk);


--
-- Name: pk_page_template_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY page_template_dim
    ADD CONSTRAINT pk_page_template_dim PRIMARY KEY (page_template_sk);


--
-- Name: pk_partner_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY partner_dim
    ADD CONSTRAINT pk_partner_dim PRIMARY KEY (partner_sk);


--
-- Name: pk_partner_module_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY partner_module_dim
    ADD CONSTRAINT pk_partner_module_dim PRIMARY KEY (partner_module_sk);


--
-- Name: pk_point_of_interest_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY point_of_interest_dim
    ADD CONSTRAINT pk_point_of_interest_dim PRIMARY KEY (point_of_interest_sk);


--
-- Name: pk_point_of_interest_dim_bk; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY point_of_interest_dim_bk
    ADD CONSTRAINT pk_point_of_interest_dim_bk PRIMARY KEY (point_of_interest_sk);


--
-- Name: pk_point_of_interest_dim_tmp; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY point_of_interest_dim_tmp
    ADD CONSTRAINT pk_point_of_interest_dim_tmp PRIMARY KEY (point_of_interest_sk);


--
-- Name: pk_portal_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY portal_dim
    ADD CONSTRAINT pk_portal_dim PRIMARY KEY (portal_sk);


--
-- Name: pk_portal_host_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY portal_host_dim
    ADD CONSTRAINT pk_portal_host_dim PRIMARY KEY (portal_host_sk);


--
-- Name: pk_pro_audit_report_name_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY pro_audit_report_name_dim
    ADD CONSTRAINT pk_pro_audit_report_name_dim PRIMARY KEY (job_id, obj_id);


--
-- Name: pk_referrer_hostname_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY referrer_hostname_dim
    ADD CONSTRAINT pk_referrer_hostname_dim PRIMARY KEY (referrer_hostname_sk);


--
-- Name: pk_request_type_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY request_type_dim
    ADD CONSTRAINT pk_request_type_dim PRIMARY KEY (request_type_sk);


--
-- Name: pk_revenue_share_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY revenue_share_dim
    ADD CONSTRAINT pk_revenue_share_dim PRIMARY KEY (revenue_share_sk);


--
-- Name: pk_store_location_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY store_location_dim
    ADD CONSTRAINT pk_store_location_dim PRIMARY KEY (store_location_sk);


--
-- Name: pk_time_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY time_dim
    ADD CONSTRAINT pk_time_dim PRIMARY KEY (time_sk);


--
-- Name: pk_user_agent_dim; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

ALTER TABLE ONLY user_agent_dim
    ADD CONSTRAINT pk_user_agent_dim PRIMARY KEY (user_agent_sk);


SET default_tablespace = '';

--
-- Name: unq_adm_dim_flights_flight_id_01; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: 
--

ALTER TABLE ONLY adm_dim_flights
    ADD CONSTRAINT unq_adm_dim_flights_flight_id_01 UNIQUE (flight_id, dt_expire);


--
-- Name: unq_adm_dim_io_lineitems; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: 
--

ALTER TABLE ONLY adm_dim_io_lineitems
    ADD CONSTRAINT unq_adm_dim_io_lineitems UNIQUE (billing_line_items_id, dt_expire);


--
-- Name: unq_dfp_dim_lineitem_creatives; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: 
--

ALTER TABLE ONLY dfp_dim_lineitem_creatives
    ADD CONSTRAINT unq_dfp_dim_lineitem_creatives UNIQUE (line_item_id, dt_expire, creative_id);


--
-- Name: unq_dfp_dim_lineitem_targets; Type: CONSTRAINT; Schema: refer; Owner: warehouse_dbo; Tablespace: 
--

ALTER TABLE ONLY dfp_dim_lineitem_targets
    ADD CONSTRAINT unq_dfp_dim_lineitem_targets UNIQUE (lineitem_id, dt_expire);


SET search_path = staging, pg_catalog;

SET default_tablespace = refer_tablespace;

--
-- Name: dim_advertisers_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_advertisers
    ADD CONSTRAINT dim_advertisers_psk PRIMARY KEY (advertiser_sk);


--
-- Name: dim_flights_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_flights
    ADD CONSTRAINT dim_flights_psk PRIMARY KEY (flight_sk);


--
-- Name: dim_networks_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_networks
    ADD CONSTRAINT dim_networks_psk PRIMARY KEY (id);


--
-- Name: dim_orders_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_orders
    ADD CONSTRAINT dim_orders_psk PRIMARY KEY (order_sk);


--
-- Name: dim_organizations_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_organizations
    ADD CONSTRAINT dim_organizations_psk PRIMARY KEY (organization_sk);


--
-- Name: dim_properties_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_properties
    ADD CONSTRAINT dim_properties_psk PRIMARY KEY (property_sk);


--
-- Name: dim_publishers_psk; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: refer_tablespace
--

ALTER TABLE ONLY dim_publishers
    ADD CONSTRAINT dim_publishers_psk PRIMARY KEY (publisher_sk);


SET default_tablespace = staging_tablespace;

--
-- Name: pk_backup_filename; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY backup_filename
    ADD CONSTRAINT pk_backup_filename PRIMARY KEY (backup_filename_id);


--
-- Name: pk_content_category_dim_temp; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY content_category_dim_temp
    ADD CONSTRAINT pk_content_category_dim_temp PRIMARY KEY (content_category_sk_temp);


--
-- Name: pk_data_file_temp; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY data_file_temp
    ADD CONSTRAINT pk_data_file_temp PRIMARY KEY (data_file_temp_id);


--
-- Name: pk_gen_ad_channel_site_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_channel_site
    ADD CONSTRAINT pk_gen_ad_channel_site_id PRIMARY KEY (gen_ad_channel_site_id);


--
-- Name: pk_gen_ad_response_app12_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app12
    ADD CONSTRAINT pk_gen_ad_response_app12_id PRIMARY KEY (gen_ad_response_app12_id);


--
-- Name: pk_gen_ad_response_app12_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app12_sub1
    ADD CONSTRAINT pk_gen_ad_response_app12_sub1_id PRIMARY KEY (gen_ad_response_app12_sub1_id);


--
-- Name: pk_gen_ad_response_app13_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app13
    ADD CONSTRAINT pk_gen_ad_response_app13_id PRIMARY KEY (gen_ad_response_app13_id);


--
-- Name: pk_gen_ad_response_app13_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app13_sub1
    ADD CONSTRAINT pk_gen_ad_response_app13_sub1_id PRIMARY KEY (gen_ad_response_app13_sub1_id);


--
-- Name: pk_gen_ad_response_app14_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app14
    ADD CONSTRAINT pk_gen_ad_response_app14_id PRIMARY KEY (gen_ad_response_app14_id);


--
-- Name: pk_gen_ad_response_app14_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app14_sub1
    ADD CONSTRAINT pk_gen_ad_response_app14_sub1_id PRIMARY KEY (gen_ad_response_app14_sub1_id);


--
-- Name: pk_gen_ad_response_app15_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app15
    ADD CONSTRAINT pk_gen_ad_response_app15_id PRIMARY KEY (gen_ad_response_app15_id);


--
-- Name: pk_gen_ad_response_app15_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app15_sub1
    ADD CONSTRAINT pk_gen_ad_response_app15_sub1_id PRIMARY KEY (gen_ad_response_app15_sub1_id);


--
-- Name: pk_gen_ad_response_app3_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app3
    ADD CONSTRAINT pk_gen_ad_response_app3_id PRIMARY KEY (gen_ad_response_app3_id);


--
-- Name: pk_gen_ad_response_app3_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app3_sub1
    ADD CONSTRAINT pk_gen_ad_response_app3_sub1_id PRIMARY KEY (gen_ad_response_app3_sub1_id);


--
-- Name: pk_gen_ad_response_app4_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app4
    ADD CONSTRAINT pk_gen_ad_response_app4_id PRIMARY KEY (gen_ad_response_app4_id);


--
-- Name: pk_gen_ad_response_app4_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app4_sub1
    ADD CONSTRAINT pk_gen_ad_response_app4_sub1_id PRIMARY KEY (gen_ad_response_app4_sub1_id);


--
-- Name: pk_gen_ad_response_app6_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app6
    ADD CONSTRAINT pk_gen_ad_response_app6_id PRIMARY KEY (gen_ad_response_app6_id);


--
-- Name: pk_gen_ad_response_app6_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app6_sub1
    ADD CONSTRAINT pk_gen_ad_response_app6_sub1_id PRIMARY KEY (gen_ad_response_app6_sub1_id);


--
-- Name: pk_gen_ad_response_app8_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app8
    ADD CONSTRAINT pk_gen_ad_response_app8_id PRIMARY KEY (gen_ad_response_app8_id);


--
-- Name: pk_gen_ad_response_app8_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app8_sub1
    ADD CONSTRAINT pk_gen_ad_response_app8_sub1_id PRIMARY KEY (gen_ad_response_app8_sub1_id);


--
-- Name: pk_gen_ad_response_app9_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app9
    ADD CONSTRAINT pk_gen_ad_response_app9_id PRIMARY KEY (gen_ad_response_app9_id);


--
-- Name: pk_gen_ad_response_app9_sub1_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ad_response_app9_sub1
    ADD CONSTRAINT pk_gen_ad_response_app9_sub1_id PRIMARY KEY (gen_ad_response_app9_sub1_id);


--
-- Name: pk_gen_adcel_request_log_app3_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_adcel_site_access_log_app3
    ADD CONSTRAINT pk_gen_adcel_request_log_app3_id PRIMARY KEY (gen_adcel_site_access_log_app3_id);


--
-- Name: pk_gen_adcel_request_log_app4_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_adcel_site_access_log_app4
    ADD CONSTRAINT pk_gen_adcel_request_log_app4_id PRIMARY KEY (gen_adcel_site_access_log_app4_id);


--
-- Name: pk_gen_adcel_request_log_app6_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_adcel_site_access_log_app6
    ADD CONSTRAINT pk_gen_adcel_request_log_app6_id PRIMARY KEY (gen_adcel_site_access_log_app6_id);


--
-- Name: pk_gen_adcel_request_log_app8_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_adcel_site_access_log_app8
    ADD CONSTRAINT pk_gen_adcel_request_log_app8_id PRIMARY KEY (gen_adcel_site_access_log_app8_id);


--
-- Name: pk_gen_adcel_request_log_app9_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_adcel_site_access_log_app9
    ADD CONSTRAINT pk_gen_adcel_request_log_app9_id PRIMARY KEY (gen_adcel_site_access_log_app9_id);


--
-- Name: pk_gen_adsense_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_adsense_performance
    ADD CONSTRAINT pk_gen_adsense_performance_id PRIMARY KEY (gen_adsense_performance_id);


--
-- Name: pk_gen_citygrid_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_citygrid_performance
    ADD CONSTRAINT pk_gen_citygrid_performance_id PRIMARY KEY (gen_citygrid_performance_id);


--
-- Name: pk_gen_event_tracker_log_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_event_tracker_log
    ADD CONSTRAINT pk_gen_event_tracker_log_id PRIMARY KEY (gen_event_tracker_log_id);


--
-- Name: pk_gen_ga_channel_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_ga_channel
    ADD CONSTRAINT pk_gen_ga_channel_id PRIMARY KEY (gen_ga_channel_id);


--
-- Name: pk_gen_itunes_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_itunes_performance
    ADD CONSTRAINT pk_gen_itunes_performance_id PRIMARY KEY (gen_itunes_performance_id);


--
-- Name: pk_gen_jt_pub_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_jt_pub_performance
    ADD CONSTRAINT pk_gen_jt_pub_performance_id PRIMARY KEY (gen_jt_pub_performance_id);


--
-- Name: pk_gen_jumptap_daily_sum_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_jumptap_daily_sum
    ADD CONSTRAINT pk_gen_jumptap_daily_sum_id PRIMARY KEY (gen_jumptap_daily_sum_id);


--
-- Name: pk_gen_marchex_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_marchex_performance
    ADD CONSTRAINT pk_gen_marchex_performance_id PRIMARY KEY (gen_marchex_performance_id);


--
-- Name: pk_gen_millenial_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_millenial_performance
    ADD CONSTRAINT pk_gen_millenial_performance_id PRIMARY KEY (gen_millenial_performance_id);


--
-- Name: pk_gen_monthly_ad_channel_site_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_ad_channel_site
    ADD CONSTRAINT pk_gen_monthly_ad_channel_site_id PRIMARY KEY (gen_monthly_ad_channel_site_id);


--
-- Name: pk_gen_monthly_citygrid_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_citygrid_performance
    ADD CONSTRAINT pk_gen_monthly_citygrid_performance_id PRIMARY KEY (gen_monthly_citygrid_performance_id);


--
-- Name: pk_gen_monthly_doubleclick_site_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_doubleclick_site
    ADD CONSTRAINT pk_gen_monthly_doubleclick_site_id PRIMARY KEY (gen_monthly_doubleclick_site_id);


--
-- Name: pk_gen_monthly_ga_channel_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_ga_channel
    ADD CONSTRAINT pk_gen_monthly_ga_channel_id PRIMARY KEY (gen_monthly_ga_channel_id);


--
-- Name: pk_gen_monthly_itunes_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_itunes_performance
    ADD CONSTRAINT pk_gen_monthly_itunes_performance_id PRIMARY KEY (gen_monthly_itunes_performance_id);


--
-- Name: pk_gen_monthly_jumptap_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_jumptap_performance
    ADD CONSTRAINT pk_gen_monthly_jumptap_performance_id PRIMARY KEY (gen_monthly_jumptap_performance_id);


--
-- Name: pk_gen_monthly_marchex_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_marchex_performance
    ADD CONSTRAINT pk_gen_monthly_marchex_performance_id PRIMARY KEY (gen_monthly_marchex_performance_id);


--
-- Name: pk_gen_monthly_millennial_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_millennial_performance
    ADD CONSTRAINT pk_gen_monthly_millennial_performance_id PRIMARY KEY (gen_monthly_millennial_performance_id);


--
-- Name: pk_gen_monthly_superpages_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_superpages_performance
    ADD CONSTRAINT pk_gen_monthly_superpages_performance_id PRIMARY KEY (gen_monthly_superpages_performance_id);


--
-- Name: pk_gen_monthly_where_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_where_performance
    ADD CONSTRAINT pk_gen_monthly_where_performance_id PRIMARY KEY (gen_monthly_where_performance_id);


--
-- Name: pk_gen_monthly_yellowpages_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_monthly_yellowpages_performance
    ADD CONSTRAINT pk_gen_monthly_yellowpages_performance_id PRIMARY KEY (gen_monthly_yellowpages_performance_id);


--
-- Name: pk_gen_site_campaign_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_site_campaign
    ADD CONSTRAINT pk_gen_site_campaign_id PRIMARY KEY (gen_site_campaign_id);


--
-- Name: pk_gen_site_device_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_site_device
    ADD CONSTRAINT pk_gen_site_device_id PRIMARY KEY (gen_site_device_id);


--
-- Name: pk_gen_site_order_forecast_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_site_order_forecast
    ADD CONSTRAINT pk_gen_site_order_forecast_id PRIMARY KEY (gen_site_order_forecast_id);


--
-- Name: pk_gen_superpages_daily_sum_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_superpages_daily_sum
    ADD CONSTRAINT pk_gen_superpages_daily_sum_id PRIMARY KEY (gen_superpages_daily_sum_id);


--
-- Name: pk_gen_where_performance_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_where_performance
    ADD CONSTRAINT pk_gen_where_performance_id PRIMARY KEY (gen_where_performance_id);


--
-- Name: pk_gen_yellowpages_daily_sum_id; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY gen_yellowpages_daily_sum
    ADD CONSTRAINT pk_gen_yellowpages_daily_sum_id PRIMARY KEY (gen_yellowpages_daily_sum_id);


--
-- Name: pk_stg_ad_network; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_ad_network
    ADD CONSTRAINT pk_stg_ad_network PRIMARY KEY (stg_ad_network_id);


--
-- Name: pk_stg_ad_network_param; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_ad_network_param
    ADD CONSTRAINT pk_stg_ad_network_param PRIMARY KEY (stg_ad_network_param_id);


--
-- Name: pk_stg_adm_advertiser; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_advertiser
    ADD CONSTRAINT pk_stg_adm_advertiser PRIMARY KEY (stg_adm_advertiser_id);


--
-- Name: pk_stg_adm_channel; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_channel
    ADD CONSTRAINT pk_stg_adm_channel PRIMARY KEY (stg_adm_channel_id);


--
-- Name: pk_stg_adm_creative; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_creative
    ADD CONSTRAINT pk_stg_adm_creative PRIMARY KEY (stg_adm_creative_id);


--
-- Name: pk_stg_adm_flight; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_flight
    ADD CONSTRAINT pk_stg_adm_flight PRIMARY KEY (stg_adm_flight_id);


--
-- Name: pk_stg_adm_order; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_order
    ADD CONSTRAINT pk_stg_adm_order PRIMARY KEY (stg_adm_order_id);


--
-- Name: pk_stg_adm_organization; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_organization
    ADD CONSTRAINT pk_stg_adm_organization PRIMARY KEY (stg_adm_organization_id);


--
-- Name: pk_stg_adm_placement; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_placement
    ADD CONSTRAINT pk_stg_adm_placement PRIMARY KEY (stg_adm_placement_id);


--
-- Name: pk_stg_adm_portal; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_portal
    ADD CONSTRAINT pk_stg_adm_portal PRIMARY KEY (stg_adm_portal_id);


--
-- Name: pk_stg_adm_publication; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_publication
    ADD CONSTRAINT pk_stg_adm_publication PRIMARY KEY (stg_adm_publication_id);


--
-- Name: pk_stg_adm_publisher; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_publisher
    ADD CONSTRAINT pk_stg_adm_publisher PRIMARY KEY (stg_adm_publisher_id);


--
-- Name: pk_stg_adm_website; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_adm_website
    ADD CONSTRAINT pk_stg_adm_website PRIMARY KEY (stg_adm_website_id);


--
-- Name: pk_stg_content_category; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_content_category
    ADD CONSTRAINT pk_stg_content_category PRIMARY KEY (stg_content_category_id);


--
-- Name: pk_stg_content_category_temp; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_content_category_temp
    ADD CONSTRAINT pk_stg_content_category_temp PRIMARY KEY (stg_content_category_temp_id);


--
-- Name: pk_stg_dc_ad; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_dc_ad
    ADD CONSTRAINT pk_stg_dc_ad PRIMARY KEY (stg_dc_ad_id);


--
-- Name: pk_stg_dc_order; Type: CONSTRAINT; Schema: staging; Owner: song; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_dc_order
    ADD CONSTRAINT pk_stg_dc_order PRIMARY KEY (stg_dc_order_id);


--
-- Name: pk_stg_dc_site; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_dc_site
    ADD CONSTRAINT pk_stg_dc_site PRIMARY KEY (stg_dc_site_id);


--
-- Name: pk_stg_display_block; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_display_block
    ADD CONSTRAINT pk_stg_display_block PRIMARY KEY (stg_display_block_id);


--
-- Name: pk_stg_mapping_mm; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_mapping_mm
    ADD CONSTRAINT pk_stg_mapping_mm PRIMARY KEY (stg_mapping_mm_id);


--
-- Name: pk_stg_partner; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_partner
    ADD CONSTRAINT pk_stg_partner PRIMARY KEY (stg_partner_id);


--
-- Name: pk_stg_partner_module; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_partner_module
    ADD CONSTRAINT pk_stg_partner_module PRIMARY KEY (stg_partner_module_id);


--
-- Name: pk_stg_portal; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_portal
    ADD CONSTRAINT pk_stg_portal PRIMARY KEY (stg_portal_id);


--
-- Name: pk_stg_portal_host; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_portal_host
    ADD CONSTRAINT pk_stg_portal_host PRIMARY KEY (stg_portal_host_id);


--
-- Name: pk_stg_revenue_share; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_revenue_share
    ADD CONSTRAINT pk_stg_revenue_share PRIMARY KEY (stg_revenue_share_id);


--
-- Name: pk_stg_wap_site_access_log; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY stg_wap_site_access_log
    ADD CONSTRAINT pk_stg_wap_site_access_log PRIMARY KEY (stg_wap_site_access_log_id);


--
-- Name: tmp_content_category_pkey; Type: CONSTRAINT; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY tmp_content_category
    ADD CONSTRAINT tmp_content_category_pkey PRIMARY KEY (content_category_id);


SET search_path = verveloc, pg_catalog;

--
-- Name: PK_location_new; Type: CONSTRAINT; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY location
    ADD CONSTRAINT "PK_location_new" PRIMARY KEY (id);


--
-- Name: PK_metro; Type: CONSTRAINT; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY metro
    ADD CONSTRAINT "PK_metro" PRIMARY KEY (id);


--
-- Name: PK_postal_code; Type: CONSTRAINT; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY postal_code
    ADD CONSTRAINT "PK_postal_code" PRIMARY KEY (id);


--
-- Name: PK_region; Type: CONSTRAINT; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY region
    ADD CONSTRAINT "PK_region" PRIMARY KEY (id);


--
-- Name: vrvlocation_pkey; Type: CONSTRAINT; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

ALTER TABLE ONLY vrvlocation
    ADD CONSTRAINT vrvlocation_pkey PRIMARY KEY (id);


SET search_path = adm, pg_catalog;

SET default_tablespace = adm_tablespace;

--
-- Name: idx_ba_daily_flight_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_01 ON ba_daily_flight USING btree (eastern_date_sk, is_active);


--
-- Name: idx_ba_daily_flight_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_02 ON ba_daily_flight USING btree (eastern_date_sk, delivered_units, publisher_id, is_active);


--
-- Name: idx_ba_daily_flight_exception_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_exception_01 ON ba_daily_flight_exception USING btree (eastern_date_sk, is_active);


--
-- Name: idx_ba_daily_flight_exception_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_exception_02 ON ba_daily_flight_exception USING btree (full_date, is_active);


--
-- Name: idx_ba_daily_flight_min_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_min_01 ON ba_daily_flight_min USING btree (eastern_date_sk, is_active);


--
-- Name: idx_ba_daily_flight_min_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_min_02 ON ba_daily_flight_min USING btree (publisher_id, publisher_name, is_active);


--
-- Name: idx_ba_daily_flight_min_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_min_04 ON ba_daily_flight_min USING btree (flight_id);


--
-- Name: idx_ba_daily_flight_min_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_min_05 ON ba_daily_flight_min USING btree (publisher_id);


--
-- Name: idx_ba_daily_flight_min_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_daily_flight_min_06 ON ba_daily_flight_min USING btree (full_date, is_active);


--
-- Name: idx_ba_monthly_local_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_01 ON ba_monthly_local_revenue USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_local_revenue_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_03 ON ba_monthly_local_revenue USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_04 ON ba_monthly_local_revenue USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_05 ON ba_monthly_local_revenue USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_06 ON ba_monthly_local_revenue USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v3_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v3_01 ON ba_monthly_local_revenue_v3 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v3_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v3_03 ON ba_monthly_local_revenue_v3 USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v3_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v3_04 ON ba_monthly_local_revenue_v3 USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v3_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v3_05 ON ba_monthly_local_revenue_v3 USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v3_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v3_06 ON ba_monthly_local_revenue_v3 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v4_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v4_01 ON ba_monthly_local_revenue_v4 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v4_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v4_03 ON ba_monthly_local_revenue_v4 USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v4_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v4_04 ON ba_monthly_local_revenue_v4 USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v4_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v4_05 ON ba_monthly_local_revenue_v4 USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v4_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v4_06 ON ba_monthly_local_revenue_v4 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_01 ON ba_monthly_local_revenue_v5_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_03 ON ba_monthly_local_revenue_v5_bk USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_04 ON ba_monthly_local_revenue_v5_bk USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_05 ON ba_monthly_local_revenue_v5_bk USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_06 ON ba_monthly_local_revenue_v5_bk USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_07; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_07 ON ba_monthly_local_revenue_v5_bk USING btree (calendar_year_month, delivered_units, is_active);


--
-- Name: idx_ba_monthly_national_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_01 ON ba_monthly_national_revenue USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_03 ON ba_monthly_national_revenue USING btree (calendar_year_month, advertiser_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_04 ON ba_monthly_national_revenue USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_06 ON ba_monthly_national_revenue USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v2_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v2_01 ON ba_monthly_national_revenue_v2 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v2_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v2_03 ON ba_monthly_national_revenue_v2 USING btree (calendar_year_month, advertiser_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v2_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v2_04 ON ba_monthly_national_revenue_v2 USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v2_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v2_06 ON ba_monthly_national_revenue_v2 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v3_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v3_01 ON ba_monthly_national_revenue_v3 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v3_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v3_03 ON ba_monthly_national_revenue_v3 USING btree (calendar_year_month, advertiser_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v3_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v3_04 ON ba_monthly_national_revenue_v3 USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v3_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v3_06 ON ba_monthly_national_revenue_v3 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v4_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v4_01 ON ba_monthly_national_revenue_v4 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v4_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v4_02 ON ba_monthly_national_revenue_v4 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v4_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v4_03 ON ba_monthly_national_revenue_v4 USING btree (calendar_year_month, flight_id, process_id);


--
-- Name: idx_ba_monthly_national_revenue_v4_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v4_04 ON ba_monthly_national_revenue_v4 USING btree (calendar_year_month, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_national_revenue_v5_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_01 ON ba_monthly_national_revenue_v5_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v5_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_02 ON ba_monthly_national_revenue_v5_bk USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v5_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_03 ON ba_monthly_national_revenue_v5_bk USING btree (calendar_year_month, flight_id, process_id);


--
-- Name: idx_ba_monthly_national_revenue_v5_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_04 ON ba_monthly_national_revenue_v5_bk USING btree (month_since_2005, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_publisher_revenue_v4_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v4_01 ON ba_monthly_publisher_revenue_v4 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_publisher_revenue_v4_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v4_02 ON ba_monthly_publisher_revenue_v4 USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_publisher_revenue_v4_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v4_03 ON ba_monthly_publisher_revenue_v4 USING btree (process_id, flight_metric, month_since_2005);


--
-- Name: idx_ba_monthly_publisher_revenue_v4_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v4_04 ON ba_monthly_publisher_revenue_v4 USING btree (calendar_year_month, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_01 ON ba_monthly_publisher_revenue_v5_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_02 ON ba_monthly_publisher_revenue_v5_bk USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_03 ON ba_monthly_publisher_revenue_v5_bk USING btree (process_id, flight_metric, month_since_2005);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_04 ON ba_monthly_publisher_revenue_v5_bk USING btree (calendar_year_month, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_vlm_revenue_v4_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v4_01 ON ba_monthly_vlm_revenue_v4 USING btree (calendar_year_month, delivered_units, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v4_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v4_02 ON ba_monthly_vlm_revenue_v4 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v4_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v4_03 ON ba_monthly_vlm_revenue_v4 USING btree (calendar_year_month, flight_id, process_id);


--
-- Name: idx_ba_monthly_vlm_revenue_v4_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v4_04 ON ba_monthly_vlm_revenue_v4 USING btree (month_since_2005, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_01 ON ba_monthly_vlm_revenue_v5_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_02 ON ba_monthly_vlm_revenue_v5_bk USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_03 ON ba_monthly_vlm_revenue_v5_bk USING btree (calendar_year_month, flight_id, process_id);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_04 ON ba_monthly_vlm_revenue_v5_bk USING btree (month_since_2005, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_05 ON ba_monthly_vlm_revenue_v5_bk USING btree (month_since_2005, delivered_units, is_active);


--
-- Name: idx_daily_agg_adm_data_feed_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_adm_data_feed_01 ON daily_agg_adm_data_feed USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_adm_data_feed_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_adm_data_feed_02 ON daily_agg_adm_data_feed USING btree (eastern_date_sk, creative_id, is_active);


--
-- Name: idx_daily_agg_adm_data_feed_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_adm_data_feed_03 ON daily_agg_adm_data_feed USING btree (eastern_date_sk, creative_id, placement_id, is_active);


--
-- Name: idx_daily_agg_adm_data_feed_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_adm_data_feed_04 ON daily_agg_adm_data_feed USING btree (eastern_date_sk, creative_id, placement_id, flight_id, is_active);


SET default_tablespace = adstraffic_tablespace;

--
-- Name: idx_daily_agg_adm_dbclk_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_dbclk_revenue_01 ON daily_agg_adm_dbclk_revenue USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_adm_dbclk_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_dbclk_revenue_02 ON daily_agg_adm_dbclk_revenue USING btree (eastern_date_sk, full_date, calendar_year_month, month_since_2005, date_since_1970, flight_id);


SET default_tablespace = adm_tablespace;

--
-- Name: idx_daily_agg_api_revenue_by_partner_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_01 ON daily_agg_api_revenue_by_partner USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_api_revenue_by_partner_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_02 ON daily_agg_api_revenue_by_partner USING btree (eastern_date_sk, process_id, partner_id, channel_id);


--
-- Name: idx_daily_agg_api_revenue_by_partner_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_03 ON daily_agg_api_revenue_by_partner USING btree (eastern_date_sk, process_id, partner_postal_code);


--
-- Name: idx_daily_agg_api_revenue_by_partner_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_04 ON daily_agg_api_revenue_by_partner USING btree (eastern_date_sk, process_id, metro_id);


--
-- Name: idx_daily_agg_api_revenue_by_partner_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_05 ON daily_agg_api_revenue_by_partner USING btree (full_date, is_active, partner_id, channel_id);


--
-- Name: idx_daily_agg_api_revenue_by_partner_n01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_n01 ON daily_agg_api_revenue_by_partner_v2 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_api_revenue_by_partner_n02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_n02 ON daily_agg_api_revenue_by_partner_v2 USING btree (eastern_date_sk, process_id, partner_id, channel_id);


--
-- Name: idx_daily_agg_api_revenue_by_partner_n03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_n03 ON daily_agg_api_revenue_by_partner_v2 USING btree (eastern_date_sk, process_id, partner_postal_code);


--
-- Name: idx_daily_agg_api_revenue_by_partner_n04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_n04 ON daily_agg_api_revenue_by_partner_v2 USING btree (eastern_date_sk, process_id, metro_id);


--
-- Name: idx_daily_agg_api_revenue_by_partner_v3_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_v3_01 ON daily_agg_api_revenue_by_partner_v3 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_api_revenue_by_partner_v3_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_v3_02 ON daily_agg_api_revenue_by_partner_v3 USING btree (eastern_date_sk, process_id, partner_id, channel_id);


--
-- Name: idx_daily_agg_api_revenue_by_partner_v3_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_v3_03 ON daily_agg_api_revenue_by_partner_v3 USING btree (eastern_date_sk, process_id, partner_postal_code);


--
-- Name: idx_daily_agg_api_revenue_by_partner_v3_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_api_revenue_by_partner_v3_04 ON daily_agg_api_revenue_by_partner_v3 USING btree (eastern_date_sk, process_id, metro_id);


--
-- Name: idx_daily_agg_dc_order_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_order_revenue_01 ON daily_agg_revenue_by_order USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_dc_order_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_order_revenue_02 ON daily_agg_revenue_by_order USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_dc_order_yesterday_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_order_yesterday_revenue_01 ON daily_agg_revenue_by_order_yesterday USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_dc_order_yesterday_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_order_yesterday_revenue_02 ON daily_agg_revenue_by_order_yesterday USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_dc_order_yesterday_revenue_beta_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_order_yesterday_revenue_beta_01 ON daily_agg_revenue_by_order_yesterday_beta USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_dc_order_yesterday_revenue_beta_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_order_yesterday_revenue_beta_02 ON daily_agg_revenue_by_order_yesterday_beta USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_dc_publisher_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_publisher_revenue_01 ON daily_agg_revenue_by_publisher USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_dc_publisher_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_dc_publisher_revenue_02 ON daily_agg_revenue_by_publisher USING btree (eastern_date_sk, publisher_id, is_active);


--
-- Name: idx_daily_agg_local_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_local_revenue_01 ON daily_agg_local_revenue USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_local_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_local_revenue_02 ON daily_agg_local_revenue USING btree (date_since_1970, is_active);


--
-- Name: idx_daily_agg_network_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_01 ON daily_agg_network_revenue USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_02 ON daily_agg_network_revenue USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_03 ON daily_agg_network_revenue USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m01_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m01_01 ON daily_agg_network_revenue_by_publisher_y2013_m01 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m01_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m01_02 ON daily_agg_network_revenue_by_publisher_y2013_m01 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m02_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m02_01 ON daily_agg_network_revenue_by_publisher_y2013_m02 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m02_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m02_02 ON daily_agg_network_revenue_by_publisher_y2013_m02 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m03_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m03_01 ON daily_agg_network_revenue_by_publisher_y2013_m03 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m03_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m03_02 ON daily_agg_network_revenue_by_publisher_y2013_m03 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m04_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m04_01 ON daily_agg_network_revenue_by_publisher_y2013_m04 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m04_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m04_02 ON daily_agg_network_revenue_by_publisher_y2013_m04 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m05_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m05_01 ON daily_agg_network_revenue_by_publisher_y2013_m05 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m05_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m05_02 ON daily_agg_network_revenue_by_publisher_y2013_m05 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m06_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m06_01 ON daily_agg_network_revenue_by_publisher_y2013_m06 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m06_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m06_02 ON daily_agg_network_revenue_by_publisher_y2013_m06 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m07_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m07_01 ON daily_agg_network_revenue_by_publisher_y2013_m07 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m07_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m07_02 ON daily_agg_network_revenue_by_publisher_y2013_m07 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m08_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m08_01 ON daily_agg_network_revenue_by_publisher_y2013_m08 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m08_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m08_02 ON daily_agg_network_revenue_by_publisher_y2013_m08 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m09_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m09_01 ON daily_agg_network_revenue_by_publisher_y2013_m09 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m09_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m09_02 ON daily_agg_network_revenue_by_publisher_y2013_m09 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m10_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m10_01 ON daily_agg_network_revenue_by_publisher_y2013_m10 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m10_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m10_02 ON daily_agg_network_revenue_by_publisher_y2013_m10 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m11_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m11_01 ON daily_agg_network_revenue_by_publisher_y2013_m11 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m11_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m11_02 ON daily_agg_network_revenue_by_publisher_y2013_m11 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m12_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m12_01 ON daily_agg_network_revenue_by_publisher_y2013_m12 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_by_publisher_y2013_m12_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_by_publisher_y2013_m12_02 ON daily_agg_network_revenue_by_publisher_y2013_m12 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m01_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m01_01 ON daily_agg_network_revenue_y2013_m01 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m01_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m01_02 ON daily_agg_network_revenue_y2013_m01 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m01_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m01_03 ON daily_agg_network_revenue_y2013_m01 USING btree (period, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m01_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m01_04 ON daily_agg_network_revenue_y2013_m01 USING btree (order_id, flight_id, eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m02_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m02_01 ON daily_agg_network_revenue_y2013_m02 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m02_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m02_02 ON daily_agg_network_revenue_y2013_m02 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m02_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m02_03 ON daily_agg_network_revenue_y2013_m02 USING btree (period, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m02_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m02_04 ON daily_agg_network_revenue_y2013_m02 USING btree (order_id, flight_id, eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m03_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m03_01 ON daily_agg_network_revenue_y2013_m03 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m03_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m03_02 ON daily_agg_network_revenue_y2013_m03 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m03_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m03_03 ON daily_agg_network_revenue_y2013_m03 USING btree (period, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m03_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m03_04 ON daily_agg_network_revenue_y2013_m03 USING btree (order_id, flight_id, eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m04_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m04_01 ON daily_agg_network_revenue_y2013_m04 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m04_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m04_02 ON daily_agg_network_revenue_y2013_m04 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m04_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m04_03 ON daily_agg_network_revenue_y2013_m04 USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m05_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m05_01 ON daily_agg_network_revenue_y2013_m05 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m05_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m05_02 ON daily_agg_network_revenue_y2013_m05 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m05_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m05_03 ON daily_agg_network_revenue_y2013_m05 USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m06_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m06_01 ON daily_agg_network_revenue_y2013_m06 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m06_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m06_02 ON daily_agg_network_revenue_y2013_m06 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m06_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m06_03 ON daily_agg_network_revenue_y2013_m06 USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m07_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m07_01 ON daily_agg_network_revenue_y2013_m07 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m07_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m07_02 ON daily_agg_network_revenue_y2013_m07 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m07_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m07_03 ON daily_agg_network_revenue_y2013_m07 USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m08_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m08_01 ON daily_agg_network_revenue_y2013_m08 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m08_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m08_02 ON daily_agg_network_revenue_y2013_m08 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m08_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m08_03 ON daily_agg_network_revenue_y2013_m08 USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m09_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m09_01 ON daily_agg_network_revenue_y2013_m09 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m09_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m09_02 ON daily_agg_network_revenue_y2013_m09 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_network_revenue_y2013_m09_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_network_revenue_y2013_m09_03 ON daily_agg_network_revenue_y2013_m09 USING btree (full_date, network_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_order_atc_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_01 ON daily_agg_order_atc USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_order_atc_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_02 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_order_atc_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_03 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, placement_id, is_active);


--
-- Name: idx_daily_agg_order_atc_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_04 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, placement_id, creative_id, is_active);


--
-- Name: idx_daily_agg_order_atc_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_05 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, placement_id, creative_id, flight_id, is_active);


--
-- Name: idx_daily_agg_order_atc_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_06 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, placement_id, creative_id, flight_id, website_id, publisher_id, is_active);


--
-- Name: idx_daily_agg_order_atc_07; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_07 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, placement_id, creative_id, flight_id, website_id, is_active);


--
-- Name: idx_daily_agg_order_atc_08; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_atc_08 ON daily_agg_order_atc USING btree (eastern_date_sk, order_id, placement_id, creative_id, flight_id, website_id, publisher_id, partner_id, is_active);


--
-- Name: idx_daily_agg_order_flight_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_flight_01 ON daily_agg_order_flight USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_order_flight_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_flight_02 ON daily_agg_order_flight USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_order_flight_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_flight_03 ON daily_agg_order_flight USING btree (eastern_date_sk, order_id, flight_id, is_active);


--
-- Name: idx_daily_agg_order_flight_beta_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_flight_beta_01 ON daily_agg_order_flight_beta USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_order_flight_beta_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_flight_beta_02 ON daily_agg_order_flight_beta USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_order_flight_beta_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_flight_beta_03 ON daily_agg_order_flight_beta USING btree (eastern_date_sk, order_id, is_active, metric);


--
-- Name: idx_daily_agg_order_placement_creative_flight_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_placement_creative_flight_01 ON daily_agg_order_placement_creative_flight USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_order_placement_creative_flight_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_placement_creative_flight_02 ON daily_agg_order_placement_creative_flight USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_order_placement_creative_flight_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_placement_creative_flight_03 ON daily_agg_order_placement_creative_flight USING btree (eastern_date_sk, order_id, placement_id, is_active);


--
-- Name: idx_daily_agg_order_placement_creative_flight_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_placement_creative_flight_04 ON daily_agg_order_placement_creative_flight USING btree (eastern_date_sk, order_id, placement_id, creative_id, is_active);


--
-- Name: idx_daily_agg_order_placement_creative_flight_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_order_placement_creative_flight_05 ON daily_agg_order_placement_creative_flight USING btree (eastern_date_sk, order_id, placement_id, creative_id, flight_id, is_active);


--
-- Name: idx_daily_agg_publisher_website_partner_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_publisher_website_partner_01 ON daily_agg_publisher_website_partner USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_publisher_website_partner_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_publisher_website_partner_02 ON daily_agg_publisher_website_partner USING btree (eastern_date_sk, publisher_id, is_active);


--
-- Name: idx_daily_agg_publisher_website_partner_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_publisher_website_partner_03 ON daily_agg_publisher_website_partner USING btree (eastern_date_sk, publisher_id, website_id, is_active);


--
-- Name: idx_daily_agg_publisher_website_partner_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_publisher_website_partner_04 ON daily_agg_publisher_website_partner USING btree (eastern_date_sk, publisher_id, website_id, partner_id, is_active);


--
-- Name: idx_daily_agg_revenue_by_order_beta_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_by_order_beta_01 ON daily_agg_revenue_by_order_beta USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_revenue_by_order_beta_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_by_order_beta_02 ON daily_agg_revenue_by_order_beta USING btree (eastern_date_sk, order_id, is_active);


--
-- Name: idx_daily_agg_revenue_by_order_beta_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_by_order_beta_03 ON daily_agg_revenue_by_order_beta USING btree (eastern_date_sk, order_id, is_active, process_id);


--
-- Name: idx_daily_agg_revenue_by_order_beta_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_by_order_beta_04 ON daily_agg_revenue_by_order_beta USING btree (eastern_date_sk, order_id, end_date, process_id);


--
-- Name: idx_daily_agg_revenue_by_order_beta_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_by_order_beta_05 ON daily_agg_revenue_by_order_beta USING btree (eastern_date_sk, process_id, is_active);


--
-- Name: idx_daily_agg_revenue_by_order_beta_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_by_order_beta_06 ON daily_agg_revenue_by_order_beta USING btree (order_id, calendar_year_month, metric);


--
-- Name: idx_daily_agg_revenue_statistics_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_revenue_statistics_01 ON daily_agg_revenue_statistics USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_network_fct_channel_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_channel_01 ON daily_network_fct_channel USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_network_fct_channel_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_channel_02 ON daily_network_fct_channel USING btree (full_date, is_active);


--
-- Name: idx_daily_network_fct_channel_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_channel_03 ON daily_network_fct_channel USING btree (period, is_active);


--
-- Name: idx_daily_network_fct_performance_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_performance_01 ON daily_network_fct_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_network_fct_performance_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_performance_02 ON daily_network_fct_performance USING btree (full_date, is_active);


--
-- Name: idx_daily_network_fct_performance_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_performance_03 ON daily_network_fct_performance USING btree (period, is_active);


--
-- Name: idx_daily_network_fct_performance_by_portal_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_performance_by_portal_01 ON daily_network_fct_performance_by_portal USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_network_fct_performance_by_portal_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_performance_by_portal_02 ON daily_network_fct_performance_by_portal USING btree (full_date, is_active);


--
-- Name: idx_daily_network_fct_performance_by_portal_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_performance_by_portal_03 ON daily_network_fct_performance_by_portal USING btree (period, is_active);


--
-- Name: idx_daily_network_fct_request_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_request_01 ON daily_network_fct_request USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_network_fct_request_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_request_02 ON daily_network_fct_request USING btree (full_date, is_active);


--
-- Name: idx_daily_network_fct_request_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_request_03 ON daily_network_fct_request USING btree (period, is_active);


--
-- Name: idx_daily_network_fct_request_beta_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_request_beta_01 ON daily_network_fct_request_beta USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_network_fct_request_beta_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_request_beta_02 ON daily_network_fct_request_beta USING btree (full_date, is_active);


--
-- Name: idx_daily_network_fct_request_beta_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_network_fct_request_beta_03 ON daily_network_fct_request_beta USING btree (period, is_active);


--
-- Name: idx_monthly_agg_adm_data_feed_v2_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_data_feed_v2_01 ON monthly_agg_adm_data_feed_v2 USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_agg_adm_data_feed_v2_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_data_feed_v2_02 ON monthly_agg_adm_data_feed_v2 USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_agg_adm_data_feed_v2_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_data_feed_v2_03 ON monthly_agg_adm_data_feed_v2 USING btree (month_since_2005, network_id, calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, adm_order_id, partner_id, portal_id, flight_id, flight_impressions, flight_metric, flight_rate, flight_budget, flight_start_date, flight_end_date, flight_cancelled_at, flight_paused_at, total_num_of_days_in_billing_period, is_active);


--
-- Name: idx_monthly_agg_adm_data_feed_v2_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_data_feed_v2_04 ON monthly_agg_adm_data_feed_v2 USING btree (month_since_2005, network_id, is_active);


--
-- Name: idx_monthly_agg_adm_dbclk_revenue_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_dbclk_revenue_01 ON monthly_agg_adm_dbclk_revenue USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_agg_adm_dbclk_revenue_02; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_dbclk_revenue_02 ON monthly_agg_adm_dbclk_revenue USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_agg_adm_dbclk_revenue_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_dbclk_revenue_03 ON monthly_agg_adm_dbclk_revenue USING btree (month_since_2005, network_id, calendar_year_month, eastern_start_date_sk, eastern_end_date_sk, adm_order_id, partner_id, portal_id, flight_id, flight_impressions, flight_metric, flight_rate, flight_budget, flight_start_date, flight_end_date, flight_cancelled_at, flight_paused_at, total_num_of_days_in_billing_period, is_active);


--
-- Name: idx_monthly_agg_adm_dbclk_revenue_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_agg_adm_dbclk_revenue_04 ON monthly_agg_adm_dbclk_revenue USING btree (month_since_2005, network_id, is_active);


--
-- Name: idx_monthly_forecast_01; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_01 ON monthly_forecast USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_forecast_03; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_03 ON monthly_forecast USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_monthly_forecast_04; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_04 ON monthly_forecast USING btree (calendar_year_month, portal_id, is_active);


--
-- Name: idx_monthly_forecast_05; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_05 ON monthly_forecast USING btree (calendar_year_month, partner_module_id, is_active);


--
-- Name: idx_monthly_forecast_06; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_06 ON monthly_forecast USING btree (calendar_year_month, device_type_id, is_active);


--
-- Name: idx_monthly_forecast_08; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_08 ON monthly_forecast USING btree (calendar_year_month, country_id, is_active);


--
-- Name: idx_monthly_forecast_09; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_09 ON monthly_forecast USING btree (calendar_year_month, region_id, is_active);


--
-- Name: idx_monthly_forecast_10; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_10 ON monthly_forecast USING btree (calendar_year_month, metro_id, is_active);


--
-- Name: idx_monthly_forecast_11; Type: INDEX; Schema: adm; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_monthly_forecast_11 ON monthly_forecast USING btree (calendar_year_month, content_category_id, is_active);


SET search_path = adnetwork, pg_catalog;

SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_adsense_dblck_channel_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_adsense_dblck_channel_01 ON adsense_dblck_channel USING btree (eastern_date_sk, ga_channel_sk);


SET default_tablespace = '';

--
-- Name: idx_ba_monthly_adnetwork_summary_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_adnetwork_summary_01 ON ba_monthly_adnetwork_summary_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_adnetwork_summary_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_adnetwork_summary_02 ON ba_monthly_adnetwork_summary_bk USING btree (paid_impressions, gross_revenue, p_net_revenue, v_net_revenue, fullfilled_code_y, calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_adnetwork_summary_03; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_adnetwork_summary_03 ON ba_monthly_adnetwork_summary_bk USING btree (calendar_year_month, parent1_name, ad_network_id, partner_id, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_ba_monthly_adsense_dbclk_channel_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_adsense_dbclk_channel_01 ON ba_monthly_adsense_dbclk_channel_bk USING btree (calendar_year_month, is_active);


SET default_tablespace = '';

--
-- Name: idx_ba_monthly_cg_mobile_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_cg_mobile_performance_01 ON ba_monthly_cg_mobile_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_cg_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_cg_performance_01 ON ba_monthly_cg_performance_bk USING btree (calendar_year_month, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_ba_monthly_it_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_it_performance_01 ON ba_monthly_it_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_jt_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_jt_performance_01 ON ba_monthly_jt_performance_bk USING btree (calendar_year_month, is_active);


SET default_tablespace = '';

--
-- Name: idx_ba_monthly_kt_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_kt_performance_01 ON ba_monthly_kt_performance_bk USING btree (calendar_year_month, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_ba_monthly_mm_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_mm_performance_01 ON ba_monthly_mm_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_mx_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_mx_performance_01 ON ba_monthly_mx_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_sp_blue_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_sp_blue_performance_01 ON ba_monthly_sp_blue_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_wh_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_wh_performance_01 ON ba_monthly_wh_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_yp_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_yp_performance_01 ON ba_monthly_yp_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_yp_sb_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_ba_monthly_yp_sb_performance_01 ON ba_monthly_yp_sb_performance_bk USING btree (calendar_year_month, is_active);


--
-- Name: idx_daily_adnetwork_summary_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_adnetwork_summary_01 ON daily_adnetwork_summary USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_adsense_dbclk_channel_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_adsense_dbclk_channel_01 ON daily_adsense_dbclk_channel USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_adsense_dbclk_channel_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_adsense_dbclk_channel_02 ON daily_adsense_dbclk_channel USING btree (full_date, partner_id, is_active);


SET default_tablespace = '';

--
-- Name: idx_daily_cg_mobile_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_daily_cg_mobile_performance_01 ON daily_cg_mobile_performance USING btree (full_date, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_daily_cg_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_cg_performance_01 ON daily_cg_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_cg_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_cg_performance_02 ON daily_cg_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_ga_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_ga_performance_01 ON daily_ga_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_it_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_it_performance_01 ON daily_it_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_it_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_it_performance_02 ON daily_it_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_jt_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_jt_performance_01 ON daily_jt_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_jt_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_jt_performance_02 ON daily_jt_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_jt_summary_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_jt_summary_01 ON daily_jt_summary USING btree (eastern_date_sk, is_active);


SET default_tablespace = '';

--
-- Name: idx_daily_kt_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_daily_kt_performance_01 ON daily_kt_performance USING btree (eastern_date_sk, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_daily_mm_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_mm_performance_01 ON daily_mm_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_mm_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_mm_performance_02 ON daily_mm_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_mx_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_mx_performance_01 ON daily_mx_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_mx_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_mx_performance_02 ON daily_mx_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_sp_blue_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_sp_blue_performance_01 ON daily_sp_blue_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_sp_blue_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_sp_blue_performance_02 ON daily_sp_blue_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_sp_blue_performance_bk_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_sp_blue_performance_bk_01 ON daily_sp_blue_performance_bk USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_sp_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_sp_performance_01 ON daily_sp_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_wh_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_wh_performance_01 ON daily_wh_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_wh_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_wh_performance_02 ON daily_wh_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_yp_no_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_yp_no_performance_01 ON daily_yp_no_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_yp_no_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_yp_no_performance_02 ON daily_yp_no_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_yp_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_yp_performance_01 ON daily_yp_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_yp_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_yp_performance_02 ON daily_yp_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_daily_yp_sb_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_yp_sb_performance_01 ON daily_yp_sb_performance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_yp_sb_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_daily_yp_sb_performance_02 ON daily_yp_sb_performance USING btree (full_date, partner_id, is_active);


--
-- Name: idx_monthly_adnetwork_summary_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_adnetwork_summary_01 ON monthly_adnetwork_summary USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_adnetwork_summary_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_adnetwork_summary_by_date_01 ON monthly_adnetwork_summary_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_adsense_dbclk_channel_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_adsense_dbclk_channel_01 ON monthly_adsense_dbclk_channel USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_adsense_dbclk_channel_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_adsense_dbclk_channel_by_date_01 ON monthly_adsense_dbclk_channel_by_date USING btree (calendar_year_month, is_active);


SET default_tablespace = '';

--
-- Name: idx_monthly_cg_mobile_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_monthly_cg_mobile_performance_01 ON monthly_cg_mobile_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_cg_mobile_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_monthly_cg_mobile_performance_by_date_01 ON monthly_cg_mobile_performance_by_date USING btree (calendar_year_month, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_monthly_cg_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_cg_performance_01 ON monthly_cg_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_cg_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_cg_performance_by_date_01 ON monthly_cg_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_ga_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_ga_performance_01 ON monthly_ga_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_ga_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_ga_performance_by_date_01 ON monthly_ga_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_it_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_it_performance_01 ON monthly_it_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_it_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_it_performance_by_date_01 ON monthly_it_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_jt_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_jt_performance_01 ON monthly_jt_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_jt_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_jt_performance_by_date_01 ON monthly_jt_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_jt_performance_by_date_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_jt_performance_by_date_02 ON monthly_jt_performance_by_date USING btree (calendar_year_month, full_date, is_active);


SET default_tablespace = '';

--
-- Name: idx_monthly_kt_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_monthly_kt_performance_01 ON monthly_kt_performance USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_kt_performance_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_monthly_kt_performance_02 ON monthly_kt_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_kt_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_monthly_kt_performance_by_date_01 ON monthly_kt_performance_by_date USING btree (calendar_year_month, is_active);


SET default_tablespace = adnetworks_tablespace;

--
-- Name: idx_monthly_mm_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_mm_performance_01 ON monthly_mm_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_mm_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_mm_performance_by_date_01 ON monthly_mm_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_mx_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_mx_performance_01 ON monthly_mx_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_mx_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_mx_performance_by_date_01 ON monthly_mx_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_mx_performance_by_date_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_mx_performance_by_date_02 ON monthly_mx_performance_by_date USING btree (calendar_year_month, full_date, is_active);


--
-- Name: idx_monthly_sp_blue_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_sp_blue_performance_01 ON monthly_sp_blue_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_sp_blue_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_sp_blue_performance_by_date_01 ON monthly_sp_blue_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_sp_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_sp_performance_01 ON monthly_sp_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_sp_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_sp_performance_by_date_01 ON monthly_sp_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_wh_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_wh_performance_01 ON monthly_wh_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_wh_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_wh_performance_by_date_01 ON monthly_wh_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_wh_performance_by_date_02; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_wh_performance_by_date_02 ON monthly_wh_performance_by_date USING btree (calendar_year_month, full_date, is_active);


--
-- Name: idx_monthly_yp_no_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_yp_no_performance_01 ON monthly_yp_no_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_yp_no_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_yp_no_performance_by_date_01 ON monthly_yp_no_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_yp_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_yp_performance_01 ON monthly_yp_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_yp_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_yp_performance_by_date_01 ON monthly_yp_performance_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_yp_sb_performance_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_yp_sb_performance_01 ON monthly_yp_sb_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_yp_sb_performance_by_date_01; Type: INDEX; Schema: adnetwork; Owner: warehouse_dbo; Tablespace: adnetworks_tablespace
--

CREATE INDEX idx_monthly_yp_sb_performance_by_date_01 ON monthly_yp_sb_performance_by_date USING btree (calendar_year_month, is_active);


SET search_path = adsops, pg_catalog;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: idx_daily_agg_delivery_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_01 ON daily_agg_delivery USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_02 ON daily_agg_delivery USING btree (eastern_date_sk, process_id);


--
-- Name: idx_daily_agg_delivery_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_03 ON daily_agg_delivery USING btree (property_id, property_name, is_active);


--
-- Name: idx_daily_agg_delivery_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_04 ON daily_agg_delivery USING btree (portal_id, portal_name, is_active);


--
-- Name: idx_daily_agg_delivery_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_05 ON daily_agg_delivery USING btree (publisher_id, publisher_name, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_01 ON daily_agg_delivery_adnetwork_publisher USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_02 ON daily_agg_delivery_adnetwork_publisher USING btree (eastern_date_sk, process_id);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_03 ON daily_agg_delivery_adnetwork_publisher USING btree (eastern_date_sk, process_id, partner_id, portal_id, ad_network_id);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_04 ON daily_agg_delivery_adnetwork_publisher USING btree (ad_network_id, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_05 ON daily_agg_delivery_adnetwork_publisher USING btree (property_id, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_beta_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_beta_01 ON daily_agg_delivery_adnetwork_publisher_beta USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_beta_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_beta_02 ON daily_agg_delivery_adnetwork_publisher_beta USING btree (eastern_date_sk, process_id);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_beta_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_beta_03 ON daily_agg_delivery_adnetwork_publisher_beta USING btree (eastern_date_sk, process_id, partner_id, portal_id, ad_network_id);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_beta_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_beta_04 ON daily_agg_delivery_adnetwork_publisher_beta USING btree (ad_network_id, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_beta_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_beta_05 ON daily_agg_delivery_adnetwork_publisher_beta USING btree (property_id, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_v3_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_v3_01 ON daily_agg_delivery_adnetwork_publisher_v3 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_v3_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_v3_02 ON daily_agg_delivery_adnetwork_publisher_v3 USING btree (eastern_date_sk, process_id);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_v3_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_v3_03 ON daily_agg_delivery_adnetwork_publisher_v3 USING btree (eastern_date_sk, process_id, partner_id, portal_id, ad_network_id);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_v3_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_v3_04 ON daily_agg_delivery_adnetwork_publisher_v3 USING btree (ad_network_id, is_active);


--
-- Name: idx_daily_agg_delivery_adnetwork_publisher_v3_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_adnetwork_publisher_v3_05 ON daily_agg_delivery_adnetwork_publisher_v3 USING btree (property_id, is_active);


SET default_tablespace = '';

--
-- Name: idx_daily_agg_delivery_advertiser_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_daily_agg_delivery_advertiser_01 ON daily_agg_delivery_advertiser USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_advertiser_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_daily_agg_delivery_advertiser_02 ON daily_agg_delivery_advertiser USING btree (eastern_date_sk, advertiser_id, order_id, is_active);


--
-- Name: idx_daily_agg_delivery_advertiser_beta_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_daily_agg_delivery_advertiser_beta_01 ON daily_agg_delivery_advertiser_beta USING btree (eastern_date_sk, is_active);


SET default_tablespace = adstraffic_tablespace;

--
-- Name: idx_daily_agg_delivery_publisher_property_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_01 ON daily_agg_delivery_publisher_property USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_02 ON daily_agg_delivery_publisher_property USING btree (eastern_date_sk, process_id);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_01 ON daily_agg_delivery_publisher_property_beta USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_02 ON daily_agg_delivery_publisher_property_beta USING btree (eastern_date_sk, process_id);


SET default_tablespace = adm_tablespace;

--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m03_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m03_01 ON daily_agg_delivery_publisher_property_beta_y2013_m03 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m03_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m03_02 ON daily_agg_delivery_publisher_property_beta_y2013_m03 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m03_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m03_03 ON daily_agg_delivery_publisher_property_beta_y2013_m03 USING btree (full_date, publisher_id, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m03_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m03_04 ON daily_agg_delivery_publisher_property_beta_y2013_m03 USING btree (full_date, publisher_id, property_id, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m03_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m03_05 ON daily_agg_delivery_publisher_property_beta_y2013_m03 USING btree (full_date, publisher_id, property_id, channel_id, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m04_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m04_01 ON daily_agg_delivery_publisher_property_beta_y2013_m04 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m04_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m04_02 ON daily_agg_delivery_publisher_property_beta_y2013_m04 USING btree (full_date, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m04_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m04_03 ON daily_agg_delivery_publisher_property_beta_y2013_m04 USING btree (full_date, publisher_id, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m04_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m04_04 ON daily_agg_delivery_publisher_property_beta_y2013_m04 USING btree (full_date, publisher_id, property_id, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_beta_y2013_m04_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adm_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_beta_y2013_m04_05 ON daily_agg_delivery_publisher_property_beta_y2013_m04 USING btree (full_date, publisher_id, property_id, channel_id, is_active);


SET default_tablespace = adstraffic_tablespace;

--
-- Name: idx_daily_agg_delivery_publisher_property_v3_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_v3_01 ON daily_agg_delivery_publisher_property_v3 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_delivery_publisher_property_v3_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_delivery_publisher_property_v3_02 ON daily_agg_delivery_publisher_property_v3 USING btree (eastern_date_sk, process_id);


--
-- Name: idx_daily_agg_local_zero_delivered_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_local_zero_delivered_01 ON daily_agg_local_zero_delivered USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_local_zero_delivered_v1_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_local_zero_delivered_v1_01 ON daily_agg_local_zero_delivered_v1 USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_low_rate_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_low_rate_01 ON daily_agg_low_rate USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_infobright_counts_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_infobright_counts_01 ON daily_infobright_counts USING btree (eastern_date_sk, is_active);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_beta_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_beta_01 ON monthly_agg_delivery_adnetwork_publisher_beta USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_beta_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_beta_02 ON monthly_agg_delivery_adnetwork_publisher_beta USING btree (month_since_2005, process_id);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_beta_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_beta_03 ON monthly_agg_delivery_adnetwork_publisher_beta USING btree (month_since_2005, process_id, partner_id, portal_id, ad_network_id);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_beta_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_beta_04 ON monthly_agg_delivery_adnetwork_publisher_beta USING btree (ad_network_id, is_active);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_beta_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_beta_05 ON monthly_agg_delivery_adnetwork_publisher_beta USING btree (property_id, is_active);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_v3_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_v3_01 ON monthly_agg_delivery_adnetwork_publisher_v3 USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_v3_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_v3_02 ON monthly_agg_delivery_adnetwork_publisher_v3 USING btree (month_since_2005, process_id);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_v3_03; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_v3_03 ON monthly_agg_delivery_adnetwork_publisher_v3 USING btree (month_since_2005, process_id, partner_id, portal_id, ad_network_id);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_v3_04; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_v3_04 ON monthly_agg_delivery_adnetwork_publisher_v3 USING btree (ad_network_id, is_active);


--
-- Name: idx_monthly_agg_delivery_adnetwork_publisher_v3_05; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_adnetwork_publisher_v3_05 ON monthly_agg_delivery_adnetwork_publisher_v3 USING btree (property_id, is_active);


--
-- Name: idx_monthly_agg_delivery_publisher_property_beta_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_publisher_property_beta_01 ON monthly_agg_delivery_publisher_property_beta USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_agg_delivery_publisher_property_beta_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_publisher_property_beta_02 ON monthly_agg_delivery_publisher_property_beta USING btree (month_since_2005, process_id);


--
-- Name: idx_monthly_agg_delivery_publisher_property_v3_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_publisher_property_v3_01 ON monthly_agg_delivery_publisher_property_v3 USING btree (month_since_2005, is_active);


--
-- Name: idx_monthly_agg_delivery_publisher_property_v3_02; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_delivery_publisher_property_v3_02 ON monthly_agg_delivery_publisher_property_v3 USING btree (month_since_2005, process_id);


--
-- Name: idx_weekly_agg_mcclatchy_off_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_weekly_agg_mcclatchy_off_01 ON weekly_agg_mcclatchy_off USING btree (year_week, is_active);


--
-- Name: idx_weekly_low_rate_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_weekly_low_rate_01 ON weekly_low_rate USING btree (year_week, is_active);


--
-- Name: idx_weekly_new_booked_01; Type: INDEX; Schema: adsops; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_weekly_new_booked_01 ON weekly_new_booked USING btree (year_week, is_active);


SET search_path = adstraffic, pg_catalog;

--
-- Name: idx_daily_ad_serving_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_01 ON daily_ad_serving_stats USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_02 ON daily_ad_serving_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_03 ON daily_ad_serving_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_04 ON daily_ad_serving_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_content_category_01 ON daily_ad_serving_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_content_category_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_content_category_02 ON daily_ad_serving_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_content_category_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_content_category_03 ON daily_ad_serving_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_content_category_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_content_category_04 ON daily_ad_serving_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_device_01 ON daily_ad_serving_stats_by_device USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_device_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_device_02 ON daily_ad_serving_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_device_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_device_03 ON daily_ad_serving_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_device_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_device_04 ON daily_ad_serving_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_ad_serving_stats_by_device_05; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_ad_serving_stats_by_device_05 ON daily_ad_serving_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, organic, is_active);


--
-- Name: idx_daily_adcel_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_adcel_stats_01 ON daily_adcel_stats USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_attributed_request_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_attributed_request_stats_01 ON daily_attributed_request_stats USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_attributed_request_stats_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_attributed_request_stats_02 ON daily_attributed_request_stats USING btree (eastern_date_sk, partner_id, portal_id, is_active);


--
-- Name: idx_daily_attributed_request_stats_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_attributed_request_stats_03 ON daily_attributed_request_stats USING btree (portal_id);


--
-- Name: idx_daily_db_sellthrough_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_01 ON daily_db_sellthrough USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_db_sellthrough_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_02 ON daily_db_sellthrough USING btree (eastern_date_sk, dc_site_id, is_active);


--
-- Name: idx_daily_db_sellthrough_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_03 ON daily_db_sellthrough USING btree (eastern_date_sk, metro_id, is_active);


--
-- Name: idx_daily_db_sellthrough_by_metro_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_by_metro_01 ON daily_db_sellthrough_by_metro USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_db_sellthrough_by_metro_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_by_metro_02 ON daily_db_sellthrough_by_metro USING btree (eastern_date_sk, metro_id, is_active);


--
-- Name: idx_daily_db_sellthrough_by_site_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_by_site_01 ON daily_db_sellthrough_by_site USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_db_sellthrough_by_site_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_db_sellthrough_by_site_02 ON daily_db_sellthrough_by_site USING btree (eastern_date_sk, dc_site_id, is_active);


--
-- Name: idx_daily_event_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_event_stats_01 ON daily_event_stats USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_stats_by_adnet_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_event_stats_by_adnet_01 ON daily_event_stats_by_adnet USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_event_stats_by_content_category_01 ON daily_event_stats_by_content_category USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_event_stats_by_device_01 ON daily_event_stats_by_device USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_stats_by_dma_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_event_stats_by_dma_01 ON daily_event_stats_by_dma USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_filled_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_01 ON daily_filled_stats USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_filled_stats_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_02 ON daily_filled_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_filled_stats_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_03 ON daily_filled_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_filled_stats_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_04 ON daily_filled_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_filled_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_content_category_01 ON daily_filled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_filled_stats_by_content_category_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_content_category_02 ON daily_filled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_filled_stats_by_content_category_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_content_category_03 ON daily_filled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_filled_stats_by_content_category_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_content_category_04 ON daily_filled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_filled_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_device_01 ON daily_filled_stats_by_device USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_filled_stats_by_device_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_device_02 ON daily_filled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_filled_stats_by_device_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_device_03 ON daily_filled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_filled_stats_by_device_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_device_04 ON daily_filled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_filled_stats_by_device_05; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_device_05 ON daily_filled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, organic, is_active);


--
-- Name: idx_daily_filled_stats_by_dma_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_dma_01 ON daily_filled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_filled_stats_by_dma_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_dma_02 ON daily_filled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_filled_stats_by_dma_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_dma_03 ON daily_filled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_filled_stats_by_dma_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_filled_stats_by_dma_04 ON daily_filled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_geo_quality_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_geo_quality_01 ON daily_geo_quality USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_location_stats_by_metro_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_metro_01 ON daily_location_stats_by_metro USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_location_stats_by_metro_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_metro_02 ON daily_location_stats_by_metro USING btree (eastern_date_sk, country_id, is_active);


--
-- Name: idx_daily_location_stats_by_metro_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_metro_03 ON daily_location_stats_by_metro USING btree (eastern_date_sk, country_id, metro_id, is_active);


--
-- Name: idx_daily_location_stats_by_metro_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_metro_04 ON daily_location_stats_by_metro USING btree (eastern_date_sk, country_id, metro_id, postal_code_id, is_active);


--
-- Name: idx_daily_location_stats_by_region_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_region_01 ON daily_location_stats_by_region USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_location_stats_by_region_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_region_02 ON daily_location_stats_by_region USING btree (eastern_date_sk, country_id, is_active);


--
-- Name: idx_daily_location_stats_by_region_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_region_03 ON daily_location_stats_by_region USING btree (eastern_date_sk, country_id, region_id, is_active);


--
-- Name: idx_daily_location_stats_by_region_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_location_stats_by_region_04 ON daily_location_stats_by_region USING btree (eastern_date_sk, country_id, region_id, postal_code_id, is_active);


--
-- Name: idx_daily_olap_attributed_request_by_uis_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_attributed_request_by_uis_01 ON daily_olap_attributed_request_by_uis USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_olap_event_by_portal_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_event_by_portal_01 ON daily_olap_event_by_portal USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_olap_filled_by_portal_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_filled_by_portal_01 ON daily_olap_filled_by_portal USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_olap_filled_by_portal_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_filled_by_portal_02 ON daily_olap_filled_by_portal USING btree (eastern_date_sk, parent1_id, is_active);


--
-- Name: idx_daily_olap_filled_by_portal_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_filled_by_portal_03 ON daily_olap_filled_by_portal USING btree (eastern_date_sk, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_olap_filled_by_portal_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_filled_by_portal_04 ON daily_olap_filled_by_portal USING btree (eastern_date_sk, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_olap_unfilled_by_portal_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_unfilled_by_portal_01 ON daily_olap_unfilled_by_portal USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_olap_unfilled_by_portal_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_unfilled_by_portal_02 ON daily_olap_unfilled_by_portal USING btree (eastern_date_sk, parent1_id, is_active);


--
-- Name: idx_daily_olap_unfilled_by_portal_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_unfilled_by_portal_03 ON daily_olap_unfilled_by_portal USING btree (eastern_date_sk, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_olap_unfilled_by_portal_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_olap_unfilled_by_portal_04 ON daily_olap_unfilled_by_portal USING btree (eastern_date_sk, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_content_category_01 ON daily_olap_trxids_by_content_category USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_trxids_stats_by_content_category_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_content_category_02 ON daily_olap_trxids_by_content_category USING btree (eastern_date_sk, parent1_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_content_category_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_content_category_03 ON daily_olap_trxids_by_content_category USING btree (eastern_date_sk, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_content_category_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_content_category_04 ON daily_olap_trxids_by_content_category USING btree (eastern_date_sk, parent1_id, partner_id, content_category_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_device_01 ON daily_olap_trxids_by_device USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_trxids_stats_by_device_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_device_02 ON daily_olap_trxids_by_device USING btree (eastern_date_sk, parent1_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_device_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_device_03 ON daily_olap_trxids_by_device USING btree (eastern_date_sk, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_device_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_device_04 ON daily_olap_trxids_by_device USING btree (eastern_date_sk, parent1_id, partner_id, organic, is_active);


--
-- Name: idx_daily_trxids_stats_by_dma_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_dma_01 ON daily_olap_trxids_by_portal USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_trxids_stats_by_dma_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_dma_02 ON daily_olap_trxids_by_portal USING btree (eastern_date_sk, parent1_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_dma_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_dma_03 ON daily_olap_trxids_by_portal USING btree (eastern_date_sk, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_trxids_stats_by_dma_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_trxids_stats_by_dma_04 ON daily_olap_trxids_by_portal USING btree (eastern_date_sk, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_unfilled_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_01 ON daily_unfilled_stats USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_unfilled_stats_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_02 ON daily_unfilled_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_unfilled_stats_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_03 ON daily_unfilled_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_unfilled_stats_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_04 ON daily_unfilled_stats USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_content_category_01 ON daily_unfilled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_content_category_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_content_category_02 ON daily_unfilled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_content_category_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_content_category_03 ON daily_unfilled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_content_category_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_content_category_04 ON daily_unfilled_stats_by_content_category USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_device_01 ON daily_unfilled_stats_by_device USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_device_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_device_02 ON daily_unfilled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_device_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_device_03 ON daily_unfilled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_device_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_device_04 ON daily_unfilled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_device_05; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_device_05 ON daily_unfilled_stats_by_device USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, organic, is_active);


--
-- Name: idx_daily_unfilled_stats_by_dma_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_dma_01 ON daily_unfilled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_dma_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_dma_02 ON daily_unfilled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, parent1_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_dma_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_dma_03 ON daily_unfilled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_daily_unfilled_stats_by_dma_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_unfilled_stats_by_dma_04 ON daily_unfilled_stats_by_dma USING btree (eastern_date_sk, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_01 ON monthly_ad_serving_stats USING btree (calendar_year_month, month_since_2005, ad_network_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_02 ON monthly_ad_serving_stats USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_03 ON monthly_ad_serving_stats USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_04 ON monthly_ad_serving_stats USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_content_category_01 ON monthly_ad_serving_stats_by_content_category USING btree (calendar_year_month, month_since_2005, ad_network_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_content_category_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_content_category_02 ON monthly_ad_serving_stats_by_content_category USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_content_category_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_content_category_03 ON monthly_ad_serving_stats_by_content_category USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_content_category_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_content_category_04 ON monthly_ad_serving_stats_by_content_category USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_date_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_date_01 ON monthly_ad_serving_stats_by_date USING btree (calendar_year_month, month_since_2005, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_date_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_date_02 ON monthly_ad_serving_stats_by_date USING btree (calendar_year_month, month_since_2005, ad_network_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_date_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_date_03 ON monthly_ad_serving_stats_by_date USING btree (calendar_year_month, month_since_2005, full_date, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_date_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_date_04 ON monthly_ad_serving_stats_by_date USING btree (calendar_year_month, month_since_2005, full_date, ad_network_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_device_01 ON monthly_ad_serving_stats_by_device USING btree (calendar_year_month, month_since_2005, ad_network_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_device_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_device_02 ON monthly_ad_serving_stats_by_device USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_device_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_device_03 ON monthly_ad_serving_stats_by_device USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_device_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_device_04 ON monthly_ad_serving_stats_by_device USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_ad_serving_stats_by_device_05; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_ad_serving_stats_by_device_05 ON monthly_ad_serving_stats_by_device USING btree (calendar_year_month, month_since_2005, ad_network_id, parent1_id, partner_id, portal_id, organic, is_active);


--
-- Name: idx_monthly_unfilled_stats_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_01 ON monthly_unfilled_stats USING btree (calendar_year_month, ad_network_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_02 ON monthly_unfilled_stats USING btree (calendar_year_month, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_03 ON monthly_unfilled_stats USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_04 ON monthly_unfilled_stats USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_content_category_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_content_category_01 ON monthly_unfilled_stats_by_content_category USING btree (calendar_year_month, ad_network_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_content_category_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_content_category_02 ON monthly_unfilled_stats_by_content_category USING btree (calendar_year_month, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_content_category_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_content_category_03 ON monthly_unfilled_stats_by_content_category USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_content_category_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_content_category_04 ON monthly_unfilled_stats_by_content_category USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_date_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_date_01 ON monthly_unfilled_stats_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_device_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_device_01 ON monthly_unfilled_stats_by_device USING btree (calendar_year_month, ad_network_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_device_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_device_02 ON monthly_unfilled_stats_by_device USING btree (calendar_year_month, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_device_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_device_03 ON monthly_unfilled_stats_by_device USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_device_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_device_04 ON monthly_unfilled_stats_by_device USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, portal_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_device_05; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_device_05 ON monthly_unfilled_stats_by_device USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, portal_id, organic, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_dma_01; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_dma_01 ON monthly_unfilled_stats_by_dma USING btree (calendar_year_month, ad_network_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_dma_02; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_dma_02 ON monthly_unfilled_stats_by_dma USING btree (calendar_year_month, ad_network_id, parent1_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_dma_03; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_dma_03 ON monthly_unfilled_stats_by_dma USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, is_active);


--
-- Name: idx_monthly_unfilled_stats_by_dma_04; Type: INDEX; Schema: adstraffic; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_unfilled_stats_by_dma_04 ON monthly_unfilled_stats_by_dma USING btree (calendar_year_month, ad_network_id, parent1_id, partner_id, portal_id, is_active);


SET search_path = billing, pg_catalog;

SET default_tablespace = billing_tablespace;

--
-- Name: idx_ba_monthly_adnetwork_summary_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_adnetwork_summary_01 ON ba_monthly_adnetwork_summary USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_adsense_dbclk_channel_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_adsense_dbclk_channel_01 ON ba_monthly_adsense_dbclk_channel USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_advance_digital_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_advance_digital_01 ON ba_monthly_advance_digital USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_advance_digital_03; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_advance_digital_03 ON ba_monthly_advance_digital USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_advance_digital_04; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_advance_digital_04 ON ba_monthly_advance_digital USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_advance_digital_05; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_advance_digital_05 ON ba_monthly_advance_digital USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_ba_monthly_advance_digital_06; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_advance_digital_06 ON ba_monthly_advance_digital USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_cg_mobile_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_cg_mobile_performance_01 ON ba_monthly_cg_mobile_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_cg_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_cg_performance_01 ON ba_monthly_cg_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_it_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_it_performance_01 ON ba_monthly_it_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_jt_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_jt_performance_01 ON ba_monthly_jt_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_kt_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_kt_performance_01 ON ba_monthly_kt_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_01 ON ba_monthly_local_revenue_v5 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_03; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_03 ON ba_monthly_local_revenue_v5 USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_04; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_04 ON ba_monthly_local_revenue_v5 USING btree (calendar_year_month, adm_order_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_05; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_05 ON ba_monthly_local_revenue_v5 USING btree (calendar_year_month, partner_id, is_active);


--
-- Name: idx_ba_monthly_local_revenue_v5_06; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_local_revenue_v5_06 ON ba_monthly_local_revenue_v5 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_mm_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_mm_performance_01 ON ba_monthly_mm_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_mx_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_mx_performance_01 ON ba_monthly_mx_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v5_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_01 ON ba_monthly_national_revenue_v5 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v5_02; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_02 ON ba_monthly_national_revenue_v5 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_national_revenue_v5_03; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_03 ON ba_monthly_national_revenue_v5 USING btree (calendar_year_month, flight_id, process_id);


--
-- Name: idx_ba_monthly_national_revenue_v5_04; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_national_revenue_v5_04 ON ba_monthly_national_revenue_v5 USING btree (month_since_2005, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_01 ON ba_monthly_publisher_revenue_v5 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_02; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_02 ON ba_monthly_publisher_revenue_v5 USING btree (calendar_year_month, publisher_id, is_active);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_03; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_03 ON ba_monthly_publisher_revenue_v5 USING btree (process_id, flight_metric, month_since_2005);


--
-- Name: idx_ba_monthly_publisher_revenue_v5_04; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_publisher_revenue_v5_04 ON ba_monthly_publisher_revenue_v5 USING btree (calendar_year_month, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_sp_blue_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_sp_blue_performance_01 ON ba_monthly_sp_blue_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_01 ON ba_monthly_vlm_revenue_v5 USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_02; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_02 ON ba_monthly_vlm_revenue_v5 USING btree (calendar_year_month, flight_id, is_active);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_03; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_03 ON ba_monthly_vlm_revenue_v5 USING btree (calendar_year_month, flight_id, process_id);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_04; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_04 ON ba_monthly_vlm_revenue_v5 USING btree (month_since_2005, flight_id, process_id, flight_metric, data_source);


--
-- Name: idx_ba_monthly_vlm_revenue_v5_05; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_vlm_revenue_v5_05 ON ba_monthly_vlm_revenue_v5 USING btree (month_since_2005, delivered_units, is_active);


--
-- Name: idx_ba_monthly_wh_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_wh_performance_01 ON ba_monthly_wh_performance USING btree (calendar_year_month, is_active);


SET default_tablespace = '';

--
-- Name: idx_ba_monthly_yp_no_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: 
--

CREATE INDEX idx_ba_monthly_yp_no_performance_01 ON ba_monthly_yp_sb_performance USING btree (calendar_year_month, is_active);


SET default_tablespace = billing_tablespace;

--
-- Name: idx_ba_monthly_yp_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_yp_performance_01 ON ba_monthly_yp_performance USING btree (calendar_year_month, is_active);


--
-- Name: idx_ba_monthly_yp_sb_performance_01; Type: INDEX; Schema: billing; Owner: warehouse_dbo; Tablespace: billing_tablespace
--

CREATE INDEX idx_ba_monthly_yp_sb_performance_01 ON ba_monthly_yp_sb_performance USING btree (calendar_year_month, is_active);


SET search_path = control, pg_catalog;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: idx_data_file_file_name; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_data_file_file_name ON data_file USING btree (lower((file_name)::text));


SET default_tablespace = control_tablespace;

--
-- Name: idx_pro_audit_01; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_01 ON pro_audit USING btree (message_type);


--
-- Name: idx_pro_audit_02; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_02 ON pro_audit USING btree (message_type, job_id);


--
-- Name: idx_pro_audit_03; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_03 ON pro_audit USING btree (message_type, message_name);


--
-- Name: idx_pro_audit_04; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_04 ON pro_audit USING btree (audit_time);


--
-- Name: idx_pro_audit_run_xaction_01; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_run_xaction_01 ON pro_audit_run_xaction USING btree (obj_id);


--
-- Name: idx_pro_audit_run_xaction_02; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_run_xaction_02 ON pro_audit_run_xaction USING btree (message_type);


--
-- Name: idx_pro_audit_run_xaction_03; Type: INDEX; Schema: control; Owner: warehouse_dbo; Tablespace: control_tablespace
--

CREATE INDEX idx_pro_audit_run_xaction_03 ON pro_audit_run_xaction USING btree (actor);


SET search_path = dbclk, pg_catalog;

SET default_tablespace = adstraffic_tablespace;

--
-- Name: idx_daily_agg_adm_creative_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_creative_01 ON daily_agg_adm_creative USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_adm_creative_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_creative_02 ON daily_agg_adm_creative USING btree (eastern_date_sk, adm_creative_id, is_active);


--
-- Name: idx_daily_agg_adm_creative_03; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_creative_03 ON daily_agg_adm_creative USING btree (eastern_date_sk, adm_placement_id, is_active);


--
-- Name: idx_daily_agg_adm_creative_delivery_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_creative_delivery_01 ON daily_agg_adm_creative_delivery USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_adm_creative_delivery_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_adm_creative_delivery_02 ON daily_agg_adm_creative_delivery USING btree (eastern_date_sk, creative_id, is_active);


--
-- Name: idx_daily_agg_campaign_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_campaign_01 ON daily_agg_campaign USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_campaign_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_campaign_02 ON daily_agg_campaign USING btree (eastern_date_sk, campaign_id, is_active);


--
-- Name: idx_daily_agg_publisher_device_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_publisher_device_01 ON daily_agg_publisher_device USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_publisher_device_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_publisher_device_02 ON daily_agg_publisher_device USING btree (eastern_date_sk, publisher_id, is_active);


--
-- Name: idx_daily_agg_publisher_device_03; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_publisher_device_03 ON daily_agg_publisher_device USING btree (eastern_date_sk, publisher_id, device, is_active);


--
-- Name: idx_daily_agg_publishers_day_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_publishers_day_01 ON daily_agg_publishers_day USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_publishers_day_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_publishers_day_02 ON daily_agg_publishers_day USING btree (eastern_date_sk, publisher_id, is_active);


--
-- Name: idx_daily_agg_site_campaign_day_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_campaign_day_01 ON daily_agg_site_campaign_day USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_site_campaign_day_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_campaign_day_02 ON daily_agg_site_campaign_day USING btree (eastern_date_sk, site_id, is_active);


--
-- Name: idx_daily_agg_site_campaign_day_03; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_campaign_day_03 ON daily_agg_site_campaign_day USING btree (eastern_date_sk, site_id, campaign_id, is_active);


--
-- Name: idx_daily_agg_site_day_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_day_01 ON daily_agg_site_day USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_site_day_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_day_02 ON daily_agg_site_day USING btree (eastern_date_sk, site_id, is_active);


--
-- Name: idx_daily_agg_site_order_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_order_01 ON daily_agg_site_order USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_agg_site_order_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_order_02 ON daily_agg_site_order USING btree (eastern_date_sk, publisher_id, is_active);


--
-- Name: idx_daily_agg_site_order_03; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_order_03 ON daily_agg_site_order USING btree (eastern_date_sk, publisher_id, campaign_id, is_active);


--
-- Name: idx_daily_agg_site_order_04; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_order_04 ON daily_agg_site_order USING btree (eastern_date_sk, publisher_id, campaign_id, ad_id, is_active);


--
-- Name: idx_daily_agg_site_order_05; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_daily_agg_site_order_05 ON daily_agg_site_order USING btree (eastern_date_sk, publisher_id, campaign_id, ad_id, creative_id, is_active);


--
-- Name: idx_monthly_agg_site_01; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_site_01 ON monthly_agg_site USING btree (calendar_year_month, month_since_2005, dc_site_id, is_active);


--
-- Name: idx_monthly_agg_site_02; Type: INDEX; Schema: dbclk; Owner: warehouse_dbo; Tablespace: adstraffic_tablespace
--

CREATE INDEX idx_monthly_agg_site_02 ON monthly_agg_site USING btree (dc_site_id);


SET search_path = evttracker, pg_catalog;

SET default_tablespace = evttracker_tablespace;

--
-- Name: idx_daily_event_adcel_stats_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_adcel_stats_01 ON daily_event_adcel_stats USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_by_distance_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_by_distance_01 ON daily_event_by_distance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_dma_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_01 ON daily_event_dma USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_dma_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_02 ON daily_event_dma USING btree (flight_id, is_active);


--
-- Name: idx_daily_event_dma_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_03 ON daily_event_dma USING btree (full_date, flight_id, event_name, is_active);


--
-- Name: idx_daily_event_dma_hour_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_hour_01 ON daily_event_dma_by_hour USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_dma_hour_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_hour_02 ON daily_event_dma_by_hour USING btree (full_date, flight_id, event_name, is_active);


--
-- Name: idx_daily_event_dma_hour_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_hour_03 ON daily_event_dma_by_hour USING btree (full_date, event_name, is_active);


--
-- Name: idx_daily_event_dma_hour_04; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_dma_hour_04 ON daily_event_dma_by_hour USING btree (full_date, is_active);


--
-- Name: idx_daily_event_download_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_download_01 ON daily_event_download USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_location_by_distance_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_location_by_distance_01 ON daily_event_location_by_distance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_maps_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_01 ON daily_event_maps USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_maps_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_02 ON daily_event_maps USING btree (full_date, id, event_name, is_active);


--
-- Name: idx_daily_event_maps_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_03 ON daily_event_maps USING btree (event_name, is_active);


--
-- Name: idx_daily_event_maps_04; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_04 ON daily_event_maps USING btree (id, is_active);


--
-- Name: idx_daily_event_maps_05; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_05 ON daily_event_maps USING btree (full_date, id, event_name, latitude, longitude, is_active);


--
-- Name: idx_daily_event_maps_olap_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_01 ON daily_event_maps_olap USING btree (eastern_date_sk);


--
-- Name: idx_daily_event_maps_olap_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_02 ON daily_event_maps_olap USING btree (id, event_name);


--
-- Name: idx_daily_event_maps_olap_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_03 ON daily_event_maps_olap USING btree (event_name);


--
-- Name: idx_daily_event_maps_olap_04; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_04 ON daily_event_maps_olap USING btree (id);


--
-- Name: idx_daily_event_maps_olap_05; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_05 ON daily_event_maps_olap USING btree (full_date, id, event_name, longitude, latitude);


--
-- Name: idx_daily_event_maps_olap_min_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_min_02 ON daily_event_maps_olap_min USING btree (id);


--
-- Name: idx_daily_event_maps_olap_min_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_olap_min_03 ON daily_event_maps_olap_min USING btree (event_name);


--
-- Name: idx_daily_event_maps_tmp_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_tmp_01 ON daily_event_maps_tmp USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_maps_tmp_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_tmp_02 ON daily_event_maps_tmp USING btree (full_date, id, event_name, is_active);


--
-- Name: idx_daily_event_maps_tmp_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_tmp_03 ON daily_event_maps_tmp USING btree (event_name, is_active);


--
-- Name: idx_daily_event_maps_tmp_04; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_maps_tmp_04 ON daily_event_maps_tmp USING btree (id, is_active);


--
-- Name: idx_daily_event_stats_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_stats_01 ON daily_event_stats USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_stats_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_stats_02 ON daily_event_stats USING btree (flight_id);


--
-- Name: idx_daily_event_stats_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_stats_03 ON daily_event_stats USING btree (eastern_date_sk, is_active, flight_id);


--
-- Name: idx_daily_event_stats_adnet_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_stats_adnet_01 ON daily_event_stats_adnet USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_stats_by_hour_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_stats_by_hour_01 ON daily_event_stats_by_hour USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_x_value_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_01 ON daily_event_x_value USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_x_value_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_02 ON daily_event_x_value USING btree (full_date, flight_id, is_active);


--
-- Name: idx_daily_event_x_value_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_03 ON daily_event_x_value USING btree (full_date, is_active);


--
-- Name: idx_daily_event_x_value_04; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_04 ON daily_event_x_value USING btree (flight_id, is_active);


--
-- Name: idx_daily_event_x_value_05; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_05 ON daily_event_x_value USING btree (flight_id);


--
-- Name: idx_daily_event_x_value_by_hour_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_by_hour_01 ON daily_event_x_value_by_hour USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_x_value_report_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_report_01 ON daily_event_x_value_report USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_event_x_value_report_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_report_02 ON daily_event_x_value_report USING btree (full_date, is_active);


--
-- Name: idx_daily_event_x_value_report_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_event_x_value_report_03 ON daily_event_x_value_report USING btree (full_date, flight_id, is_active);


--
-- Name: idx_daily_store_location_by_distance_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_store_location_by_distance_01 ON daily_store_location_by_distance USING btree (eastern_date_sk, is_active);


--
-- Name: idx_daily_store_location_by_distance_02; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_store_location_by_distance_02 ON daily_store_location_by_distance USING btree (full_date, flight_id, event_name, is_active);


--
-- Name: idx_daily_store_location_by_distance_03; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_store_location_by_distance_03 ON daily_store_location_by_distance USING btree (full_date, flight_id, is_active);


--
-- Name: idx_daily_store_location_by_distance_04; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_store_location_by_distance_04 ON daily_store_location_by_distance USING btree (full_date, is_active);


--
-- Name: idx_daily_store_location_by_distance_05; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_store_location_by_distance_05 ON daily_store_location_by_distance USING btree (flight_id, is_active);


--
-- Name: idx_daily_trane_stats_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_daily_trane_stats_01 ON daily_trane_stats USING btree (eastern_date_sk, is_active);


--
-- Name: idx_monthly_event_stats_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_monthly_event_stats_01 ON monthly_event_stats USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_event_stats_by_date_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_monthly_event_stats_by_date_01 ON monthly_event_stats_by_date USING btree (calendar_year_month, is_active);


--
-- Name: idx_monthly_event_stats_by_hour_01; Type: INDEX; Schema: evttracker; Owner: warehouse_dbo; Tablespace: evttracker_tablespace
--

CREATE INDEX idx_monthly_event_stats_by_hour_01 ON monthly_event_stats_by_hour USING btree (calendar_year_month, is_active);


SET search_path = refer, pg_catalog;

SET default_tablespace = refer_tablespace;

--
-- Name: idx_ad_network_dim_ad_network_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_ad_network_dim_ad_network_id ON ad_network_dim USING btree (ad_network_id);


--
-- Name: idx_ad_network_param_dim_ad_network_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_ad_network_param_dim_ad_network_id ON ad_network_param_dim USING btree (ad_network_id);


--
-- Name: idx_adm_advertiser_dim_advertiser_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_advertiser_dim_advertiser_id ON adm_advertiser_dim USING btree (advertiser_id);


--
-- Name: idx_adm_channel_dim_channel_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_channel_dim_channel_id ON adm_channel_dim USING btree (channel_id);


--
-- Name: idx_adm_creative_dim_bk_creative_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_creative_dim_bk_creative_id ON adm_creative_dim_bk USING btree (creative_id);


--
-- Name: idx_adm_creative_dim_creative_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_creative_dim_creative_id ON adm_creative_dim USING btree (creative_id);


--
-- Name: idx_adm_dim_adsizes_adsize_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_adsizes_adsize_id ON adm_dim_adsizes USING btree (adsize_id);


--
-- Name: idx_adm_dim_advertisers_advertiser_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_advertisers_advertiser_id ON adm_dim_advertisers USING btree (advertiser_id);


--
-- Name: idx_adm_dim_creatives_creative_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_creatives_creative_id ON adm_dim_creatives USING btree (creative_id);


--
-- Name: idx_adm_dim_flights_flight_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_flights_flight_id ON adm_dim_flights USING btree (flight_id);


--
-- Name: idx_adm_dim_flights_flight_id_01; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_flights_flight_id_01 ON adm_dim_flights USING btree (dt_effective, dt_expire);


--
-- Name: idx_adm_dim_io_lineitems_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_io_lineitems_id ON adm_dim_io_lineitems USING btree (billing_line_items_id);


--
-- Name: idx_adm_dim_orders_order_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_orders_order_id ON adm_dim_orders USING btree (order_id);


--
-- Name: idx_adm_dim_organizations_organization_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_organizations_organization_id ON adm_dim_organizations USING btree (organization_id);


--
-- Name: idx_adm_dim_platforms_platform_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_platforms_platform_id ON adm_dim_platforms USING btree (platform_id);


--
-- Name: idx_adm_dim_portals_portal_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_portals_portal_id ON adm_dim_portals USING btree (portal_id);


--
-- Name: idx_adm_dim_properties_property_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_properties_property_id ON adm_dim_properties USING btree (property_id);


--
-- Name: idx_adm_dim_propertygroups_propertygroup_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_propertygroups_propertygroup_id ON adm_dim_propertygroups USING btree (propertygroup_id);


--
-- Name: idx_adm_dim_publishers_publisher_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_publishers_publisher_id ON adm_dim_publishers USING btree (publisher_id);


--
-- Name: idx_adm_dim_publishers_publisher_id_01; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_dim_publishers_publisher_id_01 ON adm_dim_publishers USING btree (partner_group_id);


--
-- Name: idx_adm_flight_dim_bk_flight_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_flight_dim_bk_flight_id ON adm_flight_dim_bk USING btree (flight_id);


--
-- Name: idx_adm_flight_dim_flight_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_flight_dim_flight_id ON adm_flight_dim USING btree (flight_id);


--
-- Name: idx_adm_flight_dim_flight_id_01; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_flight_dim_flight_id_01 ON adm_flight_dim USING btree (dt_effective, dt_expire);


--
-- Name: idx_adm_mapping_channels_channel_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_mapping_channels_channel_id ON adm_mapping_channels USING btree (channel_id);


--
-- Name: idx_adm_mapping_channels_mapping_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_mapping_channels_mapping_id ON adm_mapping_channels USING btree (mapping_id);


--
-- Name: idx_adm_mapping_portals_mapping_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_mapping_portals_mapping_id ON adm_mapping_portals USING btree (mapping_id);


--
-- Name: idx_adm_mapping_portals_portal_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_mapping_portals_portal_id ON adm_mapping_portals USING btree (portal_id);


--
-- Name: idx_adm_order_dim_bk_flight_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_order_dim_bk_flight_id ON adm_order_dim_bk USING btree (order_id);


--
-- Name: idx_adm_order_dim_flight_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_order_dim_flight_id ON adm_order_dim USING btree (order_id);


--
-- Name: idx_adm_organization_dim_organization_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_organization_dim_organization_id ON adm_organization_dim USING btree (organization_id);


--
-- Name: idx_adm_placement_dim_placement_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_placement_dim_placement_id ON adm_placement_dim USING btree (placement_id);


--
-- Name: idx_adm_portal_dim_portal_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_portal_dim_portal_id ON adm_portal_dim USING btree (portal_id);


--
-- Name: idx_adm_publication_dim_flight_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_publication_dim_flight_id ON adm_publication_dim USING btree (publication_id);


--
-- Name: idx_adm_publisher_dim_publisher_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_publisher_dim_publisher_id ON adm_publisher_dim USING btree (publisher_id);


--
-- Name: idx_adm_publisher_dim_publisher_id_01; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_publisher_dim_publisher_id_01 ON adm_publisher_dim USING btree (partner_group_id);


--
-- Name: idx_adm_website_dim_bk_website_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_website_dim_bk_website_id ON adm_website_dim_bk USING btree (website_id);


--
-- Name: idx_adm_website_dim_website_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_adm_website_dim_website_id ON adm_website_dim USING btree (website_id);


--
-- Name: idx_content_category_dim_content_category_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_content_category_dim_content_category_id ON content_category_dim USING btree (content_category_id);


--
-- Name: idx_date_dim_day_of_week; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_date_dim_day_of_week ON date_dim USING btree (day_of_week);


--
-- Name: idx_date_dim_full_date; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_date_dim_full_date ON date_dim USING btree (full_date);


--
-- Name: idx_date_dim_week_sunday_start; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_date_dim_week_sunday_start ON date_dim USING btree (week_sunday_start);


--
-- Name: idx_dc_ad_dim_dc_ad_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dc_ad_dim_dc_ad_id ON dc_ad_dim USING btree (dc_ad_id);


--
-- Name: idx_dc_order_dim_dc_order_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dc_order_dim_dc_order_id ON dc_order_dim USING btree (dc_order_id);


--
-- Name: idx_dc_site_dim_dc_site_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dc_site_dim_dc_site_id ON dc_site_dim USING btree (dc_site_id);


--
-- Name: idx_dfp_dim_ad_units_ad_unit_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_ad_units_ad_unit_id ON dfp_dim_ad_units USING btree (ad_unit_id);


--
-- Name: idx_dfp_dim_creatives_creative_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_creatives_creative_id ON dfp_dim_creatives USING btree (creative_id);


--
-- Name: idx_dfp_dim_line_items_line_item_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_line_items_line_item_id ON dfp_dim_line_items USING btree (line_item_id);


--
-- Name: idx_dfp_dim_lineitem_creatives_creative_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_lineitem_creatives_creative_id ON dfp_dim_lineitem_creatives USING btree (creative_id);


--
-- Name: idx_dfp_dim_lineitem_creatives_line_item_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_lineitem_creatives_line_item_id ON dfp_dim_lineitem_creatives USING btree (line_item_id);


--
-- Name: idx_dfp_dim_lineitem_targets_lineitem_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_lineitem_targets_lineitem_id ON dfp_dim_lineitem_targets USING btree (lineitem_id);


--
-- Name: idx_dfp_dim_orders_order_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_orders_order_id ON dfp_dim_orders USING btree (order_id);


--
-- Name: idx_dfp_dim_placements_placement_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_dfp_dim_placements_placement_id ON dfp_dim_placements USING btree (placement_id);


--
-- Name: idx_display_block_dim_display_block_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_display_block_dim_display_block_id ON display_block_dim USING btree (display_block_id);


--
-- Name: idx_event_dim_event_name; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_event_dim_event_name ON event_dim USING btree (event_name);


--
-- Name: idx_ga_channel_dim_ga_channel_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_ga_channel_dim_ga_channel_id ON ga_channel_dim USING btree (channel_name);


--
-- Name: idx_month_dim_date_sk_start_date_sk_end; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_month_dim_date_sk_start_date_sk_end ON month_dim USING btree (date_sk_start, date_sk_end);


--
-- Name: idx_network_type_dim_network_type; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_network_type_dim_network_type ON network_type_dim USING btree (network_type);


--
-- Name: idx_page_template_dim_page_template; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_page_template_dim_page_template ON page_template_dim USING btree (page_template);


--
-- Name: idx_partner_dim_keyword; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_partner_dim_keyword ON partner_dim USING btree (lower((keyword)::text));


--
-- Name: idx_partner_dim_partner_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_partner_dim_partner_id ON partner_dim USING btree (partner_id);


--
-- Name: idx_partner_module_dim_partner_module_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_partner_module_dim_partner_module_id ON partner_module_dim USING btree (partner_module_id);


--
-- Name: idx_point_of_interest_dim_point_of_interest_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_point_of_interest_dim_point_of_interest_id ON point_of_interest_dim USING btree (point_of_interest_id);


--
-- Name: idx_point_of_interest_dim_tmp_point_of_interest_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_point_of_interest_dim_tmp_point_of_interest_id ON point_of_interest_dim_tmp USING btree (point_of_interest_id);


--
-- Name: idx_portal_dim_portal_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_portal_dim_portal_id ON portal_dim USING btree (portal_id);


--
-- Name: idx_portal_host_dim_portal_host_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_portal_host_dim_portal_host_id ON portal_host_dim USING btree (portal_host_id);


--
-- Name: idx_pro_audit_report_name_dim_ad_network_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_pro_audit_report_name_dim_ad_network_id ON pro_audit_report_name_dim USING btree (obj_id);


--
-- Name: idx_referrer_hostname_dim_hostname; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_referrer_hostname_dim_hostname ON referrer_hostname_dim USING btree (hostname);


--
-- Name: idx_request_type_dim_request_type_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_request_type_dim_request_type_id ON request_type_dim USING btree (request_type_id);


--
-- Name: idx_revenue_share_dim_partner_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_revenue_share_dim_partner_id ON revenue_share_dim USING btree (partner_id);


--
-- Name: idx_revenue_share_dim_revenue_account_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_revenue_share_dim_revenue_account_id ON revenue_share_dim USING btree (account_id);


--
-- Name: idx_store_location_dim_store_location_id; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_store_location_dim_store_location_id ON store_location_dim USING btree (store_location_id);


--
-- Name: idx_time_dim_full_time; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_time_dim_full_time ON time_dim USING btree (full_time);


--
-- Name: idx_time_dim_hour24_of_day; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_time_dim_hour24_of_day ON time_dim USING btree (hour24_of_day);


--
-- Name: idx_time_dim_quarter_of_day; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE INDEX idx_time_dim_quarter_of_day ON time_dim USING btree (quarter_of_day);


--
-- Name: idx_user_agent_user_agent_name; Type: INDEX; Schema: refer; Owner: warehouse_dbo; Tablespace: refer_tablespace
--

CREATE UNIQUE INDEX idx_user_agent_user_agent_name ON user_agent_dim USING btree (user_agent_name);


SET search_path = staging, pg_catalog;

--
-- Name: adreq_jul_partner_sk_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: refer_tablespace
--

CREATE INDEX adreq_jul_partner_sk_idx ON t_jul_adreqs_fact USING btree (partner_sk);


--
-- Name: adreq_jul_portal_sk_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: refer_tablespace
--

CREATE INDEX adreq_jul_portal_sk_idx ON t_jul_adreqs_fact USING btree (portal_sk);


--
-- Name: adreq_jul_postalcode_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: refer_tablespace
--

CREATE INDEX adreq_jul_postalcode_idx ON t_jul_adreqs_fact USING btree (postalcode);


--
-- Name: adreq_jun_partner_sk_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: refer_tablespace
--

CREATE INDEX adreq_jun_partner_sk_idx ON t_jun_adreqs_fact USING btree (partner_sk);


--
-- Name: adreq_jun_portal_sk_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: refer_tablespace
--

CREATE INDEX adreq_jun_portal_sk_idx ON t_jun_adreqs_fact USING btree (portal_sk);


--
-- Name: adreq_jun_postalcode_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: refer_tablespace
--

CREATE INDEX adreq_jun_postalcode_idx ON t_jun_adreqs_fact USING btree (postalcode);


SET default_tablespace = staging_tablespace;

--
-- Name: idx_partner_module_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_partner_module_data_file_id ON stg_partner_module USING btree (data_file_id);

ALTER TABLE stg_partner_module CLUSTER ON idx_partner_module_data_file_id;


--
-- Name: idx_portal_host_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_portal_host_data_file_id ON stg_portal_host USING btree (data_file_id);


--
-- Name: idx_stg_ad_network_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_ad_network_data_file_id ON stg_ad_network USING btree (data_file_id);


--
-- Name: idx_stg_ad_network_param_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_ad_network_param_data_file_id ON stg_ad_network_param USING btree (data_file_id);


--
-- Name: idx_stg_adm_advertiser_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_advertiser_data_file_id ON stg_adm_advertiser USING btree (data_file_id);


--
-- Name: idx_stg_adm_channel_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_channel_data_file_id ON stg_adm_channel USING btree (data_file_id);


--
-- Name: idx_stg_adm_creative_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_creative_data_file_id ON stg_adm_creative USING btree (data_file_id);


--
-- Name: idx_stg_adm_flight_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_flight_data_file_id ON stg_adm_flight USING btree (data_file_id);


--
-- Name: idx_stg_adm_order_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_order_data_file_id ON stg_adm_order USING btree (data_file_id);


--
-- Name: idx_stg_adm_organization_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_organization_data_file_id ON stg_adm_organization USING btree (data_file_id);


--
-- Name: idx_stg_adm_placement_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_placement_data_file_id ON stg_adm_placement USING btree (data_file_id);


--
-- Name: idx_stg_adm_portal_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_portal_data_file_id ON stg_adm_portal USING btree (data_file_id);


--
-- Name: idx_stg_adm_publication_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_publication_data_file_id ON stg_adm_publication USING btree (data_file_id);


--
-- Name: idx_stg_adm_publisher_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_publisher_data_file_id ON stg_adm_publisher USING btree (data_file_id);


--
-- Name: idx_stg_adm_website_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_adm_website_data_file_id ON stg_adm_website USING btree (data_file_id);


--
-- Name: idx_stg_content_category_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_content_category_data_file_id ON stg_content_category USING btree (data_file_id);


--
-- Name: idx_stg_dc_order_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_dc_order_data_file_id ON stg_dc_site USING btree (data_file_id);


--
-- Name: idx_stg_dc_site_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_dc_site_data_file_id ON stg_dc_site USING btree (data_file_id);


--
-- Name: idx_stg_display_block_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_display_block_data_file_id ON stg_display_block USING btree (data_file_id);


--
-- Name: idx_stg_mapping_mm_partner_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_mapping_mm_partner_id ON stg_mapping_mm USING btree (partner_id);


--
-- Name: idx_stg_mapping_mm_portal_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_mapping_mm_portal_id ON stg_mapping_mm USING btree (portal_id);


--
-- Name: idx_stg_partner_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_partner_data_file_id ON stg_partner USING btree (data_file_id);


--
-- Name: idx_stg_portal_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_portal_data_file_id ON stg_portal USING btree (data_file_id);


--
-- Name: idx_stg_revenue_share_data_file_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_revenue_share_data_file_id ON stg_revenue_share USING btree (data_file_id);


--
-- Name: idx_stg_session_agg_values_uid_session; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE UNIQUE INDEX idx_stg_session_agg_values_uid_session ON stg_session_agg_values USING btree (uid, session);


--
-- Name: idx_stg_session_uid_session; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE UNIQUE INDEX idx_stg_session_uid_session ON stg_session USING btree (uid, session);


--
-- Name: idx_stg_wap_site_access_log_eastern_date; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_wap_site_access_log_eastern_date ON stg_wap_site_access_log USING btree (eastern_date);


--
-- Name: idx_stg_wap_site_access_log_referrer_hostname; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_wap_site_access_log_referrer_hostname ON stg_wap_site_access_log USING btree (referrer_hostname);


--
-- Name: idx_stg_wap_site_access_log_request_type_id; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_wap_site_access_log_request_type_id ON stg_wap_site_access_log USING btree (request_type_id);


--
-- Name: idx_stg_wap_site_access_log_uid_session; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_wap_site_access_log_uid_session ON stg_wap_site_access_log USING btree (uid, session);


--
-- Name: idx_stg_wap_site_access_log_user_agent; Type: INDEX; Schema: staging; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX idx_stg_wap_site_access_log_user_agent ON stg_wap_site_access_log USING btree (lower(user_agent));


--
-- Name: idx_t_location_dim_postalcode; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE INDEX idx_t_location_dim_postalcode ON t_location_dim USING btree (postalcode);


--
-- Name: zipcode_idx; Type: INDEX; Schema: staging; Owner: ejohnst; Tablespace: staging_tablespace
--

CREATE INDEX zipcode_idx ON t_dma_dim USING btree (zipcode);


SET search_path = verveloc, pg_catalog;

--
-- Name: location_country_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_country_id_idx ON location USING btree (country_id);


--
-- Name: location_metro_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_metro_id_idx ON location USING btree (metro_id);


--
-- Name: location_pl_country_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_pl_country_id_idx ON location USING btree (pl_country_id);


--
-- Name: location_pl_metro_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_pl_metro_id_idx ON location USING btree (pl_metro_id);


--
-- Name: location_pl_region_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_pl_region_id_idx ON location USING btree (pl_region_id);


--
-- Name: location_postal_code_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_postal_code_id_idx ON location USING btree (postal_code_id);


--
-- Name: location_region_id_idx; Type: INDEX; Schema: verveloc; Owner: warehouse_dbo; Tablespace: staging_tablespace
--

CREATE INDEX location_region_id_idx ON location USING btree (region_id);


SET search_path = adm, pg_catalog;

--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m01; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m01 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 2923) AND (new.eastern_date_sk <= 2953)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m01 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m02; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m02 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 2954) AND (new.eastern_date_sk <= 2981)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m02 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m03; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m03 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 2982) AND (new.eastern_date_sk <= 3012)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m03 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m04; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m04 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3013) AND (new.eastern_date_sk <= 3042)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m04 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m05; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m05 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3043) AND (new.eastern_date_sk <= 3073)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m05 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m06; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m06 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3074) AND (new.eastern_date_sk <= 3103)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m06 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m07; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m07 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3104) AND (new.eastern_date_sk <= 3134)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m07 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m08; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m08 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3135) AND (new.eastern_date_sk <= 3165)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m08 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m09; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m09 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3166) AND (new.eastern_date_sk <= 3195)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m09 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m10; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m10 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3196) AND (new.eastern_date_sk <= 3226)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m10 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m11; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m11 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3227) AND (new.eastern_date_sk <= 3256)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m11 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_by_publisher_insert_y2013_m12; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_by_publisher_insert_y2013_m12 AS ON INSERT TO daily_agg_network_revenue_by_publisher WHERE ((new.eastern_date_sk >= 3257) AND (new.eastern_date_sk <= 3287)) DO INSTEAD INSERT INTO daily_agg_network_revenue_by_publisher_y2013_m12 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, order_id, order_name, channel_id, channel_name, partner_id, partner_name, partner_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, api_revenue) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.order_id, new.order_name, new.channel_id, new.channel_name, new.partner_id, new.partner_name, new.partner_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.api_revenue);


--
-- Name: daily_agg_network_revenue_insert_y2013_m07; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_insert_y2013_m07 AS ON INSERT TO daily_agg_network_revenue WHERE ((new.eastern_date_sk >= 3104) AND (new.eastern_date_sk <= 3134)) DO INSTEAD INSERT INTO daily_agg_network_revenue_y2013_m07 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, placement_id, placement_name, organization_id, organization_name, advertiser_id, advertiser_name, order_id, order_name, flight_id, channel_id, channel_name, channel_keyword, partner_id, partner_name, partner_keyword, partner_description, parent1_id, parent1_name, portal_id, portal_name, portal_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, cf_factor, api_revenue, data_source, flight_ecpm) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.placement_id, new.placement_name, new.organization_id, new.organization_name, new.advertiser_id, new.advertiser_name, new.order_id, new.order_name, new.flight_id, new.channel_id, new.channel_name, new.channel_keyword, new.partner_id, new.partner_name, new.partner_keyword, new.partner_description, new.parent1_id, new.parent1_name, new.portal_id, new.portal_name, new.portal_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.cf_factor, new.api_revenue, new.data_source, new.flight_ecpm);


--
-- Name: daily_agg_network_revenue_insert_y2013_m08; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_insert_y2013_m08 AS ON INSERT TO daily_agg_network_revenue WHERE ((new.eastern_date_sk >= 3135) AND (new.eastern_date_sk <= 3165)) DO INSTEAD INSERT INTO daily_agg_network_revenue_y2013_m08 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, placement_id, placement_name, organization_id, organization_name, advertiser_id, advertiser_name, order_id, order_name, flight_id, channel_id, channel_name, channel_keyword, partner_id, partner_name, partner_keyword, partner_description, parent1_id, parent1_name, portal_id, portal_name, portal_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, cf_factor, api_revenue, data_source, flight_ecpm) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.placement_id, new.placement_name, new.organization_id, new.organization_name, new.advertiser_id, new.advertiser_name, new.order_id, new.order_name, new.flight_id, new.channel_id, new.channel_name, new.channel_keyword, new.partner_id, new.partner_name, new.partner_keyword, new.partner_description, new.parent1_id, new.parent1_name, new.portal_id, new.portal_name, new.portal_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.cf_factor, new.api_revenue, new.data_source, new.flight_ecpm);


--
-- Name: daily_agg_network_revenue_insert_y2013_m09; Type: RULE; Schema: adm; Owner: warehouse_dbo
--

CREATE RULE daily_agg_network_revenue_insert_y2013_m09 AS ON INSERT TO daily_agg_network_revenue WHERE ((new.eastern_date_sk >= 3166) AND (new.eastern_date_sk <= 3195)) DO INSTEAD INSERT INTO daily_agg_network_revenue_y2013_m09 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, period, network_id, network_name, publisher_id, publisher_name, property_id, property_name, placement_id, placement_name, organization_id, organization_name, advertiser_id, advertiser_name, order_id, order_name, flight_id, channel_id, channel_name, channel_keyword, partner_id, partner_name, partner_keyword, partner_description, parent1_id, parent1_name, portal_id, portal_name, portal_keyword, rpt_adm_portal_id, impressions, clicks, revenue, p_rev_share, v_rev_share, dt_lastchange, is_active, process_id, today_ys, today_estimate_revenue, total_paid_impressions, total_net_revenue, total_p_rev_share, total_v_rev_share, cf_factor, api_revenue, data_source, flight_ecpm) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.period, new.network_id, new.network_name, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.placement_id, new.placement_name, new.organization_id, new.organization_name, new.advertiser_id, new.advertiser_name, new.order_id, new.order_name, new.flight_id, new.channel_id, new.channel_name, new.channel_keyword, new.partner_id, new.partner_name, new.partner_keyword, new.partner_description, new.parent1_id, new.parent1_name, new.portal_id, new.portal_name, new.portal_keyword, new.rpt_adm_portal_id, new.impressions, new.clicks, new.revenue, new.p_rev_share, new.v_rev_share, new.dt_lastchange, new.is_active, new.process_id, new.today_ys, new.today_estimate_revenue, new.total_paid_impressions, new.total_net_revenue, new.total_p_rev_share, new.total_v_rev_share, new.cf_factor, new.api_revenue, new.data_source, new.flight_ecpm);


SET search_path = adsops, pg_catalog;

--
-- Name: daily_agg_delivery_publisher_property_beta_insert_y2013_m03; Type: RULE; Schema: adsops; Owner: warehouse_dbo
--

CREATE RULE daily_agg_delivery_publisher_property_beta_insert_y2013_m03 AS ON INSERT TO daily_agg_delivery_publisher_property_beta WHERE ((new.eastern_date_sk >= 2982) AND (new.eastern_date_sk <= 3012)) DO INSTEAD INSERT INTO daily_agg_delivery_publisher_property_beta_y2013_m03 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, publisher_id, publisher_name, property_id, property_name, partner_id, partner_name, partner_keyword, partner_description, portal_id, portal_name, portal_keyword, rpt_adm_portal_id, channel_id, channel_name, channel_keyword, pub_rev_share_percentage, adcel_requests, adcel_requests_by_adnetwork, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, response_percentage, daily_share_response_percentage, avg_daisy_chain_depth, undisplayed_impressions, undisplayed_percentage, verve_impressions, reported_impressions, pub_fill_percentage, impressions_discrepancy_percentage, clicks, ctr, cpm, unreported_revenue, reported_revenue, total_revenue, total_revenue_today, verve_revenue, verve_rpm, pub_revenue, pub_rpm, daily_rev_percentage, total_yes_responses_today, is_active, process_id, dt_lastchange, bannerclick_events) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.partner_id, new.partner_name, new.partner_keyword, new.partner_description, new.portal_id, new.portal_name, new.portal_keyword, new.rpt_adm_portal_id, new.channel_id, new.channel_name, new.channel_keyword, new.pub_rev_share_percentage, new.adcel_requests, new.adcel_requests_by_adnetwork, new.fullfilled_code_count, new.fullfilled_code_y, new.fullfilled_code_n, new.fullfilled_code_e, new.fullfilled_code_t, new.response_percentage, new.daily_share_response_percentage, new.avg_daisy_chain_depth, new.undisplayed_impressions, new.undisplayed_percentage, new.verve_impressions, new.reported_impressions, new.pub_fill_percentage, new.impressions_discrepancy_percentage, new.clicks, new.ctr, new.cpm, new.unreported_revenue, new.reported_revenue, new.total_revenue, new.total_revenue_today, new.verve_revenue, new.verve_rpm, new.pub_revenue, new.pub_rpm, new.daily_rev_percentage, new.total_yes_responses_today, new.is_active, new.process_id, new.dt_lastchange, new.bannerclick_events);


--
-- Name: daily_agg_delivery_publisher_property_beta_y2013_m04; Type: RULE; Schema: adsops; Owner: warehouse_dbo
--

CREATE RULE daily_agg_delivery_publisher_property_beta_y2013_m04 AS ON INSERT TO daily_agg_delivery_publisher_property_beta WHERE ((new.eastern_date_sk >= 3013) AND (new.eastern_date_sk <= 3042)) DO INSTEAD INSERT INTO daily_agg_delivery_publisher_property_beta_y2013_m04 (eastern_date_sk, full_date, calendar_year_month, month_since_2005, publisher_id, publisher_name, property_id, property_name, partner_id, partner_name, partner_keyword, partner_description, portal_id, portal_name, portal_keyword, rpt_adm_portal_id, channel_id, channel_name, channel_keyword, pub_rev_share_percentage, adcel_requests, adcel_requests_by_adnetwork, fullfilled_code_count, fullfilled_code_y, fullfilled_code_n, fullfilled_code_e, fullfilled_code_t, response_percentage, daily_share_response_percentage, avg_daisy_chain_depth, undisplayed_impressions, undisplayed_percentage, verve_impressions, reported_impressions, pub_fill_percentage, impressions_discrepancy_percentage, clicks, ctr, cpm, unreported_revenue, reported_revenue, total_revenue, total_revenue_today, verve_revenue, verve_rpm, pub_revenue, pub_rpm, daily_rev_percentage, total_yes_responses_today, is_active, process_id, dt_lastchange, bannerclick_events) VALUES (new.eastern_date_sk, new.full_date, new.calendar_year_month, new.month_since_2005, new.publisher_id, new.publisher_name, new.property_id, new.property_name, new.partner_id, new.partner_name, new.partner_keyword, new.partner_description, new.portal_id, new.portal_name, new.portal_keyword, new.rpt_adm_portal_id, new.channel_id, new.channel_name, new.channel_keyword, new.pub_rev_share_percentage, new.adcel_requests, new.adcel_requests_by_adnetwork, new.fullfilled_code_count, new.fullfilled_code_y, new.fullfilled_code_n, new.fullfilled_code_e, new.fullfilled_code_t, new.response_percentage, new.daily_share_response_percentage, new.avg_daisy_chain_depth, new.undisplayed_impressions, new.undisplayed_percentage, new.verve_impressions, new.reported_impressions, new.pub_fill_percentage, new.impressions_discrepancy_percentage, new.clicks, new.ctr, new.cpm, new.unreported_revenue, new.reported_revenue, new.total_revenue, new.total_revenue_today, new.verve_revenue, new.verve_rpm, new.pub_revenue, new.pub_rpm, new.daily_rev_percentage, new.total_yes_responses_today, new.is_active, new.process_id, new.dt_lastchange, new.bannerclick_events);


SET search_path = control, pg_catalog;

--
-- Name: tr_email_nofifictaion_log_ai_control; Type: TRIGGER; Schema: control; Owner: warehouse_dbo
--

CREATE TRIGGER tr_email_nofifictaion_log_ai_control AFTER INSERT ON email_notification_log FOR EACH ROW EXECUTE PROCEDURE staging.fn_send_email_on_table_insert();


--
-- Name: data_file_configuration_data_file_fk; Type: FK CONSTRAINT; Schema: control; Owner: warehouse_dbo
--

ALTER TABLE ONLY data_file
    ADD CONSTRAINT data_file_configuration_data_file_fk FOREIGN KEY (data_file_config_id) REFERENCES data_file_configuration(data_file_config_id) DEFERRABLE;


--
-- Name: adm; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA adm FROM PUBLIC;
REVOKE ALL ON SCHEMA adm FROM warehouse_dbo;
GRANT ALL ON SCHEMA adm TO warehouse_dbo;
GRANT USAGE ON SCHEMA adm TO dataman;
GRANT USAGE ON SCHEMA adm TO egottschalk;


--
-- Name: adnetwork; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA adnetwork FROM PUBLIC;
REVOKE ALL ON SCHEMA adnetwork FROM warehouse_dbo;
GRANT ALL ON SCHEMA adnetwork TO warehouse_dbo;
GRANT USAGE ON SCHEMA adnetwork TO dataman;
GRANT USAGE ON SCHEMA adnetwork TO egottschalk;


--
-- Name: adsops; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA adsops FROM PUBLIC;
REVOKE ALL ON SCHEMA adsops FROM warehouse_dbo;
GRANT ALL ON SCHEMA adsops TO warehouse_dbo;
GRANT USAGE ON SCHEMA adsops TO app_user;
GRANT ALL ON SCHEMA adsops TO song;
GRANT USAGE ON SCHEMA adsops TO john;
GRANT USAGE ON SCHEMA adsops TO dimitrij;
GRANT USAGE ON SCHEMA adsops TO dataman;
GRANT USAGE ON SCHEMA adsops TO egottschalk;


--
-- Name: adstraffic; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA adstraffic FROM PUBLIC;
REVOKE ALL ON SCHEMA adstraffic FROM warehouse_dbo;
GRANT ALL ON SCHEMA adstraffic TO warehouse_dbo;
GRANT USAGE ON SCHEMA adstraffic TO app_user;
GRANT ALL ON SCHEMA adstraffic TO song;
GRANT USAGE ON SCHEMA adstraffic TO john;
GRANT USAGE ON SCHEMA adstraffic TO dimitrij;
GRANT USAGE ON SCHEMA adstraffic TO dataman;
GRANT USAGE ON SCHEMA adstraffic TO egottschalk;


--
-- Name: control; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA control FROM PUBLIC;
REVOKE ALL ON SCHEMA control FROM warehouse_dbo;
GRANT ALL ON SCHEMA control TO warehouse_dbo;
GRANT USAGE ON SCHEMA control TO data_file_notifier;
GRANT ALL ON SCHEMA control TO song;
GRANT USAGE ON SCHEMA control TO egottschalk;


--
-- Name: dbclk; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA dbclk FROM PUBLIC;
REVOKE ALL ON SCHEMA dbclk FROM warehouse_dbo;
GRANT ALL ON SCHEMA dbclk TO warehouse_dbo;
GRANT ALL ON SCHEMA dbclk TO song;
GRANT USAGE ON SCHEMA dbclk TO dataman;
GRANT USAGE ON SCHEMA dbclk TO egottschalk;


--
-- Name: evttracker; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA evttracker FROM PUBLIC;
REVOKE ALL ON SCHEMA evttracker FROM warehouse_dbo;
GRANT ALL ON SCHEMA evttracker TO warehouse_dbo;
GRANT ALL ON SCHEMA evttracker TO song;
GRANT USAGE ON SCHEMA evttracker TO dataman;
GRANT USAGE ON SCHEMA evttracker TO egottschalk;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO song;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: refer; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA refer FROM PUBLIC;
REVOKE ALL ON SCHEMA refer FROM warehouse_dbo;
GRANT ALL ON SCHEMA refer TO warehouse_dbo;
GRANT ALL ON SCHEMA refer TO song;
GRANT USAGE ON SCHEMA refer TO data_file_notifier;
GRANT USAGE ON SCHEMA refer TO dataman;


--
-- Name: staging; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA staging FROM PUBLIC;
REVOKE ALL ON SCHEMA staging FROM warehouse_dbo;
GRANT ALL ON SCHEMA staging TO warehouse_dbo;
GRANT USAGE ON SCHEMA staging TO data_file_notifier;
GRANT ALL ON SCHEMA staging TO song;
GRANT USAGE ON SCHEMA staging TO dataman;
GRANT USAGE ON SCHEMA staging TO egottschalk;


--
-- Name: verveloc; Type: ACL; Schema: -; Owner: warehouse_dbo
--

REVOKE ALL ON SCHEMA verveloc FROM PUBLIC;
REVOKE ALL ON SCHEMA verveloc FROM warehouse_dbo;
GRANT ALL ON SCHEMA verveloc TO warehouse_dbo;
GRANT ALL ON SCHEMA verveloc TO PUBLIC;
GRANT USAGE ON SCHEMA verveloc TO egottschalk;


SET search_path = adm, pg_catalog;

--
-- Name: ba_daily_flight; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_daily_flight FROM PUBLIC;
REVOKE ALL ON TABLE ba_daily_flight FROM warehouse_dbo;
GRANT ALL ON TABLE ba_daily_flight TO warehouse_dbo;
GRANT SELECT ON TABLE ba_daily_flight TO dataman;


--
-- Name: ba_daily_flight_exception; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_daily_flight_exception FROM PUBLIC;
REVOKE ALL ON TABLE ba_daily_flight_exception FROM warehouse_dbo;
GRANT ALL ON TABLE ba_daily_flight_exception TO warehouse_dbo;
GRANT SELECT ON TABLE ba_daily_flight_exception TO dataman;


--
-- Name: ba_daily_flight_min; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_daily_flight_min FROM PUBLIC;
REVOKE ALL ON TABLE ba_daily_flight_min FROM warehouse_dbo;
GRANT ALL ON TABLE ba_daily_flight_min TO warehouse_dbo;
GRANT SELECT ON TABLE ba_daily_flight_min TO dataman;


--
-- Name: ba_monthly_local_revenue; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_local_revenue FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_local_revenue FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_local_revenue TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_local_revenue TO dataman;
GRANT SELECT ON TABLE ba_monthly_local_revenue TO egottschalk;


--
-- Name: ba_monthly_local_revenue_v3; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_local_revenue_v3 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_local_revenue_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_local_revenue_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_local_revenue_v3 TO dataman;


--
-- Name: ba_monthly_local_revenue_v4; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_local_revenue_v4 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_local_revenue_v4 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_local_revenue_v4 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_local_revenue_v4 TO dataman;


--
-- Name: ba_monthly_local_revenue_v5_bk; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_local_revenue_v5_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_local_revenue_v5_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_local_revenue_v5_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_local_revenue_v5_bk TO dataman;


--
-- Name: ba_monthly_national_revenue; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_national_revenue FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_national_revenue FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_national_revenue TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_national_revenue TO dataman;


--
-- Name: ba_monthly_national_revenue_v2; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_national_revenue_v2 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_national_revenue_v2 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_national_revenue_v2 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_national_revenue_v2 TO dataman;


--
-- Name: ba_monthly_national_revenue_v3; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_national_revenue_v3 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_national_revenue_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_national_revenue_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_national_revenue_v3 TO dataman;


--
-- Name: ba_monthly_national_revenue_v4; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_national_revenue_v4 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_national_revenue_v4 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_national_revenue_v4 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_national_revenue_v4 TO dataman;


--
-- Name: ba_monthly_national_revenue_v5_bk; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_national_revenue_v5_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_national_revenue_v5_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_national_revenue_v5_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_national_revenue_v5_bk TO dataman;


--
-- Name: ba_monthly_publisher_revenue_v4; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_publisher_revenue_v4 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_publisher_revenue_v4 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_publisher_revenue_v4 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_publisher_revenue_v4 TO dataman;


--
-- Name: ba_monthly_publisher_revenue_v5_bk; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_publisher_revenue_v5_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_publisher_revenue_v5_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_publisher_revenue_v5_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_publisher_revenue_v5_bk TO dataman;


--
-- Name: daily_agg_adm_data_feed; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_adm_data_feed FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_adm_data_feed FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_adm_data_feed TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_adm_data_feed TO dataman;
GRANT SELECT ON TABLE daily_agg_adm_data_feed TO egottschalk;


--
-- Name: daily_agg_adm_dbclk_revenue; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_adm_dbclk_revenue FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_adm_dbclk_revenue FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_adm_dbclk_revenue TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_adm_dbclk_revenue TO dataman;


--
-- Name: daily_agg_api_revenue_by_partner; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_api_revenue_by_partner FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_api_revenue_by_partner FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_api_revenue_by_partner TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_api_revenue_by_partner TO dataman;


--
-- Name: daily_agg_api_revenue_by_partner_v2; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_api_revenue_by_partner_v2 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_api_revenue_by_partner_v2 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_api_revenue_by_partner_v2 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_api_revenue_by_partner_v2 TO dataman;


--
-- Name: daily_agg_api_revenue_by_partner_v3; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_api_revenue_by_partner_v3 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_api_revenue_by_partner_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_api_revenue_by_partner_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_api_revenue_by_partner_v3 TO dataman;


--
-- Name: daily_agg_local_revenue; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_local_revenue FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_local_revenue FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_local_revenue TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_local_revenue TO dataman;
GRANT SELECT ON TABLE daily_agg_local_revenue TO egottschalk;


--
-- Name: daily_agg_network_revenue; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m01; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m01 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m01 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m01 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m01 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m02; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m02 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m02 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m02 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m02 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m03; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m03 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m03 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m03 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m03 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m04; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m04 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m04 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m04 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m04 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m05; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m05 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m05 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m05 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m05 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m06; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m06 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m06 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m06 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m06 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m07; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m07 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m07 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m07 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m07 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m08; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m08 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m08 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m08 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m08 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m09; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m09 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m09 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m09 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m09 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m10; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m10 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m10 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m10 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m10 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m11; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m11 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m11 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m11 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m11 TO dataman;


--
-- Name: daily_agg_network_revenue_by_publisher_y2013_m12; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m12 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m12 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_by_publisher_y2013_m12 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_by_publisher_y2013_m12 TO dataman;


--
-- Name: daily_agg_network_revenue_min; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_min FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_min FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_min TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_min TO dataman;


--
-- Name: daily_agg_network_revenue_temp; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_temp FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_temp FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_temp TO warehouse_dbo;


--
-- Name: daily_agg_network_revenue_y2013_m01; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m01 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m01 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m01 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m01 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m02; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m02 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m02 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m02 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m02 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m03; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m03 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m03 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m03 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m03 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m04; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m04 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m04 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m04 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m04 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m05; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m05 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m05 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m05 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m05 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m06; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m06 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m06 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m06 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m06 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m07; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m07 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m07 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m07 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m07 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m08; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m08 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m08 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m08 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m08 TO dataman;


--
-- Name: daily_agg_network_revenue_y2013_m09; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m09 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_network_revenue_y2013_m09 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_network_revenue_y2013_m09 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_network_revenue_y2013_m09 TO dataman;


--
-- Name: daily_agg_order_atc; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_order_atc FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_order_atc FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_order_atc TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_order_atc TO dataman;
GRANT SELECT ON TABLE daily_agg_order_atc TO egottschalk;


--
-- Name: daily_agg_order_flight; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_order_flight FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_order_flight FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_order_flight TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_order_flight TO dataman;
GRANT SELECT ON TABLE daily_agg_order_flight TO egottschalk;


--
-- Name: daily_agg_order_flight_beta; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_order_flight_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_order_flight_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_order_flight_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_order_flight_beta TO dataman;


--
-- Name: daily_agg_order_placement_creative_flight; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_order_placement_creative_flight FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_order_placement_creative_flight FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_order_placement_creative_flight TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_order_placement_creative_flight TO dataman;
GRANT SELECT ON TABLE daily_agg_order_placement_creative_flight TO egottschalk;


--
-- Name: daily_agg_publisher_website_partner; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_publisher_website_partner FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_publisher_website_partner FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_publisher_website_partner TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_publisher_website_partner TO dataman;
GRANT SELECT ON TABLE daily_agg_publisher_website_partner TO egottschalk;


--
-- Name: daily_agg_revenue_by_order; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_revenue_by_order FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_revenue_by_order FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_revenue_by_order TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_revenue_by_order TO dataman;
GRANT SELECT ON TABLE daily_agg_revenue_by_order TO egottschalk;


--
-- Name: daily_agg_revenue_by_order_beta; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_revenue_by_order_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_revenue_by_order_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_revenue_by_order_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_revenue_by_order_beta TO dataman;


--
-- Name: daily_agg_revenue_by_order_yesterday; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_revenue_by_order_yesterday FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_revenue_by_order_yesterday FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_revenue_by_order_yesterday TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_revenue_by_order_yesterday TO dataman;
GRANT SELECT ON TABLE daily_agg_revenue_by_order_yesterday TO egottschalk;


--
-- Name: daily_agg_revenue_by_order_yesterday_beta; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_revenue_by_order_yesterday_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_revenue_by_order_yesterday_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_revenue_by_order_yesterday_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_revenue_by_order_yesterday_beta TO dataman;


--
-- Name: daily_agg_revenue_by_publisher; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_revenue_by_publisher FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_revenue_by_publisher FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_revenue_by_publisher TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_revenue_by_publisher TO dataman;
GRANT SELECT ON TABLE daily_agg_revenue_by_publisher TO egottschalk;


--
-- Name: daily_agg_revenue_statistics; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_revenue_statistics FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_revenue_statistics FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_revenue_statistics TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_revenue_statistics TO dataman;


--
-- Name: daily_network_fct_channel; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_network_fct_channel FROM PUBLIC;
REVOKE ALL ON TABLE daily_network_fct_channel FROM warehouse_dbo;
GRANT ALL ON TABLE daily_network_fct_channel TO warehouse_dbo;
GRANT SELECT ON TABLE daily_network_fct_channel TO dataman;
GRANT SELECT ON TABLE daily_network_fct_channel TO egottschalk;


--
-- Name: daily_network_fct_performance; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_network_fct_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_network_fct_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_network_fct_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_network_fct_performance TO dataman;
GRANT SELECT ON TABLE daily_network_fct_performance TO egottschalk;


--
-- Name: daily_network_fct_performance_by_portal; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_network_fct_performance_by_portal FROM PUBLIC;
REVOKE ALL ON TABLE daily_network_fct_performance_by_portal FROM warehouse_dbo;
GRANT ALL ON TABLE daily_network_fct_performance_by_portal TO warehouse_dbo;
GRANT SELECT ON TABLE daily_network_fct_performance_by_portal TO dataman;
GRANT SELECT ON TABLE daily_network_fct_performance_by_portal TO egottschalk;


--
-- Name: daily_network_fct_request; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_network_fct_request FROM PUBLIC;
REVOKE ALL ON TABLE daily_network_fct_request FROM warehouse_dbo;
GRANT ALL ON TABLE daily_network_fct_request TO warehouse_dbo;
GRANT SELECT ON TABLE daily_network_fct_request TO dataman;


--
-- Name: daily_network_fct_request_beta; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_network_fct_request_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_network_fct_request_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_network_fct_request_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_network_fct_request_beta TO dataman;


--
-- Name: local_revenue; Type: ACL; Schema: adm; Owner: song
--

REVOKE ALL ON TABLE local_revenue FROM PUBLIC;
REVOKE ALL ON TABLE local_revenue FROM song;
GRANT ALL ON TABLE local_revenue TO song;
GRANT SELECT ON TABLE local_revenue TO egottschalk;


--
-- Name: monthly_agg_adm_data_feed; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_adm_data_feed FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_adm_data_feed FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_adm_data_feed TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_adm_data_feed TO dataman;
GRANT SELECT ON TABLE monthly_agg_adm_data_feed TO egottschalk;


--
-- Name: monthly_agg_adm_data_feed_v2; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_adm_data_feed_v2 FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_adm_data_feed_v2 FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_adm_data_feed_v2 TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_adm_data_feed_v2 TO dataman;


--
-- Name: monthly_agg_adm_dbclk_revenue; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_adm_dbclk_revenue FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_adm_dbclk_revenue FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_adm_dbclk_revenue TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_adm_dbclk_revenue TO dataman;


--
-- Name: monthly_forecast; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_forecast FROM PUBLIC;
REVOKE ALL ON TABLE monthly_forecast FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_forecast TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_forecast TO egottschalk;


--
-- Name: monthly_forecast_working; Type: ACL; Schema: adm; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_forecast_working FROM PUBLIC;
REVOKE ALL ON TABLE monthly_forecast_working FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_forecast_working TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_forecast_working TO egottschalk;


SET search_path = adnetwork, pg_catalog;

--
-- Name: adsense_dblck_channel; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adsense_dblck_channel FROM PUBLIC;
REVOKE ALL ON TABLE adsense_dblck_channel FROM warehouse_dbo;
GRANT ALL ON TABLE adsense_dblck_channel TO warehouse_dbo;
GRANT SELECT ON TABLE adsense_dblck_channel TO dataman;
GRANT SELECT ON TABLE adsense_dblck_channel TO egottschalk;


--
-- Name: ba_adsense_dblck_channel_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_adsense_dblck_channel_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_adsense_dblck_channel_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_adsense_dblck_channel_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_adsense_dblck_channel_bk TO dataman;
GRANT SELECT ON TABLE ba_adsense_dblck_channel_bk TO egottschalk;


--
-- Name: ba_monthly_adnetwork_summary_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_adnetwork_summary_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_adnetwork_summary_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_adnetwork_summary_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_adnetwork_summary_bk TO dataman;


--
-- Name: ba_monthly_adsense_dbclk_channel_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_adsense_dbclk_channel_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_adsense_dbclk_channel_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_adsense_dbclk_channel_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_adsense_dbclk_channel_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_adsense_dbclk_channel_bk TO egottschalk;


--
-- Name: ba_monthly_cg_mobile_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_cg_mobile_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_cg_mobile_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_cg_mobile_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_cg_mobile_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_cg_mobile_performance_bk TO egottschalk;


--
-- Name: ba_monthly_cg_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_cg_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_cg_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_cg_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_cg_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_cg_performance_bk TO egottschalk;


--
-- Name: ba_monthly_it_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_it_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_it_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_it_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_it_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_it_performance_bk TO egottschalk;


--
-- Name: ba_monthly_jt_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_jt_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_jt_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_jt_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_jt_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_jt_performance_bk TO egottschalk;


--
-- Name: ba_monthly_kt_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_kt_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_kt_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_kt_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_kt_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_kt_performance_bk TO egottschalk;


--
-- Name: ba_monthly_mm_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_mm_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_mm_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_mm_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_mm_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_mm_performance_bk TO egottschalk;


--
-- Name: ba_monthly_mx_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_mx_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_mx_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_mx_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_mx_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_mx_performance_bk TO egottschalk;


--
-- Name: ba_monthly_sp_blue_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_sp_blue_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_sp_blue_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_sp_blue_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_sp_blue_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_sp_blue_performance_bk TO egottschalk;


--
-- Name: ba_monthly_wh_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_wh_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_wh_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_wh_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_wh_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_wh_performance_bk TO egottschalk;


--
-- Name: ba_monthly_yp_no_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_yp_no_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_yp_no_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_yp_no_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_yp_no_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_yp_no_performance_bk TO egottschalk;


--
-- Name: ba_monthly_yp_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_yp_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_yp_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_yp_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_yp_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_yp_performance_bk TO egottschalk;


--
-- Name: ba_monthly_yp_sb_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_yp_sb_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_yp_sb_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_yp_sb_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_yp_sb_performance_bk TO dataman;
GRANT SELECT ON TABLE ba_monthly_yp_sb_performance_bk TO egottschalk;


--
-- Name: daily_adnetwork_summary; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_adnetwork_summary FROM PUBLIC;
REVOKE ALL ON TABLE daily_adnetwork_summary FROM warehouse_dbo;
GRANT ALL ON TABLE daily_adnetwork_summary TO warehouse_dbo;
GRANT SELECT ON TABLE daily_adnetwork_summary TO dataman;
GRANT SELECT ON TABLE daily_adnetwork_summary TO egottschalk;


--
-- Name: daily_adsense_dbclk_channel; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_adsense_dbclk_channel FROM PUBLIC;
REVOKE ALL ON TABLE daily_adsense_dbclk_channel FROM warehouse_dbo;
GRANT ALL ON TABLE daily_adsense_dbclk_channel TO warehouse_dbo;
GRANT SELECT ON TABLE daily_adsense_dbclk_channel TO dataman;
GRANT SELECT ON TABLE daily_adsense_dbclk_channel TO egottschalk;


--
-- Name: daily_cg_mobile_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_cg_mobile_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_cg_mobile_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_cg_mobile_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_cg_mobile_performance TO dataman;
GRANT SELECT ON TABLE daily_cg_mobile_performance TO egottschalk;


--
-- Name: daily_cg_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_cg_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_cg_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_cg_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_cg_performance TO dataman;
GRANT SELECT ON TABLE daily_cg_performance TO egottschalk;


--
-- Name: daily_ga_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_ga_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_ga_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_ga_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_ga_performance TO dataman;
GRANT SELECT ON TABLE daily_ga_performance TO egottschalk;


--
-- Name: daily_it_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_it_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_it_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_it_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_it_performance TO dataman;
GRANT SELECT ON TABLE daily_it_performance TO egottschalk;


--
-- Name: daily_jt_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_jt_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_jt_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_jt_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_jt_performance TO dataman;
GRANT SELECT ON TABLE daily_jt_performance TO egottschalk;


--
-- Name: daily_jt_summary; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_jt_summary FROM PUBLIC;
REVOKE ALL ON TABLE daily_jt_summary FROM warehouse_dbo;
GRANT ALL ON TABLE daily_jt_summary TO warehouse_dbo;
GRANT SELECT ON TABLE daily_jt_summary TO dataman;
GRANT SELECT ON TABLE daily_jt_summary TO egottschalk;


--
-- Name: daily_kt_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_kt_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_kt_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_kt_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_kt_performance TO dataman;
GRANT SELECT ON TABLE daily_kt_performance TO egottschalk;


--
-- Name: daily_mm_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_mm_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_mm_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_mm_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_mm_performance TO dataman;
GRANT SELECT ON TABLE daily_mm_performance TO egottschalk;


--
-- Name: daily_mx_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_mx_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_mx_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_mx_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_mx_performance TO dataman;
GRANT SELECT ON TABLE daily_mx_performance TO egottschalk;


--
-- Name: daily_sp_blue_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_sp_blue_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_sp_blue_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_sp_blue_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_sp_blue_performance TO dataman;
GRANT SELECT ON TABLE daily_sp_blue_performance TO egottschalk;


--
-- Name: daily_sp_blue_performance_bk; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_sp_blue_performance_bk FROM PUBLIC;
REVOKE ALL ON TABLE daily_sp_blue_performance_bk FROM warehouse_dbo;
GRANT ALL ON TABLE daily_sp_blue_performance_bk TO warehouse_dbo;
GRANT SELECT ON TABLE daily_sp_blue_performance_bk TO dataman;
GRANT SELECT ON TABLE daily_sp_blue_performance_bk TO egottschalk;


--
-- Name: daily_sp_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_sp_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_sp_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_sp_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_sp_performance TO dataman;
GRANT SELECT ON TABLE daily_sp_performance TO egottschalk;


--
-- Name: daily_wh_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_wh_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_wh_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_wh_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_wh_performance TO dataman;
GRANT SELECT ON TABLE daily_wh_performance TO egottschalk;


--
-- Name: daily_yp_no_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_yp_no_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_yp_no_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_yp_no_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_yp_no_performance TO dataman;
GRANT SELECT ON TABLE daily_yp_no_performance TO egottschalk;


--
-- Name: daily_yp_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_yp_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_yp_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_yp_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_yp_performance TO dataman;
GRANT SELECT ON TABLE daily_yp_performance TO egottschalk;


--
-- Name: daily_yp_sb_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_yp_sb_performance FROM PUBLIC;
REVOKE ALL ON TABLE daily_yp_sb_performance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_yp_sb_performance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_yp_sb_performance TO dataman;
GRANT SELECT ON TABLE daily_yp_sb_performance TO egottschalk;


--
-- Name: mapping_ga; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE mapping_ga FROM PUBLIC;
REVOKE ALL ON TABLE mapping_ga FROM warehouse_dbo;
GRANT ALL ON TABLE mapping_ga TO warehouse_dbo;
GRANT SELECT ON TABLE mapping_ga TO dataman;
GRANT SELECT ON TABLE mapping_ga TO egottschalk;


--
-- Name: mapping_mm; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE mapping_mm FROM PUBLIC;
REVOKE ALL ON TABLE mapping_mm FROM warehouse_dbo;
GRANT ALL ON TABLE mapping_mm TO warehouse_dbo;
GRANT SELECT ON TABLE mapping_mm TO dataman;
GRANT SELECT ON TABLE mapping_mm TO egottschalk;


--
-- Name: monthly_adnetwork_summary; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_adnetwork_summary FROM PUBLIC;
REVOKE ALL ON TABLE monthly_adnetwork_summary FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_adnetwork_summary TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_adnetwork_summary TO dataman;
GRANT SELECT ON TABLE monthly_adnetwork_summary TO egottschalk;


--
-- Name: monthly_adnetwork_summary_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_adnetwork_summary_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_adnetwork_summary_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_adnetwork_summary_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_adnetwork_summary_by_date TO dataman;
GRANT SELECT ON TABLE monthly_adnetwork_summary_by_date TO egottschalk;


--
-- Name: monthly_adsense_dbclk_channel; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_adsense_dbclk_channel FROM PUBLIC;
REVOKE ALL ON TABLE monthly_adsense_dbclk_channel FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_adsense_dbclk_channel TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_adsense_dbclk_channel TO dataman;
GRANT SELECT ON TABLE monthly_adsense_dbclk_channel TO egottschalk;


--
-- Name: monthly_adsense_dbclk_channel_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_adsense_dbclk_channel_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_adsense_dbclk_channel_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_adsense_dbclk_channel_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_adsense_dbclk_channel_by_date TO dataman;
GRANT SELECT ON TABLE monthly_adsense_dbclk_channel_by_date TO egottschalk;


--
-- Name: monthly_cg_mobile_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_cg_mobile_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_cg_mobile_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_cg_mobile_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_cg_mobile_performance TO dataman;


--
-- Name: monthly_cg_mobile_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_cg_mobile_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_cg_mobile_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_cg_mobile_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_cg_mobile_performance_by_date TO dataman;


--
-- Name: monthly_cg_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_cg_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_cg_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_cg_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_cg_performance TO dataman;
GRANT SELECT ON TABLE monthly_cg_performance TO egottschalk;


--
-- Name: monthly_cg_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_cg_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_cg_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_cg_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_cg_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_cg_performance_by_date TO egottschalk;


--
-- Name: monthly_ga_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_ga_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_ga_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_ga_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_ga_performance TO dataman;
GRANT SELECT ON TABLE monthly_ga_performance TO egottschalk;


--
-- Name: monthly_ga_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_ga_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_ga_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_ga_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_ga_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_ga_performance_by_date TO egottschalk;


--
-- Name: monthly_it_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_it_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_it_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_it_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_it_performance TO dataman;
GRANT SELECT ON TABLE monthly_it_performance TO egottschalk;


--
-- Name: monthly_it_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_it_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_it_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_it_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_it_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_it_performance_by_date TO egottschalk;


--
-- Name: monthly_jt_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_jt_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_jt_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_jt_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_jt_performance TO dataman;
GRANT SELECT ON TABLE monthly_jt_performance TO egottschalk;


--
-- Name: monthly_jt_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_jt_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_jt_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_jt_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_jt_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_jt_performance_by_date TO egottschalk;


--
-- Name: monthly_kt_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_kt_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_kt_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_kt_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_kt_performance TO dataman;


--
-- Name: monthly_kt_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_kt_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_kt_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_kt_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_kt_performance_by_date TO dataman;


--
-- Name: monthly_mm_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_mm_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_mm_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_mm_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_mm_performance TO dataman;
GRANT SELECT ON TABLE monthly_mm_performance TO egottschalk;


--
-- Name: monthly_mm_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_mm_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_mm_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_mm_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_mm_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_mm_performance_by_date TO egottschalk;


--
-- Name: monthly_mx_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_mx_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_mx_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_mx_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_mx_performance TO dataman;
GRANT SELECT ON TABLE monthly_mx_performance TO egottschalk;


--
-- Name: monthly_mx_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_mx_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_mx_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_mx_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_mx_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_mx_performance_by_date TO egottschalk;


--
-- Name: monthly_sp_blue_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_sp_blue_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_sp_blue_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_sp_blue_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_sp_blue_performance TO dataman;
GRANT SELECT ON TABLE monthly_sp_blue_performance TO egottschalk;


--
-- Name: monthly_sp_blue_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_sp_blue_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_sp_blue_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_sp_blue_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_sp_blue_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_sp_blue_performance_by_date TO egottschalk;


--
-- Name: monthly_sp_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_sp_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_sp_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_sp_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_sp_performance TO dataman;
GRANT SELECT ON TABLE monthly_sp_performance TO egottschalk;


--
-- Name: monthly_sp_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_sp_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_sp_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_sp_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_sp_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_sp_performance_by_date TO egottschalk;


--
-- Name: monthly_wh_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_wh_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_wh_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_wh_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_wh_performance TO dataman;
GRANT SELECT ON TABLE monthly_wh_performance TO egottschalk;


--
-- Name: monthly_wh_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_wh_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_wh_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_wh_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_wh_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_wh_performance_by_date TO egottschalk;


--
-- Name: monthly_yp_no_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_yp_no_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_yp_no_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_yp_no_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_yp_no_performance TO dataman;
GRANT SELECT ON TABLE monthly_yp_no_performance TO egottschalk;


--
-- Name: monthly_yp_no_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_yp_no_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_yp_no_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_yp_no_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_yp_no_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_yp_no_performance_by_date TO egottschalk;


--
-- Name: monthly_yp_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_yp_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_yp_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_yp_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_yp_performance TO dataman;
GRANT SELECT ON TABLE monthly_yp_performance TO egottschalk;


--
-- Name: monthly_yp_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_yp_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_yp_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_yp_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_yp_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_yp_performance_by_date TO egottschalk;


--
-- Name: monthly_yp_sb_performance; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_yp_sb_performance FROM PUBLIC;
REVOKE ALL ON TABLE monthly_yp_sb_performance FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_yp_sb_performance TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_yp_sb_performance TO dataman;
GRANT SELECT ON TABLE monthly_yp_sb_performance TO egottschalk;


--
-- Name: monthly_yp_sb_performance_by_date; Type: ACL; Schema: adnetwork; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_yp_sb_performance_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_yp_sb_performance_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_yp_sb_performance_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_yp_sb_performance_by_date TO dataman;
GRANT SELECT ON TABLE monthly_yp_sb_performance_by_date TO egottschalk;


SET search_path = adsops, pg_catalog;

--
-- Name: daily_agg_delivery; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery TO dataman;
GRANT SELECT ON TABLE daily_agg_delivery TO egottschalk;


--
-- Name: daily_agg_delivery_adnetwork_publisher; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_adnetwork_publisher FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_adnetwork_publisher FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_adnetwork_publisher TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_adnetwork_publisher TO dataman;


--
-- Name: daily_agg_delivery_adnetwork_publisher_beta; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_adnetwork_publisher_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_adnetwork_publisher_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_adnetwork_publisher_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_adnetwork_publisher_beta TO dataman;


--
-- Name: daily_agg_delivery_adnetwork_publisher_v3; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_adnetwork_publisher_v3 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_adnetwork_publisher_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_adnetwork_publisher_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_adnetwork_publisher_v3 TO dataman;


--
-- Name: daily_agg_delivery_advertiser; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_advertiser FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_advertiser FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_advertiser TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_advertiser TO dataman;


--
-- Name: daily_agg_delivery_advertiser_beta; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_advertiser_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_advertiser_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_advertiser_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_advertiser_beta TO dataman;


--
-- Name: daily_agg_delivery_publisher_property; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_publisher_property FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_publisher_property FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_publisher_property TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_publisher_property TO dataman;


--
-- Name: daily_agg_delivery_publisher_property_beta; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_publisher_property_beta TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_publisher_property_beta TO dataman;


--
-- Name: daily_agg_delivery_publisher_property_beta_temp; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta_temp FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta_temp FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_publisher_property_beta_temp TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_publisher_property_beta_temp TO dataman;


--
-- Name: daily_agg_delivery_publisher_property_beta_y2013_m03; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m03 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m03 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m03 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m03 TO dataman;


--
-- Name: daily_agg_delivery_publisher_property_beta_y2013_m04; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m04 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m04 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m04 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_publisher_property_beta_y2013_m04 TO dataman;


--
-- Name: daily_agg_delivery_publisher_property_v3; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_v3 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_delivery_publisher_property_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_delivery_publisher_property_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_delivery_publisher_property_v3 TO dataman;


--
-- Name: daily_agg_local_zero_delivered; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_local_zero_delivered FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_local_zero_delivered FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_local_zero_delivered TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_local_zero_delivered TO dataman;


--
-- Name: daily_agg_local_zero_delivered_v1; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_local_zero_delivered_v1 FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_local_zero_delivered_v1 FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_local_zero_delivered_v1 TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_local_zero_delivered_v1 TO dataman;


--
-- Name: daily_agg_low_rate; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_low_rate FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_low_rate FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_low_rate TO warehouse_dbo;


--
-- Name: daily_infobright_counts; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_infobright_counts FROM PUBLIC;
REVOKE ALL ON TABLE daily_infobright_counts FROM warehouse_dbo;
GRANT ALL ON TABLE daily_infobright_counts TO warehouse_dbo;


--
-- Name: monthly_agg_delivery_adnetwork_publisher_beta; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_delivery_adnetwork_publisher_beta FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_delivery_adnetwork_publisher_beta FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_delivery_adnetwork_publisher_beta TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_delivery_adnetwork_publisher_beta TO dataman;


--
-- Name: monthly_agg_delivery_adnetwork_publisher_v3; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_delivery_adnetwork_publisher_v3 FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_delivery_adnetwork_publisher_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_delivery_adnetwork_publisher_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_delivery_adnetwork_publisher_v3 TO dataman;


--
-- Name: monthly_agg_delivery_publisher_property_beta; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_delivery_publisher_property_beta FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_delivery_publisher_property_beta FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_delivery_publisher_property_beta TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_delivery_publisher_property_beta TO dataman;


--
-- Name: monthly_agg_delivery_publisher_property_v3; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_delivery_publisher_property_v3 FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_delivery_publisher_property_v3 FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_delivery_publisher_property_v3 TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_delivery_publisher_property_v3 TO dataman;


--
-- Name: weekly_agg_mcclatchy_off; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE weekly_agg_mcclatchy_off FROM PUBLIC;
REVOKE ALL ON TABLE weekly_agg_mcclatchy_off FROM warehouse_dbo;
GRANT ALL ON TABLE weekly_agg_mcclatchy_off TO warehouse_dbo;


--
-- Name: weekly_low_rate; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE weekly_low_rate FROM PUBLIC;
REVOKE ALL ON TABLE weekly_low_rate FROM warehouse_dbo;
GRANT ALL ON TABLE weekly_low_rate TO warehouse_dbo;


--
-- Name: weekly_new_booked; Type: ACL; Schema: adsops; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE weekly_new_booked FROM PUBLIC;
REVOKE ALL ON TABLE weekly_new_booked FROM warehouse_dbo;
GRANT ALL ON TABLE weekly_new_booked TO warehouse_dbo;


SET search_path = adstraffic, pg_catalog;

--
-- Name: daily_ad_serving_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_ad_serving_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_ad_serving_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_ad_serving_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_ad_serving_stats TO dataman;
GRANT SELECT ON TABLE daily_ad_serving_stats TO egottschalk;


--
-- Name: daily_ad_serving_stats_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_ad_serving_stats_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE daily_ad_serving_stats_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE daily_ad_serving_stats_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE daily_ad_serving_stats_by_content_category TO dataman;
GRANT SELECT ON TABLE daily_ad_serving_stats_by_content_category TO egottschalk;


--
-- Name: daily_ad_serving_stats_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_ad_serving_stats_by_device FROM PUBLIC;
REVOKE ALL ON TABLE daily_ad_serving_stats_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE daily_ad_serving_stats_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE daily_ad_serving_stats_by_device TO dataman;
GRANT SELECT ON TABLE daily_ad_serving_stats_by_device TO egottschalk;


--
-- Name: daily_adcel_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_adcel_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_adcel_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_adcel_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_adcel_stats TO dataman;
GRANT SELECT ON TABLE daily_adcel_stats TO egottschalk;


--
-- Name: daily_attributed_request_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_attributed_request_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_attributed_request_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_attributed_request_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_attributed_request_stats TO dataman;


--
-- Name: daily_db_sellthrough; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_db_sellthrough FROM PUBLIC;
REVOKE ALL ON TABLE daily_db_sellthrough FROM warehouse_dbo;
GRANT ALL ON TABLE daily_db_sellthrough TO warehouse_dbo;
GRANT SELECT ON TABLE daily_db_sellthrough TO dataman;
GRANT SELECT ON TABLE daily_db_sellthrough TO egottschalk;


--
-- Name: daily_db_sellthrough_by_metro; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_db_sellthrough_by_metro FROM PUBLIC;
REVOKE ALL ON TABLE daily_db_sellthrough_by_metro FROM warehouse_dbo;
GRANT ALL ON TABLE daily_db_sellthrough_by_metro TO warehouse_dbo;
GRANT SELECT ON TABLE daily_db_sellthrough_by_metro TO dataman;
GRANT SELECT ON TABLE daily_db_sellthrough_by_metro TO egottschalk;


--
-- Name: daily_db_sellthrough_by_site; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_db_sellthrough_by_site FROM PUBLIC;
REVOKE ALL ON TABLE daily_db_sellthrough_by_site FROM warehouse_dbo;
GRANT ALL ON TABLE daily_db_sellthrough_by_site TO warehouse_dbo;
GRANT SELECT ON TABLE daily_db_sellthrough_by_site TO dataman;
GRANT SELECT ON TABLE daily_db_sellthrough_by_site TO egottschalk;


--
-- Name: daily_event_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats TO dataman;
GRANT SELECT ON TABLE daily_event_stats TO egottschalk;


--
-- Name: daily_event_stats_by_adnet; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats_by_adnet FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats_by_adnet FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats_by_adnet TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats_by_adnet TO dataman;
GRANT SELECT ON TABLE daily_event_stats_by_adnet TO egottschalk;


--
-- Name: daily_event_stats_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats_by_content_category TO dataman;
GRANT SELECT ON TABLE daily_event_stats_by_content_category TO egottschalk;


--
-- Name: daily_event_stats_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats_by_device FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats_by_device TO dataman;
GRANT SELECT ON TABLE daily_event_stats_by_device TO egottschalk;


--
-- Name: daily_event_stats_by_dma; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats_by_dma FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats_by_dma FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats_by_dma TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats_by_dma TO dataman;
GRANT SELECT ON TABLE daily_event_stats_by_dma TO egottschalk;


--
-- Name: daily_filled_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_filled_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_filled_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_filled_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_filled_stats TO dataman;
GRANT SELECT ON TABLE daily_filled_stats TO egottschalk;


--
-- Name: daily_filled_stats_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_filled_stats_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE daily_filled_stats_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE daily_filled_stats_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE daily_filled_stats_by_content_category TO dataman;
GRANT SELECT ON TABLE daily_filled_stats_by_content_category TO egottschalk;


--
-- Name: daily_filled_stats_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_filled_stats_by_device FROM PUBLIC;
REVOKE ALL ON TABLE daily_filled_stats_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE daily_filled_stats_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE daily_filled_stats_by_device TO dataman;
GRANT SELECT ON TABLE daily_filled_stats_by_device TO egottschalk;


--
-- Name: daily_filled_stats_by_dma; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_filled_stats_by_dma FROM PUBLIC;
REVOKE ALL ON TABLE daily_filled_stats_by_dma FROM warehouse_dbo;
GRANT ALL ON TABLE daily_filled_stats_by_dma TO warehouse_dbo;
GRANT SELECT ON TABLE daily_filled_stats_by_dma TO dataman;
GRANT SELECT ON TABLE daily_filled_stats_by_dma TO egottschalk;


--
-- Name: daily_geo_quality; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_geo_quality FROM PUBLIC;
REVOKE ALL ON TABLE daily_geo_quality FROM warehouse_dbo;
GRANT ALL ON TABLE daily_geo_quality TO warehouse_dbo;
GRANT SELECT ON TABLE daily_geo_quality TO dataman;
GRANT SELECT ON TABLE daily_geo_quality TO egottschalk;


--
-- Name: daily_location_stats_by_metro; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_location_stats_by_metro FROM PUBLIC;
REVOKE ALL ON TABLE daily_location_stats_by_metro FROM warehouse_dbo;
GRANT ALL ON TABLE daily_location_stats_by_metro TO warehouse_dbo;
GRANT SELECT ON TABLE daily_location_stats_by_metro TO dataman;
GRANT SELECT ON TABLE daily_location_stats_by_metro TO egottschalk;


--
-- Name: daily_location_stats_by_region; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_location_stats_by_region FROM PUBLIC;
REVOKE ALL ON TABLE daily_location_stats_by_region FROM warehouse_dbo;
GRANT ALL ON TABLE daily_location_stats_by_region TO warehouse_dbo;
GRANT SELECT ON TABLE daily_location_stats_by_region TO dataman;
GRANT SELECT ON TABLE daily_location_stats_by_region TO egottschalk;


--
-- Name: daily_olap_attributed_request_by_uis; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_attributed_request_by_uis FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_attributed_request_by_uis FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_attributed_request_by_uis TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_attributed_request_by_uis TO dataman;


--
-- Name: daily_olap_event_by_portal; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_event_by_portal FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_event_by_portal FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_event_by_portal TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_event_by_portal TO dataman;
GRANT SELECT ON TABLE daily_olap_event_by_portal TO egottschalk;


--
-- Name: daily_olap_filled_by_portal; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_filled_by_portal FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_filled_by_portal FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_filled_by_portal TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_filled_by_portal TO dataman;
GRANT SELECT ON TABLE daily_olap_filled_by_portal TO egottschalk;


--
-- Name: daily_olap_trxids_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_trxids_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_trxids_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_trxids_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_trxids_by_content_category TO dataman;
GRANT SELECT ON TABLE daily_olap_trxids_by_content_category TO egottschalk;


--
-- Name: daily_olap_trxids_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_trxids_by_device FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_trxids_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_trxids_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_trxids_by_device TO dataman;
GRANT SELECT ON TABLE daily_olap_trxids_by_device TO egottschalk;


--
-- Name: daily_olap_trxids_by_portal; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_trxids_by_portal FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_trxids_by_portal FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_trxids_by_portal TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_trxids_by_portal TO dataman;
GRANT SELECT ON TABLE daily_olap_trxids_by_portal TO egottschalk;


--
-- Name: daily_olap_unfilled_by_portal; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_olap_unfilled_by_portal FROM PUBLIC;
REVOKE ALL ON TABLE daily_olap_unfilled_by_portal FROM warehouse_dbo;
GRANT ALL ON TABLE daily_olap_unfilled_by_portal TO warehouse_dbo;
GRANT SELECT ON TABLE daily_olap_unfilled_by_portal TO dataman;
GRANT SELECT ON TABLE daily_olap_unfilled_by_portal TO egottschalk;


--
-- Name: daily_unfilled_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_unfilled_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_unfilled_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_unfilled_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_unfilled_stats TO dataman;
GRANT SELECT ON TABLE daily_unfilled_stats TO egottschalk;


--
-- Name: daily_unfilled_stats_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_unfilled_stats_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE daily_unfilled_stats_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE daily_unfilled_stats_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE daily_unfilled_stats_by_content_category TO dataman;
GRANT SELECT ON TABLE daily_unfilled_stats_by_content_category TO egottschalk;


--
-- Name: daily_unfilled_stats_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_unfilled_stats_by_device FROM PUBLIC;
REVOKE ALL ON TABLE daily_unfilled_stats_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE daily_unfilled_stats_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE daily_unfilled_stats_by_device TO dataman;
GRANT SELECT ON TABLE daily_unfilled_stats_by_device TO egottschalk;


--
-- Name: daily_unfilled_stats_by_dma; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_unfilled_stats_by_dma FROM PUBLIC;
REVOKE ALL ON TABLE daily_unfilled_stats_by_dma FROM warehouse_dbo;
GRANT ALL ON TABLE daily_unfilled_stats_by_dma TO warehouse_dbo;
GRANT SELECT ON TABLE daily_unfilled_stats_by_dma TO dataman;
GRANT SELECT ON TABLE daily_unfilled_stats_by_dma TO egottschalk;


--
-- Name: monthly_ad_serving_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_ad_serving_stats FROM PUBLIC;
REVOKE ALL ON TABLE monthly_ad_serving_stats FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_ad_serving_stats TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_ad_serving_stats TO dataman;
GRANT SELECT ON TABLE monthly_ad_serving_stats TO egottschalk;


--
-- Name: monthly_ad_serving_stats_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_ad_serving_stats_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE monthly_ad_serving_stats_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_ad_serving_stats_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_ad_serving_stats_by_content_category TO dataman;
GRANT SELECT ON TABLE monthly_ad_serving_stats_by_content_category TO egottschalk;


--
-- Name: monthly_ad_serving_stats_by_date; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_ad_serving_stats_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_ad_serving_stats_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_ad_serving_stats_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_ad_serving_stats_by_date TO dataman;
GRANT SELECT ON TABLE monthly_ad_serving_stats_by_date TO egottschalk;


--
-- Name: monthly_ad_serving_stats_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_ad_serving_stats_by_device FROM PUBLIC;
REVOKE ALL ON TABLE monthly_ad_serving_stats_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_ad_serving_stats_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_ad_serving_stats_by_device TO dataman;
GRANT SELECT ON TABLE monthly_ad_serving_stats_by_device TO egottschalk;


--
-- Name: monthly_unfilled_stats; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_unfilled_stats FROM PUBLIC;
REVOKE ALL ON TABLE monthly_unfilled_stats FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_unfilled_stats TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_unfilled_stats TO dataman;
GRANT SELECT ON TABLE monthly_unfilled_stats TO egottschalk;


--
-- Name: monthly_unfilled_stats_by_content_category; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_unfilled_stats_by_content_category FROM PUBLIC;
REVOKE ALL ON TABLE monthly_unfilled_stats_by_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_unfilled_stats_by_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_content_category TO dataman;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_content_category TO egottschalk;


--
-- Name: monthly_unfilled_stats_by_date; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_unfilled_stats_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_unfilled_stats_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_unfilled_stats_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_date TO dataman;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_date TO egottschalk;


--
-- Name: monthly_unfilled_stats_by_device; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_unfilled_stats_by_device FROM PUBLIC;
REVOKE ALL ON TABLE monthly_unfilled_stats_by_device FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_unfilled_stats_by_device TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_device TO dataman;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_device TO egottschalk;


--
-- Name: monthly_unfilled_stats_by_dma; Type: ACL; Schema: adstraffic; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_unfilled_stats_by_dma FROM PUBLIC;
REVOKE ALL ON TABLE monthly_unfilled_stats_by_dma FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_unfilled_stats_by_dma TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_dma TO dataman;
GRANT SELECT ON TABLE monthly_unfilled_stats_by_dma TO egottschalk;


SET search_path = billing, pg_catalog;

--
-- Name: ba_adsense_dblck_channel; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_adsense_dblck_channel FROM PUBLIC;
REVOKE ALL ON TABLE ba_adsense_dblck_channel FROM warehouse_dbo;
GRANT ALL ON TABLE ba_adsense_dblck_channel TO warehouse_dbo;
GRANT SELECT ON TABLE ba_adsense_dblck_channel TO dataman;


--
-- Name: ba_monthly_adnetwork_summary; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_adnetwork_summary FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_adnetwork_summary FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_adnetwork_summary TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_adnetwork_summary TO dataman;


--
-- Name: ba_monthly_adsense_dbclk_channel; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_adsense_dbclk_channel FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_adsense_dbclk_channel FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_adsense_dbclk_channel TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_adsense_dbclk_channel TO dataman;


--
-- Name: ba_monthly_advance_digital; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_advance_digital FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_advance_digital FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_advance_digital TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_advance_digital TO dataman;


--
-- Name: ba_monthly_cg_mobile_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_cg_mobile_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_cg_mobile_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_cg_mobile_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_cg_mobile_performance TO dataman;


--
-- Name: ba_monthly_cg_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_cg_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_cg_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_cg_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_cg_performance TO dataman;


--
-- Name: ba_monthly_it_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_it_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_it_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_it_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_it_performance TO dataman;


--
-- Name: ba_monthly_jt_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_jt_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_jt_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_jt_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_jt_performance TO dataman;


--
-- Name: ba_monthly_kt_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_kt_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_kt_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_kt_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_kt_performance TO dataman;


--
-- Name: ba_monthly_local_revenue_v5; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_local_revenue_v5 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_local_revenue_v5 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_local_revenue_v5 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_local_revenue_v5 TO dataman;


--
-- Name: ba_monthly_mm_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_mm_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_mm_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_mm_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_mm_performance TO dataman;


--
-- Name: ba_monthly_mx_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_mx_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_mx_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_mx_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_mx_performance TO dataman;


--
-- Name: ba_monthly_national_revenue_v5; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_national_revenue_v5 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_national_revenue_v5 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_national_revenue_v5 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_national_revenue_v5 TO dataman;


--
-- Name: ba_monthly_publisher_revenue_v5; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_publisher_revenue_v5 FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_publisher_revenue_v5 FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_publisher_revenue_v5 TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_publisher_revenue_v5 TO dataman;


--
-- Name: ba_monthly_sp_blue_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_sp_blue_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_sp_blue_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_sp_blue_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_sp_blue_performance TO dataman;


--
-- Name: ba_monthly_wh_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_wh_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_wh_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_wh_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_wh_performance TO dataman;


--
-- Name: ba_monthly_yp_no_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_yp_no_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_yp_no_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_yp_no_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_yp_no_performance TO dataman;


--
-- Name: ba_monthly_yp_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_yp_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_yp_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_yp_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_yp_performance TO dataman;


--
-- Name: ba_monthly_yp_sb_performance; Type: ACL; Schema: billing; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ba_monthly_yp_sb_performance FROM PUBLIC;
REVOKE ALL ON TABLE ba_monthly_yp_sb_performance FROM warehouse_dbo;
GRANT ALL ON TABLE ba_monthly_yp_sb_performance TO warehouse_dbo;
GRANT SELECT ON TABLE ba_monthly_yp_sb_performance TO dataman;


SET search_path = control, pg_catalog;

--
-- Name: daily_process_status; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_process_status FROM PUBLIC;
REVOKE ALL ON TABLE daily_process_status FROM warehouse_dbo;
GRANT ALL ON TABLE daily_process_status TO warehouse_dbo;
GRANT SELECT ON TABLE daily_process_status TO dataman;


--
-- Name: data_current_up_to_date; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE data_current_up_to_date FROM PUBLIC;
REVOKE ALL ON TABLE data_current_up_to_date FROM warehouse_dbo;
GRANT ALL ON TABLE data_current_up_to_date TO warehouse_dbo;
GRANT SELECT ON TABLE data_current_up_to_date TO egottschalk;


--
-- Name: data_file; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE data_file FROM PUBLIC;
REVOKE ALL ON TABLE data_file FROM warehouse_dbo;
GRANT ALL ON TABLE data_file TO warehouse_dbo;
GRANT SELECT,INSERT ON TABLE data_file TO data_file_notifier;
GRANT SELECT ON TABLE data_file TO egottschalk;


--
-- Name: data_file_configuration; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE data_file_configuration FROM PUBLIC;
REVOKE ALL ON TABLE data_file_configuration FROM warehouse_dbo;
GRANT ALL ON TABLE data_file_configuration TO warehouse_dbo;
GRANT SELECT ON TABLE data_file_configuration TO egottschalk;


--
-- Name: data_file_data_file_id_seq; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON SEQUENCE data_file_data_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE data_file_data_file_id_seq FROM warehouse_dbo;
GRANT ALL ON SEQUENCE data_file_data_file_id_seq TO warehouse_dbo;
GRANT SELECT,USAGE ON SEQUENCE data_file_data_file_id_seq TO data_file_notifier;


--
-- Name: email_notification_log; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE email_notification_log FROM PUBLIC;
REVOKE ALL ON TABLE email_notification_log FROM warehouse_dbo;
GRANT ALL ON TABLE email_notification_log TO warehouse_dbo;
GRANT SELECT ON TABLE email_notification_log TO egottschalk;


--
-- Name: emaill_reports_schedule; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE emaill_reports_schedule FROM PUBLIC;
REVOKE ALL ON TABLE emaill_reports_schedule FROM warehouse_dbo;
GRANT ALL ON TABLE emaill_reports_schedule TO warehouse_dbo;
GRANT SELECT ON TABLE emaill_reports_schedule TO dataman;


--
-- Name: etl_checkpoint; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE etl_checkpoint FROM PUBLIC;
REVOKE ALL ON TABLE etl_checkpoint FROM warehouse_dbo;
GRANT ALL ON TABLE etl_checkpoint TO warehouse_dbo;
GRANT SELECT ON TABLE etl_checkpoint TO egottschalk;


--
-- Name: failure_notification_whitelist; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE failure_notification_whitelist FROM PUBLIC;
REVOKE ALL ON TABLE failure_notification_whitelist FROM warehouse_dbo;
GRANT ALL ON TABLE failure_notification_whitelist TO warehouse_dbo;
GRANT SELECT ON TABLE failure_notification_whitelist TO egottschalk;


--
-- Name: process; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE process FROM PUBLIC;
REVOKE ALL ON TABLE process FROM warehouse_dbo;
GRANT ALL ON TABLE process TO warehouse_dbo;
GRANT SELECT ON TABLE process TO egottschalk;


--
-- Name: process_checkpoint; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE process_checkpoint FROM PUBLIC;
REVOKE ALL ON TABLE process_checkpoint FROM warehouse_dbo;
GRANT ALL ON TABLE process_checkpoint TO warehouse_dbo;
GRANT SELECT ON TABLE process_checkpoint TO egottschalk;


--
-- Name: process_concurrent_trans; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE process_concurrent_trans FROM PUBLIC;
REVOKE ALL ON TABLE process_concurrent_trans FROM warehouse_dbo;
GRANT ALL ON TABLE process_concurrent_trans TO warehouse_dbo;
GRANT SELECT ON TABLE process_concurrent_trans TO egottschalk;


--
-- Name: process_configuration; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE process_configuration FROM PUBLIC;
REVOKE ALL ON TABLE process_configuration FROM warehouse_dbo;
GRANT ALL ON TABLE process_configuration TO warehouse_dbo;
GRANT SELECT ON TABLE process_configuration TO egottschalk;


--
-- Name: process_temp; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE process_temp FROM PUBLIC;
REVOKE ALL ON TABLE process_temp FROM warehouse_dbo;
GRANT ALL ON TABLE process_temp TO warehouse_dbo;
GRANT SELECT ON TABLE process_temp TO egottschalk;


--
-- Name: system_parameter; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE system_parameter FROM PUBLIC;
REVOKE ALL ON TABLE system_parameter FROM warehouse_dbo;
GRANT ALL ON TABLE system_parameter TO warehouse_dbo;
GRANT SELECT ON TABLE system_parameter TO egottschalk;


--
-- Name: transfer_file_log; Type: ACL; Schema: control; Owner: dataman
--

REVOKE ALL ON TABLE transfer_file_log FROM PUBLIC;
REVOKE ALL ON TABLE transfer_file_log FROM dataman;
GRANT ALL ON TABLE transfer_file_log TO dataman;
GRANT ALL ON TABLE transfer_file_log TO warehouse_dbo;


--
-- Name: transfer_process_log; Type: ACL; Schema: control; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE transfer_process_log FROM PUBLIC;
REVOKE ALL ON TABLE transfer_process_log FROM warehouse_dbo;
GRANT ALL ON TABLE transfer_process_log TO warehouse_dbo;
GRANT SELECT ON TABLE transfer_process_log TO dataman;


SET search_path = dbclk, pg_catalog;

--
-- Name: daily_agg_adm_creative; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_adm_creative FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_adm_creative FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_adm_creative TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_adm_creative TO dataman;
GRANT SELECT ON TABLE daily_agg_adm_creative TO egottschalk;


--
-- Name: daily_agg_adm_creative_delivery; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_adm_creative_delivery FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_adm_creative_delivery FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_adm_creative_delivery TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_adm_creative_delivery TO dataman;
GRANT SELECT ON TABLE daily_agg_adm_creative_delivery TO egottschalk;


--
-- Name: daily_agg_campaign; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_campaign FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_campaign FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_campaign TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_campaign TO dataman;
GRANT SELECT ON TABLE daily_agg_campaign TO egottschalk;


--
-- Name: daily_agg_publisher_device; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_publisher_device FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_publisher_device FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_publisher_device TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_publisher_device TO dataman;
GRANT SELECT ON TABLE daily_agg_publisher_device TO egottschalk;


--
-- Name: daily_agg_publishers_day; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_publishers_day FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_publishers_day FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_publishers_day TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_publishers_day TO dataman;
GRANT SELECT ON TABLE daily_agg_publishers_day TO egottschalk;


--
-- Name: daily_agg_site_campaign_day; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_site_campaign_day FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_site_campaign_day FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_site_campaign_day TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_site_campaign_day TO dataman;
GRANT SELECT ON TABLE daily_agg_site_campaign_day TO egottschalk;


--
-- Name: daily_agg_site_day; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_site_day FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_site_day FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_site_day TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_site_day TO dataman;
GRANT SELECT ON TABLE daily_agg_site_day TO egottschalk;


--
-- Name: daily_agg_site_order; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_agg_site_order FROM PUBLIC;
REVOKE ALL ON TABLE daily_agg_site_order FROM warehouse_dbo;
GRANT ALL ON TABLE daily_agg_site_order TO warehouse_dbo;
GRANT SELECT ON TABLE daily_agg_site_order TO dataman;
GRANT SELECT ON TABLE daily_agg_site_order TO egottschalk;


--
-- Name: daily_order_count_site; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_order_count_site FROM PUBLIC;
REVOKE ALL ON TABLE daily_order_count_site FROM warehouse_dbo;
GRANT ALL ON TABLE daily_order_count_site TO warehouse_dbo;
GRANT SELECT ON TABLE daily_order_count_site TO dataman;
GRANT SELECT ON TABLE daily_order_count_site TO egottschalk;


--
-- Name: monthly_agg_site; Type: ACL; Schema: dbclk; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_agg_site FROM PUBLIC;
REVOKE ALL ON TABLE monthly_agg_site FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_agg_site TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_agg_site TO dataman;
GRANT SELECT ON TABLE monthly_agg_site TO egottschalk;


SET search_path = evttracker, pg_catalog;

--
-- Name: daily_event_adcel_stats; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_adcel_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_adcel_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_adcel_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_adcel_stats TO dataman;


--
-- Name: daily_event_by_distance; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_by_distance FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_by_distance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_by_distance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_by_distance TO dataman;
GRANT SELECT ON TABLE daily_event_by_distance TO egottschalk;


--
-- Name: daily_event_dma; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_dma FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_dma FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_dma TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_dma TO dataman;
GRANT SELECT ON TABLE daily_event_dma TO egottschalk;


--
-- Name: daily_event_dma_by_hour; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_dma_by_hour FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_dma_by_hour FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_dma_by_hour TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_dma_by_hour TO dataman;
GRANT SELECT ON TABLE daily_event_dma_by_hour TO egottschalk;


--
-- Name: daily_event_download; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_download FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_download FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_download TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_download TO dataman;
GRANT SELECT ON TABLE daily_event_download TO egottschalk;


--
-- Name: daily_event_location_by_distance; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_location_by_distance FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_location_by_distance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_location_by_distance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_location_by_distance TO dataman;


--
-- Name: daily_event_maps; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_maps FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_maps FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_maps TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_maps TO dataman;
GRANT SELECT ON TABLE daily_event_maps TO egottschalk;


--
-- Name: daily_event_maps_olap; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_maps_olap FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_maps_olap FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_maps_olap TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_maps_olap TO dataman;


--
-- Name: daily_event_maps_olap_min; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_maps_olap_min FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_maps_olap_min FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_maps_olap_min TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_maps_olap_min TO dataman;


--
-- Name: daily_event_maps_tmp; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_maps_tmp FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_maps_tmp FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_maps_tmp TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_maps_tmp TO dataman;
GRANT SELECT ON TABLE daily_event_maps_tmp TO egottschalk;


--
-- Name: daily_event_stats; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats TO dataman;
GRANT SELECT ON TABLE daily_event_stats TO egottschalk;


--
-- Name: daily_event_stats_adnet; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats_adnet FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats_adnet FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats_adnet TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats_adnet TO dataman;
GRANT SELECT ON TABLE daily_event_stats_adnet TO egottschalk;


--
-- Name: daily_event_stats_by_hour; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_stats_by_hour FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_stats_by_hour FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_stats_by_hour TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_stats_by_hour TO dataman;
GRANT SELECT ON TABLE daily_event_stats_by_hour TO egottschalk;


--
-- Name: daily_event_x_value; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_x_value FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_x_value FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_x_value TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_x_value TO dataman;
GRANT SELECT ON TABLE daily_event_x_value TO egottschalk;


--
-- Name: daily_event_x_value_by_hour; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_x_value_by_hour FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_x_value_by_hour FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_x_value_by_hour TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_x_value_by_hour TO dataman;
GRANT SELECT ON TABLE daily_event_x_value_by_hour TO egottschalk;


--
-- Name: daily_event_x_value_report; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_event_x_value_report FROM PUBLIC;
REVOKE ALL ON TABLE daily_event_x_value_report FROM warehouse_dbo;
GRANT ALL ON TABLE daily_event_x_value_report TO warehouse_dbo;
GRANT SELECT ON TABLE daily_event_x_value_report TO dataman;
GRANT SELECT ON TABLE daily_event_x_value_report TO egottschalk;


--
-- Name: daily_store_location_by_distance; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_store_location_by_distance FROM PUBLIC;
REVOKE ALL ON TABLE daily_store_location_by_distance FROM warehouse_dbo;
GRANT ALL ON TABLE daily_store_location_by_distance TO warehouse_dbo;
GRANT SELECT ON TABLE daily_store_location_by_distance TO dataman;
GRANT SELECT ON TABLE daily_store_location_by_distance TO egottschalk;


--
-- Name: daily_trane_stats; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE daily_trane_stats FROM PUBLIC;
REVOKE ALL ON TABLE daily_trane_stats FROM warehouse_dbo;
GRANT ALL ON TABLE daily_trane_stats TO warehouse_dbo;
GRANT SELECT ON TABLE daily_trane_stats TO dataman;
GRANT SELECT ON TABLE daily_trane_stats TO egottschalk;


--
-- Name: monthly_event_stats; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_event_stats FROM PUBLIC;
REVOKE ALL ON TABLE monthly_event_stats FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_event_stats TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_event_stats TO dataman;
GRANT SELECT ON TABLE monthly_event_stats TO egottschalk;


--
-- Name: monthly_event_stats_by_date; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_event_stats_by_date FROM PUBLIC;
REVOKE ALL ON TABLE monthly_event_stats_by_date FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_event_stats_by_date TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_event_stats_by_date TO dataman;
GRANT SELECT ON TABLE monthly_event_stats_by_date TO egottschalk;


--
-- Name: monthly_event_stats_by_hour; Type: ACL; Schema: evttracker; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE monthly_event_stats_by_hour FROM PUBLIC;
REVOKE ALL ON TABLE monthly_event_stats_by_hour FROM warehouse_dbo;
GRANT ALL ON TABLE monthly_event_stats_by_hour TO warehouse_dbo;
GRANT SELECT ON TABLE monthly_event_stats_by_hour TO dataman;
GRANT SELECT ON TABLE monthly_event_stats_by_hour TO egottschalk;


SET search_path = refer, pg_catalog;

--
-- Name: ad_network_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ad_network_dim FROM PUBLIC;
REVOKE ALL ON TABLE ad_network_dim FROM warehouse_dbo;
GRANT ALL ON TABLE ad_network_dim TO warehouse_dbo;
GRANT SELECT ON TABLE ad_network_dim TO john;
GRANT SELECT ON TABLE ad_network_dim TO dimitrij;
GRANT SELECT ON TABLE ad_network_dim TO dataman;


--
-- Name: ad_network_param_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ad_network_param_dim FROM PUBLIC;
REVOKE ALL ON TABLE ad_network_param_dim FROM warehouse_dbo;
GRANT ALL ON TABLE ad_network_param_dim TO warehouse_dbo;
GRANT SELECT ON TABLE ad_network_param_dim TO john;
GRANT SELECT ON TABLE ad_network_param_dim TO dimitrij;
GRANT SELECT ON TABLE ad_network_param_dim TO dataman;


--
-- Name: adm_advertiser_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_advertiser_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_advertiser_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_advertiser_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_advertiser_dim TO dataman;


--
-- Name: adm_channel_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_channel_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_channel_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_channel_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_channel_dim TO dataman;


--
-- Name: adm_creative_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_creative_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_creative_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_creative_dim TO warehouse_dbo;


--
-- Name: adm_creative_dim_bk; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_creative_dim_bk FROM PUBLIC;
REVOKE ALL ON TABLE adm_creative_dim_bk FROM warehouse_dbo;
GRANT ALL ON TABLE adm_creative_dim_bk TO warehouse_dbo;


--
-- Name: adm_dim_adsizes; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_adsizes FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_adsizes FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_adsizes TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_adsizes TO dataman;


--
-- Name: adm_dim_advertisers; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_advertisers FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_advertisers FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_advertisers TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_advertisers TO dataman;


--
-- Name: adm_dim_creatives; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_creatives FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_creatives FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_creatives TO warehouse_dbo;


--
-- Name: adm_dim_flights; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_flights FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_flights FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_flights TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_flights TO dataman;


--
-- Name: adm_dim_orders; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_orders FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_orders FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_orders TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_orders TO dataman;


--
-- Name: adm_flight_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_flight_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_flight_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_flight_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_flight_dim TO dataman;


--
-- Name: adm_order_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_order_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_order_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_order_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_order_dim TO dataman;


--
-- Name: adm_dim_io_lineitems; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_io_lineitems FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_io_lineitems FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_io_lineitems TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_io_lineitems TO dataman;


--
-- Name: adm_dim_organizations; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_organizations FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_organizations FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_organizations TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_organizations TO dataman;


--
-- Name: adm_dim_platforms; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_platforms FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_platforms FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_platforms TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_platforms TO dataman;


--
-- Name: adm_dim_portals; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_portals FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_portals FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_portals TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_portals TO dataman;


--
-- Name: adm_dim_properties; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_properties FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_properties FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_properties TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_properties TO dataman;


--
-- Name: adm_dim_propertygroups; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_propertygroups FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_propertygroups FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_propertygroups TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_propertygroups TO dataman;


--
-- Name: adm_dim_publishers; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_dim_publishers FROM PUBLIC;
REVOKE ALL ON TABLE adm_dim_publishers FROM warehouse_dbo;
GRANT ALL ON TABLE adm_dim_publishers TO warehouse_dbo;
GRANT SELECT ON TABLE adm_dim_publishers TO dataman;


--
-- Name: adm_flight_dim_bk; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_flight_dim_bk FROM PUBLIC;
REVOKE ALL ON TABLE adm_flight_dim_bk FROM warehouse_dbo;
GRANT ALL ON TABLE adm_flight_dim_bk TO warehouse_dbo;
GRANT SELECT ON TABLE adm_flight_dim_bk TO dataman;


--
-- Name: adm_mapping_channels; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_mapping_channels FROM PUBLIC;
REVOKE ALL ON TABLE adm_mapping_channels FROM warehouse_dbo;
GRANT ALL ON TABLE adm_mapping_channels TO warehouse_dbo;
GRANT SELECT ON TABLE adm_mapping_channels TO dataman;


--
-- Name: adm_mapping_portals; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_mapping_portals FROM PUBLIC;
REVOKE ALL ON TABLE adm_mapping_portals FROM warehouse_dbo;
GRANT ALL ON TABLE adm_mapping_portals TO warehouse_dbo;
GRANT SELECT ON TABLE adm_mapping_portals TO dataman;


--
-- Name: adm_network_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_network_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_network_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_network_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_network_dim TO dataman;


--
-- Name: adm_order_dim_bk; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_order_dim_bk FROM PUBLIC;
REVOKE ALL ON TABLE adm_order_dim_bk FROM warehouse_dbo;
GRANT ALL ON TABLE adm_order_dim_bk TO warehouse_dbo;
GRANT SELECT ON TABLE adm_order_dim_bk TO dataman;


--
-- Name: adm_organization_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_organization_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_organization_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_organization_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_organization_dim TO dataman;


--
-- Name: adm_placement_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_placement_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_placement_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_placement_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_placement_dim TO dataman;


--
-- Name: adm_portal_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_portal_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_portal_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_portal_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_portal_dim TO dataman;


--
-- Name: adm_publication_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_publication_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_publication_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_publication_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_publication_dim TO dataman;


--
-- Name: adm_publisher_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_publisher_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_publisher_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_publisher_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_publisher_dim TO dataman;


--
-- Name: adm_website_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_website_dim FROM PUBLIC;
REVOKE ALL ON TABLE adm_website_dim FROM warehouse_dbo;
GRANT ALL ON TABLE adm_website_dim TO warehouse_dbo;
GRANT SELECT ON TABLE adm_website_dim TO dataman;


--
-- Name: adm_website_dim_bk; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE adm_website_dim_bk FROM PUBLIC;
REVOKE ALL ON TABLE adm_website_dim_bk FROM warehouse_dbo;
GRANT ALL ON TABLE adm_website_dim_bk TO warehouse_dbo;
GRANT SELECT ON TABLE adm_website_dim_bk TO dataman;


--
-- Name: content_category_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE content_category_dim FROM PUBLIC;
REVOKE ALL ON TABLE content_category_dim FROM warehouse_dbo;
GRANT ALL ON TABLE content_category_dim TO warehouse_dbo;
GRANT SELECT ON TABLE content_category_dim TO john;
GRANT SELECT ON TABLE content_category_dim TO dimitrij;
GRANT SELECT ON TABLE content_category_dim TO dataman;


--
-- Name: correction_factor_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE correction_factor_dim FROM PUBLIC;
REVOKE ALL ON TABLE correction_factor_dim FROM warehouse_dbo;
GRANT ALL ON TABLE correction_factor_dim TO warehouse_dbo;
GRANT SELECT ON TABLE correction_factor_dim TO dataman;


--
-- Name: date_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE date_dim FROM PUBLIC;
REVOKE ALL ON TABLE date_dim FROM warehouse_dbo;
GRANT ALL ON TABLE date_dim TO warehouse_dbo;
GRANT SELECT ON TABLE date_dim TO dataman;


--
-- Name: dc_ad_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dc_ad_dim FROM PUBLIC;
REVOKE ALL ON TABLE dc_ad_dim FROM warehouse_dbo;
GRANT ALL ON TABLE dc_ad_dim TO warehouse_dbo;
GRANT SELECT ON TABLE dc_ad_dim TO dataman;


--
-- Name: dc_order_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dc_order_dim FROM PUBLIC;
REVOKE ALL ON TABLE dc_order_dim FROM warehouse_dbo;
GRANT ALL ON TABLE dc_order_dim TO warehouse_dbo;
GRANT SELECT ON TABLE dc_order_dim TO dataman;


--
-- Name: dc_site_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dc_site_dim FROM PUBLIC;
REVOKE ALL ON TABLE dc_site_dim FROM warehouse_dbo;
GRANT ALL ON TABLE dc_site_dim TO warehouse_dbo;
GRANT SELECT ON TABLE dc_site_dim TO dataman;


--
-- Name: dfp_dim_ad_units; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_ad_units FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_ad_units FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_ad_units TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_ad_units TO dataman;


--
-- Name: dfp_dim_creatives; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_creatives FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_creatives FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_creatives TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_creatives TO dataman;


--
-- Name: dfp_dim_line_items; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_line_items FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_line_items FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_line_items TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_line_items TO dataman;


--
-- Name: dfp_dim_lineitem_creatives; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_lineitem_creatives FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_lineitem_creatives FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_lineitem_creatives TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_lineitem_creatives TO dataman;


--
-- Name: dfp_dim_lineitem_targets; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_lineitem_targets FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_lineitem_targets FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_lineitem_targets TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_lineitem_targets TO dataman;


--
-- Name: dfp_dim_orders; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_orders FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_orders FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_orders TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_orders TO dataman;


--
-- Name: dfp_dim_placements; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE dfp_dim_placements FROM PUBLIC;
REVOKE ALL ON TABLE dfp_dim_placements FROM warehouse_dbo;
GRANT ALL ON TABLE dfp_dim_placements TO warehouse_dbo;
GRANT SELECT ON TABLE dfp_dim_placements TO dataman;


--
-- Name: display_block_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE display_block_dim FROM PUBLIC;
REVOKE ALL ON TABLE display_block_dim FROM warehouse_dbo;
GRANT ALL ON TABLE display_block_dim TO warehouse_dbo;
GRANT SELECT ON TABLE display_block_dim TO john;
GRANT SELECT ON TABLE display_block_dim TO dimitrij;
GRANT SELECT ON TABLE display_block_dim TO dataman;


--
-- Name: event_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE event_dim FROM PUBLIC;
REVOKE ALL ON TABLE event_dim FROM warehouse_dbo;
GRANT ALL ON TABLE event_dim TO warehouse_dbo;
GRANT SELECT ON TABLE event_dim TO john;
GRANT SELECT ON TABLE event_dim TO dimitrij;
GRANT SELECT ON TABLE event_dim TO dataman;


--
-- Name: ga_channel_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ga_channel_dim FROM PUBLIC;
REVOKE ALL ON TABLE ga_channel_dim FROM warehouse_dbo;
GRANT ALL ON TABLE ga_channel_dim TO warehouse_dbo;
GRANT SELECT ON TABLE ga_channel_dim TO dataman;


--
-- Name: partner_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE partner_dim FROM PUBLIC;
REVOKE ALL ON TABLE partner_dim FROM warehouse_dbo;
GRANT ALL ON TABLE partner_dim TO warehouse_dbo;
GRANT SELECT ON TABLE partner_dim TO john;
GRANT SELECT ON TABLE partner_dim TO dimitrij;
GRANT SELECT ON TABLE partner_dim TO dataman;


--
-- Name: month_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE month_dim FROM PUBLIC;
REVOKE ALL ON TABLE month_dim FROM warehouse_dbo;
GRANT ALL ON TABLE month_dim TO warehouse_dbo;
GRANT SELECT ON TABLE month_dim TO dataman;


--
-- Name: network_type_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE network_type_dim FROM PUBLIC;
REVOKE ALL ON TABLE network_type_dim FROM warehouse_dbo;
GRANT ALL ON TABLE network_type_dim TO warehouse_dbo;
GRANT SELECT ON TABLE network_type_dim TO dataman;


--
-- Name: page_template_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE page_template_dim FROM PUBLIC;
REVOKE ALL ON TABLE page_template_dim FROM warehouse_dbo;
GRANT ALL ON TABLE page_template_dim TO warehouse_dbo;
GRANT SELECT ON TABLE page_template_dim TO dataman;


--
-- Name: partner_module_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE partner_module_dim FROM PUBLIC;
REVOKE ALL ON TABLE partner_module_dim FROM warehouse_dbo;
GRANT ALL ON TABLE partner_module_dim TO warehouse_dbo;
GRANT SELECT ON TABLE partner_module_dim TO john;
GRANT SELECT ON TABLE partner_module_dim TO dimitrij;
GRANT SELECT ON TABLE partner_module_dim TO dataman;


--
-- Name: point_of_interest_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE point_of_interest_dim FROM PUBLIC;
REVOKE ALL ON TABLE point_of_interest_dim FROM warehouse_dbo;
GRANT ALL ON TABLE point_of_interest_dim TO warehouse_dbo;
GRANT SELECT ON TABLE point_of_interest_dim TO dataman;


--
-- Name: point_of_interest_dim_bk; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE point_of_interest_dim_bk FROM PUBLIC;
REVOKE ALL ON TABLE point_of_interest_dim_bk FROM warehouse_dbo;
GRANT ALL ON TABLE point_of_interest_dim_bk TO warehouse_dbo;
GRANT SELECT ON TABLE point_of_interest_dim_bk TO dataman;


--
-- Name: point_of_interest_dim_tmp; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE point_of_interest_dim_tmp FROM PUBLIC;
REVOKE ALL ON TABLE point_of_interest_dim_tmp FROM warehouse_dbo;
GRANT ALL ON TABLE point_of_interest_dim_tmp TO warehouse_dbo;
GRANT SELECT ON TABLE point_of_interest_dim_tmp TO dataman;


--
-- Name: portal_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE portal_dim FROM PUBLIC;
REVOKE ALL ON TABLE portal_dim FROM warehouse_dbo;
GRANT ALL ON TABLE portal_dim TO warehouse_dbo;
GRANT SELECT ON TABLE portal_dim TO john;
GRANT SELECT ON TABLE portal_dim TO dimitrij;
GRANT SELECT ON TABLE portal_dim TO dataman;


--
-- Name: portal_host_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE portal_host_dim FROM PUBLIC;
REVOKE ALL ON TABLE portal_host_dim FROM warehouse_dbo;
GRANT ALL ON TABLE portal_host_dim TO warehouse_dbo;
GRANT SELECT ON TABLE portal_host_dim TO john;
GRANT SELECT ON TABLE portal_host_dim TO dimitrij;
GRANT SELECT ON TABLE portal_host_dim TO dataman;


--
-- Name: pro_audit_report_name_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE pro_audit_report_name_dim FROM PUBLIC;
REVOKE ALL ON TABLE pro_audit_report_name_dim FROM warehouse_dbo;
GRANT ALL ON TABLE pro_audit_report_name_dim TO warehouse_dbo;
GRANT SELECT ON TABLE pro_audit_report_name_dim TO john;
GRANT SELECT ON TABLE pro_audit_report_name_dim TO dimitrij;
GRANT SELECT ON TABLE pro_audit_report_name_dim TO dataman;


--
-- Name: referrer_hostname_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE referrer_hostname_dim FROM PUBLIC;
REVOKE ALL ON TABLE referrer_hostname_dim FROM warehouse_dbo;
GRANT ALL ON TABLE referrer_hostname_dim TO warehouse_dbo;
GRANT SELECT ON TABLE referrer_hostname_dim TO dataman;


--
-- Name: request_type_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE request_type_dim FROM PUBLIC;
REVOKE ALL ON TABLE request_type_dim FROM warehouse_dbo;
GRANT ALL ON TABLE request_type_dim TO warehouse_dbo;
GRANT SELECT ON TABLE request_type_dim TO dataman;


--
-- Name: revenue_share_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE revenue_share_dim FROM PUBLIC;
REVOKE ALL ON TABLE revenue_share_dim FROM warehouse_dbo;
GRANT ALL ON TABLE revenue_share_dim TO warehouse_dbo;
GRANT SELECT ON TABLE revenue_share_dim TO dataman;


--
-- Name: store_location_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE store_location_dim FROM PUBLIC;
REVOKE ALL ON TABLE store_location_dim FROM warehouse_dbo;
GRANT ALL ON TABLE store_location_dim TO warehouse_dbo;
GRANT SELECT ON TABLE store_location_dim TO dataman;


--
-- Name: time_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE time_dim FROM PUBLIC;
REVOKE ALL ON TABLE time_dim FROM warehouse_dbo;
GRANT ALL ON TABLE time_dim TO warehouse_dbo;
GRANT SELECT ON TABLE time_dim TO dataman;


--
-- Name: user_agent_dim; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE user_agent_dim FROM PUBLIC;
REVOKE ALL ON TABLE user_agent_dim FROM warehouse_dbo;
GRANT ALL ON TABLE user_agent_dim TO warehouse_dbo;
GRANT SELECT ON TABLE user_agent_dim TO app_user;
GRANT SELECT ON TABLE user_agent_dim TO dataman;


--
-- Name: user_agent_dim_user_agent_sk_seq; Type: ACL; Schema: refer; Owner: warehouse_dbo
--

REVOKE ALL ON SEQUENCE user_agent_dim_user_agent_sk_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE user_agent_dim_user_agent_sk_seq FROM warehouse_dbo;
GRANT ALL ON SEQUENCE user_agent_dim_user_agent_sk_seq TO warehouse_dbo;
GRANT USAGE ON SEQUENCE user_agent_dim_user_agent_sk_seq TO app_user;


SET search_path = staging, pg_catalog;

--
-- Name: ad_request_log_app3; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_request_log_app3 FROM PUBLIC;
REVOKE ALL ON TABLE ad_request_log_app3 FROM song;
GRANT ALL ON TABLE ad_request_log_app3 TO song;
GRANT SELECT ON TABLE ad_request_log_app3 TO dataman;
GRANT SELECT ON TABLE ad_request_log_app3 TO egottschalk;


--
-- Name: ad_request_test_1; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_request_test_1 FROM PUBLIC;
REVOKE ALL ON TABLE ad_request_test_1 FROM song;
GRANT ALL ON TABLE ad_request_test_1 TO song;
GRANT SELECT ON TABLE ad_request_test_1 TO dataman;
GRANT SELECT ON TABLE ad_request_test_1 TO egottschalk;


--
-- Name: ad_request_test_2; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_request_test_2 FROM PUBLIC;
REVOKE ALL ON TABLE ad_request_test_2 FROM song;
GRANT ALL ON TABLE ad_request_test_2 TO song;
GRANT SELECT ON TABLE ad_request_test_2 TO dataman;
GRANT SELECT ON TABLE ad_request_test_2 TO egottschalk;


--
-- Name: ad_request_test_bk; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_request_test_bk FROM PUBLIC;
REVOKE ALL ON TABLE ad_request_test_bk FROM song;
GRANT ALL ON TABLE ad_request_test_bk TO song;
GRANT SELECT ON TABLE ad_request_test_bk TO dataman;
GRANT SELECT ON TABLE ad_request_test_bk TO egottschalk;


--
-- Name: ad_response_test; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_response_test FROM PUBLIC;
REVOKE ALL ON TABLE ad_response_test FROM song;
GRANT ALL ON TABLE ad_response_test TO song;
GRANT SELECT ON TABLE ad_response_test TO dataman;
GRANT SELECT ON TABLE ad_response_test TO egottschalk;


--
-- Name: ad_response_test_1; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_response_test_1 FROM PUBLIC;
REVOKE ALL ON TABLE ad_response_test_1 FROM song;
GRANT ALL ON TABLE ad_response_test_1 TO song;
GRANT SELECT ON TABLE ad_response_test_1 TO dataman;
GRANT SELECT ON TABLE ad_response_test_1 TO egottschalk;


--
-- Name: ad_response_test_2; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE ad_response_test_2 FROM PUBLIC;
REVOKE ALL ON TABLE ad_response_test_2 FROM song;
GRANT ALL ON TABLE ad_response_test_2 TO song;
GRANT SELECT ON TABLE ad_response_test_2 TO dataman;
GRANT SELECT ON TABLE ad_response_test_2 TO egottschalk;


--
-- Name: ad_response_test_BK; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE "ad_response_test_BK" FROM PUBLIC;
REVOKE ALL ON TABLE "ad_response_test_BK" FROM song;
GRANT ALL ON TABLE "ad_response_test_BK" TO song;
GRANT SELECT ON TABLE "ad_response_test_BK" TO dataman;
GRANT SELECT ON TABLE "ad_response_test_BK" TO egottschalk;


--
-- Name: backup_filename; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE backup_filename FROM PUBLIC;
REVOKE ALL ON TABLE backup_filename FROM warehouse_dbo;
GRANT ALL ON TABLE backup_filename TO warehouse_dbo;
GRANT SELECT ON TABLE backup_filename TO dataman;
GRANT SELECT ON TABLE backup_filename TO egottschalk;


--
-- Name: bbuniq_agg_group_act_adj; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE bbuniq_agg_group_act_adj FROM PUBLIC;
REVOKE ALL ON TABLE bbuniq_agg_group_act_adj FROM ejohnst;
GRANT ALL ON TABLE bbuniq_agg_group_act_adj TO ejohnst;
GRANT SELECT ON TABLE bbuniq_agg_group_act_adj TO dataman;
GRANT SELECT ON TABLE bbuniq_agg_group_act_adj TO egottschalk;


--
-- Name: bbuniq_agg_group_portal_act_adj; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE bbuniq_agg_group_portal_act_adj FROM PUBLIC;
REVOKE ALL ON TABLE bbuniq_agg_group_portal_act_adj FROM ejohnst;
GRANT ALL ON TABLE bbuniq_agg_group_portal_act_adj TO ejohnst;
GRANT SELECT ON TABLE bbuniq_agg_group_portal_act_adj TO dataman;
GRANT SELECT ON TABLE bbuniq_agg_group_portal_act_adj TO egottschalk;


--
-- Name: bbuniq_agg_network_act_adj; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE bbuniq_agg_network_act_adj FROM PUBLIC;
REVOKE ALL ON TABLE bbuniq_agg_network_act_adj FROM ejohnst;
GRANT ALL ON TABLE bbuniq_agg_network_act_adj TO ejohnst;
GRANT SELECT ON TABLE bbuniq_agg_network_act_adj TO dataman;
GRANT SELECT ON TABLE bbuniq_agg_network_act_adj TO egottschalk;


--
-- Name: bbuniq_agg_partner_act_adj; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE bbuniq_agg_partner_act_adj FROM PUBLIC;
REVOKE ALL ON TABLE bbuniq_agg_partner_act_adj FROM ejohnst;
GRANT ALL ON TABLE bbuniq_agg_partner_act_adj TO ejohnst;
GRANT SELECT ON TABLE bbuniq_agg_partner_act_adj TO dataman;
GRANT SELECT ON TABLE bbuniq_agg_partner_act_adj TO egottschalk;


--
-- Name: bbuniq_agg_portal_act_adj; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE bbuniq_agg_portal_act_adj FROM PUBLIC;
REVOKE ALL ON TABLE bbuniq_agg_portal_act_adj FROM ejohnst;
GRANT ALL ON TABLE bbuniq_agg_portal_act_adj TO ejohnst;
GRANT SELECT ON TABLE bbuniq_agg_portal_act_adj TO dataman;
GRANT SELECT ON TABLE bbuniq_agg_portal_act_adj TO egottschalk;


--
-- Name: bbuniq_agg_site_traffic_adj; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE bbuniq_agg_site_traffic_adj FROM PUBLIC;
REVOKE ALL ON TABLE bbuniq_agg_site_traffic_adj FROM ejohnst;
GRANT ALL ON TABLE bbuniq_agg_site_traffic_adj TO ejohnst;
GRANT SELECT ON TABLE bbuniq_agg_site_traffic_adj TO dataman;
GRANT SELECT ON TABLE bbuniq_agg_site_traffic_adj TO egottschalk;


--
-- Name: content_category_dim_temp; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE content_category_dim_temp FROM PUBLIC;
REVOKE ALL ON TABLE content_category_dim_temp FROM warehouse_dbo;
GRANT ALL ON TABLE content_category_dim_temp TO warehouse_dbo;
GRANT SELECT ON TABLE content_category_dim_temp TO egottschalk;


--
-- Name: data_file_temp; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE data_file_temp FROM PUBLIC;
REVOKE ALL ON TABLE data_file_temp FROM warehouse_dbo;
GRANT ALL ON TABLE data_file_temp TO warehouse_dbo;
GRANT SELECT,INSERT ON TABLE data_file_temp TO data_file_notifier;
GRANT SELECT ON TABLE data_file_temp TO egottschalk;


--
-- Name: dim_advertisers; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_advertisers FROM PUBLIC;
REVOKE ALL ON TABLE dim_advertisers FROM song;
GRANT ALL ON TABLE dim_advertisers TO song;
GRANT SELECT ON TABLE dim_advertisers TO egottschalk;


--
-- Name: dim_flights; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_flights FROM PUBLIC;
REVOKE ALL ON TABLE dim_flights FROM song;
GRANT ALL ON TABLE dim_flights TO song;
GRANT SELECT ON TABLE dim_flights TO egottschalk;


--
-- Name: dim_networks; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_networks FROM PUBLIC;
REVOKE ALL ON TABLE dim_networks FROM song;
GRANT ALL ON TABLE dim_networks TO song;
GRANT SELECT ON TABLE dim_networks TO egottschalk;


--
-- Name: dim_orders; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_orders FROM PUBLIC;
REVOKE ALL ON TABLE dim_orders FROM song;
GRANT ALL ON TABLE dim_orders TO song;
GRANT SELECT ON TABLE dim_orders TO egottschalk;


--
-- Name: dim_organizations; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_organizations FROM PUBLIC;
REVOKE ALL ON TABLE dim_organizations FROM song;
GRANT ALL ON TABLE dim_organizations TO song;
GRANT SELECT ON TABLE dim_organizations TO egottschalk;


--
-- Name: dim_properties; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_properties FROM PUBLIC;
REVOKE ALL ON TABLE dim_properties FROM song;
GRANT ALL ON TABLE dim_properties TO song;
GRANT SELECT ON TABLE dim_properties TO egottschalk;


--
-- Name: dim_publishers; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE dim_publishers FROM PUBLIC;
REVOKE ALL ON TABLE dim_publishers FROM song;
GRANT ALL ON TABLE dim_publishers TO song;
GRANT SELECT ON TABLE dim_publishers TO egottschalk;


--
-- Name: emj_access_log; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE emj_access_log FROM PUBLIC;
REVOKE ALL ON TABLE emj_access_log FROM ejohnst;
GRANT ALL ON TABLE emj_access_log TO ejohnst;
GRANT SELECT ON TABLE emj_access_log TO dataman;
GRANT SELECT ON TABLE emj_access_log TO egottschalk;


--
-- Name: emj_agent_uniques; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE emj_agent_uniques FROM PUBLIC;
REVOKE ALL ON TABLE emj_agent_uniques FROM ejohnst;
GRANT ALL ON TABLE emj_agent_uniques TO ejohnst;
GRANT SELECT ON TABLE emj_agent_uniques TO dataman;
GRANT SELECT ON TABLE emj_agent_uniques TO egottschalk;


--
-- Name: emj_agent_uniques_bk20110103; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE emj_agent_uniques_bk20110103 FROM PUBLIC;
REVOKE ALL ON TABLE emj_agent_uniques_bk20110103 FROM ejohnst;
GRANT ALL ON TABLE emj_agent_uniques_bk20110103 TO ejohnst;
GRANT SELECT ON TABLE emj_agent_uniques_bk20110103 TO dataman;
GRANT SELECT ON TABLE emj_agent_uniques_bk20110103 TO egottschalk;


--
-- Name: emj_agent_uniques_bk20110104; Type: ACL; Schema: staging; Owner: postgres
--

REVOKE ALL ON TABLE emj_agent_uniques_bk20110104 FROM PUBLIC;
REVOKE ALL ON TABLE emj_agent_uniques_bk20110104 FROM postgres;
GRANT ALL ON TABLE emj_agent_uniques_bk20110104 TO postgres;
GRANT SELECT ON TABLE emj_agent_uniques_bk20110104 TO dataman;
GRANT SELECT ON TABLE emj_agent_uniques_bk20110104 TO egottschalk;


--
-- Name: fct_performance; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE fct_performance FROM PUBLIC;
REVOKE ALL ON TABLE fct_performance FROM song;
GRANT ALL ON TABLE fct_performance TO song;
GRANT SELECT ON TABLE fct_performance TO egottschalk;


--
-- Name: gen_ad_channel_site; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_channel_site FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_channel_site FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_channel_site TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_channel_site TO dataman;
GRANT SELECT ON TABLE gen_ad_channel_site TO egottschalk;


--
-- Name: gen_ad_response_app12; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app12 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app12 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app12 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app12 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app12 TO egottschalk;


--
-- Name: gen_ad_response_app12_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app12_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app12_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app12_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app12_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app12_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app13; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app13 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app13 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app13 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app13 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app13 TO egottschalk;


--
-- Name: gen_ad_response_app13_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app13_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app13_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app13_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app13_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app13_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app14; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app14 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app14 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app14 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app14 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app14 TO egottschalk;


--
-- Name: gen_ad_response_app14_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app14_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app14_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app14_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app14_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app14_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app15; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app15 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app15 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app15 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app15 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app15 TO egottschalk;


--
-- Name: gen_ad_response_app15_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app15_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app15_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app15_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app15_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app15_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app3; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app3 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app3 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app3 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app3 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app3 TO egottschalk;


--
-- Name: gen_ad_response_app3_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app3_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app3_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app3_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app3_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app3_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app4; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app4 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app4 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app4 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app4 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app4 TO egottschalk;


--
-- Name: gen_ad_response_app4_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app4_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app4_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app4_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app4_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app4_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app6; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app6 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app6 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app6 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app6 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app6 TO egottschalk;


--
-- Name: gen_ad_response_app6_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app6_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app6_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app6_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app6_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app6_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app8; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app8 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app8 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app8 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app8 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app8 TO egottschalk;


--
-- Name: gen_ad_response_app8_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app8_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app8_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app8_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app8_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app8_sub1 TO egottschalk;


--
-- Name: gen_ad_response_app9; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app9 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app9 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app9 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app9 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app9 TO egottschalk;


--
-- Name: gen_ad_response_app9_sub1; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ad_response_app9_sub1 FROM PUBLIC;
REVOKE ALL ON TABLE gen_ad_response_app9_sub1 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ad_response_app9_sub1 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ad_response_app9_sub1 TO dataman;
GRANT SELECT ON TABLE gen_ad_response_app9_sub1 TO egottschalk;


--
-- Name: gen_adcel_site_access_log_app3; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_adcel_site_access_log_app3 FROM PUBLIC;
REVOKE ALL ON TABLE gen_adcel_site_access_log_app3 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_adcel_site_access_log_app3 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app3 TO dataman;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app3 TO egottschalk;


--
-- Name: gen_adcel_site_access_log_app4; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_adcel_site_access_log_app4 FROM PUBLIC;
REVOKE ALL ON TABLE gen_adcel_site_access_log_app4 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_adcel_site_access_log_app4 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app4 TO dataman;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app4 TO egottschalk;


--
-- Name: gen_adcel_site_access_log_app6; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_adcel_site_access_log_app6 FROM PUBLIC;
REVOKE ALL ON TABLE gen_adcel_site_access_log_app6 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_adcel_site_access_log_app6 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app6 TO dataman;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app6 TO egottschalk;


--
-- Name: gen_adcel_site_access_log_app8; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_adcel_site_access_log_app8 FROM PUBLIC;
REVOKE ALL ON TABLE gen_adcel_site_access_log_app8 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_adcel_site_access_log_app8 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app8 TO dataman;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app8 TO egottschalk;


--
-- Name: gen_adcel_site_access_log_app9; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_adcel_site_access_log_app9 FROM PUBLIC;
REVOKE ALL ON TABLE gen_adcel_site_access_log_app9 FROM warehouse_dbo;
GRANT ALL ON TABLE gen_adcel_site_access_log_app9 TO warehouse_dbo;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app9 TO dataman;
GRANT SELECT ON TABLE gen_adcel_site_access_log_app9 TO egottschalk;


--
-- Name: gen_adsense_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_adsense_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_adsense_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_adsense_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_adsense_performance TO dataman;
GRANT SELECT ON TABLE gen_adsense_performance TO egottschalk;


--
-- Name: gen_citygrid_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_citygrid_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_citygrid_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_citygrid_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_citygrid_performance TO dataman;
GRANT SELECT ON TABLE gen_citygrid_performance TO egottschalk;


--
-- Name: gen_event_tracker_log; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_event_tracker_log FROM PUBLIC;
REVOKE ALL ON TABLE gen_event_tracker_log FROM warehouse_dbo;
GRANT ALL ON TABLE gen_event_tracker_log TO warehouse_dbo;
GRANT SELECT ON TABLE gen_event_tracker_log TO dataman;
GRANT SELECT ON TABLE gen_event_tracker_log TO egottschalk;


--
-- Name: gen_ga_channel; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_ga_channel FROM PUBLIC;
REVOKE ALL ON TABLE gen_ga_channel FROM warehouse_dbo;
GRANT ALL ON TABLE gen_ga_channel TO warehouse_dbo;
GRANT SELECT ON TABLE gen_ga_channel TO dataman;
GRANT SELECT ON TABLE gen_ga_channel TO egottschalk;


--
-- Name: gen_itunes_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_itunes_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_itunes_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_itunes_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_itunes_performance TO dataman;
GRANT SELECT ON TABLE gen_itunes_performance TO egottschalk;


--
-- Name: gen_jt_pub_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_jt_pub_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_jt_pub_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_jt_pub_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_jt_pub_performance TO dataman;
GRANT SELECT ON TABLE gen_jt_pub_performance TO egottschalk;


--
-- Name: gen_jumptap_daily_sum; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_jumptap_daily_sum FROM PUBLIC;
REVOKE ALL ON TABLE gen_jumptap_daily_sum FROM warehouse_dbo;
GRANT ALL ON TABLE gen_jumptap_daily_sum TO warehouse_dbo;
GRANT SELECT ON TABLE gen_jumptap_daily_sum TO dataman;
GRANT SELECT ON TABLE gen_jumptap_daily_sum TO egottschalk;


--
-- Name: gen_marchex_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_marchex_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_marchex_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_marchex_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_marchex_performance TO dataman;
GRANT SELECT ON TABLE gen_marchex_performance TO egottschalk;


--
-- Name: gen_millenial_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_millenial_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_millenial_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_millenial_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_millenial_performance TO dataman;
GRANT SELECT ON TABLE gen_millenial_performance TO egottschalk;


--
-- Name: gen_monthly_ad_channel_site; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_ad_channel_site FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_ad_channel_site FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_ad_channel_site TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_ad_channel_site TO dataman;
GRANT SELECT ON TABLE gen_monthly_ad_channel_site TO egottschalk;


--
-- Name: gen_monthly_citygrid_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_citygrid_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_citygrid_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_citygrid_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_citygrid_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_citygrid_performance TO egottschalk;


--
-- Name: gen_monthly_doubleclick_site; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_doubleclick_site FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_doubleclick_site FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_doubleclick_site TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_doubleclick_site TO dataman;
GRANT SELECT ON TABLE gen_monthly_doubleclick_site TO egottschalk;


--
-- Name: gen_monthly_ga_channel; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_ga_channel FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_ga_channel FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_ga_channel TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_ga_channel TO dataman;
GRANT SELECT ON TABLE gen_monthly_ga_channel TO egottschalk;


--
-- Name: gen_monthly_itunes_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_itunes_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_itunes_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_itunes_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_itunes_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_itunes_performance TO egottschalk;


--
-- Name: gen_monthly_jumptap_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_jumptap_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_jumptap_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_jumptap_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_jumptap_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_jumptap_performance TO egottschalk;


--
-- Name: gen_monthly_marchex_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_marchex_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_marchex_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_marchex_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_marchex_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_marchex_performance TO egottschalk;


--
-- Name: gen_monthly_millennial_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_millennial_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_millennial_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_millennial_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_millennial_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_millennial_performance TO egottschalk;


--
-- Name: gen_monthly_superpages_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_superpages_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_superpages_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_superpages_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_superpages_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_superpages_performance TO egottschalk;


--
-- Name: gen_monthly_where_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_where_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_where_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_where_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_where_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_where_performance TO egottschalk;


--
-- Name: gen_monthly_yellowpages_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_monthly_yellowpages_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_monthly_yellowpages_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_monthly_yellowpages_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_monthly_yellowpages_performance TO dataman;
GRANT SELECT ON TABLE gen_monthly_yellowpages_performance TO egottschalk;


--
-- Name: gen_site_campaign; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_site_campaign FROM PUBLIC;
REVOKE ALL ON TABLE gen_site_campaign FROM warehouse_dbo;
GRANT ALL ON TABLE gen_site_campaign TO warehouse_dbo;
GRANT SELECT ON TABLE gen_site_campaign TO dataman;
GRANT SELECT ON TABLE gen_site_campaign TO egottschalk;


--
-- Name: gen_site_device; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_site_device FROM PUBLIC;
REVOKE ALL ON TABLE gen_site_device FROM warehouse_dbo;
GRANT ALL ON TABLE gen_site_device TO warehouse_dbo;
GRANT SELECT ON TABLE gen_site_device TO dataman;
GRANT SELECT ON TABLE gen_site_device TO egottschalk;


--
-- Name: gen_site_order_forecast; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_site_order_forecast FROM PUBLIC;
REVOKE ALL ON TABLE gen_site_order_forecast FROM warehouse_dbo;
GRANT ALL ON TABLE gen_site_order_forecast TO warehouse_dbo;
GRANT SELECT ON TABLE gen_site_order_forecast TO dataman;
GRANT SELECT ON TABLE gen_site_order_forecast TO egottschalk;


--
-- Name: gen_superpages_daily_sum; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_superpages_daily_sum FROM PUBLIC;
REVOKE ALL ON TABLE gen_superpages_daily_sum FROM warehouse_dbo;
GRANT ALL ON TABLE gen_superpages_daily_sum TO warehouse_dbo;
GRANT SELECT ON TABLE gen_superpages_daily_sum TO dataman;
GRANT SELECT ON TABLE gen_superpages_daily_sum TO egottschalk;


--
-- Name: gen_where_performance; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_where_performance FROM PUBLIC;
REVOKE ALL ON TABLE gen_where_performance FROM warehouse_dbo;
GRANT ALL ON TABLE gen_where_performance TO warehouse_dbo;
GRANT SELECT ON TABLE gen_where_performance TO dataman;
GRANT SELECT ON TABLE gen_where_performance TO egottschalk;


--
-- Name: gen_yellowpages_daily_sum; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE gen_yellowpages_daily_sum FROM PUBLIC;
REVOKE ALL ON TABLE gen_yellowpages_daily_sum FROM warehouse_dbo;
GRANT ALL ON TABLE gen_yellowpages_daily_sum TO warehouse_dbo;
GRANT SELECT ON TABLE gen_yellowpages_daily_sum TO dataman;
GRANT SELECT ON TABLE gen_yellowpages_daily_sum TO egottschalk;


--
-- Name: googleadsense_dim; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE googleadsense_dim FROM PUBLIC;
REVOKE ALL ON TABLE googleadsense_dim FROM warehouse_dbo;
GRANT ALL ON TABLE googleadsense_dim TO warehouse_dbo;
GRANT SELECT ON TABLE googleadsense_dim TO john;
GRANT SELECT ON TABLE googleadsense_dim TO dimitrij;
GRANT SELECT ON TABLE googleadsense_dim TO dataman;
GRANT SELECT ON TABLE googleadsense_dim TO egottschalk;


--
-- Name: rec; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE rec FROM PUBLIC;
REVOKE ALL ON TABLE rec FROM song;
GRANT ALL ON TABLE rec TO song;
GRANT SELECT ON TABLE rec TO dataman;
GRANT SELECT ON TABLE rec TO egottschalk;


--
-- Name: stg_ad_network; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_ad_network FROM PUBLIC;
REVOKE ALL ON TABLE stg_ad_network FROM warehouse_dbo;
GRANT ALL ON TABLE stg_ad_network TO warehouse_dbo;
GRANT SELECT ON TABLE stg_ad_network TO dataman;
GRANT SELECT ON TABLE stg_ad_network TO egottschalk;


--
-- Name: stg_ad_network_param; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_ad_network_param FROM PUBLIC;
REVOKE ALL ON TABLE stg_ad_network_param FROM warehouse_dbo;
GRANT ALL ON TABLE stg_ad_network_param TO warehouse_dbo;
GRANT SELECT ON TABLE stg_ad_network_param TO dataman;
GRANT SELECT ON TABLE stg_ad_network_param TO egottschalk;


--
-- Name: stg_adm_advertiser; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_advertiser FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_advertiser FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_advertiser TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_advertiser TO dataman;
GRANT SELECT ON TABLE stg_adm_advertiser TO egottschalk;


--
-- Name: stg_adm_channel; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_channel FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_channel FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_channel TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_channel TO dataman;
GRANT SELECT ON TABLE stg_adm_channel TO egottschalk;


--
-- Name: stg_adm_creative; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_creative FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_creative FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_creative TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_creative TO dataman;
GRANT SELECT ON TABLE stg_adm_creative TO egottschalk;


--
-- Name: stg_adm_flight; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_flight FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_flight FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_flight TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_flight TO dataman;
GRANT SELECT ON TABLE stg_adm_flight TO egottschalk;


--
-- Name: stg_adm_order; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_order FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_order FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_order TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_order TO dataman;
GRANT SELECT ON TABLE stg_adm_order TO egottschalk;


--
-- Name: stg_adm_organization; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_organization FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_organization FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_organization TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_organization TO dataman;
GRANT SELECT ON TABLE stg_adm_organization TO egottschalk;


--
-- Name: stg_adm_placement; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_placement FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_placement FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_placement TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_placement TO dataman;
GRANT SELECT ON TABLE stg_adm_placement TO egottschalk;


--
-- Name: stg_adm_portal; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_portal FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_portal FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_portal TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_portal TO dataman;
GRANT SELECT ON TABLE stg_adm_portal TO egottschalk;


--
-- Name: stg_adm_publication; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_publication FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_publication FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_publication TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_publication TO dataman;
GRANT SELECT ON TABLE stg_adm_publication TO egottschalk;


--
-- Name: stg_adm_publisher; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_publisher FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_publisher FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_publisher TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_publisher TO dataman;
GRANT SELECT ON TABLE stg_adm_publisher TO egottschalk;


--
-- Name: stg_adm_website; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_adm_website FROM PUBLIC;
REVOKE ALL ON TABLE stg_adm_website FROM warehouse_dbo;
GRANT ALL ON TABLE stg_adm_website TO warehouse_dbo;
GRANT SELECT ON TABLE stg_adm_website TO dataman;
GRANT SELECT ON TABLE stg_adm_website TO egottschalk;


--
-- Name: stg_content_category; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_content_category FROM PUBLIC;
REVOKE ALL ON TABLE stg_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE stg_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE stg_content_category TO dataman;
GRANT SELECT ON TABLE stg_content_category TO egottschalk;


--
-- Name: stg_content_category_temp; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_content_category_temp FROM PUBLIC;
REVOKE ALL ON TABLE stg_content_category_temp FROM warehouse_dbo;
GRANT ALL ON TABLE stg_content_category_temp TO warehouse_dbo;
GRANT SELECT ON TABLE stg_content_category_temp TO dataman;
GRANT SELECT ON TABLE stg_content_category_temp TO egottschalk;


--
-- Name: stg_dc_ad; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE stg_dc_ad FROM PUBLIC;
REVOKE ALL ON TABLE stg_dc_ad FROM song;
GRANT ALL ON TABLE stg_dc_ad TO song;
GRANT SELECT ON TABLE stg_dc_ad TO dataman;
GRANT SELECT ON TABLE stg_dc_ad TO egottschalk;


--
-- Name: stg_dc_order; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE stg_dc_order FROM PUBLIC;
REVOKE ALL ON TABLE stg_dc_order FROM song;
GRANT ALL ON TABLE stg_dc_order TO song;
GRANT SELECT ON TABLE stg_dc_order TO dataman;
GRANT SELECT ON TABLE stg_dc_order TO egottschalk;


--
-- Name: stg_dc_site; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_dc_site FROM PUBLIC;
REVOKE ALL ON TABLE stg_dc_site FROM warehouse_dbo;
GRANT ALL ON TABLE stg_dc_site TO warehouse_dbo;
GRANT SELECT ON TABLE stg_dc_site TO dataman;
GRANT SELECT ON TABLE stg_dc_site TO egottschalk;


--
-- Name: stg_display_block; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_display_block FROM PUBLIC;
REVOKE ALL ON TABLE stg_display_block FROM warehouse_dbo;
GRANT ALL ON TABLE stg_display_block TO warehouse_dbo;
GRANT SELECT ON TABLE stg_display_block TO dataman;
GRANT SELECT ON TABLE stg_display_block TO egottschalk;


--
-- Name: stg_mapping_ga; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_mapping_ga FROM PUBLIC;
REVOKE ALL ON TABLE stg_mapping_ga FROM warehouse_dbo;
GRANT ALL ON TABLE stg_mapping_ga TO warehouse_dbo;
GRANT SELECT ON TABLE stg_mapping_ga TO john;
GRANT SELECT ON TABLE stg_mapping_ga TO dimitrij;
GRANT SELECT ON TABLE stg_mapping_ga TO dataman;
GRANT SELECT ON TABLE stg_mapping_ga TO egottschalk;


--
-- Name: stg_mapping_mm; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_mapping_mm FROM PUBLIC;
REVOKE ALL ON TABLE stg_mapping_mm FROM warehouse_dbo;
GRANT ALL ON TABLE stg_mapping_mm TO warehouse_dbo;
GRANT SELECT ON TABLE stg_mapping_mm TO dataman;
GRANT SELECT ON TABLE stg_mapping_mm TO egottschalk;


--
-- Name: stg_partner; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_partner FROM PUBLIC;
REVOKE ALL ON TABLE stg_partner FROM warehouse_dbo;
GRANT ALL ON TABLE stg_partner TO warehouse_dbo;
GRANT SELECT ON TABLE stg_partner TO dataman;
GRANT SELECT ON TABLE stg_partner TO egottschalk;


--
-- Name: stg_partner_module; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_partner_module FROM PUBLIC;
REVOKE ALL ON TABLE stg_partner_module FROM warehouse_dbo;
GRANT ALL ON TABLE stg_partner_module TO warehouse_dbo;
GRANT SELECT ON TABLE stg_partner_module TO dataman;
GRANT SELECT ON TABLE stg_partner_module TO egottschalk;


--
-- Name: stg_portal; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_portal FROM PUBLIC;
REVOKE ALL ON TABLE stg_portal FROM warehouse_dbo;
GRANT ALL ON TABLE stg_portal TO warehouse_dbo;
GRANT SELECT ON TABLE stg_portal TO dataman;
GRANT SELECT ON TABLE stg_portal TO egottschalk;


--
-- Name: stg_portal_host; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_portal_host FROM PUBLIC;
REVOKE ALL ON TABLE stg_portal_host FROM warehouse_dbo;
GRANT ALL ON TABLE stg_portal_host TO warehouse_dbo;
GRANT SELECT ON TABLE stg_portal_host TO dataman;
GRANT SELECT ON TABLE stg_portal_host TO egottschalk;


--
-- Name: stg_revenue_share; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_revenue_share FROM PUBLIC;
REVOKE ALL ON TABLE stg_revenue_share FROM warehouse_dbo;
GRANT ALL ON TABLE stg_revenue_share TO warehouse_dbo;
GRANT SELECT ON TABLE stg_revenue_share TO dataman;
GRANT SELECT ON TABLE stg_revenue_share TO egottschalk;


--
-- Name: stg_session; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_session FROM PUBLIC;
REVOKE ALL ON TABLE stg_session FROM warehouse_dbo;
GRANT ALL ON TABLE stg_session TO warehouse_dbo;
GRANT SELECT ON TABLE stg_session TO dataman;
GRANT SELECT ON TABLE stg_session TO egottschalk;


--
-- Name: stg_session_agg_values; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_session_agg_values FROM PUBLIC;
REVOKE ALL ON TABLE stg_session_agg_values FROM warehouse_dbo;
GRANT ALL ON TABLE stg_session_agg_values TO warehouse_dbo;
GRANT SELECT ON TABLE stg_session_agg_values TO dataman;
GRANT SELECT ON TABLE stg_session_agg_values TO egottschalk;


--
-- Name: stg_wap_site_access_log; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE stg_wap_site_access_log FROM PUBLIC;
REVOKE ALL ON TABLE stg_wap_site_access_log FROM warehouse_dbo;
GRANT ALL ON TABLE stg_wap_site_access_log TO warehouse_dbo;
GRANT SELECT ON TABLE stg_wap_site_access_log TO dataman;
GRANT SELECT ON TABLE stg_wap_site_access_log TO egottschalk;


--
-- Name: t_dma_dim; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE t_dma_dim FROM PUBLIC;
REVOKE ALL ON TABLE t_dma_dim FROM ejohnst;
GRANT ALL ON TABLE t_dma_dim TO ejohnst;
GRANT SELECT ON TABLE t_dma_dim TO dataman;
GRANT ALL ON TABLE t_dma_dim TO warehouse_dbo;
GRANT SELECT ON TABLE t_dma_dim TO egottschalk;


--
-- Name: t_jul_adreqs_fact; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE t_jul_adreqs_fact FROM PUBLIC;
REVOKE ALL ON TABLE t_jul_adreqs_fact FROM ejohnst;
GRANT ALL ON TABLE t_jul_adreqs_fact TO ejohnst;
GRANT SELECT ON TABLE t_jul_adreqs_fact TO dataman;
GRANT SELECT ON TABLE t_jul_adreqs_fact TO egottschalk;


--
-- Name: t_jun_adreqs_fact; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE t_jun_adreqs_fact FROM PUBLIC;
REVOKE ALL ON TABLE t_jun_adreqs_fact FROM ejohnst;
GRANT ALL ON TABLE t_jun_adreqs_fact TO ejohnst;
GRANT SELECT ON TABLE t_jun_adreqs_fact TO dataman;
GRANT SELECT ON TABLE t_jun_adreqs_fact TO egottschalk;


--
-- Name: t_location_dim; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE t_location_dim FROM PUBLIC;
REVOKE ALL ON TABLE t_location_dim FROM ejohnst;
GRANT ALL ON TABLE t_location_dim TO ejohnst;
GRANT SELECT ON TABLE t_location_dim TO dataman;
GRANT SELECT ON TABLE t_location_dim TO egottschalk;


--
-- Name: t_msa_dim; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE t_msa_dim FROM PUBLIC;
REVOKE ALL ON TABLE t_msa_dim FROM ejohnst;
GRANT ALL ON TABLE t_msa_dim TO ejohnst;
GRANT SELECT ON TABLE t_msa_dim TO dataman;
GRANT SELECT ON TABLE t_msa_dim TO egottschalk;


--
-- Name: t_partner_location; Type: ACL; Schema: staging; Owner: ejohnst
--

REVOKE ALL ON TABLE t_partner_location FROM PUBLIC;
REVOKE ALL ON TABLE t_partner_location FROM ejohnst;
GRANT ALL ON TABLE t_partner_location TO ejohnst;
GRANT SELECT ON TABLE t_partner_location TO dataman;
GRANT SELECT ON TABLE t_partner_location TO egottschalk;


--
-- Name: test; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE test FROM PUBLIC;
REVOKE ALL ON TABLE test FROM song;
GRANT ALL ON TABLE test TO song;
GRANT SELECT ON TABLE test TO dataman;
GRANT SELECT ON TABLE test TO egottschalk;


--
-- Name: tmp1_zvents_by_partner; Type: ACL; Schema: staging; Owner: abyfield
--

REVOKE ALL ON TABLE tmp1_zvents_by_partner FROM PUBLIC;
REVOKE ALL ON TABLE tmp1_zvents_by_partner FROM abyfield;
GRANT ALL ON TABLE tmp1_zvents_by_partner TO abyfield;
GRANT SELECT ON TABLE tmp1_zvents_by_partner TO dataman;
GRANT SELECT ON TABLE tmp1_zvents_by_partner TO egottschalk;


--
-- Name: tmp2_all_by_partner; Type: ACL; Schema: staging; Owner: abyfield
--

REVOKE ALL ON TABLE tmp2_all_by_partner FROM PUBLIC;
REVOKE ALL ON TABLE tmp2_all_by_partner FROM abyfield;
GRANT ALL ON TABLE tmp2_all_by_partner TO abyfield;
GRANT SELECT ON TABLE tmp2_all_by_partner TO dataman;
GRANT SELECT ON TABLE tmp2_all_by_partner TO egottschalk;


--
-- Name: tmp3_zvents_by_parent; Type: ACL; Schema: staging; Owner: abyfield
--

REVOKE ALL ON TABLE tmp3_zvents_by_parent FROM PUBLIC;
REVOKE ALL ON TABLE tmp3_zvents_by_parent FROM abyfield;
GRANT ALL ON TABLE tmp3_zvents_by_parent TO abyfield;
GRANT SELECT ON TABLE tmp3_zvents_by_parent TO dataman;
GRANT SELECT ON TABLE tmp3_zvents_by_parent TO egottschalk;


--
-- Name: tmp4_all_by_parent; Type: ACL; Schema: staging; Owner: abyfield
--

REVOKE ALL ON TABLE tmp4_all_by_parent FROM PUBLIC;
REVOKE ALL ON TABLE tmp4_all_by_parent FROM abyfield;
GRANT ALL ON TABLE tmp4_all_by_parent TO abyfield;
GRANT SELECT ON TABLE tmp4_all_by_parent TO dataman;
GRANT SELECT ON TABLE tmp4_all_by_parent TO egottschalk;


--
-- Name: tmp_ap_portal; Type: ACL; Schema: staging; Owner: abyfield
--

REVOKE ALL ON TABLE tmp_ap_portal FROM PUBLIC;
REVOKE ALL ON TABLE tmp_ap_portal FROM abyfield;
GRANT ALL ON TABLE tmp_ap_portal TO abyfield;
GRANT SELECT ON TABLE tmp_ap_portal TO dataman;
GRANT SELECT ON TABLE tmp_ap_portal TO egottschalk;


--
-- Name: tmp_ap_portal2; Type: ACL; Schema: staging; Owner: abyfield
--

REVOKE ALL ON TABLE tmp_ap_portal2 FROM PUBLIC;
REVOKE ALL ON TABLE tmp_ap_portal2 FROM abyfield;
GRANT ALL ON TABLE tmp_ap_portal2 TO abyfield;
GRANT SELECT ON TABLE tmp_ap_portal2 TO dataman;
GRANT SELECT ON TABLE tmp_ap_portal2 TO egottschalk;


--
-- Name: tmp_ap_portal3; Type: ACL; Schema: staging; Owner: postgres
--

REVOKE ALL ON TABLE tmp_ap_portal3 FROM PUBLIC;
REVOKE ALL ON TABLE tmp_ap_portal3 FROM postgres;
GRANT ALL ON TABLE tmp_ap_portal3 TO postgres;
GRANT SELECT ON TABLE tmp_ap_portal3 TO dataman;
GRANT SELECT ON TABLE tmp_ap_portal3 TO egottschalk;


--
-- Name: tmp_content_category; Type: ACL; Schema: staging; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE tmp_content_category FROM PUBLIC;
REVOKE ALL ON TABLE tmp_content_category FROM warehouse_dbo;
GRANT ALL ON TABLE tmp_content_category TO warehouse_dbo;
GRANT SELECT ON TABLE tmp_content_category TO egottschalk;


--
-- Name: v_file_status; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE v_file_status FROM PUBLIC;
REVOKE ALL ON TABLE v_file_status FROM song;
GRANT ALL ON TABLE v_file_status TO song;
GRANT SELECT ON TABLE v_file_status TO dataman;
GRANT SELECT ON TABLE v_file_status TO egottschalk;


--
-- Name: v_rec; Type: ACL; Schema: staging; Owner: song
--

REVOKE ALL ON TABLE v_rec FROM PUBLIC;
REVOKE ALL ON TABLE v_rec FROM song;
GRANT ALL ON TABLE v_rec TO song;
GRANT SELECT ON TABLE v_rec TO dataman;
GRANT SELECT ON TABLE v_rec TO egottschalk;


SET search_path = verveloc, pg_catalog;

--
-- Name: country; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE country FROM PUBLIC;
REVOKE ALL ON TABLE country FROM warehouse_dbo;
GRANT ALL ON TABLE country TO warehouse_dbo;
GRANT SELECT ON TABLE country TO egottschalk;


--
-- Name: ip_cache; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE ip_cache FROM PUBLIC;
REVOKE ALL ON TABLE ip_cache FROM warehouse_dbo;
GRANT ALL ON TABLE ip_cache TO warehouse_dbo;
GRANT SELECT ON TABLE ip_cache TO egottschalk;


--
-- Name: location; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE location FROM PUBLIC;
REVOKE ALL ON TABLE location FROM warehouse_dbo;
GRANT ALL ON TABLE location TO warehouse_dbo;
GRANT SELECT ON TABLE location TO egottschalk;


--
-- Name: metro; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE metro FROM PUBLIC;
REVOKE ALL ON TABLE metro FROM warehouse_dbo;
GRANT ALL ON TABLE metro TO warehouse_dbo;
GRANT SELECT ON TABLE metro TO egottschalk;


--
-- Name: postal_code; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE postal_code FROM PUBLIC;
REVOKE ALL ON TABLE postal_code FROM warehouse_dbo;
GRANT ALL ON TABLE postal_code TO warehouse_dbo;
GRANT SELECT ON TABLE postal_code TO egottschalk;


--
-- Name: refer_ip_zip; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE refer_ip_zip FROM PUBLIC;
REVOKE ALL ON TABLE refer_ip_zip FROM warehouse_dbo;
GRANT ALL ON TABLE refer_ip_zip TO warehouse_dbo;
GRANT SELECT ON TABLE refer_ip_zip TO egottschalk;


--
-- Name: region; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE region FROM PUBLIC;
REVOKE ALL ON TABLE region FROM warehouse_dbo;
GRANT ALL ON TABLE region TO warehouse_dbo;
GRANT SELECT ON TABLE region TO egottschalk;


--
-- Name: vrvlocation; Type: ACL; Schema: verveloc; Owner: warehouse_dbo
--

REVOKE ALL ON TABLE vrvlocation FROM PUBLIC;
REVOKE ALL ON TABLE vrvlocation FROM warehouse_dbo;
GRANT ALL ON TABLE vrvlocation TO warehouse_dbo;
GRANT SELECT ON TABLE vrvlocation TO egottschalk;


--
-- PostgreSQL database dump complete
--

